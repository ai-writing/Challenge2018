(ROOT
  (NP
    (NP
      (NP (NNP Act) (NNP Local))
      (, ,)
      (NP (NNP Think) (NNP Global)))
    (: :)
    (NP
      (NP
        (NP (NNP Width) (NNP Notions))
        (PP (IN for)
          (NP
            (NP (NNP Tractable) (NNP Planning) (NNP Hubie) (NNP Chen) (NNP Dept.))
            (PP (IN of)
              (NP
                (NP (NNP Information))
                (CC and)
                (NP (NNP Communication) (NNPS Technologies) (NNP Universitat) (NNP Pompeu) (NNP Fabra) (NNP Passeig) (IN de) (NNP Circumval))))))
        (X
          (X (SYM *))
          (NP (JJ laci) (NN o))))
      (, ,)
      (NP
        (QP (CD 8) (CD 08003))
        (NNS Barcelona))
      (, ,)
      (NP
        (NP (NNP Spain) (NNP hubie.chen@upf.edu) (NNP Omer) (NNP Gim) (NNP enez) (NNP Dept.))
        (PP (IN of)
          (NP
            (NP (NNP Llenguatges) (FW i) (NNP Sistemes) (NNP Inform) (NNP atics) (NNP Universitat) (NNP Polit))
            (JJ ecnica) (IN de)
            (NP (NNP Catalunya) (NNP Jordi) (NNP Girona)))))
      (, ,)
      (NP
        (NP (CD 1-3) (CD 08034))
        (SBAR
          (S
            (NP
              (NP (NNP Barcelona) (, ,) (NNP Spain) (NNP omer.gimenez@upc.edu) (NNP Abstract) (JJ Many))
              (PP (IN of)
                (NP
                  (NP (DT the) (JJ benchmark) (NNS domains))
                  (PP (IN in)
                    (NP (NNP AI) (NN planning))))))
            (VP (VBP are)
              (ADJP (JJ tractable)
                (PP (IN on)
                  (NP (DT an) (JJ individual) (NN basis)))))))))
    (. .)))

compound(Local-2, Act-1)
root(ROOT-0, Local-2)
compound(Global-5, Think-4)
appos(Local-2, Global-5)
compound(Notions-8, Width-7)
dep(Local-2, Notions-8)
case(Dept.-14, for-9)
compound(Dept.-14, Tractable-10)
compound(Dept.-14, Planning-11)
compound(Dept.-14, Hubie-12)
compound(Dept.-14, Chen-13)
nmod:for(Notions-8, Dept.-14)
case(Information-16, of-15)
nmod:of(Dept.-14, Information-16)
cc(Information-16, and-17)
compound(Circumval-25, Communication-18)
compound(Circumval-25, Technologies-19)
compound(Circumval-25, Universitat-20)
compound(Circumval-25, Pompeu-21)
compound(Circumval-25, Fabra-22)
compound(Circumval-25, Passeig-23)
amod(Circumval-25, de-24)
nmod:of(Dept.-14, Circumval-25)
conj:and(Information-16, Circumval-25)
dep(o-28, *-26)
amod(o-28, laci-27)
dep(Notions-8, o-28)
compound(08003-31, 8-30)
nummod(Barcelona-32, 08003-31)
appos(Notions-8, Barcelona-32)
compound(Dept.-39, Spain-34)
compound(Dept.-39, hubie.chen@upf.edu-35)
compound(Dept.-39, Omer-36)
compound(Dept.-39, Gim-37)
compound(Dept.-39, enez-38)
appos(Notions-8, Dept.-39)
case(Polit-47, of-40)
compound(Polit-47, Llenguatges-41)
compound(Polit-47, i-42)
compound(Polit-47, Sistemes-43)
compound(Polit-47, Inform-44)
compound(Polit-47, atics-45)
compound(Polit-47, Universitat-46)
nmod:of(Dept.-39, Polit-47)
amod(Polit-47, ecnica-48)
amod(Polit-47, de-49)
compound(Girona-52, Catalunya-50)
compound(Girona-52, Jordi-51)
dep(Polit-47, Girona-52)
nummod(08034-55, 1-3-54)
appos(Notions-8, 08034-55)
compound(Abstract-60, Barcelona-56)
appos(Abstract-60, Spain-58)
compound(Abstract-60, omer.gimenez@upc.edu-59)
nsubj(tractable-70, Abstract-60)
amod(Abstract-60, Many-61)
case(domains-65, of-62)
det(domains-65, the-63)
amod(domains-65, benchmark-64)
nmod:of(Abstract-60, domains-65)
case(planning-68, in-66)
compound(planning-68, AI-67)
nmod:in(domains-65, planning-68)
cop(tractable-70, are-69)
acl:relcl(08034-55, tractable-70)
case(basis-74, on-71)
det(basis-74, an-72)
amod(basis-74, individual-73)
nmod:on(tractable-70, basis-74)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN paper)))
    (, ,)
    (NP (PRP we))
    (VP (VBP seek)
      (NP
        (NP (DT a) (JJ theoretical) (, ,) (JJ domain-independent) (NN explanation))
        (PP (IN for)
          (NP (PRP$ their) (NN tractability)))))
    (. .)))

case(paper-3, In-1)
det(paper-3, this-2)
nmod:in(seek-6, paper-3)
nsubj(seek-6, we-5)
root(ROOT-0, seek-6)
det(explanation-11, a-7)
amod(explanation-11, theoretical-8)
amod(explanation-11, domain-independent-10)
dobj(seek-6, explanation-11)
case(tractability-14, for-12)
nmod:poss(tractability-14, their-13)
nmod:for(explanation-11, tractability-14)

(ROOT
  (S
    (NP (PRP We))
    (VP
      (VP (VB present)
        (NP
          (NP (DT a) (NN family))
          (PP (IN of)
            (NP (JJ structural) (NNS conditions))))
        (SBAR (IN that)
          (S
            (NP (DT both))
            (VP (VBP imply)
              (ADVP (RB tractability))))))
      (CC and)
      (VP (VB capture)
        (NP
          (NP (DT some))
          (PP (IN of)
            (NP (DT the) (JJ established) (JJ benchmark) (NNS domains))))))
    (. .)))

nsubj(present-2, We-1)
nsubj(capture-13, We-1)
root(ROOT-0, present-2)
det(family-4, a-3)
dobj(present-2, family-4)
case(conditions-7, of-5)
amod(conditions-7, structural-6)
nmod:of(family-4, conditions-7)
mark(imply-10, that-8)
nsubj(imply-10, both-9)
ccomp(present-2, imply-10)
advmod(imply-10, tractability-11)
cc(present-2, and-12)
conj:and(present-2, capture-13)
dobj(capture-13, some-14)
case(domains-19, of-15)
det(domains-19, the-16)
amod(domains-19, established-17)
amod(domains-19, benchmark-18)
nmod:of(some-14, domains-19)

(ROOT
  (S
    (NP (DT These) (JJ structural) (NNS conditions))
    (VP
      (VP (VBP are))
      (, ,)
      (NP
        (NP
          (QP (RB roughly) (CD speaking)))
        (, ,)
        (PP (VBN based)
          (PP (IN on)
            (NP
              (NP (NNS measures))
              (PP (IN of)
                (SBAR
                  (WHADJP (WRB how) (JJ many))
                  (S
                    (NP (NNS variables))
                    (VP (VBP need)
                      (S
                        (VP (TO to)
                          (VP (VB be)
                            (VP (VBN changed)
                              (PP (IN in)
                                (NP (NN order)))
                              (S
                                (VP (TO to)
                                  (VP (VB move)
                                    (PP
                                      (ADVP
                                        (NP (DT a) (NN state))
                                        (RBR closer))
                                      (TO to)
                                      (NP (DT a) (NN goal) (NN state)))))))))))))))))))
    (. .)))

det(conditions-3, These-1)
amod(conditions-3, structural-2)
nsubj(are-4, conditions-3)
root(ROOT-0, are-4)
advmod(speaking-7, roughly-6)
dobj(are-4, speaking-7)
case(measures-11, based-9)
mwe(based-9, on-10)
nmod:based_on(speaking-7, measures-11)
mark(need-16, of-12)
advmod(many-14, how-13)
dep(need-16, many-14)
nsubj(need-16, variables-15)
nsubjpass:xsubj(changed-19, variables-15)
acl(measures-11, need-16)
mark(changed-19, to-17)
auxpass(changed-19, be-18)
xcomp(need-16, changed-19)
advcl(changed-19, in-20)
mwe(in-20, order-21)
mark(move-23, to-22)
xcomp(changed-19, move-23)
det(state-25, a-24)
nmod:npmod(closer-26, state-25)
advmod(state-30, closer-26)
case(state-30, to-27)
det(state-30, a-28)
compound(state-30, goal-29)
nmod:to(move-23, state-30)

(ROOT
  (S
    (NP (NNP Introduction))
    (VP
      (VP (VBD Background))
      (CC and)
      (VP (VBZ motivations)))
    (. .)))

nsubj(Background-2, Introduction-1)
nsubj(motivations-4, Introduction-1)
root(ROOT-0, Background-2)
cc(Background-2, and-3)
conj:and(Background-2, motivations-4)

(ROOT
  (S
    (NP
      (NP (JJ Many))
      (PP (IN of)
        (NP
          (NP (DT the) (JJ benchmark) (NNS domains))
          (PP (IN in)
            (NP
              (NP (NNP AI) (NN planning))
              (PP (JJ such) (IN as)
                (NP (NNP Blocksworld) (, ,) (NNP Gripper) (, ,)
                  (CC and)
                  (NNP Logistics))))))))
    (VP (VBP are)
      (ADJP (RB structurally) (JJ simple)
        (SBAR
          (WHADVP (WRB when))
          (S
            (VP (VBD looked)
              (ADVP (IN at) (RB individually)))))))
    (. .)))

nsubj(simple-19, Many-1)
case(domains-5, of-2)
det(domains-5, the-3)
amod(domains-5, benchmark-4)
nmod:of(Many-1, domains-5)
case(planning-8, in-6)
compound(planning-8, AI-7)
nmod:in(domains-5, planning-8)
case(Blocksworld-11, such-9)
mwe(such-9, as-10)
nmod:such_as(planning-8, Blocksworld-11)
nmod:such_as(planning-8, Gripper-13)
conj:and(Blocksworld-11, Gripper-13)
cc(Blocksworld-11, and-15)
nmod:such_as(planning-8, Logistics-16)
conj:and(Blocksworld-11, Logistics-16)
cop(simple-19, are-17)
advmod(simple-19, structurally-18)
root(ROOT-0, simple-19)
advmod(looked-21, when-20)
ccomp(simple-19, looked-21)
case(individually-23, at-22)
advmod(looked-21, individually-23)

(ROOT
  (S
    (PP (IN For)
      (NP (DT these) (NNS domains)))
    (, ,)
    (NP
      (NP (DT the) (NN problem))
      (PP (IN of)
        (NP (NN plan) (NN generation))
        (: -)))
    (VP (VBP generate)
      (SBAR
        (S
          (NP (DT a) (-LRB- -LRB-) (NN non-optimal) (-RRB- -RRB-))
          (VP (VBP plan)
            (SBAR (IN if)
              (S
                (NP (CD one) (NNS exists-is))
                (VP
                  (CONJP (RB not) (JJ only))
                  (VP (VBP polynomial-time)
                    (ADJP (JJ tractable)))
                  (, ,)
                  (CC but)
                  (VP (MD can)
                    (VP (VB be)
                      (VP (VBN solved)
                        (PP (IN by)
                          (NP
                            (ADJP (RB extremely) (JJ simple)
                              (CC and)
                              (JJ efficient))
                            (NNS algorithms)))))))))))))
    (. .)))

case(domains-3, For-1)
det(domains-3, these-2)
nmod:for(generate-11, domains-3)
det(problem-6, the-5)
nsubj(generate-11, problem-6)
case(generation-9, of-7)
compound(generation-9, plan-8)
nmod:of(problem-6, generation-9)
root(ROOT-0, generate-11)
det(non-optimal-14, a-12)
nsubj(plan-16, non-optimal-14)
ccomp(generate-11, plan-16)
mark(polynomial-time-22, if-17)
nummod(exists-is-19, one-18)
nsubj(polynomial-time-22, exists-is-19)
nsubjpass(solved-28, exists-is-19)
neg(only-21, not-20)
cc:preconj(polynomial-time-22, only-21)
advcl(plan-16, polynomial-time-22)
xcomp(polynomial-time-22, tractable-23)
cc(polynomial-time-22, but-25)
aux(solved-28, can-26)
auxpass(solved-28, be-27)
advcl(plan-16, solved-28)
conj:but(polynomial-time-22, solved-28)
case(algorithms-34, by-29)
advmod(simple-31, extremely-30)
amod(algorithms-34, simple-31)
cc(simple-31, and-32)
conj:and(simple-31, efficient-33)
amod(algorithms-34, efficient-33)
nmod:agent(solved-28, algorithms-34)

(ROOT
  (S
    (ADVP (RB Interestingly))
    (, ,)
    (PP (IN in)
      (NP
        (NP (NN addition))
        (PP (TO to)
          (S
            (VP (VBG being)
              (VP
                (ADVP (RB individually))
                (VBN tractable)
                (PP (IN with)
                  (NP (NN respect)))
                (S
                  (VP (TO to)
                    (VP (VB polynomialtime)
                      (NP (NN computation)))))))))))
    (, ,)
    (NP (JJ several) (JJ benchmark) (NNS domains))
    (VP (MD can)
      (VP (VB be)
        (VP
          (ADVP (RB effectively))
          (VBN handled)
          (ADVP (RB simultaneously))
          (PP (IN by)
            (NP
              (NP (JJ domain-independent) (NNS planners))
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (NNP Hoffmann))
                  (CC &)
                  (NP (NNP Nebel) (CD 2001)))
                (-RRB- -RRB-)))))))
    (. .)))

advmod(handled-21, Interestingly-1)
mark(tractable-8, in-3)
mwe(in-3, addition-4)
mwe(in-3, to-5)
auxpass(tractable-8, being-6)
advmod(tractable-8, individually-7)
acl(handled-21, tractable-8)
case(respect-10, with-9)
nmod:with(tractable-8, respect-10)
mark(polynomialtime-12, to-11)
xcomp(tractable-8, polynomialtime-12)
dobj(polynomialtime-12, computation-13)
amod(domains-17, several-15)
amod(domains-17, benchmark-16)
nsubjpass(handled-21, domains-17)
aux(handled-21, can-18)
auxpass(handled-21, be-19)
advmod(handled-21, effectively-20)
root(ROOT-0, handled-21)
advmod(handled-21, simultaneously-22)
case(planners-25, by-23)
amod(planners-25, domain-independent-24)
nmod:agent(handled-21, planners-25)
dep(planners-25, Hoffmann-27)
cc(Hoffmann-27, &-28)
dep(planners-25, Nebel-29)
conj:&(Hoffmann-27, Nebel-29)
nummod(Nebel-29, 2001-30)

(ROOT
  (S
    (PP (IN As)
      (S
        (NP (DT a) (NN result))
        (ADVP (RB strongly))
        (VP (VBG evidencing)
          (NP (DT this) (JJ latter) (NN claim)))))
    (, ,)
    (NP (PRP we))
    (VP (VBP name)
      (NP
        (NP (DT the) (JJ recent) (NN work))
        (PP (IN of)
          (S (-LRB- -LRB-)
            (NP (NNP Vidal)
              (CC &)
              (NNP Geffner) (NNP 2005))
            (-RRB- -RRB-)
            (VP (VBG giving)
              (NP (DT a) (NN planning))
              (NP
                (NP (NN algorithm))
                (SBAR
                  (WHNP (WDT which))
                  (S (, ,)
                    (PP (IN by)
                      (NP
                        (NP (NN use))
                        (PP (IN of)
                          (NP (NN inference)))))
                    (, ,)
                    (VP (VBZ solves)
                      (NP
                        (NP (NNS instances))
                        (PP (IN of)
                          (NP
                            (NP (DT a) (NN number))
                            (PP (IN of)
                              (NP
                                (NP (JJ benchmark) (NNS domains))
                                (PP (IN in)
                                  (NP (DT a) (JJ backtrack-free) (NN manner)))))))))))))))))
    (. .)))

mark(evidencing-5, As-1)
det(result-3, a-2)
nsubj(evidencing-5, result-3)
advmod(evidencing-5, strongly-4)
advcl(name-11, evidencing-5)
det(claim-8, this-6)
amod(claim-8, latter-7)
dobj(evidencing-5, claim-8)
nsubj(name-11, we-10)
root(ROOT-0, name-11)
det(work-14, the-12)
amod(work-14, recent-13)
dobj(name-11, work-14)
mark(giving-22, of-15)
compound(2005-20, Vidal-17)
cc(Vidal-17, &-18)
conj:&(Vidal-17, Geffner-19)
compound(2005-20, Geffner-19)
nsubj(giving-22, 2005-20)
acl(work-14, giving-22)
det(planning-24, a-23)
iobj(giving-22, planning-24)
dobj(giving-22, algorithm-25)
nsubj(solves-33, algorithm-25)
ref(algorithm-25, which-26)
case(use-29, by-28)
nmod:by(solves-33, use-29)
case(inference-31, of-30)
nmod:of(use-29, inference-31)
acl:relcl(algorithm-25, solves-33)
dobj(solves-33, instances-34)
case(number-37, of-35)
det(number-37, a-36)
nmod:of(instances-34, number-37)
case(domains-40, of-38)
amod(domains-40, benchmark-39)
nmod:of(number-37, domains-40)
case(manner-44, in-41)
det(manner-44, a-42)
amod(manner-44, backtrack-free-43)
nmod:in(domains-40, manner-44)

(ROOT
  (UCP
    (S
      (NP
        (NP (DT The)
          (ADJP (RB empirically) (JJ observed))
          (JJ domain-independent) (NN tractability))
        (PP (IN of)
          (NP (JJ many) (JJ common) (NN benchmark) (NNS domains))))
      (VP
        (ADVP (RB naturally))
        (VBZ calls)
        (PP (IN for)
          (NP (DT a) (JJ theoretical) (NN explanation)))))
    (: :)
    (NP
      (SQ (VBP are)
        (NP (EX there)))
      (VP (VB tractable)
        (NP
          (NP (NNS classes))
          (PP (IN of)
            (NP (NN planning) (NNS problems)))
          (SBAR
            (WHNP (WDT that))
            (S
              (ADVP (RB simultaneously))
              (VP (VB capture)
                (NP
                  (NP (DT a) (NN number))
                  (PP (IN of)
                    (NP (DT the) (JJ benchmark) (NNS domains))))))))))
    (. ?)))

det(tractability-5, The-1)
advmod(observed-3, empirically-2)
amod(tractability-5, observed-3)
amod(tractability-5, domain-independent-4)
nsubj(calls-12, tractability-5)
case(domains-10, of-6)
amod(domains-10, many-7)
amod(domains-10, common-8)
compound(domains-10, benchmark-9)
nmod:of(tractability-5, domains-10)
advmod(calls-12, naturally-11)
root(ROOT-0, calls-12)
case(explanation-16, for-13)
det(explanation-16, a-14)
amod(explanation-16, theoretical-15)
nmod:for(calls-12, explanation-16)
dep(calls-12, are-18)
expl(are-18, there-19)
dep(are-18, tractable-20)
dobj(tractable-20, classes-21)
nsubj(capture-27, classes-21)
case(problems-24, of-22)
compound(problems-24, planning-23)
nmod:of(classes-21, problems-24)
ref(classes-21, that-25)
advmod(capture-27, simultaneously-26)
acl:relcl(classes-21, capture-27)
det(number-29, a-28)
dobj(capture-27, number-29)
case(domains-33, of-30)
det(domains-33, the-31)
amod(domains-33, benchmark-32)
nmod:of(number-29, domains-33)

(ROOT
  (S
    (ADVP (RB Here))
    (, ,)
    (S
      (PP (IN by)
        (NP (DT a) (JJ theoretical) (NN explanation)))
      (, ,)
      (NP (PRP we))
      (VP (VBP mean)
        (NP
          (NP (DT that) (NN one))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ is)
                (VP (VBN mathematical)
                  (CC and)
                  (VBN rooted)
                  (PP (IN in)
                    (NP
                      (NP (DT the) (NN theory))
                      (PP (IN of)
                        (NP (JJ computational) (NN complexity))))))))))))
    (: :)
    (S
      (PP (IN by)
        (NP (DT a) (JJ tractable) (NN class)))
      (, ,)
      (NP (PRP we))
      (VP (VBP mean)
        (NP
          (NP (DT a) (NN set))
          (PP (IN of)
            (NP (NN problem) (NNS instances)))
          (SBAR
            (WHNP (WDT which))
            (S
              (VP
                (VP (MD can)
                  (VP (VB be)
                    (VP (VBN solved)
                      (PP (IN in)
                        (NP (JJ polynomial) (NN time))))))
                (CC and)
                (VP (VBZ is)
                  (VP (VBN delimited)
                    (PP (IN by)
                      (NP (DT a) (JJ formal) (, ,) (JJ mathematical) (NN definition)))))))))))
    (, ,)
    (CC and)
    (S
      (NP (PRP we))
      (VP (VBP are)
        (ADJP (JJ interested)
          (PP (IN in)
            (NP (NNS demonstrations))))
        (SBAR (IN that)
          (S
            (NP (DT a) (JJ tractable) (NN class))
            (VP (VBZ contains)
              (NP
                (NP (DT a) (NN domain))
                (, ,)
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBP are)
                      (VP (VBN given)
                        (PP (IN by)
                          (NP (JJ mathematical) (NN proof)))))))))))))
    (. .)))

advmod(mean-9, Here-1)
case(explanation-6, by-3)
det(explanation-6, a-4)
amod(explanation-6, theoretical-5)
nmod:by(mean-9, explanation-6)
nsubj(mean-9, we-8)
root(ROOT-0, mean-9)
det(one-11, that-10)
dobj(mean-9, one-11)
nsubjpass(mathematical-14, one-11)
nsubjpass(rooted-16, one-11)
ref(one-11, that-12)
auxpass(mathematical-14, is-13)
acl:relcl(one-11, mathematical-14)
cc(mathematical-14, and-15)
acl:relcl(one-11, rooted-16)
conj:and(mathematical-14, rooted-16)
case(theory-19, in-17)
det(theory-19, the-18)
nmod:in(mathematical-14, theory-19)
case(complexity-22, of-20)
amod(complexity-22, computational-21)
nmod:of(theory-19, complexity-22)
case(class-27, by-24)
det(class-27, a-25)
amod(class-27, tractable-26)
nmod:by(mean-30, class-27)
nsubj(mean-30, we-29)
conj:and(mean-9, mean-30)
det(set-32, a-31)
dobj(mean-30, set-32)
nsubjpass(solved-39, set-32)
nsubjpass(delimited-45, set-32)
case(instances-35, of-33)
compound(instances-35, problem-34)
nmod:of(set-32, instances-35)
ref(set-32, which-36)
aux(solved-39, can-37)
auxpass(solved-39, be-38)
acl:relcl(set-32, solved-39)
case(time-42, in-40)
amod(time-42, polynomial-41)
nmod:in(solved-39, time-42)
cc(solved-39, and-43)
auxpass(delimited-45, is-44)
acl:relcl(set-32, delimited-45)
conj:and(solved-39, delimited-45)
case(definition-51, by-46)
det(definition-51, a-47)
amod(definition-51, formal-48)
amod(definition-51, mathematical-50)
nmod:agent(delimited-45, definition-51)
cc(mean-9, and-53)
nsubj(interested-56, we-54)
cop(interested-56, are-55)
conj:and(mean-9, interested-56)
case(demonstrations-58, in-57)
nmod:in(interested-56, demonstrations-58)
mark(contains-63, that-59)
det(class-62, a-60)
amod(class-62, tractable-61)
nsubj(contains-63, class-62)
ccomp(interested-56, contains-63)
det(domain-65, a-64)
dobj(contains-63, domain-65)
nsubjpass(given-69, domain-65)
ref(domain-65, that-67)
auxpass(given-69, are-68)
acl:relcl(domain-65, given-69)
case(proof-72, by-70)
amod(proof-72, mathematical-71)
nmod:agent(given-69, proof-72)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (ADVP (RB certainly))
      (NP
        (NP (DT a) (NN literature))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ has)
              (VP (VBN studied)
                (NP
                  (ADJP (RB theoretically) (JJ tractable))
                  (NNS classes))
                (PP (IN in)
                  (NP (NN planning)))))))))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
advmod(is-2, certainly-3)
det(literature-5, a-4)
nsubj(is-2, literature-5)
nsubj(studied-8, literature-5)
ref(literature-5, that-6)
aux(studied-8, has-7)
acl:relcl(literature-5, studied-8)
advmod(tractable-10, theoretically-9)
amod(classes-11, tractable-10)
dobj(studied-8, classes-11)
case(planning-13, in-12)
nmod:in(studied-8, planning-13)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (PP (TO to)
      (NP
        (NP (DT the) (JJS best))
        (PP (IN of)
          (NP (PRP$ our) (NN knowledge)))))
    (NP (DT this) (NN literature))
    (VP (VBZ has)
      (VP (VBN limCopyright)
        (NP
          (NP
            (NP (SYM c))
            (NP (CD 2007)))
          (, ,)
          (NP
            (NP (NNP Association))
            (PP (IN for)
              (NP
                (NP (DT the) (NNP Advancement))
                (PP (IN of)
                  (NP (NNP Artificial) (NNP Intelligence))))))
          (PRN (-LRB- -LRB-)
            (VP (VBG www.aaai.org))
            (-RRB- -RRB-)))))
    (. .)))

advmod(limCopyright-12, However-1)
case(best-5, to-3)
det(best-5, the-4)
nmod:to(limCopyright-12, best-5)
case(knowledge-8, of-6)
nmod:poss(knowledge-8, our-7)
nmod:of(best-5, knowledge-8)
det(literature-10, this-9)
nsubj(limCopyright-12, literature-10)
aux(limCopyright-12, has-11)
root(ROOT-0, limCopyright-12)
dobj(limCopyright-12, c-13)
dep(c-13, 2007-14)
appos(c-13, Association-16)
case(Advancement-19, for-17)
det(Advancement-19, the-18)
nmod:for(Association-16, Advancement-19)
case(Intelligence-22, of-20)
compound(Intelligence-22, Artificial-21)
nmod:of(Advancement-19, Intelligence-22)
dep(c-13, www.aaai.org-24)

(ROOT
  (S
    (NP (DT All) (NNS rights))
    (VP (VBD reserved))
    (. .)))

det(rights-2, All-1)
nsubj(reserved-3, rights-2)
root(ROOT-0, reserved-3)

(ROOT
  (S
    (NP
      (NP (JJ ited) (NN coverage))
      (PP (IN of)
        (NP (NN benchmark))))
    (VP
      (VP (VBZ domains))
      (, ,)
      (CC and)
      (VP (VBZ has)
        (ADVP (RB instead))
        (VP (VBN focused) (, ,)
          (PP (IN for)
            (NP (NN example)))
          (, ,)
          (PP
            (PP (IN on)
              (NP
                (NP (JJ syntactic) (NNS restrictions))
                (PP (IN on)
                  (NP (DT the) (NN operator) (NN set)))))
            (, ,) (RB as)
            (PP (IN in)
              (NP (-LRB- -LRB-)
                (NP (NNP Bylander) (CD 1994))
                (: ;)
                (SBAR
                  (S
                    (NP (NNP B))
                    (VP (VBP ackstr)
                      (NP
                        (NP
                          (NP
                            (NP
                              (NP (NN om))
                              (CC &)
                              (NP (NNP Nebel) (CD 1995)))
                            (: ;)
                            (NP
                              (NP (NNP Erol))
                              (, ,)
                              (NP (NNP Nau))))
                          (, ,)
                          (CC &)
                          (NP (NNP Subrahmanian) (CD 1995))
                          (-RRB- -RRB-))
                        (, ,)
                        (CC or)
                        (NP
                          (NP (NNS restrictions))
                          (PP (IN on)
                            (NP (JJ causal) (NN graph) (NN structure)))
                          (, ,)
                          (SBAR (IN as)
                            (FRAG
                              (PP (IN in)
                                (NP (-LRB- -LRB-) (NNP Brafman)
                                  (CC &)
                                  (NNP Domshlak) (NNS 2003)))
                              (: ;)
                              (NP
                                (NP (CD 2006))
                                (: ;)
                                (NP (NNP Helmert) (CD 2006)))
                              (-RRB- -RRB-))))))))))))))
    (. .)))

amod(coverage-2, ited-1)
nsubj(domains-5, coverage-2)
nsubj(focused-10, coverage-2)
case(benchmark-4, of-3)
nmod:of(coverage-2, benchmark-4)
root(ROOT-0, domains-5)
cc(domains-5, and-7)
aux(focused-10, has-8)
advmod(focused-10, instead-9)
conj:and(domains-5, focused-10)
case(example-13, for-12)
nmod:for(focused-10, example-13)
case(restrictions-17, on-15)
amod(restrictions-17, syntactic-16)
advcl(focused-10, restrictions-17)
case(set-21, on-18)
det(set-21, the-19)
compound(set-21, operator-20)
nmod:on(restrictions-17, set-21)
dep(restrictions-17, as-23)
case(Bylander-26, in-24)
nmod:in(restrictions-17, Bylander-26)
nummod(Bylander-26, 1994-27)
nsubj(ackstr-30, B-29)
acl:relcl(Bylander-26, ackstr-30)
dobj(ackstr-30, om-31)
cc(om-31, &-32)
dobj(ackstr-30, Nebel-33)
conj:&(om-31, Nebel-33)
nummod(Nebel-33, 1995-34)
dep(om-31, Erol-36)
appos(Erol-36, Nau-38)
cc(om-31, &-40)
dobj(ackstr-30, Subrahmanian-41)
conj:&(om-31, Subrahmanian-41)
nummod(Subrahmanian-41, 1995-42)
cc(om-31, or-45)
dobj(ackstr-30, restrictions-46)
conj:or(om-31, restrictions-46)
case(structure-50, on-47)
amod(structure-50, causal-48)
compound(structure-50, graph-49)
nmod:on(restrictions-46, structure-50)
mark(2006-60, as-52)
case(Brafman-55, in-53)
nmod:in(2006-60, Brafman-55)
cc(Brafman-55, &-56)
compound(2003-58, Domshlak-57)
conj:&(Brafman-55, 2003-58)
nmod:in(2006-60, 2003-58)
dep(restrictions-46, 2006-60)
dep(2006-60, Helmert-62)
nummod(Helmert-62, 2006-63)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (VP (VBN related)
        (NP (NN work))
        (PP (IN in)
          (PRN (-LRB- -LRB-)
            (NP
              (NP (NNP Helmert) (CD 2004) (, ;) (CD 2006))
              (: ;)
              (NP (NNP Haslum) (CD 2007)))
            (-RRB- -RRB-)))
        (SBAR
          (WHNP (WDT which))
          (S
            (NP (PRP we))
            (VP (VB contrast)
              (PP (IN with)
                (NP (PRP$ our) (NN work)))
              (ADVP (RB later)
                (PP (IN in)
                  (NP (DT this) (NN section)))))))))
    (. .)))

expl(related-3, There-1)
auxpass(related-3, is-2)
root(ROOT-0, related-3)
dobj(related-3, work-4)
case(Helmert-7, in-5)
advcl(related-3, Helmert-7)
nummod(Helmert-7, 2004-8)
nummod(Helmert-7, 2006-10)
dep(Helmert-7, Haslum-12)
nummod(Haslum-12, 2007-13)
dobj(contrast-17, which-15)
nsubj(contrast-17, we-16)
dep(related-3, contrast-17)
case(work-20, with-18)
nmod:poss(work-20, our-19)
nmod:with(contrast-17, work-20)
advmod(contrast-17, later-21)
case(section-24, in-22)
det(section-24, this-23)
nmod:in(later-21, section-24)

(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (NP (WDT what))
    (VP (MD would)
      (VP (VB constitute)
        (NP (DT a) (JJ satisfactory) (JJ theoretical) (NN account))
        (PP (IN for)
          (NP
            (NP (DT the) (JJ domain-independent) (NN tractability))
            (PP (IN of)
              (NP (JJ benchmark) (NNS domains)))))))
    (. ?)))

advmod(constitute-5, Now-1)
nsubj(constitute-5, what-3)
aux(constitute-5, would-4)
root(ROOT-0, constitute-5)
det(account-9, a-6)
amod(account-9, satisfactory-7)
amod(account-9, theoretical-8)
dobj(constitute-5, account-9)
case(tractability-13, for-10)
det(tractability-13, the-11)
amod(tractability-13, domain-independent-12)
nmod:for(constitute-5, tractability-13)
case(domains-16, of-14)
amod(domains-16, benchmark-15)
nmod:of(tractability-13, domains-16)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (NP (PRP we))
        (VP (VBP have)
          (ADVP (RB already))
          (VP (VBN mentioned)))))
    (, ,)
    (NP
      (NP (DT the) (JJ benchmark) (NNS domains))
      (PP (IN of)
        (NP (NN interest))))
    (VP (VBP are)
      (ADVP (RB already))
      (VP (VBN known)
        (S
          (VP (TO to)
            (VP (VB be)
              (ADJP (JJ tractable)
                (PP (IN on)
                  (NP (DT an) (JJ individual) (NN basis)))))))))
    (. .)))

mark(mentioned-5, As-1)
nsubj(mentioned-5, we-2)
aux(mentioned-5, have-3)
advmod(mentioned-5, already-4)
advcl(known-14, mentioned-5)
det(domains-9, the-7)
amod(domains-9, benchmark-8)
nsubjpass(known-14, domains-9)
nsubj:xsubj(tractable-17, domains-9)
case(interest-11, of-10)
nmod:of(domains-9, interest-11)
auxpass(known-14, are-12)
advmod(known-14, already-13)
root(ROOT-0, known-14)
mark(tractable-17, to-15)
cop(tractable-17, be-16)
xcomp(known-14, tractable-17)
case(basis-21, on-18)
det(basis-21, an-19)
amod(basis-21, individual-20)
nmod:on(tractable-17, basis-21)

(ROOT
  (S
    (SBAR
      (WHNP (WP What))
      (S
        (NP (PRP we))
        (VP (VBP propose)
          (SBAR
            (S
              (VP (VBZ is)
                (ADJP (JJ worth))
                (S
                  (VP (VBG searching)
                    (PP (IN for))))))))))
    (, ,)
    (ADVP (RB then))
    (, ,)
    (VP (VBZ is)
      (NP
        (NP (DT a) (JJ uniform) (NN explanation))
        (PP (IN for)
          (NP
            (NP (DT the) (NN tractability))
            (PP (IN of)
              (NP (JJ benchmark) (NNS domains)))))))
    (. .)))

dobj(propose-3, What-1)
nsubj(propose-3, we-2)
dep(explanation-14, propose-3)
cop(worth-5, is-4)
ccomp(propose-3, worth-5)
xcomp(worth-5, searching-6)
nmod(searching-6, for-7)
advmod(explanation-14, then-9)
cop(explanation-14, is-11)
det(explanation-14, a-12)
amod(explanation-14, uniform-13)
root(ROOT-0, explanation-14)
case(tractability-17, for-15)
det(tractability-17, the-16)
nmod:for(explanation-14, tractability-17)
case(domains-20, of-18)
amod(domains-20, benchmark-19)
nmod:of(tractability-17, domains-20)

(ROOT
  (S
    (SBAR (IN Since)
      (S
        (NP (PRP we))
        (VP (VBP are)
          (VP (VBG searching)
            (PP (IN for)
              (NP
                (NP (JJ tractable) (NNS classes))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBP are)
                      (VP (VBN given)
                        (PP (IN by)
                          (NP (JJ formal) (NNS definitions)))
                        (, ,)
                        (PP (IN from)
                          (NP
                            (NP (DT the) (NN viewpoint))
                            (PP (IN of)
                              (S
                                (VP (VBG favoring)
                                  (NP (NN uniformity)))))))))))))))))
    (, ,)
    (NP (PRP we))
    (VP (VBP are)
      (ADJP (JJ interested)
        (PP (IN in)
          (NP
            (NP (NNS definitions))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP
                  (VP (VBP are)
                    (ADJP (RB as) (JJ simple)
                      (PP (IN as)
                        (ADJP (JJ possible)))))
                  (, ,)
                  (CC and)
                  (VP (VBP are)
                    (ADVP (RB preferrably))
                    (VP (VBN based)
                      (PP (IN on)
                        (NP (DT a) (JJ single) (NN concept)))))))))))
      (PRN (-LRB- -LRB-)
        (CC or)
        (FRAG
          (ADJP (RB very) (JJ few))
          (ADJP (JJ concepts)))
        (-RRB- -RRB-)))
    (. .)))

mark(searching-4, Since-1)
nsubj(searching-4, we-2)
aux(searching-4, are-3)
advcl(interested-24, searching-4)
case(classes-7, for-5)
amod(classes-7, tractable-6)
nmod:for(searching-4, classes-7)
nsubjpass(given-10, classes-7)
ref(classes-7, that-8)
auxpass(given-10, are-9)
acl:relcl(classes-7, given-10)
case(definitions-13, by-11)
amod(definitions-13, formal-12)
nmod:agent(given-10, definitions-13)
case(viewpoint-17, from-15)
det(viewpoint-17, the-16)
nmod:from(given-10, viewpoint-17)
mark(favoring-19, of-18)
acl(viewpoint-17, favoring-19)
dobj(favoring-19, uniformity-20)
nsubj(interested-24, we-22)
cop(interested-24, are-23)
root(ROOT-0, interested-24)
case(definitions-26, in-25)
nmod:in(interested-24, definitions-26)
nsubj(simple-30, definitions-26)
nsubjpass(based-37, definitions-26)
ref(definitions-26, that-27)
cop(simple-30, are-28)
advmod(simple-30, as-29)
acl:relcl(definitions-26, simple-30)
case(possible-32, as-31)
advcl(simple-30, possible-32)
cc(simple-30, and-34)
auxpass(based-37, are-35)
advmod(based-37, preferrably-36)
acl:relcl(definitions-26, based-37)
conj:and(simple-30, based-37)
case(concept-41, on-38)
det(concept-41, a-39)
amod(concept-41, single-40)
nmod:on(based-37, concept-41)
dep(interested-24, or-43)
advmod(few-45, very-44)
dep(or-43, few-45)
dep(few-45, concepts-46)

(ROOT
  (S
    (PP (IN In)
      (NP (JJ other) (NNS words)))
    (, ,)
    (NP (PRP we))
    (VP (VBP believe)
      (SBAR (IN that)
        (S
          (NP (PRP one))
          (VP (MD would)
            (VP (VB like)
              (S
                (VP (TO to)
                  (VP (VB identify)
                    (PRN (-LRB- -LRB-)
                      (PP (IN via)
                        (NP (DT a) (JJ formal) (NN definition)))
                      (-RRB- -RRB-)))))
              (SBAR
                (NP (DT a) (JJ generic) (JJ structural) (NN property))
                (IN that)
                (S
                  (NP
                    (NP (NNS accounts))
                    (PP (IN for)
                      (NP
                        (NP (DT the) (NN tractability))
                        (PP (IN for)
                          (NP (DT the) (NN benchmark))))))
                  (VP (VBZ domains)))))))))
    (. .)))

case(words-3, In-1)
amod(words-3, other-2)
nmod:in(believe-6, words-3)
nsubj(believe-6, we-5)
root(ROOT-0, believe-6)
mark(like-10, that-7)
nsubj(like-10, one-8)
nsubj:xsubj(identify-12, one-8)
aux(like-10, would-9)
ccomp(believe-6, like-10)
mark(identify-12, to-11)
xcomp(like-10, identify-12)
case(definition-17, via-14)
det(definition-17, a-15)
amod(definition-17, formal-16)
dep(identify-12, definition-17)
det(property-22, a-19)
amod(property-22, generic-20)
amod(property-22, structural-21)
dep(domains-31, property-22)
mark(domains-31, that-23)
nsubj(domains-31, accounts-24)
case(tractability-27, for-25)
det(tractability-27, the-26)
nmod:for(accounts-24, tractability-27)
case(benchmark-30, for-28)
det(benchmark-30, the-29)
nmod:for(tractability-27, benchmark-30)
ccomp(like-10, domains-31)

(ROOT
  (S
    (NP
      (NP (DT A) (JJ related) (NN property))
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (VBP believe)))))
    (VP (VBZ is)
      (ADJP (JJ desirable))
      (SBAR (IN for)
        (S
          (NP
            (NP (DT the) (NN definition))
            (PP (IN of)
              (NP (JJ tractable) (NNS classes))))
          (VP (VBZ is)
            (NP
              (NP
                (NP
                  (NP (JJ mathematical) (NN tangibility))
                  (, ,)
                  (SBAR
                    (WHPP (IN by)
                      (WHNP (WDT which)))
                    (S
                      (NP (PRP we))
                      (VP (VBP mean)
                        (SBAR (IN that)
                          (S
                            (NP (PRP it))
                            (VP (MD should)
                              (VP (VB be)
                                (ADJP (RB relatively) (JJ easy)
                                  (S
                                    (VP (TO to)
                                      (VP (VB prove)
                                        (NP (DT both) (NN inclusion) (NNS results))))))))))))))
                (PRN (-LRB- -LRB-) (`` ``)
                  (S
                    (NP (NNP domain) (NNP D))
                    (VP (VBZ is)
                      (VP (VBN contained)
                        (PP (IN in)
                          (NP (NN tractable) (NN class) (NNP C))))))
                  ('' '') (-RRB- -RRB-)))
              (CONJP (RB as) (RB well) (IN as))
              (NP (JJ non-inclusion) (NNS results)))))))
    (. .)))

det(property-3, A-1)
amod(property-3, related-2)
nsubj(desirable-8, property-3)
mark(believe-6, that-4)
nsubj(believe-6, we-5)
dep(property-3, believe-6)
cop(desirable-8, is-7)
root(ROOT-0, desirable-8)
mark(tangibility-17, for-9)
det(definition-11, the-10)
nsubj(tangibility-17, definition-11)
case(classes-14, of-12)
amod(classes-14, tractable-13)
nmod:of(definition-11, classes-14)
cop(tangibility-17, is-15)
amod(tangibility-17, mathematical-16)
advcl(desirable-8, tangibility-17)
nmod:by(mean-22, tangibility-17)
case(which-20, by-19)
ref(tangibility-17, which-20)
nsubj(mean-22, we-21)
acl:relcl(tangibility-17, mean-22)
mark(easy-28, that-23)
nsubj(easy-28, it-24)
nsubj:xsubj(prove-30, it-24)
aux(easy-28, should-25)
cop(easy-28, be-26)
advmod(easy-28, relatively-27)
ccomp(mean-22, easy-28)
mark(prove-30, to-29)
xcomp(easy-28, prove-30)
det(results-33, both-31)
compound(results-33, inclusion-32)
dobj(prove-30, results-33)
compound(D-37, domain-36)
nsubjpass(contained-39, D-37)
auxpass(contained-39, is-38)
dep(tangibility-17, contained-39)
case(C-43, in-40)
compound(C-43, tractable-41)
compound(C-43, class-42)
nmod:in(contained-39, C-43)
cc(tangibility-17, as-46)
mwe(as-46, well-47)
mwe(as-46, as-48)
amod(results-50, non-inclusion-49)
advcl(desirable-8, results-50)
conj:and(tangibility-17, results-50)
nmod:by(mean-22, results-50)

(ROOT
  (S
    (ADVP (RB Clearly))
    (, ,)
    (NP (NN tangibility))
    (VP
      (VP (VBZ is)
        (ADVP (RB closely))
        (VP (VBN tied)
          (PP (TO to)
            (NP (NN simplicity)))))
      (, ,)
      (CC and)
      (VP (MD may)
        (VP (VB be)
          (VP (VBN viewed)
            (PP (IN as)
              (NP
                (NP (NN evidence))
                (PP (IN for)
                  (NP (NN simplicity)))))))))
    (. .)))

advmod(tied-6, Clearly-1)
nsubjpass(tied-6, tangibility-3)
nsubjpass(viewed-13, tangibility-3)
auxpass(tied-6, is-4)
advmod(tied-6, closely-5)
root(ROOT-0, tied-6)
case(simplicity-8, to-7)
nmod:to(tied-6, simplicity-8)
cc(tied-6, and-10)
aux(viewed-13, may-11)
auxpass(viewed-13, be-12)
conj:and(tied-6, viewed-13)
case(evidence-15, as-14)
nmod:as(viewed-13, evidence-15)
case(simplicity-17, for-16)
nmod:for(evidence-15, simplicity-17)

(ROOT
  (S
    (S
      (PP (IN In)
        (NP (NN addition)))
      (, ,)
      (NP
        (NP (JJ mathematical) (NN tangibility))
        (PP (IN of)
          (NP (DT a) (JJ tractable) (NN class))))
      (VP (VBZ yields)
        (NP
          (NP (JJ human) (NN understanding))
          (PP (IN of)
            (NP
              (NP (DT the) (NN class))
              (CC and)
              (NP (PRP$ its) (NNS boundaries)))))))
    (: ;)
    (S
      (S
        (VP (VBG understanding)
          (SBAR
            (WHADVP (WRB why))
            (S
              (NP (DT a) (NN problem))
              (VP (VBZ does) (RB not)
                (VP (VB belong)
                  (PP (TO to)
                    (NP (DT a) (NN class-that)))))))))
      (VP (VBZ is) (, ,)
        (SBAR
          (S
            (S
              (VP (VBG understanding)
                (NP
                  (NP (DT a) (NN proof))
                  (PP (IN of)
                    (NP (JJ noninclusion-can) (NN yield) (JJ human) (NN insight))))
                (PP (IN into)
                  (NP (NN domain) (NN structure)))
                (PP (IN in)
                  (NP
                    (NP (DT the) (JJ same) (NN way))
                    (SBAR
                      (WHNP (WDT that))
                      (S
                        (VP (VBG understanding)
                          (NP (DT an) (NN inclusion) (NN result)))))))))
            (VP (MD can))))))
    (. .)))

case(addition-2, In-1)
nmod:in(yields-10, addition-2)
amod(tangibility-5, mathematical-4)
nsubj(yields-10, tangibility-5)
case(class-9, of-6)
det(class-9, a-7)
amod(class-9, tractable-8)
nmod:of(tangibility-5, class-9)
root(ROOT-0, yields-10)
amod(understanding-12, human-11)
dobj(yields-10, understanding-12)
case(class-15, of-13)
det(class-15, the-14)
nmod:of(understanding-12, class-15)
cc(class-15, and-16)
nmod:poss(boundaries-18, its-17)
nmod:of(understanding-12, boundaries-18)
conj:and(class-15, boundaries-18)
csubj(is-30, understanding-20)
advmod(belong-26, why-21)
det(problem-23, a-22)
nsubj(belong-26, problem-23)
aux(belong-26, does-24)
neg(belong-26, not-25)
ccomp(understanding-20, belong-26)
case(class-that-29, to-27)
det(class-that-29, a-28)
nmod:to(belong-26, class-that-29)
parataxis(yields-10, is-30)
csubj(can-52, understanding-32)
det(proof-34, a-33)
dobj(understanding-32, proof-34)
case(insight-39, of-35)
amod(insight-39, noninclusion-can-36)
compound(insight-39, yield-37)
amod(insight-39, human-38)
nmod:of(proof-34, insight-39)
case(structure-42, into-40)
compound(structure-42, domain-41)
nmod:into(understanding-32, structure-42)
case(way-46, in-43)
det(way-46, the-44)
amod(way-46, same-45)
nmod:in(understanding-32, way-46)
nsubj(understanding-48, way-46)
ref(way-46, that-47)
acl:relcl(way-46, understanding-48)
det(result-51, an-49)
compound(result-51, inclusion-50)
dobj(understanding-48, result-51)
ccomp(is-30, can-52)

(ROOT
  (S
    (S
      (VP (VB Put)
        (ADVP (RB differently))))
    (, ,)
    (NP (NN tangibility))
    (VP (MD may)
      (VP (VB allow)
        (S
          (NP (PRP us))
          (VP (TO to)
            (VP (VB classify)
              (NP (NNS domains))
              (PP (VBG according)
                (PP (TO to)
                  (NP (PRP$ their) (JJ structural) (NNS properties)))))))))
    (. .)))

ccomp(allow-6, Put-1)
advmod(Put-1, differently-2)
nsubj(allow-6, tangibility-4)
aux(allow-6, may-5)
root(ROOT-0, allow-6)
dobj(allow-6, us-7)
nsubj:xsubj(classify-9, us-7)
mark(classify-9, to-8)
xcomp(allow-6, classify-9)
dobj(classify-9, domains-10)
case(properties-15, according-11)
mwe(according-11, to-12)
nmod:poss(properties-15, their-13)
amod(properties-15, structural-14)
nmod:according_to(classify-9, properties-15)

(ROOT
  (NP (NNS Contributions) (. .)))

root(ROOT-0, Contributions-1)

(ROOT
  (S
    (VP (VBN Guided)
      (PP (IN by)
        (NP (DT these) (NNS questions)
          (CC and)
          (NNS motivations)))
      (, ,)
      (PP (IN in)
        (NP
          (NP (DT this) (NN paper))
          (SBAR
            (S
              (NP (PRP we))
              (VP
                (VP (VB identify)
                  (NP
                    (NP (DT a) (NN family))
                    (PP (IN of)
                      (NP (JJ simple) (JJ structural) (NNS conditions))))
                  (SBAR (IN that)
                    (S
                      (NP (DT both))
                      (VP (VBP imply)
                        (ADVP (RB tractability))))))
                (CC and)
                (VP (VB apply)
                  (PP (TO to)
                    (NP
                      (NP (JJ multiple) (JJ benchmark) (JJ domains-including) (NN Gripper))
                      (CC and)
                      (NP (NNP Logistics)))))))))))
    (. .)))

root(ROOT-0, Guided-1)
case(questions-4, by-2)
det(questions-4, these-3)
nmod:by(Guided-1, questions-4)
cc(questions-4, and-5)
nmod:by(Guided-1, motivations-6)
conj:and(questions-4, motivations-6)
case(paper-10, in-8)
det(paper-10, this-9)
nmod:in(Guided-1, paper-10)
mark(imply-21, paper-10)
nsubj(identify-12, we-11)
nsubj(apply-24, we-11)
acl:relcl(paper-10, identify-12)
det(family-14, a-13)
dobj(identify-12, family-14)
case(conditions-18, of-15)
amod(conditions-18, simple-16)
amod(conditions-18, structural-17)
nmod:of(family-14, conditions-18)
ref(paper-10, that-19)
nsubj(imply-21, both-20)
ccomp(identify-12, imply-21)
advmod(imply-21, tractability-22)
cc(identify-12, and-23)
acl:relcl(paper-10, apply-24)
conj:and(identify-12, apply-24)
case(Gripper-29, to-25)
amod(Gripper-29, multiple-26)
amod(Gripper-29, benchmark-27)
amod(Gripper-29, domains-including-28)
nmod:to(apply-24, Gripper-29)
cc(Gripper-29, and-30)
nmod:to(apply-24, Logistics-31)
conj:and(Gripper-29, Logistics-31)

(ROOT
  (S
    (CONJP (RB Not) (JJ only))
    (SINV
      (VP (VBP are))
      (NP
        (NP (PRP$ our) (JJ introduced) (NNS conditions))
        (ADJP (JJ simple)
          (S
            (VP (TO to)
              (VP (VB understand)
                (CC and)
                (VB handle)
                (ADVP (RB theoretically))))))))
    (, ,)
    (CC but)
    (S
      (NP
        (NP (DT the) (JJ corresponding) (NNS algorithms))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBP demonstrate)
              (ADVP (RB tractability))))))
      (VP (VBP are)
        (ADVP (RB also))
        (ADJP (RB conceptually) (JJ simple))))
    (. .)))

neg(only-2, Not-1)
cc:preconj(are-3, only-2)
root(ROOT-0, are-3)
nmod:poss(conditions-6, our-4)
amod(conditions-6, introduced-5)
nsubj(are-3, conditions-6)
amod(conditions-6, simple-7)
mark(understand-9, to-8)
xcomp(simple-7, understand-9)
cc(understand-9, and-10)
xcomp(simple-7, handle-11)
conj:and(understand-9, handle-11)
advmod(understand-9, theoretically-12)
cc(are-3, but-14)
det(algorithms-17, the-15)
amod(algorithms-17, corresponding-16)
nsubj(demonstrate-19, algorithms-17)
nsubj(simple-24, algorithms-17)
ref(algorithms-17, which-18)
acl:relcl(algorithms-17, demonstrate-19)
advmod(demonstrate-19, tractability-20)
cop(simple-24, are-21)
advmod(simple-24, also-22)
advmod(simple-24, conceptually-23)
conj:but(are-3, simple-24)

(ROOT
  (S
    (ADVP
      (NP (CD 73))
      (RBR More))
    (ADVP (RB precisely))
    (, ,)
    (NP (PRP we))
    (VP (VBP identify)
      (NP
        (NP (CD four) (VBN related) (NNS measures))
        (PP (IN of)
          (NP (NN complexity)))
        (PP (IN for)
          (NP (VBG planning) (NNS problems)))))
    (. .)))

nmod:npmod(More-2, 73-1)
advmod(identify-6, More-2)
advmod(identify-6, precisely-3)
nsubj(identify-6, we-5)
root(ROOT-0, identify-6)
nummod(measures-9, four-7)
amod(measures-9, related-8)
dobj(identify-6, measures-9)
case(complexity-11, of-10)
nmod:of(measures-9, complexity-11)
case(problems-14, for-12)
amod(problems-14, planning-13)
nmod:for(measures-9, problems-14)

(ROOT
  (S
    (S
      (X
        (X (DT The)
          (ADJP (RBS most) (JJ basic)))
        (NP (CD one)))
      (NP (PRP we))
      (VP (VBP call)
        (NP (NN width))))
    (: ;)
    (S
      (NP (DT the) (NNS others))
      (VP (VBP are)
        (NP
          (NP (NNS extensions))
          (PP (IN of)
            (NP (DT this) (NN measure))))))
    (. .)))

det(basic-3, The-1)
advmod(basic-3, most-2)
dep(one-4, basic-3)
dep(call-6, one-4)
nsubj(call-6, we-5)
root(ROOT-0, call-6)
dobj(call-6, width-7)
det(others-10, the-9)
nsubj(extensions-12, others-10)
cop(extensions-12, are-11)
parataxis(call-6, extensions-12)
case(measure-15, of-13)
det(measure-15, this-14)
nmod:of(extensions-12, measure-15)

(ROOT
  (S
    (NP
      (NP (RB Roughly) (NN speaking))
      (, ,)
      (NP (DT a) (NN planning) (NN instance)))
    (VP (VBZ has)
      (NP
        (NP (NN width) (NN k))
        (SBAR (IN if)
          (S
            (SBAR (IN for)
              (S
                (NP (DT every) (NN state))
                (VP (VBZ s))))
            (, ,)
            (NP (PRP we))
            (VP (MD can)
              (VP (VB bring)
                (NP (DT any) (JJ variable) (NN u))
                (PP (TO to)
                  (NP
                    (NP (PRP$ its) (NN goal))
                    (PP (IN via)
                      (NP
                        (NP (DT a) (NN plan))
                        (SBAR
                          (WHNP (WDT that))
                          (S
                            (VP (VBZ changes)
                              (NP
                                (NP
                                  (QP (DT no) (JJR more) (IN than) (CD k))
                                  (NNS variables))
                                (PRN (-LRB- -LRB-)
                                  (VP (VBG assuming)
                                    (SBAR (IN that)
                                      (S
                                        (NP (DT a) (NN goal) (NN state))
                                        (VP (VBZ is)
                                          (ADJP (JJ reachable))))))
                                  (-RRB- -RRB-))))))))))))))))
    (. .)))

advmod(speaking-2, Roughly-1)
nsubj(has-7, speaking-2)
det(instance-6, a-4)
compound(instance-6, planning-5)
appos(speaking-2, instance-6)
root(ROOT-0, has-7)
compound(k-9, width-8)
dobj(has-7, k-9)
mark(bring-18, if-10)
mark(s-14, for-11)
det(state-13, every-12)
nsubj(s-14, state-13)
advcl(bring-18, s-14)
nsubj(bring-18, we-16)
aux(bring-18, can-17)
dep(k-9, bring-18)
det(u-21, any-19)
amod(u-21, variable-20)
dobj(bring-18, u-21)
case(goal-24, to-22)
nmod:poss(goal-24, its-23)
nmod:to(bring-18, goal-24)
case(plan-27, via-25)
det(plan-27, a-26)
nmod:via(goal-24, plan-27)
nsubj(changes-29, plan-27)
ref(plan-27, that-28)
acl:relcl(plan-27, changes-29)
advmod(k-33, no-30)
advmod(k-33, more-31)
mwe(more-31, than-32)
nummod(variables-34, k-33)
dobj(changes-29, variables-34)
dep(variables-34, assuming-36)
mark(reachable-42, that-37)
det(state-40, a-38)
compound(state-40, goal-39)
nsubj(reachable-42, state-40)
cop(reachable-42, is-41)
ccomp(assuming-36, reachable-42)

(ROOT
  (S
    (S
      (NP (DT The) (NN plan))
      (VP (MD may)
        (VP (VB change)
          (NP (DT any) (NNS variables)))))
    (, ,)
    (CC but)
    (S
      (SBAR (IN upon)
        (S
          (NP (NN termination))
          (VP (MD must)
            (VP (VB restore)
              (NP (DT all) (NNS variables))))))
      (NP (DT that))
      (VP (VBD were)
        (ADVP (RB previously))
        (PP (IN in)
          (NP (DT the) (NN goal) (NN state)))))
    (. .)))

det(plan-2, The-1)
nsubj(change-4, plan-2)
aux(change-4, may-3)
root(ROOT-0, change-4)
det(variables-6, any-5)
dobj(change-4, variables-6)
cc(change-4, but-8)
mark(restore-12, upon-9)
nsubj(restore-12, termination-10)
aux(restore-12, must-11)
advcl(state-21, restore-12)
det(variables-14, all-13)
dobj(restore-12, variables-14)
nsubj(state-21, that-15)
cop(state-21, were-16)
advmod(state-21, previously-17)
case(state-21, in-18)
det(state-21, the-19)
compound(state-21, goal-20)
conj:but(change-4, state-21)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP show)
      (SBAR (IN that)
        (S
          (NP
            (NP (DT a) (NN set))
            (PP (IN of)
              (NP
                (NP (NN planning) (NNS instances))
                (VP (VBG having)
                  (NP (JJ bounded) (NN width)))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (NN width))
                    (VP (VBN bounded)
                      (PP (IN above)
                        (PP (IN by)
                          (NP (DT a) (JJ constant))))))
                  (-RRB- -RRB-)))))
          (VP (VBZ is)
            (NP (JJ polynomial-time) (NN tractable))
            (, ,)
            (PP (IN by)
              (NP
                (NP (DT the) (VBG following) (NN algorithm))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (NP (PRP we))
                    (ADVP (RB simply))
                    (VP (VBP call)
                      (NP (DT the) (NN width) (NN k) (NN algorithm)))))))))))
    (. .)))

nsubj(show-2, We-1)
root(ROOT-0, show-2)
mark(tractable-22, that-3)
det(set-5, a-4)
nsubj(tractable-22, set-5)
case(instances-8, of-6)
compound(instances-8, planning-7)
nmod:of(set-5, instances-8)
acl(instances-8, having-9)
amod(width-11, bounded-10)
dobj(having-9, width-11)
dep(instances-8, width-13)
acl(width-13, bounded-14)
case(constant-18, above-15)
case(constant-18, by-16)
det(constant-18, a-17)
nmod:above(bounded-14, constant-18)
cop(tractable-22, is-20)
amod(tractable-22, polynomial-time-21)
ccomp(show-2, tractable-22)
case(algorithm-27, by-24)
det(algorithm-27, the-25)
amod(algorithm-27, following-26)
nmod:by(tractable-22, algorithm-27)
dobj(call-32, algorithm-27)
ref(algorithm-27, which-29)
nsubj(call-32, we-30)
advmod(call-32, simply-31)
acl:relcl(algorithm-27, call-32)
det(algorithm-36, the-33)
compound(algorithm-36, width-34)
compound(algorithm-36, k-35)
dobj(call-32, algorithm-36)

(ROOT
  (S
    (NP
      (NP (DT This) (NN algorithm))
      (, ,)
      (VP
        (VP (VBN given)
          (NP (DT a) (NN planning) (NN instance)))
        (, ,)
        (VP
          (ADVP (RB arbitrarily))
          (VBZ chooses)
          (NP
            (NP (DT an) (NN ordering))
            (PP (IN of)
              (NP (DT the) (NNS variables)))))
        (CC and)
        (, ,)
        (PP (VBG according)
          (PP (TO to)
            (NP
              (NP (DT this))
              (VP (VBG ordering))))))
      (, ,))
    (VP (VBZ tries)
      (S
        (VP (TO to)
          (VP (VB bring)
            (NP
              (NP (DT each))
              (PP (IN of)
                (NP (PRP them))))
            (PP (IN into)
              (NP
                (NP (PRP$ their) (NN goal) (NNS states))
                (PRN (-LRB- -LRB-)
                  (PP (IN via)
                    (NP
                      (NP (NNS plans))
                      (PP (IN of)
                        (NP (DT the) (JJ mentioned) (NN form)))))
                  (-RRB- -RRB-))))))))
    (. .)))

det(algorithm-2, This-1)
nsubj(tries-23, algorithm-2)
nsubj:xsubj(bring-25, algorithm-2)
dep(algorithm-2, given-4)
det(instance-7, a-5)
compound(instance-7, planning-6)
dobj(given-4, instance-7)
advmod(chooses-10, arbitrarily-9)
dep(algorithm-2, chooses-10)
conj:and(given-4, chooses-10)
det(ordering-12, an-11)
dobj(chooses-10, ordering-12)
case(variables-15, of-13)
det(variables-15, the-14)
nmod:of(ordering-12, variables-15)
cc(given-4, and-16)
case(this-20, according-18)
mwe(according-18, to-19)
dep(algorithm-2, this-20)
conj:and(given-4, this-20)
acl(this-20, ordering-21)
root(ROOT-0, tries-23)
mark(bring-25, to-24)
xcomp(tries-23, bring-25)
dobj(bring-25, each-26)
case(them-28, of-27)
nmod:of(each-26, them-28)
case(states-32, into-29)
nmod:poss(states-32, their-30)
compound(states-32, goal-31)
nmod:into(bring-25, states-32)
case(plans-35, via-34)
nmod:via(states-32, plans-35)
case(form-39, of-36)
det(form-39, the-37)
amod(form-39, mentioned-38)
nmod:of(plans-35, form-39)

(ROOT
  (S
    (VP (NN Note)
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (VBP prove)
            (SBAR (IN that)
              (S
                (NP (DT this) (NN algorithm))
                (, ,)
                (PP (VBN given)
                  (NP
                    (NP (DT an) (NN instance))
                    (PP (IN of)
                      (NP (JJ bounded) (NN width)))))
                (, ,)
                (VP (VBZ solves)
                  (NP
                    (NP (DT the) (NN instance))
                    (VP
                      (ADVP (RB regardless)
                        (PP (IN of)
                          (NP (DT the) (JJ variable) (NN ordering))))
                      (VBN chosen))
                    (: ;)
                    (SBAR
                      (WHNP (WDT that))
                      (S
                        (VP (VBZ is) (, ,)
                          (SBAR
                            (S
                              (NP (DT the) (NN algorithm))
                              (VP (VBZ behaves)
                                (ADVP (RB correctly))
                                (PP (IN on)
                                  (NP (DT all) (JJ variable) (NNS orderings)))))))))))))))))
    (. .)))

root(ROOT-0, Note-1)
mark(prove-4, that-2)
nsubj(prove-4, we-3)
ccomp(Note-1, prove-4)
mark(solves-16, that-5)
det(algorithm-7, this-6)
nsubj(solves-16, algorithm-7)
case(instance-11, given-9)
det(instance-11, an-10)
nmod:given(solves-16, instance-11)
case(width-14, of-12)
amod(width-14, bounded-13)
nmod:of(instance-11, width-14)
ccomp(prove-4, solves-16)
det(instance-18, the-17)
dobj(solves-16, instance-18)
nsubj(is-27, instance-18)
case(ordering-23, regardless-19)
mwe(regardless-19, of-20)
det(ordering-23, the-21)
amod(ordering-23, variable-22)
nmod:regardless_of(chosen-24, ordering-23)
acl(instance-18, chosen-24)
ref(instance-18, that-26)
acl:relcl(instance-18, is-27)
det(algorithm-30, the-29)
nsubj(behaves-31, algorithm-30)
ccomp(is-27, behaves-31)
advmod(behaves-31, correctly-32)
case(orderings-36, on-33)
det(orderings-36, all-34)
amod(orderings-36, variable-35)
nmod:on(behaves-31, orderings-36)

(ROOT
  (S
    (PP (IN As)
      (NP (DT an) (NN example)))
    (, ,)
    (NP (PRP we))
    (VP (VBP show)
      (SBAR (IN that)
        (S
          (NP (DT the) (NNP Gripper) (NN domain))
          (VP (VBZ has)
            (VP (VBN bounded)
              (NP (NN width)))))))
    (. .)))

case(example-3, As-1)
det(example-3, an-2)
nmod:as(show-6, example-3)
nsubj(show-6, we-5)
root(ROOT-0, show-6)
mark(bounded-12, that-7)
det(domain-10, the-8)
compound(domain-10, Gripper-9)
nsubj(bounded-12, domain-10)
aux(bounded-12, has-11)
ccomp(show-6, bounded-12)
dobj(bounded-12, width-13)

(ROOT
  (S
    (PP (IN After)
      (S
        (VP (VBG defining)
          (NP
            (NP (DT this) (NN notion))
            (PP (IN of)
              (NP (NN width)))))))
    (, ,)
    (NP (PRP we))
    (VP
      (VP (VB define))
      (CC and)
      (VP (VB study)
        (NP
          (NP (CD two) (JJ orthogonal) (NNS extensions))
          (PP (IN of)
            (NP (DT this) (NN notion))))))
    (. .)))

mark(defining-2, After-1)
advcl(define-9, defining-2)
det(notion-4, this-3)
dobj(defining-2, notion-4)
case(width-6, of-5)
nmod:of(notion-4, width-6)
nsubj(define-9, we-8)
nsubj(study-11, we-8)
root(ROOT-0, define-9)
cc(define-9, and-10)
conj:and(define-9, study-11)
nummod(extensions-14, two-12)
amod(extensions-14, orthogonal-13)
dobj(study-11, extensions-14)
case(notion-17, of-15)
det(notion-17, this-16)
nmod:of(extensions-14, notion-17)

(ROOT
  (S
    (S
      (NP (DT The) (JJ first))
      (VP (VBZ is)
        (NP (JJ persistent) (NN width))))
    (: ;)
    (S
      (NP
        (NP (DT the) (NN definition))
        (PP (IN of)
          (NP (JJ persistent) (NN width) (NN k))))
      (VP (VBZ is)
        (ADJP (JJ similar)
          (PP (TO to)
            (NP
              (NP (DT the) (NN definition))
              (PP (IN of)
                (NP (NN width) (NN k))))))
        (, ,)
        (SBAR (IN except)
          (S
            (PP (RB instead) (IN of)
              (S
                (VP (VBG requiring)
                  (SBAR (IN that)
                    (S
                      (SBAR (IN for)
                        (S
                          (NP (DT every) (NN state))
                          (VP (VBZ s))))
                      (, ,)
                      (NP (DT every) (JJ variable) (NN u))
                      (VP (MD can)
                        (VP (VB be)
                          (VP (VBN brought)
                            (PP (TO to)
                              (NP (PRP$ its) (NN goal)))))))))))
            (, ,)
            (NP (PRP it))
            (VP (VBZ is)
              (ADVP (RB merely))
              (VP (VBN required)
                (SBAR (IN that)
                  (S
                    (SBAR (IN for)
                      (S
                        (NP (DT every) (NN state))
                        (VP (VBZ s))))
                    (, ,)
                    (NP (EX there))
                    (VP (VBZ exists)
                      (NP
                        (NP (DT a) (JJ variable) (NN u))
                        (SBAR
                          (WHNP (WDT that))
                          (S
                            (VP (MD can)
                              (VP (VB be)
                                (VP (VBN brought)
                                  (PP (TO to)
                                    (NP (PRP$ its) (NN goal))))))))))))))))))
    (. .)))

det(first-2, The-1)
nsubj(width-5, first-2)
cop(width-5, is-3)
amod(width-5, persistent-4)
root(ROOT-0, width-5)
det(definition-8, the-7)
nsubj(similar-14, definition-8)
case(k-12, of-9)
amod(k-12, persistent-10)
compound(k-12, width-11)
nmod:of(definition-8, k-12)
cop(similar-14, is-13)
parataxis(width-5, similar-14)
case(definition-17, to-15)
det(definition-17, the-16)
nmod:to(similar-14, definition-17)
case(k-20, of-18)
compound(k-20, width-19)
nmod:of(definition-17, k-20)
mark(required-45, except-22)
mark(requiring-25, instead-23)
mwe(instead-23, of-24)
advcl(required-45, requiring-25)
mark(brought-37, that-26)
mark(s-30, for-27)
det(state-29, every-28)
nsubj(s-30, state-29)
advcl(brought-37, s-30)
det(u-34, every-32)
amod(u-34, variable-33)
nsubjpass(brought-37, u-34)
aux(brought-37, can-35)
auxpass(brought-37, be-36)
ccomp(requiring-25, brought-37)
case(goal-40, to-38)
nmod:poss(goal-40, its-39)
nmod:to(brought-37, goal-40)
nsubjpass(required-45, it-42)
auxpass(required-45, is-43)
advmod(required-45, merely-44)
advcl(similar-14, required-45)
mark(exists-53, that-46)
mark(s-50, for-47)
det(state-49, every-48)
nsubj(s-50, state-49)
advcl(exists-53, s-50)
expl(exists-53, there-52)
ccomp(required-45, exists-53)
det(u-56, a-54)
amod(u-56, variable-55)
dobj(exists-53, u-56)
nsubjpass(brought-60, u-56)
ref(u-56, that-57)
aux(brought-60, can-58)
auxpass(brought-60, be-59)
acl:relcl(u-56, brought-60)
case(goal-63, to-61)
nmod:poss(goal-63, its-62)
nmod:to(brought-60, goal-63)

(ROOT
  (S
    (S
      (NP
        (NP (DT The) (JJ second) (NN extension))
        (PP (IN of)
          (NP (NN width))))
      (VP (VBZ is)
        (VP (VBG Hamming)
          (NP (NN width)))))
    (: ;)
    (S
      (NP
        (NP (DT the) (NN definition))
        (PP (IN of)
          (NP (NNP Hamming) (NN width) (NN k))))
      (VP (VBZ is)
        (ADJP (JJ similar)
          (PP (TO to)
            (NP
              (NP (DT the) (NN definition))
              (PP (IN of)
                (NP (NN width) (NN k))))))
        (, ,)
        (SBAR (IN except)
          (S
            (SBAR
              (WHADVP (WRB when))
              (S
                (VP (VBG trying)
                  (S
                    (VP (TO to)
                      (VP (VB bring)
                        (NP (DT a) (NN variable))
                        (PP (IN into)
                          (NP (PRP$ its) (NN goal) (NN state)))))))))
            (, ,)
            (NP (PRP we))
            (VP (VBP do) (RB not)
              (ADVP (RB only))
              (VP (VB consider)
                (NP
                  (NP (NNS plans))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VBP change)
                        (NP
                          (NP
                            (QP (DT no) (JJR more) (IN than) (CD k))
                            (NNS variables))
                          (, ,)
                          (CC but)
                          (NP
                            (NP (DT the)
                              (ADJP (RBR more) (JJ general))
                              (NN class))
                            (PP (IN of)
                              (NP
                                (NP (NNS plans))
                                (SBAR
                                  (WHNP (WDT that))
                                  (S
                                    (VP (VBP stay)
                                      (PP (IN within)
                                        (S
                                          (VP (VBG Hamming)
                                            (NP (NN distance) (NN k))
                                            (PP (IN from)
                                              (NP (DT the) (NN start) (NN state)))))))))))))))))))))))
    (. .)))

det(extension-3, The-1)
amod(extension-3, second-2)
nsubj(Hamming-7, extension-3)
case(width-5, of-4)
nmod:of(extension-3, width-5)
aux(Hamming-7, is-6)
root(ROOT-0, Hamming-7)
dobj(Hamming-7, width-8)
det(definition-11, the-10)
nsubj(similar-17, definition-11)
case(k-15, of-12)
compound(k-15, Hamming-13)
compound(k-15, width-14)
nmod:of(definition-11, k-15)
cop(similar-17, is-16)
parataxis(Hamming-7, similar-17)
case(definition-20, to-18)
det(definition-20, the-19)
nmod:to(similar-17, definition-20)
case(k-23, of-21)
compound(k-23, width-22)
nmod:of(definition-20, k-23)
mark(consider-41, except-25)
advmod(trying-27, when-26)
advcl(consider-41, trying-27)
mark(bring-29, to-28)
xcomp(trying-27, bring-29)
det(variable-31, a-30)
dobj(bring-29, variable-31)
case(state-35, into-32)
nmod:poss(state-35, its-33)
compound(state-35, goal-34)
nmod:into(bring-29, state-35)
nsubj(consider-41, we-37)
aux(consider-41, do-38)
neg(consider-41, not-39)
advmod(consider-41, only-40)
advcl(similar-17, consider-41)
dobj(consider-41, plans-42)
nsubj(change-44, plans-42)
ref(plans-42, that-43)
acl:relcl(plans-42, change-44)
advmod(k-48, no-45)
advmod(k-48, more-46)
mwe(more-46, than-47)
nummod(variables-49, k-48)
dobj(change-44, variables-49)
cc(variables-49, but-51)
det(class-55, the-52)
advmod(general-54, more-53)
amod(class-55, general-54)
dobj(change-44, class-55)
conj:but(variables-49, class-55)
case(plans-57, of-56)
nmod:of(class-55, plans-57)
nsubj(stay-59, plans-57)
ref(plans-57, that-58)
acl:relcl(plans-57, stay-59)
mark(Hamming-61, within-60)
advcl(stay-59, Hamming-61)
compound(k-63, distance-62)
dobj(Hamming-61, k-63)
case(state-67, from-64)
det(state-67, the-65)
compound(state-67, start-66)
nmod:from(Hamming-61, state-67)

(ROOT
  (S
    (PP (IN In)
      (NP (NN fact)))
    (, ,)
    (NP
      (NP (DT each))
      (PP (IN of)
        (NP (DT these) (CD two) (NNS extensions))))
    (VP (VBZ is)
      (VP (VBN motivated)
        (PP (IN by)
          (S
            (VP (VBG giving)
              (SBAR
                (S
                  (NP
                    (NP (DT a) (NN domain))
                    (SBAR
                      (WHNP (WDT that))
                      (S
                        (VP
                          (VP (VBZ does) (RB not)
                            (VP (VB have)
                              (VP (VBN bounded)
                                (NP (NN width)))))
                          (, ,)
                          (CC but)
                          (VP (VBZ does))))))
                  (VP (VBP have)
                    (VP (VBN bounded)
                      (NP
                        (NP (JJ persistent) (NN width))
                        (CC or)
                        (NP (JJ bounded) (VBG Hamming) (NN width))))))))))))
    (. .)))

case(fact-2, In-1)
nmod:in(motivated-10, fact-2)
nsubjpass(motivated-10, each-4)
case(extensions-8, of-5)
det(extensions-8, these-6)
nummod(extensions-8, two-7)
nmod:of(each-4, extensions-8)
auxpass(motivated-10, is-9)
root(ROOT-0, motivated-10)
mark(giving-12, by-11)
advcl(motivated-10, giving-12)
det(domain-14, a-13)
nsubj(bounded-19, domain-14)
nsubj(does-23, domain-14)
nsubj(bounded-25, domain-14)
ref(domain-14, that-15)
aux(bounded-19, does-16)
neg(bounded-19, not-17)
aux(bounded-19, have-18)
acl:relcl(domain-14, bounded-19)
dobj(bounded-19, width-20)
cc(bounded-19, but-22)
acl:relcl(domain-14, does-23)
conj:but(bounded-19, does-23)
aux(bounded-25, have-24)
ccomp(giving-12, bounded-25)
amod(width-27, persistent-26)
dobj(bounded-25, width-27)
cc(width-27, or-28)
amod(width-31, bounded-29)
amod(width-31, Hamming-30)
dobj(bounded-25, width-31)
conj:or(width-27, width-31)

(ROOT
  (S
    (PP (IN In)
      (NP (NN total)))
    (, ,)
    (NP (PRP we))
    (VP (VBP obtain)
      (NP
        (NP (CD four) (NNS measures))
        (PP (IN of)
          (NP
            (NP
              (NP
                (NP (NN complexity))
                (PP (IN for)
                  (NP (NN planning) (NNS instances))))
              (: :)
              (NP
                (NP (NN width))
                (, ,)
                (NP (JJ persistent) (NN width))
                (, ,)
                (NP (NNP Hamming) (NNP width))
                (, ,)
                (CC and)
                (NP (JJ persistent) (NN Hamming) (NN width))))
            (, ,)
            (SBAR
              (WHNP
                (NP (DT the) (JJ latter))
                (WHPP (IN of)
                  (WHNP (WDT which))))
              (S
                (VP (VBZ is)
                  (NP
                    (NP (DT the) (JJ natural) (NN unification))
                    (PP (IN of)
                      (NP (JJ persistent) (NN width)
                        (CC and)
                        (NN Hamming) (NN width)))))))))))
    (. .)))

case(total-2, In-1)
nmod:in(obtain-5, total-2)
nsubj(obtain-5, we-4)
root(ROOT-0, obtain-5)
nummod(measures-7, four-6)
dobj(obtain-5, measures-7)
case(complexity-9, of-8)
nmod:of(measures-7, complexity-9)
nmod:of(latter-28, complexity-9)
case(instances-12, for-10)
compound(instances-12, planning-11)
nmod:for(complexity-9, instances-12)
dep(complexity-9, width-14)
amod(width-17, persistent-16)
dep(complexity-9, width-17)
conj:and(width-14, width-17)
compound(width-20, Hamming-19)
dep(complexity-9, width-20)
conj:and(width-14, width-20)
cc(width-14, and-22)
amod(width-25, persistent-23)
compound(width-25, Hamming-24)
dep(complexity-9, width-25)
conj:and(width-14, width-25)
det(latter-28, the-27)
nsubj(unification-34, latter-28)
case(which-30, of-29)
ref(complexity-9, which-30)
cop(unification-34, is-31)
det(unification-34, the-32)
amod(unification-34, natural-33)
acl:relcl(complexity-9, unification-34)
case(width-37, of-35)
amod(width-37, persistent-36)
nmod:of(unification-34, width-37)
cc(width-37, and-38)
compound(width-40, Hamming-39)
nmod:of(unification-34, width-40)
conj:and(width-37, width-40)

(ROOT
  (S
    (ADVP (RB Again))
    (, ,)
    (NP (PRP we))
    (VP (VBP show)
      (SBAR (IN that)
        (S
          (SBAR (IN if)
            (S
              (NP
                (NP (DT some) (NN set))
                (PP (IN of)
                  (NP (NN planning) (NNS instances))))
              (VP (VBZ is)
                (VP (VBN bounded)
                  (PP (IN with)
                    (NP (NN respect)))
                  (PP (TO to)
                    (NP
                      (NP (CD one))
                      (PP (IN of)
                        (NP (DT these) (NNS measures)))))))))
          (, ,)
          (NP (RB then) (DT the) (NN set))
          (VP (VBZ is)
            (NP (JJ polynomial-time) (NN tractable))))))
    (. .)))

advmod(show-4, Again-1)
nsubj(show-4, we-3)
root(ROOT-0, show-4)
mark(tractable-27, that-5)
mark(bounded-13, if-6)
det(set-8, some-7)
nsubjpass(bounded-13, set-8)
case(instances-11, of-9)
compound(instances-11, planning-10)
nmod:of(set-8, instances-11)
auxpass(bounded-13, is-12)
advcl(tractable-27, bounded-13)
case(respect-15, with-14)
nmod:with(bounded-13, respect-15)
case(one-17, to-16)
nmod:to(bounded-13, one-17)
case(measures-20, of-18)
det(measures-20, these-19)
nmod:of(one-17, measures-20)
advmod(set-24, then-22)
det(set-24, the-23)
nsubj(tractable-27, set-24)
cop(tractable-27, is-25)
amod(tractable-27, polynomial-time-26)
ccomp(show-4, tractable-27)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBZ remark)
      (SBAR (IN that)
        (S
          (NP (JJ persistent) (NN Hamming) (NN width))
          (VP (VBZ is)
            (NP (DT the)
              (VP
                (ADJP (`` ``)
                  (ADJP (RBS most) (JJ powerful))
                  ('' '')
                  (PP (IN of)
                    (NP
                      (NP (DT these) (NNS measures))
                      (PP (IN in)
                        (NP (DT the) (NN sense))))))
                (SBAR (IN that)
                  (S
                    (NP
                      (NP (DT the) (NNS conditions))
                      (PP (IN of)
                        (NP
                          (NP (JJ bounded) (NN width))
                          (, ,)
                          (NP (JJ bounded) (JJ persistent) (NN width))
                          (, ,)
                          (CC and)
                          (NP
                            (NP (JJ bounded) (NN Hamming) (NN width))
                            (NP (DT each))))))
                    (VP (VBP imply)
                      (NP
                        (NP (DT the) (NN condition))
                        (PP (IN of)
                          (NP (JJ bounded) (JJ persistent) (NN Hamming))))))))
              (NN width))))))
    (. .)))

nsubj(remark-2, We-1)
root(ROOT-0, remark-2)
mark(width-42, that-3)
amod(width-6, persistent-4)
compound(width-6, Hamming-5)
nsubj(width-42, width-6)
cop(width-42, is-7)
det(width-42, the-8)
advmod(powerful-11, most-10)
dep(width-42, powerful-11)
case(measures-15, of-13)
det(measures-15, these-14)
nmod:of(powerful-11, measures-15)
case(sense-18, in-16)
det(sense-18, the-17)
nmod:in(measures-15, sense-18)
mark(imply-35, that-19)
det(conditions-21, the-20)
nsubj(imply-35, conditions-21)
case(width-24, of-22)
amod(width-24, bounded-23)
nmod:of(conditions-21, width-24)
amod(width-28, bounded-26)
amod(width-28, persistent-27)
nmod:of(conditions-21, width-28)
conj:and(width-24, width-28)
cc(width-24, and-30)
amod(width-33, bounded-31)
compound(width-33, Hamming-32)
nmod:of(conditions-21, width-33)
conj:and(width-24, width-33)
dep(width-33, each-34)
ccomp(powerful-11, imply-35)
det(condition-37, the-36)
dobj(imply-35, condition-37)
case(Hamming-41, of-38)
amod(Hamming-41, bounded-39)
amod(Hamming-41, persistent-40)
nmod:of(condition-37, Hamming-41)
ccomp(remark-2, width-42)

(ROOT
  (S
    (PP (IN After)
      (S
        (VP (VBG introducing)
          (NP
            (NP (DT these) (NNS measures))
            (, ,)
            (NP (PRP$ their) (JJ corresponding) (NNS algorithms))
            (, ,)
            (CC and)
            (NP (NNS examples))))))
    (, ,)
    (NP (PRP we))
    (VP (VB investigate)
      (NP
        (NP (DT the) (NNS robustness))
        (PP (IN of)
          (NP (DT these) (NNS measures)))))
    (. .)))

mark(introducing-2, After-1)
advcl(investigate-14, introducing-2)
det(measures-4, these-3)
dobj(introducing-2, measures-4)
nmod:poss(algorithms-8, their-6)
amod(algorithms-8, corresponding-7)
dobj(introducing-2, algorithms-8)
conj:and(measures-4, algorithms-8)
cc(measures-4, and-10)
dobj(introducing-2, examples-11)
conj:and(measures-4, examples-11)
nsubj(investigate-14, we-13)
root(ROOT-0, investigate-14)
det(robustness-16, the-15)
dobj(investigate-14, robustness-16)
case(measures-19, of-17)
det(measures-19, these-18)
nmod:of(robustness-16, measures-19)

(ROOT
  (S
    (ADVP (RB First))
    (, ,)
    (NP (PRP we))
    (VP (VB establish)
      (SBAR (IN that)
        (S
          (NP (PRP$ our) (NN width))
          (VP (VBZ measures)
            (NP
              (NP (NN exhibit) (NN action) (NN monotonicity))
              (, ,)
              (SBAR
                (WHNP (WDT which))
                (S
                  (ADVP (RB roughly))
                  (VP (VBZ means)
                    (SBAR (IN that)
                      (S
                        (S
                          (VP (VBG adding)
                            (NP (NNS actions))
                            (PP (TO to)
                              (NP (DT a) (NN planning) (NN instance)))))
                        (VP (VBZ does) (RB not)
                          (VP (VB increase)
                            (NP (DT the) (NN width))))))))))))))
    (. .)))

advmod(establish-4, First-1)
nsubj(establish-4, we-3)
root(ROOT-0, establish-4)
mark(measures-8, that-5)
nmod:poss(width-7, our-6)
nsubj(measures-8, width-7)
ccomp(establish-4, measures-8)
compound(monotonicity-11, exhibit-9)
compound(monotonicity-11, action-10)
dobj(measures-8, monotonicity-11)
nsubj(means-15, monotonicity-11)
ref(monotonicity-11, which-13)
advmod(means-15, roughly-14)
acl:relcl(monotonicity-11, means-15)
mark(increase-25, that-16)
csubj(increase-25, adding-17)
dobj(adding-17, actions-18)
case(instance-22, to-19)
det(instance-22, a-20)
compound(instance-22, planning-21)
nmod:to(adding-17, instance-22)
aux(increase-25, does-23)
neg(increase-25, not-24)
ccomp(means-15, increase-25)
det(width-27, the-26)
dobj(increase-25, width-27)

(ROOT
  (S
    (S
      (VP (VB Put)
        (ADVP (RB differently))
        (, ,)
        (PP (IN for)
          (NP
            (NP (DT each))
            (PP (IN of)
              (NP (PRP$ our) (JJ tractable) (NNS classes)))))))
    (, ,)
    (NP
      (NP (DT the) (NN addition))
      (PP (IN of)
        (NP (NNS actions))))
    (VP (VBZ renders)
      (S
        (NP (DT an) (NN instance))
        (ADJP (RBR more) (JJ likely)
          (S
            (VP (TO to)
              (VP (VB fall)
                (PP (IN into)
                  (NP (DT the) (JJ tractable) (NN class)))))))))
    (. .)))

ccomp(renders-15, Put-1)
advmod(Put-1, differently-2)
case(each-5, for-4)
nmod:for(Put-1, each-5)
case(classes-9, of-6)
nmod:poss(classes-9, our-7)
amod(classes-9, tractable-8)
nmod:of(each-5, classes-9)
det(addition-12, the-11)
nsubj(renders-15, addition-12)
case(actions-14, of-13)
nmod:of(addition-12, actions-14)
root(ROOT-0, renders-15)
det(instance-17, an-16)
nsubj(likely-19, instance-17)
nsubj:xsubj(fall-21, instance-17)
advmod(likely-19, more-18)
xcomp(renders-15, likely-19)
mark(fall-21, to-20)
xcomp(likely-19, fall-21)
case(class-25, into-22)
det(class-25, the-23)
amod(class-25, tractable-24)
nmod:into(fall-21, class-25)

(ROOT
  (S
    (S
      (NP (DT The) (VBG underlying) (NN intuition))
      (ADVP (RB here))
      (VP (VBZ is)
        (SBAR (IN that)
          (S
            (NP (PRP$ our) (NN width) (NNS measures))
            (VP (VBP are)
              (VP (VBN concerned)
                (PP (IN with)
                  (NP
                    (NP (DT the) (NN existence))
                    (PP (IN of)
                      (NP
                        (NP (JJ certain) (NNS types))
                        (PP (IN of)
                          (NP (NNS plans)))))))))))))
    (, ,)
    (CC and)
    (S
      (S
        (VP (VBG adding)
          (NP (NNS actions))
          (PP (TO to)
            (NP (DT an) (NN instance)))))
      (ADVP (RB certainly))
      (VP (VBZ preserves)
        (NP (JJ such) (NN existence))))
    (. .)))

det(intuition-3, The-1)
amod(intuition-3, underlying-2)
nsubj(is-5, intuition-3)
advmod(is-5, here-4)
root(ROOT-0, is-5)
mark(concerned-11, that-6)
nmod:poss(measures-9, our-7)
compound(measures-9, width-8)
nsubjpass(concerned-11, measures-9)
auxpass(concerned-11, are-10)
ccomp(is-5, concerned-11)
case(existence-14, with-12)
det(existence-14, the-13)
nmod:with(concerned-11, existence-14)
case(types-17, of-15)
amod(types-17, certain-16)
nmod:of(existence-14, types-17)
case(plans-19, of-18)
nmod:of(types-17, plans-19)
cc(is-5, and-21)
csubj(preserves-28, adding-22)
dobj(adding-22, actions-23)
case(instance-26, to-24)
det(instance-26, an-25)
nmod:to(adding-22, instance-26)
advmod(preserves-28, certainly-27)
conj:and(is-5, preserves-28)
amod(existence-30, such-29)
dobj(preserves-28, existence-30)

(ROOT
  (S
    (NP (PRP We))
    (VP (MD would)
      (VP (VB like)
        (S
          (VP (TO to)
            (VP (VB emphasize)
              (SBAR (IN that)
                (S
                  (NP
                    (NP (JJ tractable) (NNS classes))
                    (PP (VBN based)
                      (PP (IN on)
                        (NP
                          (NP (DT the) (`` ``) (NNS sparseness) ('' ''))
                          (PP (IN of)
                            (NP (DT the) (JJ causal) (NN graph)))))))
                  (VP (VBP do) (RB not)
                    (VP (VB exhibit)
                      (NP (NN action))
                      (ADVP (RB monotonicity)))))))))))
    (. .)))

nsubj(like-3, We-1)
nsubj:xsubj(emphasize-5, We-1)
aux(like-3, would-2)
root(ROOT-0, like-3)
mark(emphasize-5, to-4)
xcomp(like-3, emphasize-5)
mark(exhibit-21, that-6)
amod(classes-8, tractable-7)
nsubj(exhibit-21, classes-8)
case(sparseness-13, based-9)
mwe(based-9, on-10)
det(sparseness-13, the-11)
nmod:based_on(classes-8, sparseness-13)
case(graph-18, of-15)
det(graph-18, the-16)
amod(graph-18, causal-17)
nmod:of(sparseness-13, graph-18)
aux(exhibit-21, do-19)
neg(exhibit-21, not-20)
ccomp(emphasize-5, exhibit-21)
dobj(exhibit-21, action-22)
advmod(exhibit-21, monotonicity-23)

(ROOT
  (S
    (PP (IN For)
      (NP (NN example)))
    (, ,)
    (NP
      (PRN (-LRB- -LRB-)
        (NP
          (NP (NNP Brafman))
          (CC &)
          (NP (NNP Domshlak) (CD 2006)))
        (-RRB- -RRB-)))
    (VP (VB present)
      (NP
        (NP (DT a) (JJ tractability) (NN result))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ applies)
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP
                    (NP (DT the) (NN treewidth))
                    (PP (IN of)
                      (NP (DT the) (JJ causal) (NN graph))))
                  (VP (VBZ is)
                    (VP (VBN bounded))))))))))
    (: ;)
    (S
      (ADVP (RB however))
      (, ,)
      (S
        (VP (VBG adding)
          (NP (NNS actions))
          (PP (TO to)
            (NP (DT a) (NN planning)))))
      (NP (NN problem))
      (VP (MD can)
        (ADVP (RB only))
        (VP (VB enlarge)
          (NP
            (NP (DT the) (NN edge) (NN set))
            (PP (IN of)
              (NP
                (NP (DT the) (JJ causal) (NN graph))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (PP (IN in)
                      (NP (NN turn)))
                    (VP (VBZ increases)
                      (NP (DT the) (NN treewidth)))))))))))
    (. .)))

case(example-2, For-1)
nmod:for(present-10, example-2)
nsubj(present-10, Brafman-5)
cc(Brafman-5, &-6)
conj:&(Brafman-5, Domshlak-7)
nsubj(present-10, Domshlak-7)
nummod(Domshlak-7, 2006-8)
root(ROOT-0, present-10)
det(result-13, a-11)
amod(result-13, tractability-12)
dobj(present-10, result-13)
nsubj(applies-15, result-13)
ref(result-13, that-14)
acl:relcl(result-13, applies-15)
advmod(bounded-24, when-16)
det(treewidth-18, the-17)
nsubjpass(bounded-24, treewidth-18)
case(graph-22, of-19)
det(graph-22, the-20)
amod(graph-22, causal-21)
nmod:of(treewidth-18, graph-22)
auxpass(bounded-24, is-23)
advcl(applies-15, bounded-24)
advmod(enlarge-36, however-26)
dep(enlarge-36, adding-28)
dobj(adding-28, actions-29)
case(planning-32, to-30)
det(planning-32, a-31)
nmod:to(adding-28, planning-32)
nsubj(enlarge-36, problem-33)
aux(enlarge-36, can-34)
advmod(enlarge-36, only-35)
parataxis(present-10, enlarge-36)
det(set-39, the-37)
compound(set-39, edge-38)
dobj(enlarge-36, set-39)
case(graph-43, of-40)
det(graph-43, the-41)
amod(graph-43, causal-42)
nmod:of(set-39, graph-43)
nsubj(increases-48, graph-43)
ref(graph-43, which-45)
case(turn-47, in-46)
nmod:in(increases-48, turn-47)
acl:relcl(graph-43, increases-48)
det(treewidth-50, the-49)
dobj(increases-48, treewidth-50)

(ROOT
  (S
    (ADVP (RB Indeed))
    (, ,)
    (NP
      (NP (JJ tractable) (NNS classes))
      (PP (IN of)
        (NP
          (NP (DT this) (NN form) (NN exhibit) (NN action) (NN non-monotonicity))
          (: :)
          (NP
            (NP (DT the) (NN removal))
            (PP (IN of)
              (NP (NNS actions)))))))
    (VP (VBZ renders)
      (S
        (NP (DT an) (NN instance))
        (ADJP (RBR more) (JJ likely)
          (S
            (VP (TO to)
              (VP (VB fall)
                (PP (IN into)
                  (NP (DT the) (NN class)))))))))
    (. .)))

advmod(renders-16, Indeed-1)
amod(classes-4, tractable-3)
nsubj(renders-16, classes-4)
case(non-monotonicity-10, of-5)
det(non-monotonicity-10, this-6)
compound(non-monotonicity-10, form-7)
compound(non-monotonicity-10, exhibit-8)
compound(non-monotonicity-10, action-9)
nmod:of(classes-4, non-monotonicity-10)
det(removal-13, the-12)
dep(non-monotonicity-10, removal-13)
case(actions-15, of-14)
nmod:of(removal-13, actions-15)
root(ROOT-0, renders-16)
det(instance-18, an-17)
nsubj(likely-20, instance-18)
nsubj:xsubj(fall-22, instance-18)
advmod(likely-20, more-19)
xcomp(renders-16, likely-20)
mark(fall-22, to-21)
xcomp(likely-20, fall-22)
case(class-25, into-23)
det(class-25, the-24)
nmod:into(fall-22, class-25)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB also))
    (VP
      (VP (VB define))
      (CC and)
      (VP (VB study)
        (NP
          (NP (DT a) (NN notion))
          (PP (IN of)
            (NP (NN reformulation))))))
    (. .)))

nsubj(define-3, We-1)
nsubj(study-5, We-1)
advmod(define-3, also-2)
root(ROOT-0, define-3)
cc(define-3, and-4)
conj:and(define-3, study-5)
det(notion-7, a-6)
dobj(study-5, notion-7)
case(reformulation-9, of-8)
nmod:of(notion-7, reformulation-9)

(ROOT
  (S
    (S
      (NP (PRP We))
      (ADVP (RB prove-roughly))
      (VP (VB speaking-that)
        (SBAR (IN if)
          (S
            (NP
              (NP (DT a) (NN set))
              (PP (IN of)
                (S
                  (VP (VBG planning)
                    (NP (NNP instances) (NNP C))))))
            (VP (VBZ has)
              (NP (JJ bounded) (JJ persistent) (NN Hamming)
                (PRN (-LRB- -LRB-)
                  (NP (NNP PH))
                  (-RRB- -RRB-))
                (NN width)))))))
    (, ,) (RB then)
    (S
      (NP
        (NP (DT any) (NN reformulation))
        (PP (IN of)
          (NP (DT this) (NN set))))
      (ADVP (RB also))
      (VP (VBZ has)
        (VP (VBN bounded)
          (NP (NNP PH) (NNP width)))))
    (. .)))

nsubj(speaking-that-3, We-1)
advmod(speaking-that-3, prove-roughly-2)
root(ROOT-0, speaking-that-3)
mark(has-11, if-4)
det(set-6, a-5)
nsubj(has-11, set-6)
mark(planning-8, of-7)
acl(set-6, planning-8)
compound(C-10, instances-9)
dobj(planning-8, C-10)
advcl(speaking-that-3, has-11)
amod(width-18, bounded-12)
amod(width-18, persistent-13)
compound(width-18, Hamming-14)
appos(width-18, PH-16)
dobj(has-11, width-18)
advmod(bounded-28, then-20)
det(reformulation-22, any-21)
nsubj(bounded-28, reformulation-22)
case(set-25, of-23)
det(set-25, this-24)
nmod:of(reformulation-22, set-25)
advmod(bounded-28, also-26)
aux(bounded-28, has-27)
parataxis(speaking-that-3, bounded-28)
compound(width-30, PH-29)
dobj(bounded-28, width-30)

(ROOT
  (S
    (INTJ (DT That) (VBZ is))
    (, ,)
    (S
      (NP
        (NP (DT the) (NN concept))
        (PP (IN of)
          (NP (JJ bounded) (NNP PH) (NN width))))
      (VP (VBZ is)
        (ADJP (JJ robust)
          (PP (IN with)
            (NP (NN respect))))
        (PP (TO to)
          (NP (NN reformulation)))))
    (. .)))

discourse(robust-11, That-1)
mwe(That-1, is-2)
det(concept-5, the-4)
nsubj(robust-11, concept-5)
case(width-9, of-6)
amod(width-9, bounded-7)
compound(width-9, PH-8)
nmod:of(concept-5, width-9)
cop(robust-11, is-10)
root(ROOT-0, robust-11)
case(respect-13, with-12)
nmod:with(robust-11, respect-13)
case(reformulation-15, to-14)
nmod:to(robust-11, reformulation-15)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP
        (VP (VB give)
          (NP
            (NP (DT a) (JJ natural) (NN definition))
            (PP (IN of)
              (NP (DT the) (JJ binary) (NN formulation))))
          (NP
            (NP (NNP B) (-LRB- -LRB-) (NNP -RRB-))
            (PP (IN of)
              (NP (DT a) (JJ multi-valued) (NN instance)))))
        (CC and)
        (VP (VB show)
          (SBAR (IN that)
            (S
              (PP (IN for)
                (NP
                  (NP (DT any) (NN instance))
                  (, ,)
                  (NP (DT the) (JJ binary) (NN formulation) (NNP B) (NNP -LRB-) (-RRB- -RRB-))
                  (CC and)
                  (NP (DT the) (NN instance))))
              (NP (PRP itself))
              (VP (VBP are)
                (NP
                  (NP (NNS reformulations))
                  (PP (IN of)
                    (NP (DT each) (JJ other))))))))))
    (, ,)
    (CC and)
    (S
      (NP (RB hence) (DT the) (JJ robustness) (NN result))
      (VP (VBZ applies)))
    (. .)))

nsubj(give-2, We-1)
nsubj(show-18, We-1)
root(ROOT-0, give-2)
det(definition-5, a-3)
amod(definition-5, natural-4)
iobj(give-2, definition-5)
case(formulation-9, of-6)
det(formulation-9, the-7)
amod(formulation-9, binary-8)
nmod:of(definition-5, formulation-9)
compound(-RRB--12, B-10)
dobj(give-2, -RRB--12)
case(instance-16, of-13)
det(instance-16, a-14)
amod(instance-16, multi-valued-15)
nmod:of(-RRB--12, instance-16)
cc(give-2, and-17)
conj:and(give-2, show-18)
mark(reformulations-35, that-19)
case(instance-22, for-20)
det(instance-22, any-21)
nmod:for(reformulations-35, instance-22)
det(-LRB--28, the-24)
amod(-LRB--28, binary-25)
compound(-LRB--28, formulation-26)
compound(-LRB--28, B-27)
conj:and(instance-22, -LRB--28)
nmod:for(reformulations-35, -LRB--28)
cc(instance-22, and-30)
det(instance-32, the-31)
conj:and(instance-22, instance-32)
nmod:for(reformulations-35, instance-32)
nsubj(reformulations-35, itself-33)
cop(reformulations-35, are-34)
ccomp(show-18, reformulations-35)
case(other-38, of-36)
det(other-38, each-37)
nmod:of(reformulations-35, other-38)
cc(give-2, and-40)
advmod(result-44, hence-41)
det(result-44, the-42)
amod(result-44, robustness-43)
nsubj(applies-45, result-44)
conj:and(give-2, applies-45)

(ROOT
  (S
    (ADVP (RB Finally))
    (, ,)
    (NP (PRP we))
    (VP (VBP study)
      (NP
        (NP (CD two) (NNS types))
        (PP (IN of)
          (NP (NN composition) (NNS operations))))
      (, ,)
      (S
        (VP (VBG showing)
          (SBAR (IN that)
            (S (, ,)
              (PP (IN for)
                (NP (JJ various) (NN width) (NNS measures)))
              (, ,)
              (NP
                (NP (DT the) (NN set))
                (PP (IN of)
                  (NP
                    (NP (NNS instances))
                    (VP (VBG having)
                      (NP (NN width) (NN k))))))
              (VP (VBZ is)
                (VP (VBN closed)
                  (PP (IN under)
                    (NP (DT these) (NN composition) (NNS operations))))))))))
    (. .)))

advmod(study-4, Finally-1)
nsubj(study-4, we-3)
root(ROOT-0, study-4)
nummod(types-6, two-5)
dobj(study-4, types-6)
case(operations-9, of-7)
compound(operations-9, composition-8)
nmod:of(types-6, operations-9)
advcl(study-4, showing-11)
mark(closed-27, that-12)
case(measures-17, for-14)
amod(measures-17, various-15)
compound(measures-17, width-16)
nmod:for(closed-27, measures-17)
det(set-20, the-19)
nsubjpass(closed-27, set-20)
case(instances-22, of-21)
nmod:of(set-20, instances-22)
acl(instances-22, having-23)
compound(k-25, width-24)
dobj(having-23, k-25)
auxpass(closed-27, is-26)
ccomp(showing-11, closed-27)
case(operations-31, under-28)
det(operations-31, these-29)
compound(operations-31, composition-30)
nmod:under(closed-27, operations-31)

(ROOT
  (S
    (NP (NNP Related))
    (VP (VBP work))
    (. .)))

nsubj(work-2, Related-1)
root(ROOT-0, work-2)

(ROOT
  (S
    (S
      (NP
        (NP (PRP$ Our) (NNS notions))
        (PP (IN of)
          (NP (NN width))))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN viewed)
            (PP (IN as)
              (NP
                (NP (NNS elaborations))
                (PP (IN of)
                  (NP
                    (NP (DT the) (NN notion))
                    (PP (IN of)
                      (NP
                        (NP (JJ subgoal) (NN serializability))
                        (PRN (-LRB- -LRB-)
                          (NP (NNP Korf) (CD 1987))
                          (-RRB- -RRB-))))))))))))
    (, ,)
    (CC and)
    (S
      (NP (PRP we))
      (VP (VBP believe)
        (SBAR (IN that)
          (S
            (NP (PRP it))
            (VP (MD may)
              (VP (VB be)
                (ADJP (JJ didactic)
                  (S
                    (VP (TO to)
                      (VP (VB contrast)
                        (NP (PRP$ our) (NNS notions))
                        (PP (IN with)
                          (NP (DT this) (NN one)))))))))))))
    (. .)))

nmod:poss(notions-2, Our-1)
nsubjpass(viewed-7, notions-2)
case(width-4, of-3)
nmod:of(notions-2, width-4)
aux(viewed-7, can-5)
auxpass(viewed-7, be-6)
root(ROOT-0, viewed-7)
case(elaborations-9, as-8)
nmod:as(viewed-7, elaborations-9)
case(notion-12, of-10)
det(notion-12, the-11)
nmod:of(elaborations-9, notion-12)
case(serializability-15, of-13)
amod(serializability-15, subgoal-14)
nmod:of(notion-12, serializability-15)
appos(serializability-15, Korf-17)
nummod(Korf-17, 1987-18)
cc(viewed-7, and-21)
nsubj(believe-23, we-22)
conj:and(viewed-7, believe-23)
mark(didactic-28, that-24)
nsubj(didactic-28, it-25)
nsubj:xsubj(contrast-30, it-25)
aux(didactic-28, may-26)
cop(didactic-28, be-27)
ccomp(believe-23, didactic-28)
mark(contrast-30, to-29)
xcomp(didactic-28, contrast-30)
nmod:poss(notions-32, our-31)
dobj(contrast-30, notions-32)
case(one-35, with-33)
det(one-35, this-34)
nmod:with(contrast-30, one-35)

(ROOT
  (S
    (NP
      (NP (DT A) (NN set))
      (PP (IN of)
        (NP (NNS subgoals))))
    (VP (VBZ is)
      (VP (VBN defined)
        (S
          (VP (TO to)
            (VP (VB be)
              (ADJP (JJ serializable)
                (SBAR (IN if)
                  (S
                    (NP (EX there))
                    (VP (VBZ exists)
                      (NP
                        (NP (DT an) (NN ordering))
                        (PP (IN of)
                          (NP (DT the) (NNS subgoals))))
                      (PP (JJ such))))))
              (SBAR (IN that)
                (S
                  (NP (PRP they))
                  (VP (MD can)
                    (VP (VB be)
                      (VP (VBN achieved)
                        (ADVP (RB sequentially))
                        (PP (IN without)
                          (S
                            (VP (VBG violating)
                              (NP (JJ previous) (NNS subgoals))
                              (PP (IN in)
                                (NP (DT the) (NN ordering))))))))))))))))
    (. .)))

det(set-2, A-1)
nsubjpass(defined-6, set-2)
nsubj:xsubj(serializable-9, set-2)
case(subgoals-4, of-3)
nmod:of(set-2, subgoals-4)
auxpass(defined-6, is-5)
root(ROOT-0, defined-6)
mark(serializable-9, to-7)
cop(serializable-9, be-8)
xcomp(defined-6, serializable-9)
mark(exists-12, if-10)
expl(exists-12, there-11)
ccomp(serializable-9, exists-12)
det(ordering-14, an-13)
dobj(exists-12, ordering-14)
case(subgoals-17, of-15)
det(subgoals-17, the-16)
nmod:of(ordering-14, subgoals-17)
advcl(exists-12, such-18)
mark(achieved-23, that-19)
nsubjpass(achieved-23, they-20)
aux(achieved-23, can-21)
auxpass(achieved-23, be-22)
ccomp(serializable-9, achieved-23)
advmod(achieved-23, sequentially-24)
mark(violating-26, without-25)
advcl(achieved-23, violating-26)
amod(subgoals-28, previous-27)
dobj(violating-26, subgoals-28)
case(ordering-31, in-29)
det(ordering-31, the-30)
nmod:in(violating-26, ordering-31)

(ROOT
  (S
    (PP (IN In)
      (NP (NN contrast)))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (DT a) (NN planning) (NN instance))
        (VP (VBZ has)
          (NP (NN width) (NN k)))))
    (, ,)
    (NP (DT this))
    (VP (VBZ implies)
      (SBAR (IN that)
        (S
          (PP (IN for)
            (NP
              (NP (DT any) (NN ordering))
              (PP (IN of)
                (NP (PRP$ its) (NNS variables)))))
          (, ,)
          (NP (DT each) (NN variable))
          (VP (MD may)
            (VP (VB be)
              (VP (VBN brought)
                (PP (IN into)
                  (NP
                    (NP (PRP$ its) (NN goal) (NNS states))
                    (PP (IN via)
                      (NP
                        (NP (DT a) (NN plan))
                        (PP (IN of)
                          (NP (DT a) (`` ``) (JJ limited) (NN form) ('' '')))))))))))))
    (. .)))

case(contrast-2, In-1)
nmod:in(implies-13, contrast-2)
mark(has-8, if-4)
det(instance-7, a-5)
compound(instance-7, planning-6)
nsubj(has-8, instance-7)
advcl(implies-13, has-8)
compound(k-10, width-9)
dobj(has-8, k-10)
nsubj(implies-13, this-12)
root(ROOT-0, implies-13)
mark(brought-26, that-14)
case(ordering-17, for-15)
det(ordering-17, any-16)
nmod:for(brought-26, ordering-17)
case(variables-20, of-18)
nmod:poss(variables-20, its-19)
nmod:of(ordering-17, variables-20)
det(variable-23, each-22)
nsubjpass(brought-26, variable-23)
aux(brought-26, may-24)
auxpass(brought-26, be-25)
ccomp(implies-13, brought-26)
case(states-30, into-27)
nmod:poss(states-30, its-28)
compound(states-30, goal-29)
nmod:into(brought-26, states-30)
case(plan-33, via-31)
det(plan-33, a-32)
nmod:via(states-30, plan-33)
case(form-38, of-34)
det(form-38, a-35)
amod(form-38, limited-37)
nmod:of(plan-33, form-38)

(ROOT
  (S
    (S
      (ADVP (RB Here))
      (, ,)
      (SBAR (IN after)
        (S
          (NP
            (NP (DT the) (NN plan))
            (PP (IN for)
              (NP (DT each) (NN variable))))
          (VP (VBZ is)
            (VP (VBN executed)))))
      (, ,)
      (NP (PRP it))
      (VP (MD must)
        (VP (VB be)
          (NP (DT the) (NN case))
          (SBAR (IN that)
            (S
              (NP (DT all) (JJ previous) (NNS variables))
              (VP (VBP are)
                (ADVP (RB also))
                (PP (IN in)
                  (NP (PRP$ their) (NN goal) (NN state)))))))))
    (: ;)
    (S
      (ADVP (RB however))
      (, ,)
      (PP (IN in)
        (NP (NN contrast)
          (S
            (VP (TO to)
              (VP (VB subgoal)
                (ADVP (RB serializability)))))))
      (, ,)
      (NP
        (NP (DT the) (NN plan))
        (PP (IN for)
          (NP (DT a) (NN variable))))
      (VP (VBZ is)
        (VP (VBN permitted)
          (S
            (VP (TO to)
              (VP (VB change)
                (NP
                  (NP (DT the) (NN state))
                  (PP (IN of)
                    (NP (DT the) (JJ previous) (NNS variables))))
                (ADVP
                  (ADVP (RB so) (RB long))
                  (SBAR (IN as)
                    (S
                      (NP (PRP$ their) (NN goal) (NN state))
                      (VP (VBZ is)
                        (VP (VBN restored)
                          (PP (IN after)
                            (NP (DT the) (NN plan))))))))))))))
    (. .)))

advmod(case-16, Here-1)
mark(executed-10, after-3)
det(plan-5, the-4)
nsubjpass(executed-10, plan-5)
case(variable-8, for-6)
det(variable-8, each-7)
nmod:for(plan-5, variable-8)
auxpass(executed-10, is-9)
advcl(case-16, executed-10)
nsubj(case-16, it-12)
aux(case-16, must-13)
cop(case-16, be-14)
det(case-16, the-15)
root(ROOT-0, case-16)
mark(state-26, that-17)
det(variables-20, all-18)
amod(variables-20, previous-19)
nsubj(state-26, variables-20)
cop(state-26, are-21)
advmod(state-26, also-22)
case(state-26, in-23)
nmod:poss(state-26, their-24)
compound(state-26, goal-25)
ccomp(case-16, state-26)
advmod(permitted-42, however-28)
case(contrast-31, in-30)
nmod:in(permitted-42, contrast-31)
mark(subgoal-33, to-32)
acl(contrast-31, subgoal-33)
advmod(subgoal-33, serializability-34)
det(plan-37, the-36)
nsubjpass(permitted-42, plan-37)
nsubj:xsubj(change-44, plan-37)
case(variable-40, for-38)
det(variable-40, a-39)
nmod:for(plan-37, variable-40)
auxpass(permitted-42, is-41)
parataxis(case-16, permitted-42)
mark(change-44, to-43)
xcomp(permitted-42, change-44)
det(state-46, the-45)
dobj(change-44, state-46)
case(variables-50, of-47)
det(variables-50, the-48)
amod(variables-50, previous-49)
nmod:of(state-46, variables-50)
advmod(long-52, so-51)
advmod(change-44, long-52)
mark(restored-58, as-53)
nmod:poss(state-56, their-54)
compound(state-56, goal-55)
nsubjpass(restored-58, state-56)
auxpass(restored-58, is-57)
advcl(long-52, restored-58)
case(plan-61, after-59)
det(plan-61, the-60)
nmod:after(restored-58, plan-61)

(ROOT
  (S
    (ADVP (RB Also))
    (, ,)
    (SBAR (IN while)
      (S
        (NP (PRP we))
        (VP (VBP show)
          (SBAR (IN that)
            (S
              (S
                (VP (VBG having)
                  (VP (VBN bounded)
                    (ADVP (RB width))
                    (PRN (-LRB- -LRB-)
                      (PP (IN for)
                        (NP
                          (NP (DT any))
                          (PP (IN of)
                            (NP (PRP$ our) (NN width) (NNS notions)))))
                      (-RRB- -RRB-)))))
              (VP (VBZ implies)
                (ADVP (RB tractability))))))))
    (, ,)
    (NP (JJ subgoal) (NN serializability))
    (VP (VBZ is)
      (VP (VBN known)
        (S (RB not)
          (VP (TO to)
            (VP (VB guarantee)
              (ADVP (RB tractability)))))))
    (. .)))

advmod(known-24, Also-1)
mark(show-5, while-3)
nsubj(show-5, we-4)
advcl(known-24, show-5)
mark(implies-18, that-6)
aux(bounded-8, having-7)
csubj(implies-18, bounded-8)
advmod(bounded-8, width-9)
case(any-12, for-11)
dep(bounded-8, any-12)
case(notions-16, of-13)
nmod:poss(notions-16, our-14)
compound(notions-16, width-15)
nmod:of(any-12, notions-16)
ccomp(show-5, implies-18)
advmod(implies-18, tractability-19)
amod(serializability-22, subgoal-21)
nsubjpass(known-24, serializability-22)
nsubj:xsubj(guarantee-27, serializability-22)
auxpass(known-24, is-23)
root(ROOT-0, known-24)
neg(guarantee-27, not-25)
mark(guarantee-27, to-26)
xcomp(known-24, guarantee-27)
advmod(guarantee-27, tractability-28)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN vein)))
    (, ,)
    (NP (PRP one))
    (VP (MD might)
      (ADVP (RB also))
      (VP (VB mention)
        (NP
          (NP
            (NP (JJ related) (NN work))
            (PP (IN by)
              (NP (NNP Barrett)
                (CC and)
                (NNP Weld))))
          (PRN (-LRB- -LRB-)
            (NP
              (NP (NNP Barrett))
              (CC &)
              (NP (NNP Weld) (CD 1993)))
            (-RRB- -RRB-))
          (SBAR
            (WHNP (WDT which))
            (S
              (VP (VBZ refines)
                (NP
                  (NP (NNP Korf) (POS 's))
                  (NN work))))))))
    (. .)))

case(vein-3, In-1)
det(vein-3, this-2)
nmod:in(mention-8, vein-3)
nsubj(mention-8, one-5)
aux(mention-8, might-6)
advmod(mention-8, also-7)
root(ROOT-0, mention-8)
amod(work-10, related-9)
dobj(mention-8, work-10)
nsubj(refines-22, work-10)
case(Barrett-12, by-11)
nmod:by(work-10, Barrett-12)
cc(Barrett-12, and-13)
nmod:by(work-10, Weld-14)
conj:and(Barrett-12, Weld-14)
dep(work-10, Barrett-16)
cc(Barrett-16, &-17)
dep(work-10, Weld-18)
conj:&(Barrett-16, Weld-18)
nummod(Weld-18, 1993-19)
ref(work-10, which-21)
acl:relcl(work-10, refines-22)
nmod:poss(work-25, Korf-23)
case(Korf-23, 's-24)
dobj(refines-22, work-25)

(ROOT
  (S
    (NP (DT The) (JJ present) (NN paper))
    (VP (MD could)
      (VP (VB be)
        (VP (VBN viewed)
          (PP (IN as)
            (NP
              (NP (DT a) (JJ quantitative) (NN elaboration))
              (PP (IN of)
                (NP (DT the) (NNS ideas)))))
          (PP (IN in)
            (NP
              (NP (DT these) (NNS works))
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (VBZ allows)
                    (S
                      (NP (PRP one))
                      (VP (TO to)
                        (VP (VB assign)
                          (NP (DT a) (NN complexity) (NN measure))
                          (PP (TO to)
                            (NP (DT a) (VBN given) (NN planning) (NN domain))))))))))))))
    (. .)))

det(paper-3, The-1)
amod(paper-3, present-2)
nsubjpass(viewed-6, paper-3)
aux(viewed-6, could-4)
auxpass(viewed-6, be-5)
root(ROOT-0, viewed-6)
case(elaboration-10, as-7)
det(elaboration-10, a-8)
amod(elaboration-10, quantitative-9)
nmod:as(viewed-6, elaboration-10)
case(ideas-13, of-11)
det(ideas-13, the-12)
nmod:of(elaboration-10, ideas-13)
case(works-16, in-14)
det(works-16, these-15)
nmod:in(viewed-6, works-16)
nsubj(allows-18, works-16)
ref(works-16, which-17)
acl:relcl(works-16, allows-18)
dobj(allows-18, one-19)
nsubj:xsubj(assign-21, one-19)
mark(assign-21, to-20)
xcomp(allows-18, assign-21)
det(measure-24, a-22)
compound(measure-24, complexity-23)
dobj(assign-21, measure-24)
case(domain-29, to-25)
det(domain-29, a-26)
amod(domain-29, given-27)
compound(domain-29, planning-28)
nmod:to(assign-21, domain-29)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB now))
    (VP (VBP describe)
      (NP
        (NP (VBN related) (NN work))
        (PP (IN on)
          (NP (NN tractability)))))
    (. .)))

nsubj(describe-3, We-1)
advmod(describe-3, now-2)
root(ROOT-0, describe-3)
amod(work-5, related-4)
dobj(describe-3, work-5)
case(tractability-7, on-6)
nmod:on(work-5, tractability-7)

(ROOT
  (S
    (S
      (NP
        (NP (JJ Many))
        (PP (IN of)
          (NP
            (NP (DT the) (JJ early) (JJ tractability) (NNS results))
            (PP (IN on)
              (NP (NN planning))))))
      (VP (VBD focused)
        (PP (IN on)
          (NP (JJ syntactic) (NNS restrictions)))
        (PP (IN on)
          (NP
            (NP (DT the) (NN set))
            (PP (IN of)
              (NP (NNS operators)))))))
    (: ;)
    (S
      (VP (VB see)
        (PP (IN for)
          (NP
            (NP (NN example))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NNP Bylander) (CD 1994))
                (: ;)
                (NP
                  (NP
                    (NP (NNP B) (NN ackstr) (NNP om)
                      (CC &)
                      (NNP Nebel))
                    (NP (CD 1995)))
                  (: ;)
                  (NP
                    (NP (NNP Erol) (, ,) (NNP Nau) (, ,))
                    (CC &)
                    (NP (NNP Subrahmanian) (CD 1995)))))
              (-RRB- -RRB-))))))
    (. .)))

nsubj(focused-9, Many-1)
case(results-6, of-2)
det(results-6, the-3)
amod(results-6, early-4)
amod(results-6, tractability-5)
nmod:of(Many-1, results-6)
case(planning-8, on-7)
nmod:on(results-6, planning-8)
root(ROOT-0, focused-9)
case(restrictions-12, on-10)
amod(restrictions-12, syntactic-11)
nmod:on(focused-9, restrictions-12)
case(set-15, on-13)
det(set-15, the-14)
nmod:on(focused-9, set-15)
case(operators-17, of-16)
nmod:of(set-15, operators-17)
parataxis(focused-9, see-19)
case(example-21, for-20)
nmod:for(see-19, example-21)
dep(example-21, Bylander-23)
nummod(Bylander-23, 1994-24)
compound(om-28, B-26)
compound(om-28, ackstr-27)
dep(Bylander-23, om-28)
cc(om-28, &-29)
dep(Bylander-23, Nebel-30)
conj:&(om-28, Nebel-30)
dep(om-28, 1995-31)
compound(Nau-35, Erol-33)
dep(om-28, Nau-35)
cc(Nau-35, &-37)
dep(om-28, Subrahmanian-38)
conj:&(Nau-35, Subrahmanian-38)
nummod(Subrahmanian-38, 1995-39)

(ROOT
  (S
    (NP
      (NP (NNP Jonsson)
        (CC and)
        (NNP B) (NNP ackstr) (NN om))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (NNS 1994b))
          (: ;)
          (NP (NNS 1994a)))
        (-RRB- -RRB-)))
    (VP (VBD presented)
      (NP (NN complexity) (NNS results))
      (PP (VBN based)
        (PP (IN on)
          (NP
            (NP (NNS restrictions))
            (PP (IN on)
              (NP
                (NP (DT the) (JJ domain-transition) (NN graph))
                (PP (IN for)
                  (NP (DT each) (NN variable)))))))))
    (. .)))

compound(om-5, Jonsson-1)
cc(Jonsson-1, and-2)
conj:and(Jonsson-1, B-3)
compound(om-5, B-3)
compound(om-5, ackstr-4)
nsubj(presented-11, om-5)
dep(om-5, 1994b-7)
dep(1994b-7, 1994a-9)
root(ROOT-0, presented-11)
compound(results-13, complexity-12)
dobj(presented-11, results-13)
case(restrictions-16, based-14)
mwe(based-14, on-15)
advcl(presented-11, restrictions-16)
case(graph-20, on-17)
det(graph-20, the-18)
amod(graph-20, domain-transition-19)
nmod:on(restrictions-16, graph-20)
case(variable-23, for-21)
det(variable-23, each-22)
nmod:for(graph-20, variable-23)

(ROOT
  (S
    (NP
      (NP (NNP Planning))
      (PP (IN with)
        (NP (JJ unary) (NNS operators))))
    (VP (VBD was)
      (VP (VBN considered)
        (PP (IN by)
          (PRN (-LRB- -LRB-)
            (NP
              (NP (NNP Brafman))
              (CC &)
              (NP (NNP Domshlak) (CD 2003)))
            (-RRB- -RRB-)))
        (, ,)
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBD gave)
              (NP
                (NP (DT a) (NN number))
                (PP (IN of)
                  (NP (NN tractability)
                    (CC and)
                    (NN complexity) (NNS results))))
              (PP (VBN based)
                (PP (IN on)
                  (NP
                    (NP (DT the) (NN structure))
                    (PP (IN of)
                      (NP (DT the) (JJ causal) (NN graph)))))))))))
    (. .)))

nsubjpass(considered-6, Planning-1)
case(operators-4, with-2)
amod(operators-4, unary-3)
nmod:with(Planning-1, operators-4)
auxpass(considered-6, was-5)
root(ROOT-0, considered-6)
case(Brafman-9, by-7)
advcl(considered-6, Brafman-9)
cc(Brafman-9, &-10)
advcl(considered-6, Domshlak-11)
conj:&(Brafman-9, Domshlak-11)
nummod(Domshlak-11, 2003-12)
nsubj(gave-16, who-15)
ccomp(considered-6, gave-16)
det(number-18, a-17)
dobj(gave-16, number-18)
case(results-23, of-19)
compound(results-23, tractability-20)
cc(tractability-20, and-21)
conj:and(tractability-20, complexity-22)
compound(results-23, complexity-22)
nmod:of(number-18, results-23)
case(structure-27, based-24)
mwe(based-24, on-25)
det(structure-27, the-26)
advcl(gave-16, structure-27)
case(graph-31, of-28)
det(graph-31, the-29)
amod(graph-31, causal-30)
nmod:of(structure-27, graph-31)

(ROOT
  (S
    (S
      (SBAR (IN As)
        (S
          (ADVP (RB already))
          (VP (VBN mentioned))))
      (, ,) (-LRB- -LRB-)
      (NP (NNP Brafman)
        (CC &)
        (NNP Domshlak) (NNP 2006))
      (-RRB- -RRB-)
      (VP (VBD gave)
        (NP (DT a) (JJ tractability) (NN result))
        (PP (VBN based)
          (PP (IN on)
            (NP
              (NP (DT the) (NN treewidth))
              (PP (IN of)
                (NP (DT a) (JJ causal) (CD 74) (NNS graph))))))))
    (: ;)
    (S
      (NP (PRP$ their) (NN work))
      (VP (VBD followed)
        (PRN (-LRB- -LRB-)
          (NP
            (NP (NNP Amir))
            (CC &)
            (NP (NNP Engelhardt) (CD 2003)))
          (-RRB- -RRB-))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBD investigated)
              (NP
                (NP (DT a) (NN notion))
                (PP (IN of)
                  (NP (NN factoring)))))))))
    (. .)))

mark(mentioned-3, As-1)
advmod(mentioned-3, already-2)
advcl(gave-11, mentioned-3)
compound(2006-9, Brafman-6)
cc(Brafman-6, &-7)
conj:&(Brafman-6, Domshlak-8)
compound(2006-9, Domshlak-8)
nsubj(gave-11, 2006-9)
root(ROOT-0, gave-11)
det(result-14, a-12)
amod(result-14, tractability-13)
dobj(gave-11, result-14)
case(treewidth-18, based-15)
mwe(based-15, on-16)
det(treewidth-18, the-17)
advcl(gave-11, treewidth-18)
case(graph-23, of-19)
det(graph-23, a-20)
amod(graph-23, causal-21)
nummod(graph-23, 74-22)
nmod:of(treewidth-18, graph-23)
nmod:poss(work-26, their-25)
nsubj(followed-27, work-26)
parataxis(gave-11, followed-27)
dep(followed-27, Amir-29)
cc(Amir-29, &-30)
dep(followed-27, Engelhardt-31)
conj:&(Amir-29, Engelhardt-31)
nummod(Engelhardt-31, 2003-32)
nsubj(investigated-35, which-34)
ccomp(followed-27, investigated-35)
det(notion-37, a-36)
dobj(investigated-35, notion-37)
case(factoring-39, of-38)
nmod:of(notion-37, factoring-39)

(ROOT
  (S (-LRB- -LRB-)
    (NP
      (NP (NNP Helmert) (CD 2004))
      (: ;)
      (NP (CD 2006))
      (-RRB- -RRB-))
    (ADVP (RB also))
    (VP (VBZ presents)
      (NP (DT a) (JJ tractability) (NN result))
      (PP (VBN based)
        (PP (IN on)
          (NP (DT the) (JJ causal) (NN graph) (NN structure)))))
    (. .)))

nsubj(presents-8, Helmert-2)
nummod(Helmert-2, 2004-3)
dep(Helmert-2, 2006-5)
advmod(presents-8, also-7)
root(ROOT-0, presents-8)
det(result-11, a-9)
amod(result-11, tractability-10)
dobj(presents-8, result-11)
case(structure-17, based-12)
mwe(based-12, on-13)
det(structure-17, the-14)
amod(structure-17, causal-15)
compound(structure-17, graph-16)
advcl(presents-8, structure-17)

(ROOT
  (S
    (NP
      (NP (-LRB- -LRB-) (NNP Haslum) (NNP 2007) (-RRB- -RRB-))
      (PRN (-LRB- -LRB-)
        (ADVP (RB implicitly))
        (-RRB- -RRB-)))
    (VP (VBZ defines)
      (NP
        (NP (DT a) (JJ tractable) (NN class))
        (VP (VBG using)
          (NP
            (NP (DT a) (NN set))
            (PP (IN of)
              (NP (JJ multiple) (NN simplification) (NNS rules)))))))
    (. .)))

compound(2007-3, Haslum-2)
nsubj(defines-8, 2007-3)
dep(2007-3, implicitly-6)
root(ROOT-0, defines-8)
det(class-11, a-9)
amod(class-11, tractable-10)
dobj(defines-8, class-11)
acl(class-11, using-12)
det(set-14, a-13)
dobj(using-12, set-14)
case(rules-18, of-15)
amod(rules-18, multiple-16)
compound(rules-18, simplification-17)
nmod:of(set-14, rules-18)

(ROOT
  (S
    (PP (IN In)
      (NP (NN contrast)))
    (, ,)
    (ADVP (RB here))
    (NP (PRP we))
    (VP (VBP aim)
      (S
        (VP (TO to)
          (VP (VB define)
            (NP
              (NP (JJ tractable) (NNS classes))
              (PP (IN via)
                (NP (JJ single) (JJ structural) (NNS conditions))))))))
    (. .)))

case(contrast-2, In-1)
nmod:in(aim-6, contrast-2)
advmod(we-5, here-4)
nsubj(aim-6, we-5)
nsubj:xsubj(define-8, we-5)
root(ROOT-0, aim-6)
mark(define-8, to-7)
xcomp(aim-6, define-8)
amod(classes-10, tractable-9)
dobj(define-8, classes-10)
case(conditions-14, via-11)
amod(conditions-14, single-12)
amod(conditions-14, structural-13)
nmod:via(classes-10, conditions-14)

(ROOT
  (S
    (NP
      (NP (NNP Evaluation))
      (PP (IN in)
        (NP (DT these) (NNS papers))))
    (VP (VBZ is)
      (VP (VBN focused)
        (PP (IN on)
          (NP (JJ empirical) (NNS results)))))
    (. .)))

nsubjpass(focused-6, Evaluation-1)
case(papers-4, in-2)
det(papers-4, these-3)
nmod:in(Evaluation-1, papers-4)
auxpass(focused-6, is-5)
root(ROOT-0, focused-6)
case(results-9, on-7)
amod(results-9, empirical-8)
nmod:on(focused-6, results-9)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP want)
      (S
        (VP (TO to)
          (VP (VB emphasize)
            (SBAR (IN that)
              (S
                (NP (PRP we))
                (VP (VBP believe)
                  (SBAR (IN that)
                    (S
                      (NP
                        (NP (DT the) (JJ tractable) (NNS classes))
                        (PP (IN of)
                          (NP (DT the) (JJ present) (NN paper))))
                      (VP
                        (VP (VBP offer)
                          (NP (DT a) (JJ new) (NN perspective))
                          (PP (IN on)
                            (NP
                              (NP (DT the) (JJ benchmark) (NNS domains))
                              (SBAR
                                (WHNP (WDT that))
                                (S
                                  (VP (VBZ is)
                                    (ADJP (JJ different)
                                      (PP (IN from)
                                        (NP
                                          (NP (DT that))
                                          (PP (VBN given)
                                            (PP (IN in)
                                              (NP (DT the) (JJ mentioned) (NNS papers)))))))))))))
                        (, ,)
                        (CC and)
                        (VP (VBZ reveals)
                          (NP
                            (NP (DT a) (VBN shared) (JJ structural) (NN property))
                            (PP (IN among)
                              (NP (DT the) (JJ studied) (NNS domains)))
                            (SBAR
                              (WHNP (WDT that))
                              (S
                                (VP (VBZ has) (RB not)
                                  (ADVP (RB previously))
                                  (VP (VBN been)
                                    (VP (VBN identified)
                                      (PP (IN in)
                                        (NP (PRP$ its) (NN form)))
                                      (ADVP (RB here)))))))))))))))))))
    (. .)))

nsubj(want-2, We-1)
nsubj:xsubj(emphasize-4, We-1)
root(ROOT-0, want-2)
mark(emphasize-4, to-3)
xcomp(want-2, emphasize-4)
mark(believe-7, that-5)
nsubj(believe-7, we-6)
ccomp(emphasize-4, believe-7)
mark(offer-16, that-8)
det(classes-11, the-9)
amod(classes-11, tractable-10)
nsubj(offer-16, classes-11)
nsubj(reveals-36, classes-11)
case(paper-15, of-12)
det(paper-15, the-13)
amod(paper-15, present-14)
nmod:of(classes-11, paper-15)
ccomp(believe-7, offer-16)
det(perspective-19, a-17)
amod(perspective-19, new-18)
dobj(offer-16, perspective-19)
case(domains-23, on-20)
det(domains-23, the-21)
amod(domains-23, benchmark-22)
nmod:on(offer-16, domains-23)
nsubj(different-26, domains-23)
ref(domains-23, that-24)
cop(different-26, is-25)
acl:relcl(domains-23, different-26)
case(that-28, from-27)
nmod:from(different-26, that-28)
case(papers-33, given-29)
case(papers-33, in-30)
det(papers-33, the-31)
amod(papers-33, mentioned-32)
nmod:in(that-28, papers-33)
cc(offer-16, and-35)
ccomp(believe-7, reveals-36)
conj:and(offer-16, reveals-36)
det(property-40, a-37)
amod(property-40, shared-38)
amod(property-40, structural-39)
dobj(reveals-36, property-40)
nsubjpass(identified-50, property-40)
case(domains-44, among-41)
det(domains-44, the-42)
amod(domains-44, studied-43)
nmod:among(property-40, domains-44)
ref(property-40, that-45)
aux(identified-50, has-46)
neg(identified-50, not-47)
advmod(identified-50, previously-48)
auxpass(identified-50, been-49)
acl:relcl(property-40, identified-50)
case(form-53, in-51)
nmod:poss(form-53, its-52)
nmod:in(identified-50, form-53)
advmod(identified-50, here-54)

(ROOT
  (S
    (NP (PRP We))
    (VP (MD would)
      (ADVP (RB also))
      (VP (VB like)
        (S
          (VP (TO to)
            (VP (VB add)
              (SBAR (IN that)
                (S (, ,)
                  (PP (TO to)
                    (NP
                      (NP (DT the) (JJS best))
                      (PP (IN of)
                        (NP (PRP$ our) (NN knowledge)))))
                  (, ,)
                  (ADVP (RB previously))
                  (VP (VBD presented)
                    (SBAR
                      (S
                        (NP (JJ tractable) (NNS classes))
                        (VP (VBP have) (RB not)
                          (VP (VBN been)
                            (VP (VBN demonstrated)
                              (S
                                (VP (TO to)
                                  (VP (VB be)
                                    (VP (VBN closed)
                                      (PP (IN under)
                                        (NP
                                          (NP (DT the) (NNS transformations))
                                          (VP (VBN considered)
                                            (ADVP (RB here)))
                                          (, ,)
                                          (PP (JJ such) (IN as)
                                            (NP (NN reformulation))))))))))))))))))))))
    (. .)))

nsubj(like-4, We-1)
nsubj:xsubj(add-6, We-1)
aux(like-4, would-2)
advmod(like-4, also-3)
root(ROOT-0, like-4)
mark(add-6, to-5)
xcomp(like-4, add-6)
mark(presented-17, that-7)
case(best-11, to-9)
det(best-11, the-10)
nmod:to(presented-17, best-11)
case(knowledge-14, of-12)
nmod:poss(knowledge-14, our-13)
nmod:of(best-11, knowledge-14)
advmod(presented-17, previously-16)
ccomp(add-6, presented-17)
amod(classes-19, tractable-18)
nsubjpass(demonstrated-23, classes-19)
nsubjpass:xsubj(closed-26, classes-19)
aux(demonstrated-23, have-20)
neg(demonstrated-23, not-21)
auxpass(demonstrated-23, been-22)
ccomp(presented-17, demonstrated-23)
mark(closed-26, to-24)
auxpass(closed-26, be-25)
xcomp(demonstrated-23, closed-26)
case(transformations-29, under-27)
det(transformations-29, the-28)
nmod:under(closed-26, transformations-29)
acl(transformations-29, considered-30)
advmod(considered-30, here-31)
case(reformulation-35, such-33)
mwe(such-33, as-34)
nmod:such_as(transformations-29, reformulation-35)

(ROOT
  (S
    (S
      (VP
        (VP (VB Note))
        (: :)
        (VP
          (ADJP (JJ due))
          (PP (TO to)
            (NP (NN space) (NNS restrictions))))))
    (, ,)
    (NP
      (NP (DT some))
      (PP (IN of)
        (NP (DT the) (NNS proofs))))
    (VP (VBP have)
      (VP (VBN been)
        (VP (VBN omitted))))
    (. .)))

ccomp(omitted-14, Note-1)
dep(Note-1, due-3)
case(restrictions-6, to-4)
compound(restrictions-6, space-5)
nmod:to(due-3, restrictions-6)
nsubjpass(omitted-14, some-8)
case(proofs-11, of-9)
det(proofs-11, the-10)
nmod:of(some-8, proofs-11)
aux(omitted-14, have-12)
auxpass(omitted-14, been-13)
root(ROOT-0, omitted-14)

(ROOT
  (S
    (S
      (NP
        (PRN (-LRB- -LRB-)
          (NP (NNP V))
          (, ,)
          (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
          (-RRB- -RRB-)))
      (VP (VBP obtain)
        (NP
          (NP (DT a) (NN plan) (NN P))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ solves)
                (NP (PRP it))))))
        (PRN (, ,)
          (INTJ (DT that) (VBZ is)))))
    (, ,)
    (NP (DT a) (NN plan))
    (VP (VBP P)
      (SBAR
        (S
          (NP (PDT such) (DT that) (NN init))
          (VP (VBD -LSB-)
            (SBAR
              (S
                (NP (NNP P) (NNP -RSB-))
                (VP (VBZ is)
                  (NP (DT a) (NN goal) (NN state)))))))))
    (. .)))

nsubj(obtain-10, V-2)
compound(A-8, init-4)
dep(A-8, goal-6)
dep(V-2, A-8)
ccomp(P-23, obtain-10)
det(P-13, a-11)
compound(P-13, plan-12)
dobj(obtain-10, P-13)
nsubj(solves-15, P-13)
ref(P-13, that-14)
acl:relcl(P-13, solves-15)
dobj(solves-15, it-16)
discourse(obtain-10, that-18)
mwe(that-18, is-19)
det(plan-22, a-21)
nsubj(P-23, plan-22)
root(ROOT-0, P-23)
det:predet(init-26, such-24)
det(init-26, that-25)
nsubj(-LSB--27, init-26)
ccomp(P-23, -LSB--27)
compound(-RSB--29, P-28)
nsubj(state-33, -RSB--29)
cop(state-33, is-30)
det(state-33, a-31)
compound(state-33, goal-32)
ccomp(-LSB--27, state-33)

(ROOT
  (S
    (PP
      (NP (NNP Width))
      (IN In)
      (NP (DT this) (NN section)))
    (, ,)
    (NP (PRP we))
    (VP (VB define)
      (NP
        (NP (DT the) (NN notion))
        (PP (IN of)
          (NP (NN width)))))
    (. .)))

nmod:in(define-7, Width-1)
case(Width-1, In-2)
det(section-4, this-3)
dep(Width-1, section-4)
nsubj(define-7, we-6)
root(ROOT-0, define-7)
det(notion-9, the-8)
dobj(define-7, notion-9)
case(width-11, of-10)
nmod:of(notion-9, width-11)

(ROOT
  (S
    (ADVP (RB First))
    (, ,)
    (NP (DT some) (NNS definitions))
    (VP (VBP are)
      (VP (VBN required)))
    (. .)))

advmod(required-6, First-1)
det(definitions-4, some-3)
nsubjpass(required-6, definitions-4)
auxpass(required-6, are-5)
root(ROOT-0, required-6)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP
          (NP (NNP =))
          (PRN (-LRB- -LRB-)
            (NP (NNP V))
            (, ,)
            (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
            (-RRB- -RRB-)))
        (VP (VB be)
          (NP (DT an) (NN instance)))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(instance-14, =-2)
appos(=-2, V-4)
compound(A-10, init-6)
dep(A-10, goal-8)
dep(V-4, A-10)
cop(instance-14, be-12)
det(instance-14, an-13)
ccomp(Let-1, instance-14)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP say)
        (SBAR (IN that)
          (S
            (NP (DT a) (NN plan) (NN P))
            (VP (VBZ improves)
              (SBAR
                (S
                  (NP
                    (NP (JJ variable) (NN u))
                    (PP (IN in)
                      (NP (NN state))))
                  (VP (VBZ s)
                    (ADJP (IN if))))))))))
    (: :)
    (X
      (X (SYM *))
      (PP (IN for)
        (NP (PDT all)
          (NP
            (NP
              (NP (NN v))
              (VP (VBG V) (, ,)
                (SBAR (IN if)
                  (S
                    (NP
                      (NP
                        (NP (NN v) (NNS vars))
                        (PRN (-LRB- -LRB-)
                          (NP (NN goal))
                          (-RRB- -RRB-)))
                      (CC and)
                      (NP
                        (NP (PRP s))
                        (PRN (-LRB- -LRB-)
                          (NP (NN v))
                          (-RRB- -RRB-))))
                    (VP (SYM =)
                      (NP (NN goal)))))))
            (PRN (-LRB- -LRB-)
              (NP (NN v))
              (-RRB- -RRB-)))
          (, ,)
          (NP
            (NP
              (NP
                (NP (RB then))
                (PRN (-LRB- -LRB-)
                  (NP (NNP s) (NNP -LSB-) (NNP P) (NNPS -RSB-))
                  (-RRB- -RRB-)))
              (PRN (-LRB- -LRB-)
                (NP (NN v))
                (-RRB- -RRB-)))
            (SBAR
              (S
                (S
                  (VP (VBG =)
                    (NP
                      (NP (NN goal))
                      (PRN (-LRB- -LRB-)
                        (NP (NN v))
                        (-RRB- -RRB-)))))
                (: ;)
                (CC and)
                (, ,)
                (S
                  (VP
                    (VP (VBG *)
                      (SBAR (IN if)
                        (S
                          (NP
                            (NP
                              (NP (NN u) (NNS vars))
                              (PRN (-LRB- -LRB-)
                                (NP (NN goal))
                                (-RRB- -RRB-)))
                            (, ,)
                            (NP
                              (NP
                                (NP (RB then))
                                (PRN (-LRB- -LRB-)
                                  (NP (NNP s) (NNP -LSB-) (NNP P) (NNPS -RSB-))
                                  (-RRB- -RRB-)))
                              (PRN (-LRB- -LRB-)
                                (NP (NN u))
                                (-RRB- -RRB-))))
                          (VP (SYM =)
                            (NP (NN goal))))))
                    (PRN (-LRB- -LRB-)
                      (NP (NN u))
                      (-RRB- -RRB-))))))))))
    (. .)))

nsubj(say-2, We-1)
root(ROOT-0, say-2)
mark(improves-7, that-3)
det(P-6, a-4)
compound(P-6, plan-5)
nsubj(improves-7, P-6)
ccomp(say-2, improves-7)
amod(u-9, variable-8)
nsubj(if-13, u-9)
case(state-11, in-10)
nmod:in(u-9, state-11)
cop(if-13, s-12)
ccomp(improves-7, if-13)
dep(v-18, *-15)
case(v-18, for-16)
dep(v-18, all-17)
dep(say-2, v-18)
acl(v-18, V-19)
mark(goal-33, if-21)
compound(vars-23, v-22)
nsubj(goal-33, vars-23)
appos(vars-23, goal-25)
cc(vars-23, and-27)
conj:and(vars-23, s-28)
nsubj(goal-33, s-28)
appos(s-28, v-30)
dep(goal-33, =-32)
advcl(V-19, goal-33)
appos(v-18, v-35)
appos(v-18, then-38)
compound(-RSB--43, s-40)
compound(-RSB--43, -LSB--41)
compound(-RSB--43, P-42)
appos(then-38, -RSB--43)
appos(then-38, v-46)
acl:relcl(then-38, =-48)
dobj(=-48, goal-49)
appos(goal-49, v-51)
cc(=-48, and-54)
acl:relcl(then-38, *-56)
conj:and(=-48, *-56)
mark(goal-75, if-57)
compound(vars-59, u-58)
nsubj(goal-75, vars-59)
appos(vars-59, goal-61)
appos(vars-59, then-64)
compound(-RSB--69, s-66)
compound(-RSB--69, -LSB--67)
compound(-RSB--69, P-68)
appos(then-64, -RSB--69)
appos(then-64, u-72)
dep(goal-75, =-74)
advcl(*-56, goal-75)
dep(*-56, u-77)

(ROOT
  (S
    (INTJ (DT That) (VBZ is))
    (, ,)
    (SBAR (IN after)
      (S
        (NP (NNP P))
        (VP (VBZ is)
          (VP (VBN executed)))))
    (, ,)
    (S
      (NP
        (NP (DT all) (NNS variables))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBD had)
              (NP
                (NP (NNS values))
                (PP (RB as) (IN in)
                  (NP (DT the) (NN goal) (NN state))))))))
      (ADVP (RB still))
      (VP (VBP have)
        (NP (NNS values))
        (PP (IN as)
          (PP (IN in)
            (NP (DT the) (NN goal) (NN state))))))
    (, ,)
    (CC and)
    (S
      (PP (IN in)
        (NP (NN addition)))
      (, ,)
      (NP (DT the) (JJ variable) (NN u))
      (VP (VBZ is)
        (PP (IN in)
          (NP (DT the) (NN goal) (NN state)))))
    (. .)))

discourse(have-20, That-1)
mwe(That-1, is-2)
mark(executed-7, after-4)
nsubjpass(executed-7, P-5)
auxpass(executed-7, is-6)
advcl(have-20, executed-7)
det(variables-10, all-9)
nsubj(had-12, variables-10)
nsubj(have-20, variables-10)
ref(variables-10, that-11)
acl:relcl(variables-10, had-12)
dobj(had-12, values-13)
advmod(state-18, as-14)
case(state-18, in-15)
det(state-18, the-16)
compound(state-18, goal-17)
nmod:in(values-13, state-18)
advmod(have-20, still-19)
root(ROOT-0, have-20)
dobj(have-20, values-21)
case(state-26, as-22)
case(state-26, in-23)
det(state-26, the-24)
compound(state-26, goal-25)
nmod:in(have-20, state-26)
cc(have-20, and-28)
case(addition-30, in-29)
nmod:in(state-39, addition-30)
det(u-34, the-32)
amod(u-34, variable-33)
nsubj(state-39, u-34)
cop(state-39, is-35)
case(state-39, in-36)
det(state-39, the-37)
compound(state-39, goal-38)
conj:and(have-20, state-39)

(ROOT
  (S
    (INTJ (RB Now))
    (, ,)
    (VP (VB let)
      (S
        (NP (NNP W))
        (VP (VB be)
          (NP
            (NP (DT a) (NN subset))
            (PP (IN of)
              (NP (NNP V)))))))
    (. .)))

discourse(let-3, Now-1)
root(ROOT-0, let-3)
nsubj(subset-7, W-4)
cop(subset-7, be-5)
det(subset-7, a-6)
ccomp(let-3, subset-7)
case(V-9, of-8)
nmod:of(subset-7, V-9)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP say)
      (SBAR (IN that)
        (S
          (NP (DT a) (NN plan) (NN P))
          (VP (VBZ uses)
            (S
              (NP (RB only) (DT the) (NNS variables))
              (ADJP (JJ W))
              (SBAR (IN if)
                (S
                  (PP (IN for)
                    (NP
                      (NP (DT every) (JJ operator) (DT a))
                      (PP (IN in)
                        (NP (NNP P)))))
                  (, ,)
                  (NP (PRP it))
                  (VP (VBZ holds)
                    (NP
                      (NP
                        (NP (DT that) (NNS vars))
                        (-LRB- -LRB-)
                        (NP (NN post))
                        (PRN (-LRB- -LRB-)
                          (X (SYM a))
                          (-RRB- -RRB-))
                        (-RRB- -RRB-))
                      (NP (NNP W)))))))))))
    (. .)))

nsubj(say-2, We-1)
root(ROOT-0, say-2)
mark(uses-7, that-3)
det(P-6, a-4)
compound(P-6, plan-5)
nsubj(uses-7, P-6)
ccomp(say-2, uses-7)
advmod(variables-10, only-8)
det(variables-10, the-9)
nsubj(holds-21, variables-10)
dep(holds-21, W-11)
mark(holds-21, if-12)
case(operator-15, for-13)
det(operator-15, every-14)
nmod:for(holds-21, operator-15)
dep(operator-15, a-16)
case(P-18, in-17)
nmod:in(operator-15, P-18)
nsubj(holds-21, it-20)
xcomp(uses-7, holds-21)
det(vars-23, that-22)
dobj(holds-21, vars-23)
dep(vars-23, post-25)
dep(vars-23, a-27)
appos(vars-23, W-30)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP say)
      (SBAR (IN that)
        (S
          (NP (DT a) (JJ variable) (NN u))
          (VP (VBZ is)
            (NP
              (NP (NN k) (NN improvable))
              (PP (IN in)
                (NP (NN state)))
              (SBAR
                (S
                  (VP (VBZ s)
                    (SBAR (IN if)
                      (S
                        (NP (EX there))
                        (VP (VBZ exists)
                          (S
                            (S
                              (NP (DT a) (NN plan))
                              (NP (NNP P)))
                            (CC and)
                            (S
                              (NP
                                (NP (DT a) (NNP subset) (NNP W) (NNP V))
                                (PP (IN of)
                                  (NP (NN size) (CD |) (NNP W) (NNP |) (NN k))))
                              (ADJP (JJ such))))
                          (SBAR (IN that)
                            (S
                              (NP (NNP P))
                              (VP (VBZ uses)
                                (SBAR
                                  (S
                                    (NP (RB only) (DT the) (NNS variables))
                                    (VP (VBZ W)
                                      (CC and)
                                      (VBZ improves)
                                      (NP
                                        (NP (NN u))
                                        (PP (IN in)
                                          (NP (PRP s)))))))))))))))))))))
    (. .)))

nsubj(say-2, We-1)
root(ROOT-0, say-2)
mark(improvable-9, that-3)
det(u-6, a-4)
amod(u-6, variable-5)
nsubj(improvable-9, u-6)
cop(improvable-9, is-7)
compound(improvable-9, k-8)
ccomp(say-2, improvable-9)
case(state-11, in-10)
nmod:in(improvable-9, state-11)
acl:relcl(improvable-9, s-12)
mark(exists-15, if-13)
expl(exists-15, there-14)
advcl(s-12, exists-15)
det(plan-17, a-16)
dep(P-18, plan-17)
xcomp(exists-15, P-18)
cc(P-18, and-19)
det(V-23, a-20)
compound(V-23, subset-21)
compound(V-23, W-22)
dep(such-30, V-23)
case(k-29, of-24)
compound(k-29, size-25)
nummod(k-29, |-26)
compound(k-29, W-27)
compound(k-29, |-28)
nmod:of(V-23, k-29)
xcomp(exists-15, such-30)
conj:and(P-18, such-30)
mark(uses-33, that-31)
nsubj(uses-33, P-32)
ccomp(exists-15, uses-33)
advmod(variables-36, only-34)
det(variables-36, the-35)
nsubj(W-37, variables-36)
nsubj(improves-39, variables-36)
ccomp(uses-33, W-37)
cc(W-37, and-38)
ccomp(uses-33, improves-39)
conj:and(W-37, improves-39)
dobj(W-37, u-40)
case(s-42, in-41)
nmod:in(u-40, s-42)

(ROOT
  (S
    (PP (IN In)
      (NP (NN general)))
    (, ,)
    (NP (PRP we))
    (VP (MD will)
      (VP (VB use)
        (NP (NN k))
        (S
          (VP (TO to)
            (VP
              (VP (VB denote)
                (NP (DT an) (NN integer))
                (ADVP (JJR greater) (IN than)))
              (CC or)
              (VP (JJ equal)
                (PP (TO to)
                  (NP (CD 1)))))))))
    (. .)))

case(general-2, In-1)
nmod:in(use-6, general-2)
nsubj(use-6, we-4)
aux(use-6, will-5)
root(ROOT-0, use-6)
dobj(use-6, k-7)
mark(denote-9, to-8)
advcl(use-6, denote-9)
det(integer-11, an-10)
dobj(denote-9, integer-11)
advmod(denote-9, greater-12)
case(greater-12, than-13)
cc(denote-9, or-14)
advcl(use-6, equal-15)
conj:or(denote-9, equal-15)
case(1-17, to-16)
nmod:to(equal-15, 1-17)

(ROOT
  (S (IN For)
    (NP (DT any) (NN state))
    (VP (VBZ s) (, ,)
      (S
        (NP (PRP we))
        (VP (VB define)
          (NP
            (NP
              (NP (JJ wrong))
              (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
            (VP (VBG =) (-LRB- -LCB-)
              (NP
                (NP (NN v) (NNS vars))
                (PRN (-LRB- -LRB-)
                  (NP (NN goal))
                  (-RRB- -RRB-))
                (: :)
                (SBAR
                  (S
                    (VP (VBZ s)
                      (NP
                        (NP
                          (PRN (-LRB- -LRB-)
                            (NP (NN v))
                            (-RRB- -RRB-))
                          (JJ =) (NN goal))
                        (PRN (-LRB- -LRB-)
                          (NP (NN v))
                          (-RRB- -RRB-)))))))
              (-RRB- -RCB-))))))
    (. .)))

dep(s-4, For-1)
det(state-3, any-2)
nsubj(s-4, state-3)
root(ROOT-0, s-4)
nsubj(define-7, we-6)
ccomp(s-4, define-7)
dobj(define-7, wrong-8)
dep(wrong-8, s-10)
acl(wrong-8, =-12)
compound(vars-15, v-14)
dobj(=-12, vars-15)
appos(vars-15, goal-17)
cop(goal-25, s-20)
appos(goal-25, v-22)
amod(goal-25, =-24)
acl:relcl(vars-15, goal-25)
appos(goal-25, v-27)

(ROOT
  (S
    (NP
      (NP (DT The) (NN set) (JJ wrong))
      (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN set))
        (PP (IN of)
          (NP
            (NP (NNS variables))
            (SBAR
              (WHPP (IN on)
                (WHNP (WDT which)))
              (S
                (NP (PRP s))
                (VP (VBZ differs)
                  (PP (IN from)
                    (NP (DT the) (NN goal))))))))))
    (. .)))

det(set-2, The-1)
nsubj(set-9, set-2)
amod(set-2, wrong-3)
dep(set-2, s-5)
cop(set-9, is-7)
det(set-9, the-8)
root(ROOT-0, set-9)
case(variables-11, of-10)
nmod:of(set-9, variables-11)
nmod:on(differs-15, variables-11)
case(which-13, on-12)
ref(variables-11, which-13)
nsubj(differs-15, s-14)
acl:relcl(variables-11, differs-15)
case(goal-18, from-16)
det(goal-18, the-17)
nmod:from(differs-15, goal-18)

(ROOT
  (S
    (NP
      (NP (NNP Definition) (CD 1))
      (SBAR
        (S
          (NP (DT A) (NN planning) (NN instance))
          (VP (VBZ has)
            (NP
              (NP (NN width) (NN k))
              (SBAR
                (SBAR (IN if)
                  (S
                    (NP
                      (NP (DT no) (NN plan))
                      (VP (VBG solving)
                        (NP (PRP it))))
                    (VP (VBZ exists))))
                (, ,)
                (CC or)
                (SBAR (IN for)
                  (S
                    (NP (DT every) (JJ reachable) (NN state))
                    (VP (VBZ s)
                      (SBAR (IN that)
                        (S
                          (VP (VBZ is)
                            (ADJP
                              (PRN (RB not)
                                (NP
                                  (NP (DT a) (NN goal) (NN state))
                                  (, ,)
                                  (NP (DT every) (JJ variable) (NN u))))
                              (JJ wrong)))))))))))))
      (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
    (VP (VBZ is)
      (UCP
        (NP (NN k))
        (: -)
        (ADJP (JJ improvable)
          (PP (IN in)
            (NP
              (NP (NN s.) (CD 1))
              (SBAR
                (S
                  (NP (PRP We))
                  (VP (VB define)
                    (NP (DT the) (NN width) (NN k) (NN algorithm))
                    (SBAR (IN as)
                      (S
                        (VP (VBZ follows))))))))))))
    (. .)))

nsubj(k-37, Definition-1)
nummod(Definition-1, 1-2)
det(instance-5, A-3)
compound(instance-5, planning-4)
nsubj(has-6, instance-5)
acl:relcl(Definition-1, has-6)
compound(k-8, width-7)
dobj(has-6, k-8)
mark(exists-14, if-9)
neg(plan-11, no-10)
nsubj(exists-14, plan-11)
acl(plan-11, solving-12)
dobj(solving-12, it-13)
dep(k-8, exists-14)
cc(exists-14, or-16)
mark(s-21, for-17)
det(state-20, every-18)
amod(state-20, reachable-19)
nsubj(s-21, state-20)
dep(k-8, s-21)
conj:or(exists-14, s-21)
mark(wrong-32, that-22)
cop(wrong-32, is-23)
dep(state-27, not-24)
det(state-27, a-25)
compound(state-27, goal-26)
dep(wrong-32, state-27)
det(u-31, every-29)
amod(u-31, variable-30)
appos(state-27, u-31)
ccomp(s-21, wrong-32)
dep(Definition-1, s-34)
cop(k-37, is-36)
root(ROOT-0, k-37)
amod(k-37, improvable-39)
case(s.-41, in-40)
nmod:in(improvable-39, s.-41)
nummod(s.-41, 1-42)
nsubj(define-44, We-43)
acl:relcl(s.-41, define-44)
det(algorithm-48, the-45)
compound(algorithm-48, width-46)
compound(algorithm-48, k-47)
dobj(define-44, algorithm-48)
mark(follows-50, as-49)
advcl(define-44, follows-50)

(ROOT
  (S
    (NP (DT The) (NN algorithm))
    (VP (VBZ is)
      (VP (VBN given)
        (NP (DT an) (NN instance))))
    (. .)))

det(algorithm-2, The-1)
nsubjpass(given-4, algorithm-2)
auxpass(given-4, is-3)
root(ROOT-0, given-4)
det(instance-6, an-5)
dobj(given-4, instance-6)

(ROOT
  (S
    (SBAR (IN *)
      (S
        (VP (VBZ Pick)
          (NP (DT an) (NN arbitrary))
          (S
            (VP (VBG ordering)
              (NP (NNS v1))))
          (, ,))
        (: ...)))
    (, ,)
    (VP (VB vn)
      (PP (IN of)
        (NP (DT the) (NNS variables))))
    (. .)))

mark(Pick-2, *-1)
advcl(vn-10, Pick-2)
det(arbitrary-4, an-3)
dobj(Pick-2, arbitrary-4)
xcomp(Pick-2, ordering-5)
dobj(ordering-5, v1-6)
root(ROOT-0, vn-10)
case(variables-13, of-11)
det(variables-13, the-12)
nmod:of(vn-10, variables-13)

(ROOT
  (FRAG
    (X (SYM *))
    (: Set)
    (VP (VBZ s)
      (S
        (VP (TO to)
          (VP (VB be)
            (NP (DT the) (JJ initial) (NN state) (NN init))))))
    (. .)))

dep(s-3, *-1)
root(ROOT-0, s-3)
mark(init-9, to-4)
cop(init-9, be-5)
det(init-9, the-6)
amod(init-9, initial-7)
compound(init-9, state-8)
xcomp(s-3, init-9)

(ROOT
  (FRAG
    (X (SYM *))
    (: Set)
    (NP
      (NP (NNP Q))
      (SBAR
        (S
          (VP (TO to)
            (VP (VB be)
              (NP (DT the) (JJ empty) (NN plan)))))))
    (. .)))

dep(Q-3, *-1)
root(ROOT-0, Q-3)
mark(plan-8, to-4)
cop(plan-8, be-5)
det(plan-8, the-6)
amod(plan-8, empty-7)
acl(Q-3, plan-8)

(ROOT
  (S
    (FRAG
      (FRAG
        (X
          (X (SYM *))
          (NP (NNP Loop)))
        (PP (IN from)
          (NP
            (NP
              (NP (FW i))
              (SBAR
                (S
                  (VP (SYM =)
                    (NP (CD 1))))))
            (, ,))))
      (: ...)
      (FRAG (, ,)
        (NP (NN n))))
    (: :)
    (S
      (SBAR (IN if)
        (S
          (NP
            (NP (NN vi) (JJ wrong))
            (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-))
            (, ,))
          (VP (VBP try)
            (S
              (VP (TO to)
                (VP (VB find)
                  (NP (DT a) (NN plan))))))))
      (VP (VBP P)
        (S
          (VP (VBG using)
            (PP (IN at)
              (NP
                (NP (JJS most) (NN k) (NNS variables))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBZ improves)
                      (NP
                        (NP (NN vi))
                        (PP (IN in)
                          (NP (PRP s)))))))))))))
    (. .)))

dep(Loop-2, *-1)
dep(P-24, Loop-2)
case(i-4, from-3)
nmod:from(Loop-2, i-4)
dep(1-6, =-5)
acl:relcl(i-4, 1-6)
parataxis(Loop-2, n-10)
mark(try-19, if-12)
nsubj(try-19, vi-13)
nsubj:xsubj(find-21, vi-13)
amod(vi-13, wrong-14)
dep(vi-13, s-16)
csubj(P-24, try-19)
mark(find-21, to-20)
xcomp(try-19, find-21)
det(plan-23, a-22)
dobj(find-21, plan-23)
root(ROOT-0, P-24)
xcomp(P-24, using-25)
case(variables-29, at-26)
amod(variables-29, most-27)
compound(variables-29, k-28)
nmod:at(using-25, variables-29)
nsubj(improves-31, variables-29)
ref(variables-29, that-30)
acl:relcl(variables-29, improves-31)
dobj(improves-31, vi-32)
case(s-34, in-33)
nmod:in(vi-32, s-34)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PDT such) (DT a) (NN plan) (NN P))
        (VP (VBZ is)
          (VP (VBN found)))))
    (, ,)
    (VP
      (VP (VB replace)
        (NP (PRP s))
        (PP (IN with)
          (NP (NNP s) (NNP -LSB-) (NNP P) (NNP -RSB-))))
      (, ,)
      (CC and)
      (VP (VB append)
        (NP (NNP P))
        (PP (TO to)
          (NP (NNP Q)))))
    (. .)))

mark(found-7, If-1)
det:predet(P-5, such-2)
det(P-5, a-3)
compound(P-5, plan-4)
nsubjpass(found-7, P-5)
auxpass(found-7, is-6)
advcl(replace-9, found-7)
root(ROOT-0, replace-9)
dobj(replace-9, s-10)
case(-RSB--15, with-11)
compound(-RSB--15, s-12)
compound(-RSB--15, -LSB--13)
compound(-RSB--15, P-14)
nmod:with(replace-9, -RSB--15)
cc(replace-9, and-17)
conj:and(replace-9, append-18)
dobj(append-18, P-19)
case(Q-21, to-20)
nmod:to(append-18, Q-21)

(ROOT
  (SBAR (IN If)
    (S
      (NP (DT no) (NN plan))
      (VP (VBZ is)
        (VP (VBN found) (, ,)
          (NP (NN output) ('' '')))))
    (. ?) ('' '')))

mark(found-5, If-1)
neg(plan-3, no-2)
nsubjpass(found-5, plan-3)
auxpass(found-5, is-4)
root(ROOT-0, found-5)
dobj(found-5, output-7)

(ROOT
  (S (CC and)
    (VP (VB halt))
    (. .)))

cc(halt-2, and-1)
root(ROOT-0, halt-2)

(ROOT
  (FRAG
    (X
      (X
        (X (SYM *))
        (NP (NN Output) (NNP Q.) (NNP Theorem)))
      (NP (CD 2)))
    (VP (VBD Let)
      (S
        (NP (NNP C))
        (VP (VB be)
          (NP
            (NP (DT a) (NN set))
            (PP (IN of)
              (NP
                (NP (NN planning) (NNS instances))
                (VP (VBG having)
                  (NP (NN width) (NN k)))))))))
    (. .)))

dep(Theorem-4, *-1)
compound(Theorem-4, Output-2)
compound(Theorem-4, Q.-3)
dep(2-5, Theorem-4)
dep(Let-6, 2-5)
root(ROOT-0, Let-6)
nsubj(set-10, C-7)
cop(set-10, be-8)
det(set-10, a-9)
ccomp(Let-6, set-10)
case(instances-13, of-11)
compound(instances-13, planning-12)
nmod:of(set-10, instances-13)
acl(instances-13, having-14)
compound(k-16, width-15)
dobj(having-14, k-16)

(ROOT
  (S
    (NP
      (NP (DT The) (NN plan) (NN generation) (NN problem))
      (PP (IN for)
        (NP (NNP C))))
    (VP (VBZ is)
      (ADJP (JJ solvable)
        (PP (IN in)
          (NP
            (NP (JJ polynomial) (NN time))
            (PP (IN via)
              (NP (DT the) (NN width) (NN k) (NN algorithm))))))
      (, ,)
      (PP (IN in)
        (NP
          (NP (NN time) (NN O))
          (PRN (-LRB- -LRB-)
            (VP (VBN nk)
              (NP
                (NP (CD +1))
                (ADJP (RB dk) (DT a))))
            (-RRB- -RRB-)))))
    (. .)))

det(problem-4, The-1)
compound(problem-4, plan-2)
compound(problem-4, generation-3)
nsubj(solvable-8, problem-4)
case(C-6, for-5)
nmod:for(problem-4, C-6)
cop(solvable-8, is-7)
root(ROOT-0, solvable-8)
case(time-11, in-9)
amod(time-11, polynomial-10)
nmod:in(solvable-8, time-11)
case(algorithm-16, via-12)
det(algorithm-16, the-13)
compound(algorithm-16, width-14)
compound(algorithm-16, k-15)
nmod:via(time-11, algorithm-16)
case(O-20, in-18)
compound(O-20, time-19)
nmod:in(solvable-8, O-20)
dep(O-20, nk-22)
dobj(nk-22, +1-23)
advmod(a-25, dk-24)
amod(+1-23, a-25)

(ROOT
  (S
    (S
      (ADVP (RB Here))
      (, ,)
      (NP (NN n))
      (VP (VBZ denotes)
        (NP
          (NP (DT the) (NN number))
          (PP (IN of)
            (NP (NNS variables))))))
    (, ,)
    (S
      (NP (SYM d))
      (VP (VBZ denotes)
        (NP
          (NP (DT the) (JJ maximum) (NN size))
          (PP (IN of)
            (NP (DT a) (NN domain))))))
    (, ,)
    (CC and)
    (S
      (NP (DT a) (NNS denotes))
      (NP
        (NP (DT the) (NN number))
        (PP (IN of)
          (NP (NNS actions)))))
    (. .)))

advmod(denotes-4, Here-1)
nsubj(denotes-4, n-3)
root(ROOT-0, denotes-4)
det(number-6, the-5)
dobj(denotes-4, number-6)
case(variables-8, of-7)
nmod:of(number-6, variables-8)
nsubj(denotes-11, d-10)
ccomp(denotes-4, denotes-11)
det(size-14, the-12)
amod(size-14, maximum-13)
dobj(denotes-11, size-14)
case(domain-17, of-15)
det(domain-17, a-16)
nmod:of(size-14, domain-17)
cc(denotes-4, and-19)
det(denotes-21, a-20)
dep(number-23, denotes-21)
det(number-23, the-22)
conj:and(denotes-4, number-23)
case(actions-25, of-24)
nmod:of(number-23, actions-25)

(ROOT
  (S
    (VP (NN Note)
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (VBP say)
            (SBAR (IN that)
              (S
                (NP (DT an) (NN algorithm))
                (VP (VBZ solves)
                  (NP (DT the) (NN plan) (NN generation) (NN problem))
                  (PP (IN for)
                    (NP (NNP C)))
                  (SBAR
                    (SBAR (IN if)
                      (S
                        (PP (IN on)
                          (NP
                            (NP (DT every) (NN instance))
                            (PP (IN from)
                              (NP (NNP C)))))
                        (, ,)
                        (NP (DT a) (NN plan) (NN solving))
                        (VP (VBZ is)
                          (NP (NN output))
                          (PP (IN by)
                            (ADVP
                              (NP (DT the) (NN algorithm))
                              (IN if))))))
                    (CC and)
                    (SBAR (RB only) (IN if)
                      (S
                        (NP (DT a) (NN goal) (NN state))
                        (VP (VBZ is)
                          (ADJP (JJ reachable)))))))))))))
    (. .)))

root(ROOT-0, Note-1)
mark(say-4, that-2)
nsubj(say-4, we-3)
ccomp(Note-1, say-4)
mark(solves-8, that-5)
det(algorithm-7, an-6)
nsubj(solves-8, algorithm-7)
ccomp(say-4, solves-8)
det(problem-12, the-9)
compound(problem-12, plan-10)
compound(problem-12, generation-11)
dobj(solves-8, problem-12)
case(C-14, for-13)
nmod:for(solves-8, C-14)
mark(output-26, if-15)
case(instance-18, on-16)
det(instance-18, every-17)
nmod:on(output-26, instance-18)
case(C-20, from-19)
nmod:from(instance-18, C-20)
det(solving-24, a-22)
compound(solving-24, plan-23)
nsubj(output-26, solving-24)
cop(output-26, is-25)
advcl(solves-8, output-26)
case(algorithm-29, by-27)
det(algorithm-29, the-28)
advcl(output-26, algorithm-29)
case(algorithm-29, if-30)
cc(output-26, and-31)
advmod(reachable-38, only-32)
mark(reachable-38, if-33)
det(state-36, a-34)
compound(state-36, goal-35)
nsubj(reachable-38, state-36)
cop(reachable-38, is-37)
advcl(solves-8, reachable-38)
conj:and(output-26, reachable-38)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN definition)))
    (, ,)
    (NP (PRP one))
    (VP (MD can)
      (VP (VB drop)
        (NP
          (NP (DT the) (NN requirement))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ s) (RB not)
                (VP (VB be)
                  (NP (DT a) (NN goal) (NN state))
                  (, ,)
                  (SBAR (IN since)
                    (S
                      (PP (IN in)
                        (NP
                          (NP (DT the) (NN case))
                          (SBAR (IN that)
                            (S
                              (NP (PRP s))
                              (VP (VBZ is)
                                (NP (DT a) (NN goal) (NN state)))))))
                      (, ,)
                      (NP
                        (NP (JJ wrong))
                        (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
                      (VP (VBZ is)
                        (ADJP (JJ empty))))))))))))
    (. .)))

case(definition-3, In-1)
det(definition-3, this-2)
nmod:in(drop-7, definition-3)
nsubj(drop-7, one-5)
aux(drop-7, can-6)
root(ROOT-0, drop-7)
det(requirement-9, the-8)
dobj(drop-7, requirement-9)
nsubj(state-16, requirement-9)
ref(requirement-9, that-10)
aux(state-16, s-11)
neg(state-16, not-12)
cop(state-16, be-13)
det(state-16, a-14)
compound(state-16, goal-15)
acl:relcl(requirement-9, state-16)
mark(empty-34, since-18)
case(case-21, in-19)
det(case-21, the-20)
nmod:in(empty-34, case-21)
mark(state-27, that-22)
nsubj(state-27, s-23)
cop(state-27, is-24)
det(state-27, a-25)
compound(state-27, goal-26)
dep(case-21, state-27)
nsubj(empty-34, wrong-29)
dep(wrong-29, s-31)
cop(empty-34, is-33)
advcl(state-16, empty-34)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBD elected)
      (NP (DT the) (VBN given) (NN definition))
      (SBAR (IN because)
        (S
          (NP (PRP it))
          (VP (VBZ reflects)
            (NP (PRP$ our) (NN usage))
            (PP
              (PP (IN of)
                (NP (DT the) (JJ defined) (NN concept)))
              (CC and)
              (PP (IN for)
                (NP
                  (NP (NN symmetry))
                  (PP (IN with)
                    (NP
                      (NP (DT the) (NNS definitions))
                      (PP (IN of)
                        (NP (DT the) (JJ other) (NN width) (NNS notions))))))))))))
    (. .)))

nsubj(elected-2, We-1)
root(ROOT-0, elected-2)
det(definition-5, the-3)
amod(definition-5, given-4)
dobj(elected-2, definition-5)
mark(reflects-8, because-6)
nsubj(reflects-8, it-7)
nsubj(reflects-8', it-7)
advcl(elected-2, reflects-8)
advcl(elected-2, reflects-8')
conj:and(reflects-8, reflects-8')
nmod:poss(usage-10, our-9)
dobj(reflects-8, usage-10)
case(concept-14, of-11)
det(concept-14, the-12)
amod(concept-14, defined-13)
nmod:of(reflects-8, concept-14)
cc(reflects-8, and-15)
case(symmetry-17, for-16)
nmod:for(reflects-8', symmetry-17)
case(definitions-20, with-18)
det(definitions-20, the-19)
nmod:with(symmetry-17, definitions-20)
case(notions-25, of-21)
det(notions-25, the-22)
amod(notions-25, other-23)
compound(notions-25, width-24)
nmod:of(definitions-20, notions-25)

(ROOT
  (S
    (NP
      (NP (CD 1) (NNS Preliminaries))
      (SBAR
        (S
          (NP
            (NP (DT An) (NN instance))
            (PP (IN of)
              (NP (DT the) (NN planning) (NN problem))))
          (VP (VBZ is)
            (NP
              (NP (DT a) (JJ tuple) (NN =))
              (PRN (-LRB- -LRB-)
                (NP (NNP V))
                (, ,)
                (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
                (-RRB- -RRB-))
              (SBAR
                (WHNP (WP$ whose) (NNS components))
                (S
                  (VP (VBP are)
                    (VP (VBN described)
                      (PP (IN as)))))))))))
    (VP (VBZ follows))
    (. .)))

nummod(Preliminaries-2, 1-1)
nmod:poss(components-23, Preliminaries-2)
nsubj(follows-27, Preliminaries-2)
det(instance-4, An-3)
nsubj(=-12, instance-4)
case(problem-8, of-5)
det(problem-8, the-6)
compound(problem-8, planning-7)
nmod:of(instance-4, problem-8)
cop(=-12, is-9)
det(=-12, a-10)
amod(=-12, tuple-11)
acl:relcl(Preliminaries-2, =-12)
nmod:poss(components-23, =-12)
appos(=-12, V-14)
compound(A-20, init-16)
dep(A-20, goal-18)
dep(V-14, A-20)
ref(Preliminaries-2, whose-22)
ref(=-12, whose-22)
nsubjpass(described-25, components-23)
auxpass(described-25, are-24)
acl:relcl(=-12, described-25)
nmod(described-25, as-26)
root(ROOT-0, follows-27)

(ROOT
  (S
    (NP (NNP *) (NNP V))
    (VP (VBZ is)
      (NP
        (NP (DT a) (JJ finite) (NN set))
        (PP (IN of)
          (NP
            (NP (NNS variables))
            (, ,)
            (SBAR
              (WHADVP (WRB where))
              (S
                (NP (DT each) (JJ variable) (NN v) (NN V))
                (VP (VBZ has)
                  (NP
                    (NP (DT an) (JJ associated) (JJ finite) (NN domain) (NNP D))
                    (PRN (-LRB- -LRB-)
                      (NP (NN v))
                      (-RRB- -RRB-))))))))))
    (. .)))

compound(V-2, *-1)
nsubj(set-6, V-2)
cop(set-6, is-3)
det(set-6, a-4)
amod(set-6, finite-5)
root(ROOT-0, set-6)
case(variables-8, of-7)
nmod:of(set-6, variables-8)
advmod(has-15, where-10)
det(V-14, each-11)
amod(V-14, variable-12)
compound(V-14, v-13)
nsubj(has-15, V-14)
acl:relcl(variables-8, has-15)
det(D-20, an-16)
amod(D-20, associated-17)
amod(D-20, finite-18)
compound(D-20, domain-19)
dobj(has-15, D-20)
appos(D-20, v-22)

(ROOT
  (S
    (VP (NN Note)
      (SBAR (IN that)
        (S
          (NP (NNS variables))
          (VP (VBP are) (RB not)
            (ADJP (RB necessarily) (JJ propositional)
              (PRN (, ,)
                (INTJ (DT that) (VBZ is))
                (, ,))
              (SBAR
                (S
                  (NP
                    (NP (NNP D))
                    (PRN (-LRB- -LRB-)
                      (NP (NN v))
                      (-RRB- -RRB-)))
                  (VP (MD may)
                    (VP (VB have)
                      (NP (DT any) (JJ finite) (NN size)))))))))))
    (. .)))

root(ROOT-0, Note-1)
mark(propositional-7, that-2)
nsubj(propositional-7, variables-3)
cop(propositional-7, are-4)
neg(propositional-7, not-5)
advmod(propositional-7, necessarily-6)
ccomp(Note-1, propositional-7)
discourse(propositional-7, that-9)
mwe(that-9, is-10)
nsubj(have-17, D-12)
appos(D-12, v-14)
aux(have-17, may-16)
ccomp(propositional-7, have-17)
det(size-20, any-18)
amod(size-20, finite-19)
dobj(have-17, size-20)

(ROOT
  (S
    (NP (DT A) (NN state))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN mapping))
        (SBAR
          (S
            (VP (VBZ s)
              (VP (VBN defined)
                (PP (IN on)
                  (NP
                    (NP (DT the) (NNS variables) (NN V))
                    (PP (JJ such) (IN that)
                      (NP
                        (NP (NNP s)
                          (PRN (-LRB- -LRB-)
                            (NP (NN v))
                            (-RRB- -RRB-))
                          (NNP D))
                        (PRN (-LRB- -LRB-)
                          (NP (NN v))
                          (-RRB- -RRB-))
                        (PP (IN for)
                          (NP (DT all) (NN v) (NN V)))))))))))))
    (. .)))

det(state-2, A-1)
nsubj(mapping-5, state-2)
cop(mapping-5, is-3)
det(mapping-5, a-4)
root(ROOT-0, mapping-5)
auxpass(defined-7, s-6)
acl:relcl(mapping-5, defined-7)
case(V-11, on-8)
det(V-11, the-9)
compound(V-11, variables-10)
nmod:on(defined-7, V-11)
case(D-18, such-12)
case(D-18, that-13)
compound(D-18, s-14)
appos(D-18, v-16)
nmod:that(V-11, D-18)
appos(D-18, v-20)
case(V-25, for-22)
det(V-25, all-23)
compound(V-25, v-24)
nmod:for(D-18, V-25)

(ROOT
  (S
    (S
      (NP (DT A) (JJ partial) (NN state))
      (VP (VBZ is)
        (NP
          (NP (DT a) (NN mapping) (NN p))
          (VP (VBN defined)
            (PP (IN on)
              (NP
                (NP
                  (NP (DT a) (NN subset) (NNS vars))
                  (PRN (-LRB- -LRB-)
                    (NP (NN p))
                    (-RRB- -RRB-)))
                (PP (IN of)
                  (NP
                    (NP (DT the) (NNS variables))
                    (VP (VBN V)
                      (PP (JJ such)
                        (NP
                          (NP (DT that))
                          (PP (IN for)
                            (NP (DT all) (NN v) (NNS vars))))))))
                (PRN (-LRB- -LRB-)
                  (NP (NN p))
                  (-RRB- -RRB-))))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ holds)
      (NP
        (NP
          (NP (DT that) (NN p))
          (PRN (-LRB- -LRB-)
            (NP (NN v))
            (-RRB- -RRB-))
          (NP (NNP D)))
        (PRN (-LRB- -LRB-)
          (NP (NN v))
          (-RRB- -RRB-))))
    (. .)))

det(state-3, A-1)
amod(state-3, partial-2)
nsubj(p-7, state-3)
cop(p-7, is-4)
det(p-7, a-5)
compound(p-7, mapping-6)
ccomp(holds-31, p-7)
acl(p-7, defined-8)
case(vars-12, on-9)
det(vars-12, a-10)
compound(vars-12, subset-11)
nmod:on(defined-8, vars-12)
appos(vars-12, p-14)
case(variables-18, of-16)
det(variables-18, the-17)
nmod:of(vars-12, variables-18)
acl(variables-18, V-19)
case(that-21, such-20)
nmod:such(V-19, that-21)
case(vars-25, for-22)
det(vars-25, all-23)
compound(vars-25, v-24)
nmod:for(that-21, vars-25)
appos(vars-12, p-27)
nsubj(holds-31, it-30)
root(ROOT-0, holds-31)
det(p-33, that-32)
dobj(holds-31, p-33)
appos(p-33, v-35)
dep(p-33, D-37)
appos(p-33, v-39)

(ROOT
  (S
    (SBAR
      (X (SYM *))
      (S
        (NP (NN init))
        (VP (VBZ is)
          (NP (DT a) (NN state)))))
    (VP (VBD called)
      (NP (DT the) (JJ initial) (NN state)))
    (. .)))

dep(state-5, *-1)
nsubj(state-5, init-2)
cop(state-5, is-3)
det(state-5, a-4)
csubj(called-6, state-5)
root(ROOT-0, called-6)
det(state-9, the-7)
amod(state-9, initial-8)
dobj(called-6, state-9)

(ROOT
  (FRAG
    (X
      (X (SYM *))
      (NP (NN goal)))
    (VP (VBZ is)
      (NP (DT a) (JJ partial) (NN state)))
    (. .)))

dep(goal-2, *-1)
dep(state-6, goal-2)
cop(state-6, is-3)
det(state-6, a-4)
amod(state-6, partial-5)
root(ROOT-0, state-6)

(ROOT
  (S
    (S
      (X (SYM *))
      (NP (NNP A))
      (VP (VBZ is)
        (NP
          (NP (DT a) (NN set))
          (PP (IN of)
            (NP (NNS operators))))))
    (: ;)
    (S
      (NP
        (NP (DT each) (NN operator))
        (NP (DT a) (NN A)))
      (VP (VBZ consists)
        (PP (IN of)
          (NP (DT a) (NN precondition) (NN pre)))
        (NP
          (NP
            (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
            (, ,)
            (SBAR
              (WHNP (WDT which))
              (S
                (VP (VBZ is)
                  (NP (DT a) (JJ partial) (NN state))))))
          (, ,)
          (CONJP (RB as) (RB well) (IN as))
          (NP
            (NP (DT a) (NN postcondition) (NN post))
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (, ,)
            (NP
              (ADVP (RB also))
              (DT a) (JJ partial) (NN state))))))
    (. .)))

dep(set-5, *-1)
nsubj(set-5, A-2)
cop(set-5, is-3)
det(set-5, a-4)
root(ROOT-0, set-5)
case(operators-7, of-6)
nmod:of(set-5, operators-7)
det(operator-10, each-9)
nsubj(consists-13, operator-10)
det(A-12, a-11)
dep(operator-10, A-12)
parataxis(set-5, consists-13)
case(pre-17, of-14)
det(pre-17, a-15)
compound(pre-17, precondition-16)
nmod:of(consists-13, pre-17)
dobj(consists-13, a-19)
nsubj(state-26, which-22)
cop(state-26, is-23)
det(state-26, a-24)
amod(state-26, partial-25)
dep(a-19, state-26)
cc(a-19, as-28)
mwe(as-28, well-29)
mwe(as-28, as-30)
det(post-33, a-31)
compound(post-33, postcondition-32)
dobj(consists-13, post-33)
conj:and(a-19, post-33)
dep(post-33, a-35)
advmod(state-41, also-38)
det(state-41, a-39)
amod(state-41, partial-40)
appos(post-33, state-41)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB sometimes))
    (VP (VBP denote)
      (NP (DT an) (NN operator))
      (PP
        (X (SYM a))
        (IN by)
        (NP
          (NP
            (NP (NN pre))
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-)))
          (: ;)
          (NP
            (NP (NN post))
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))))))
    (. .)))

nsubj(denote-3, We-1)
advmod(denote-3, sometimes-2)
root(ROOT-0, denote-3)
det(operator-5, an-4)
dobj(denote-3, operator-5)
dep(pre-8, a-6)
case(pre-8, by-7)
nmod:by(denote-3, pre-8)
dep(pre-8, a-10)
dep(pre-8, post-13)
dep(post-13, a-15)

(ROOT
  (S
    (VP (NN Note)
      (SBAR (IN that)
        (S
          (SBAR
            (WHADVP (WRB when))
            (S
              (S
                (NP (PRP s))
                (VP (VBZ is)
                  (NP
                    (NP (DT a) (NN state))
                    (CC or)
                    (NP (JJ partial) (NN state)))))
              (, ,)
              (CC and)
              (S
                (NP (NNP W))
                (VP (VBZ is)
                  (NP
                    (NP (DT a) (NN subset))
                    (PP (IN of)
                      (NP (DT the) (JJ variable) (NN set) (NN V))))))))
          (, ,)
          (NP (PRP we))
          (VP (MD will)
            (VP (VB use)
              (S (-LRB- -LRB-)
                (NP (NNP s) (NNP W))
                (-RRB- -RRB-)
                (VP (TO to)
                  (VP (VB denote)
                    (NP
                      (NP (DT the) (JJ partial) (NN state))
                      (VP (VBG resulting)
                        (PP (IN from)
                          (S
                            (VP (VBG restricting)
                              (NP (PRP s))
                              (PP (TO to)
                                (NP (NNP W))))))))))))))))
    (. .)))

root(ROOT-0, Note-1)
mark(use-25, that-2)
advmod(state-7, when-3)
nsubj(state-7, s-4)
cop(state-7, is-5)
det(state-7, a-6)
advcl(use-25, state-7)
cc(state-7, or-8)
amod(state-10, partial-9)
conj:or(state-7, state-10)
advcl(use-25, state-10)
cc(state-7, and-12)
nsubj(subset-16, W-13)
cop(subset-16, is-14)
det(subset-16, a-15)
conj:and(state-7, subset-16)
advcl(use-25, subset-16)
case(V-21, of-17)
det(V-21, the-18)
amod(V-21, variable-19)
compound(V-21, set-20)
nmod:of(subset-16, V-21)
nsubj(use-25, we-23)
aux(use-25, will-24)
ccomp(Note-1, use-25)
compound(W-28, s-27)
dobj(use-25, W-28)
nsubj:xsubj(denote-31, W-28)
mark(denote-31, to-30)
xcomp(use-25, denote-31)
det(state-34, the-32)
amod(state-34, partial-33)
dobj(denote-31, state-34)
acl(state-34, resulting-35)
mark(restricting-37, from-36)
advcl(resulting-35, restricting-37)
dobj(restricting-37, s-38)
case(W-40, to-39)
nmod:to(restricting-37, W-40)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP say)
      (SBAR (IN that)
        (S
          (NP (DT a) (NN state) (NN s))
          (VP (VBZ is)
            (NP (DT a) (NN goal) (NN state))
            (SBAR (IN if)
              (S (-LRB- -LRB-)
                (NP
                  (NP (JJ s) (NNS vars))
                  (PRN (-LRB- -LRB-)
                    (NP (NN goal))
                    (-RRB- -RRB-)))
                (-RRB- -RRB-)
                (VP (VBZ =)
                  (NP (NN goal)))))))))
    (. .)))

nsubj(say-2, We-1)
root(ROOT-0, say-2)
mark(state-10, that-3)
det(s-6, a-4)
compound(s-6, state-5)
nsubj(state-10, s-6)
cop(state-10, is-7)
det(state-10, a-8)
compound(state-10, goal-9)
ccomp(say-2, state-10)
mark(=-19, if-11)
amod(vars-14, s-13)
nsubj(=-19, vars-14)
appos(vars-14, goal-16)
advcl(state-10, =-19)
dobj(=-19, goal-20)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBZ define)
        (NP
          (NP (DT a) (NN plan))
          (PRN (-LRB- -LRB-)
            (PP (IN for)
              (NP (DT an) (NN instance)))
            (-RRB- -RRB-)))
        (S
          (VP (TO to)
            (VP (VB be)
              (NP
                (NP (DT a) (NN sequence))
                (PP (IN of)
                  (NP (NNS operators) (NNP P) (NNP =) (NNP a1)))))))
        (, ,)))
    (: ...)
    (FRAG (, ,)
      (NP (DT an)))
    (. .)))

nsubj(define-2, We-1)
root(ROOT-0, define-2)
det(plan-4, a-3)
dobj(define-2, plan-4)
case(instance-8, for-6)
det(instance-8, an-7)
nmod:for(plan-4, instance-8)
mark(sequence-13, to-10)
cop(sequence-13, be-11)
det(sequence-13, a-12)
advcl(define-2, sequence-13)
case(a1-18, of-14)
compound(a1-18, operators-15)
compound(a1-18, P-16)
compound(a1-18, =-17)
nmod:of(sequence-13, a1-18)
parataxis(define-2, an-22)

(ROOT
  (S
    (PP (VBG Starting)
      (PP (IN from)
        (NP (DT a) (NN state) (NN s))))
    (, ,)
    (NP (PRP we))
    (VP (VB define)
      (NP
        (NP (DT the) (NN state))
        (VP (VBG resulting)
          (PP (IN from)
            (NP (PRP s)))
          (PP (IN by)
            (S
              (VP (VBG applying)
                (NP
                  (NP (DT a) (NN plan) (NN P))
                  (, ,)
                  (VP (VBN denoted)
                    (PP (IN by)
                      (NP (NNP s) (NNP -LSB-) (NNP P) (NNP -RSB-)))
                    (, ,)
                    (ADVP (RB inductively)))))))))
      (SBAR (IN as)
        (S
          (VP (VBZ follows)))))
    (. .)))

case(s-5, Starting-1)
case(s-5, from-2)
det(s-5, a-3)
compound(s-5, state-4)
advcl(define-8, s-5)
nsubj(define-8, we-7)
root(ROOT-0, define-8)
det(state-10, the-9)
dobj(define-8, state-10)
acl(state-10, resulting-11)
case(s-13, from-12)
nmod:from(resulting-11, s-13)
mark(applying-15, by-14)
advcl(resulting-11, applying-15)
det(P-18, a-16)
compound(P-18, plan-17)
dobj(applying-15, P-18)
acl(P-18, denoted-20)
case(-RSB--25, by-21)
compound(-RSB--25, s-22)
compound(-RSB--25, -LSB--23)
compound(-RSB--25, P-24)
nmod:by(denoted-20, -RSB--25)
advmod(denoted-20, inductively-27)
mark(follows-29, as-28)
advcl(define-8, follows-29)

(ROOT
  (S
    (S
      (S
        (PP (IN For)
          (NP (DT the) (JJ empty) (NN plan) (NNP P) (NNP =)))
        (, ,)
        (NP (PRP we))
        (VP (VB define)
          (S
            (NP (NNP s) (NNP -LSB-) (NNP -RSB-))
            (VP (SYM =)
              (NP (NN s.))))))
      (IN For)
      (S
        (NP (JJ non-empty) (NNS plans))
        (VP (VBP P) (, ,)
          (S
            (VP (VBG denoting)
              (S
                (NP (NNP P))
                (VP (SYM =)
                  (NP (NNP P))))))))
      (, ,)
      (S
        (X (SYM a))
        (, ,)
        (NP (VBP we) (NN define))
        (VP (VBZ s)
          (NP (NNP -LSB-) (NNP P)))))
    (, ,)
    (NP (DT a) (NN -RSB-) (IN as))
    (VP (VBZ follows))
    (. .)))

case(=-6, For-1)
det(=-6, the-2)
amod(=-6, empty-3)
compound(=-6, plan-4)
compound(=-6, P-5)
nmod:for(define-9, =-6)
nsubj(define-9, we-8)
ccomp(follows-36, define-9)
compound(-RSB--12, s-10)
compound(-RSB--12, -LSB--11)
nsubj(s.-14, -RSB--12)
dep(s.-14, =-13)
ccomp(define-9, s.-14)
dep(define-9, For-15)
amod(plans-17, non-empty-16)
nsubj(P-18, plans-17)
parataxis(define-9, P-18)
xcomp(P-18, denoting-20)
nsubj(P-23, P-21)
dep(P-23, =-22)
ccomp(denoting-20, P-23)
dep(P-31, a-25)
dep(define-28, we-27)
nsubj(P-31, define-28)
cop(P-31, s-29)
compound(P-31, -LSB--30)
parataxis(define-9, P-31)
det(-RSB--34, a-33)
nsubj(follows-36, -RSB--34)
amod(-RSB--34, as-35)
root(ROOT-0, follows-36)

(ROOT
  (S
    (SBAR
      (X (SYM *))
      (S
        (SBAR (IN If)
          (S
            (PRN (-LRB- -LRB-)
              (NP
                (NP (PRP s))
                (NP
                  (NP (NNP -LSB-) (NNP P))
                  (NP
                    (NP (JJ -RSB-) (NNS vars))
                    (-LRB- -LRB-)
                    (NP (NN pre))
                    (PRN (-LRB- -LRB-)
                      (X (SYM a))
                      (-RRB- -RRB-))
                    (-RRB- -RRB-))))
              (-RRB- -RRB-))
            (VP (VBZ =)
              (NP
                (NP (NN pre))
                (PRN (-LRB- -LRB-)
                  (X (SYM a))
                  (-RRB- -RRB-))))))
        (PRN (-LRB- -LRB-)
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ is) (, ,)
                (SBAR
                  (S
                    (NP
                      (NP (DT the) (NN precondition))
                      (PP (IN of)
                        (X (SYM a))))
                    (VP (VBZ does) (RB not)
                      (VP (VB hold)
                        (PP (IN in)
                          (NP (NNP s) (NNP -LSB-) (NNP P) (NNP -RSB-))))))))))
          (-RRB- -RRB-))
        (ADVP (RB then))
        (VP (VBZ s)
          (NP (NNP -LSB-) (NNP P)))))
    (, ,)
    (NP (DT a) (NNP -RSB-) (NNP =))
    (VP (VBZ s)
      (VP (VBG -LSB-)
        (NP (NNP P) (NNP -RSB-))))
    (. .)))

dep(P-41, *-1)
mark(=-16, If-2)
dep(=-16, s-4)
compound(P-6, -LSB--5)
dep(s-4, P-6)
amod(vars-8, -RSB--7)
dep(P-6, vars-8)
dep(vars-8, pre-10)
dep(vars-8, a-12)
advcl(P-41, =-16)
dobj(=-16, pre-17)
dep(pre-17, a-19)
nsubj(is-23, that-22)
parataxis(P-41, is-23)
det(precondition-26, the-25)
nsubj(hold-31, precondition-26)
case(a-28, of-27)
acl(precondition-26, a-28)
aux(hold-31, does-29)
neg(hold-31, not-30)
ccomp(is-23, hold-31)
case(-RSB--36, in-32)
compound(-RSB--36, s-33)
compound(-RSB--36, -LSB--34)
compound(-RSB--36, P-35)
nmod:in(hold-31, -RSB--36)
advmod(P-41, then-38)
cop(P-41, s-39)
compound(P-41, -LSB--40)
advcl(-LSB--47, P-41)
det(=-45, a-43)
compound(=-45, -RSB--44)
nsubj(-LSB--47, =-45)
aux(-LSB--47, s-46)
root(ROOT-0, -LSB--47)
compound(-RSB--49, P-48)
dobj(-LSB--47, -RSB--49)

(ROOT
  (S
    (SBAR
      (X (SYM *))
      (S
        (ADVP (RB Otherwise))
        (, ,)
        (NP (PRP s))
        (VP (VBZ -LSB-)
          (NP (NNP P)))))
    (, ,)
    (NP (DT a) (NN -RSB-))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN state))
        (ADJP (JJ equal)
          (PP (TO to)
            (NP (NN post))))
        (PRN (-LRB- -LRB-)
          (X (SYM a))
          (-RRB- -RRB-)))
      (PP (IN on)
        (NP
          (NP
            (NP (NNS variables) (NN v) (NNS vars))
            (-LRB- -LRB-)
            (NP (NN post))
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (-RRB- -RRB-))
          (, ,)
          (CC and)
          (NP
            (NP
              (ADJP (JJ equal)
                (PP (TO to)
                  (NP
                    (NP (NNP s) (NNP -LSB-) (NNP P) (NNP -RSB-))
                    (PP (IN on)
                      (NP (NNS variables))))))
              (NN v))
            (NP
              (NP (NNP V) (NNP \) (NNS vars))
              (-LRB- -LRB-)
              (NP (NN post))
              (PRN (-LRB- -LRB-)
                (X (SYM a))
                (-RRB- -RRB-))
              (-RRB- -RRB-))))))
    (. .)))

dep(-LSB--5, *-1)
advmod(-LSB--5, Otherwise-2)
nsubj(-LSB--5, s-4)
advcl(state-12, -LSB--5)
dobj(-LSB--5, P-6)
det(-RSB--9, a-8)
nsubj(state-12, -RSB--9)
cop(state-12, is-10)
det(state-12, the-11)
root(ROOT-0, state-12)
amod(state-12, equal-13)
case(post-15, to-14)
nmod:to(equal-13, post-15)
dep(state-12, a-17)
case(vars-22, on-19)
compound(vars-22, variables-20)
compound(vars-22, v-21)
nmod:on(state-12, vars-22)
dep(vars-22, post-24)
dep(vars-22, a-26)
cc(vars-22, and-30)
amod(v-39, equal-31)
case(-RSB--36, to-32)
compound(-RSB--36, s-33)
compound(-RSB--36, -LSB--34)
compound(-RSB--36, P-35)
nmod:to(equal-31, -RSB--36)
case(variables-38, on-37)
nmod:on(-RSB--36, variables-38)
nmod:on(state-12, v-39)
conj:and(vars-22, v-39)
compound(vars-42, V-40)
compound(vars-42, \-41)
dep(v-39, vars-42)
dep(vars-42, post-44)
dep(vars-42, a-46)

(ROOT
  (SINV
    (S
      (NP (PRP We))
      (VP (VBP say)
        (SBAR (IN that)
          (S
            (NP (DT a) (NN state) (NN s))
            (VP (VBZ is)
              (ADJP (JJ reachable)
                (PRN (-LRB- -LRB-)
                  (PP (IN in)
                    (NP (DT an) (NN instance)))
                  (-RRB- -RRB-))
                (SBAR (IN if)
                  (S
                    (NP (EX there))
                    (VP (VBZ exists)
                      (NP (DT a) (NN plan)))))))))))
    (VP (VBP P)
      (NP (JJ such))
      (SBAR (IN that)
        (S
          (NP (PRP s))
          (VP (SYM =)
            (NP (JJ init) (NNS -LSB-))))))
    (NP (NNP P) (NNP -RSB-))
    (. .)))

nsubj(say-2, We-1)
dep(P-19, say-2)
mark(reachable-8, that-3)
det(s-6, a-4)
compound(s-6, state-5)
nsubj(reachable-8, s-6)
cop(reachable-8, is-7)
ccomp(say-2, reachable-8)
case(instance-12, in-10)
det(instance-12, an-11)
dep(reachable-8, instance-12)
mark(exists-16, if-14)
expl(exists-16, there-15)
ccomp(reachable-8, exists-16)
det(plan-18, a-17)
dobj(exists-16, plan-18)
root(ROOT-0, P-19)
dobj(P-19, such-20)
mark(-LSB--25, that-21)
nsubj(-LSB--25, s-22)
dep(-LSB--25, =-23)
amod(-LSB--25, init-24)
ccomp(P-19, -LSB--25)
compound(-RSB--27, P-26)
nsubj(P-19, -RSB--27)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP are)
        (VP (VBN concerned)
          (PP (IN with)
            (NP
              (NP (DT the) (NN problem))
              (PP (IN of)
                (NP (NN plan) (NN generation))))))))
    (: :)
    (S
      (VP (VBN given)
        (S
          (NP (DT an) (NN instance))
          (VP (SYM =)
            (NP (CD 75) (NN Proof))))))
    (. .)))

nsubjpass(concerned-3, We-1)
auxpass(concerned-3, are-2)
root(ROOT-0, concerned-3)
case(problem-6, with-4)
det(problem-6, the-5)
nmod:with(concerned-3, problem-6)
case(generation-9, of-7)
compound(generation-9, plan-8)
nmod:of(problem-6, generation-9)
parataxis(concerned-3, given-11)
det(instance-13, an-12)
nsubj(Proof-16, instance-13)
dep(Proof-16, =-14)
nummod(Proof-16, 75-15)
ccomp(given-11, Proof-16)

(ROOT
  (S
    (ADVP (RB Clearly))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (DT the) (NN algorithm))
        (VP (VBZ outputs)
          (NP (DT a) (NN plan)))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is)
      (ADJP (JJ correct)))
    (. .)))

advmod(correct-12, Clearly-1)
mark(outputs-6, if-3)
det(algorithm-5, the-4)
nsubj(outputs-6, algorithm-5)
advcl(correct-12, outputs-6)
det(plan-8, a-7)
dobj(outputs-6, plan-8)
nsubj(correct-12, it-10)
cop(correct-12, is-11)
root(ROOT-0, correct-12)

(ROOT
  (S
    (VP (VB Assume)
      (SBAR (IN that)
        (S
          (NP (DT a) (NN plan))
          (VP (VBZ exists)
            (PP (IN for)
              (NP
                (NP (DT an) (NN instance))
                (PP (IN of)
                  (NP (NNP C)))))))))
    (. .)))

root(ROOT-0, Assume-1)
mark(exists-5, that-2)
det(plan-4, a-3)
nsubj(exists-5, plan-4)
ccomp(Assume-1, exists-5)
case(instance-8, for-6)
det(instance-8, an-7)
nmod:for(exists-5, instance-8)
case(C-10, of-9)
nmod:of(instance-8, C-10)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP prove)
      (PP (IN by)
        (NP (NN induction)))
      (SBAR (IN that)
        (S
          (PRN (, ,)
            (PP (IN before)
              (NP
                (NP (DT the) (NN ith) (NN iteration))
                (PP (IN of)
                  (NP
                    (NP (DT the) (NN loop))
                    (, ,)
                    (NP
                      (NP (NN none))
                      (PP (IN of)
                        (NP (DT the) (NNS variables) (NNS v1))))
                    (, ,))))
              (: ...))
            (, ,))
          (NP (JJ vi-1))
          (VP (VBP are)
            (PP (IN in)
              (NP
                (NP (JJ wrong))
                (PRN (-LRB- -LRB-)
                  (NP (NN si))
                  (-RRB- -RRB-))))))))
    (. .)))

nsubj(prove-2, We-1)
root(ROOT-0, prove-2)
case(induction-4, by-3)
nmod:by(prove-2, induction-4)
mark(wrong-26, that-5)
case(iteration-10, before-7)
det(iteration-10, the-8)
compound(iteration-10, ith-9)
dep(wrong-26, iteration-10)
case(loop-13, of-11)
det(loop-13, the-12)
nmod:of(iteration-10, loop-13)
appos(loop-13, none-15)
case(v1-19, of-16)
det(v1-19, the-17)
compound(v1-19, variables-18)
nmod:of(none-15, v1-19)
nsubj(wrong-26, vi-1-23)
cop(wrong-26, are-24)
case(wrong-26, in-25)
ccomp(prove-2, wrong-26)
appos(wrong-26, si-28)

(ROOT
  (S
    (ADVP (RB Here))
    (, ,)
    (NP (NN si))
    (VP (VBZ denotes)
      (SBAR
        (S
          (NP (DT the) (NN state))
          (VP (VBZ s)
            (PP (IN before)
              (NP (DT the) (NN ith) (NN iteration)))))))
    (. .)))

advmod(denotes-4, Here-1)
nsubj(denotes-4, si-3)
root(ROOT-0, denotes-4)
det(state-6, the-5)
nsubj(iteration-11, state-6)
cop(iteration-11, s-7)
case(iteration-11, before-8)
det(iteration-11, the-9)
compound(iteration-11, ith-10)
ccomp(denotes-4, iteration-11)

(ROOT
  (S
    (NP
      (NP (DT The) (NN base) (NN case))
      (VP (VBN i)
        (S
          (VP (SYM =)
            (NP (CD 1))))))
    (VP (VBZ is)
      (ADJP (JJ trivial)))
    (. .)))

det(case-3, The-1)
compound(case-3, base-2)
nsubj(trivial-8, case-3)
acl(case-3, i-4)
dep(1-6, =-5)
ccomp(i-4, 1-6)
cop(trivial-8, is-7)
root(ROOT-0, trivial-8)

(ROOT
  (S
    (PP (IN For)
      (NP (DT the) (NN induction)))
    (, ,)
    (NP (PRP we))
    (VP (VBP observe)
      (SBAR (IN that)
        (S
          (SBAR (IN since)
            (S
              (VP (VBZ has)
                (NP
                  (NP (NN width) (NN k))
                  (CC and)
                  (NP
                    (NP (DT a) (NN plan))
                    (VP (VBZ exists)))))))
          (, ,)
          (NP (DT the) (JJ variable) (NN vi))
          (VP (VBZ is)
            (ADVP (RB either))
            (RB not)
            (PP (IN in)
              (NP
                (ADJP
                  (ADJP
                    (ADJP (JJ wrong))
                    (PRN (-LRB- -LRB-)
                      (NP (NN si))
                      (-RRB- -RRB-)))
                  (CC or)
                  (ADJP (JJ k))
                  (: -))
                (NN improvable)))))))
    (. .)))

case(induction-3, For-1)
det(induction-3, the-2)
nmod:for(observe-6, induction-3)
nsubj(observe-6, we-5)
root(ROOT-0, observe-6)
mark(improvable-31, that-7)
mark(has-9, since-8)
advcl(improvable-31, has-9)
compound(k-11, width-10)
dobj(has-9, k-11)
cc(k-11, and-12)
det(plan-14, a-13)
dobj(has-9, plan-14)
conj:and(k-11, plan-14)
dep(plan-14, exists-15)
det(vi-19, the-17)
amod(vi-19, variable-18)
nsubj(improvable-31, vi-19)
cop(improvable-31, is-20)
advmod(improvable-31, either-21)
neg(improvable-31, not-22)
case(improvable-31, in-23)
amod(improvable-31, wrong-24)
dep(wrong-24, si-26)
cc(wrong-24, or-28)
conj:or(wrong-24, k-29)
amod(improvable-31, k-29)
ccomp(observe-6, improvable-31)

(ROOT
  (S
    (S
      (PP (IN In)
        (NP (DT the) (JJ first) (NN case)))
      (, ,)
      (S
        (NP (DT the) (NN algorithm))
        (ADJP
          (ADJP (RB /) (JJ wrong))
          (PRN (-LRB- -LRB-)
            (ADJP
              (QP (CD si) (CD +1)))
            (-RRB- -RRB-))))
      (, ,)
      (VP (VBZ does)
        (NP
          (NP (NN nothing))
          (PP (IN in)
            (NP (DT the) (NN ith) (NN iteration))))))
    (CC and)
    (S
      (UCP (RB thus)
        (ADJP (JJ vi))
        (CC and)
        (PP (IN in)
          (NP (DT the) (JJ second) (NN case))))
      (, ,)
      (NP (DT the) (NN algorithm))
      (VP (VBZ finds)
        (NP
          (NP (DT a) (NN plan) (VBG improving) (NN vi))
          (PP (IN in)
            (NP (NN si))))))
    (. .)))

case(case-4, In-1)
det(case-4, the-2)
amod(case-4, first-3)
nmod:in(does-15, case-4)
det(algorithm-7, the-6)
dep(wrong-9, algorithm-7)
advmod(wrong-9, /-8)
ccomp(does-15, wrong-9)
compound(+1-12, si-11)
dep(wrong-9, +1-12)
root(ROOT-0, does-15)
dobj(does-15, nothing-16)
case(iteration-20, in-17)
det(iteration-20, the-18)
compound(iteration-20, ith-19)
nmod:in(nothing-16, iteration-20)
cc(does-15, and-21)
dep(finds-32, thus-22)
dep(thus-22, vi-23)
cc(thus-22, and-24)
case(case-28, in-25)
det(case-28, the-26)
amod(case-28, second-27)
conj:and(thus-22, case-28)
dep(finds-32, case-28)
det(algorithm-31, the-30)
nsubj(finds-32, algorithm-31)
conj:and(does-15, finds-32)
det(vi-36, a-33)
compound(vi-36, plan-34)
amod(vi-36, improving-35)
dobj(finds-32, vi-36)
case(si-38, in-37)
nmod:in(vi-36, si-38)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (VB search)
          (PP (IN for)
            (NP (DT a) (NN plan) (VBG improving) (NN vi))))))
    (, ,)
    (NP (PRP we))
    (VP (VBP do)
      (NP (DT the) (NN following)))
    (. .)))

mark(search-2, To-1)
advcl(do-10, search-2)
case(vi-7, for-3)
det(vi-7, a-4)
compound(vi-7, plan-5)
amod(vi-7, improving-6)
nmod:for(search-2, vi-7)
nsubj(do-10, we-9)
root(ROOT-0, do-10)
det(following-12, the-11)
dobj(do-10, following-12)

(ROOT
  (S
    (PP (IN For)
      (NP
        (NP (DT every) (NN choice))
        (PP (IN of)
          (NP (NNP k) (NNP variables) (NNP W)))))
    (, ,)
    (NP (PRP we))
    (VP (VBP create)
      (NP
        (NP (DT a) (NN graph))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ has)
              (PP (IN as)
                (NP (NNS vertices)))
              (NP
                (NP (DT the)
                  (QP (IN at) (JJS most) (CD dk))
                  (NNS states))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBP differ)
                      (PP (IN from)
                        (NP (NN si)))
                      (PP (IN at)
                        (NP
                          (NP (JJ only) (NNS variables))
                          (PP (IN in)
                            (NP (NNP W))))))))))))))
    (. .)))

case(choice-3, For-1)
det(choice-3, every-2)
nmod:for(create-10, choice-3)
case(W-7, of-4)
compound(W-7, k-5)
compound(W-7, variables-6)
nmod:of(choice-3, W-7)
nsubj(create-10, we-9)
root(ROOT-0, create-10)
det(graph-12, a-11)
dobj(create-10, graph-12)
nsubj(has-14, graph-12)
ref(graph-12, that-13)
acl:relcl(graph-12, has-14)
case(vertices-16, as-15)
nmod:as(has-14, vertices-16)
det(states-21, the-17)
case(most-19, at-18)
nmod:npmod(dk-20, most-19)
nummod(states-21, dk-20)
dobj(has-14, states-21)
nsubj(differ-23, states-21)
ref(states-21, that-22)
acl:relcl(states-21, differ-23)
case(si-25, from-24)
nmod:from(differ-23, si-25)
case(variables-28, at-26)
amod(variables-28, only-27)
nmod:at(differ-23, variables-28)
case(W-30, in-29)
nmod:in(variables-28, W-30)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (NP
        (NP (DT an) (NN edge))
        (PP (IN from)
          (NP (NN vertex)))
        (SBAR
          (S
            (VP (VBZ s)
              (S
                (VP (TO to)
                  (VP (VB vertex)
                    (NP (PRP s))
                    (SBAR (IN if)
                      (S
                        (NP (EX there))
                        (VP (VBZ exists)
                          (NP
                            (NP (DT an) (NN action))
                            (SBAR
                              (S
                                (NP
                                  (NP (DT a) (JJ such))
                                  (SBAR
                                    (WHNP (WDT that))
                                    (S
                                      (VP (VBZ s)
                                        (VP (VBG -LSB-)
                                          (NP (DT a) (NN -RSB-)))))))
                                (VP (SYM =)
                                  (NP (PRP s)))))))))))))))))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
det(edge-4, an-3)
nsubj(is-2, edge-4)
case(vertex-6, from-5)
nmod:from(edge-4, vertex-6)
acl:relcl(edge-4, s-7)
mark(vertex-9, to-8)
xcomp(s-7, vertex-9)
dobj(vertex-9, s-10)
mark(exists-13, if-11)
expl(exists-13, there-12)
advcl(vertex-9, exists-13)
det(action-15, an-14)
dobj(exists-13, action-15)
nsubj(-LSB--20, action-15)
det(such-17, a-16)
nsubj(-LSB--20, such-17)
nsubj(s-24, such-17)
ref(action-15, that-18)
ref(such-17, that-18)
aux(-LSB--20, s-19)
acl:relcl(such-17, -LSB--20)
det(-RSB--22, a-21)
dobj(-LSB--20, -RSB--22)
dep(s-24, =-23)
acl:relcl(action-15, s-24)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP perform)
      (SBAR
        (S
          (NP (DT a) (NN search)
            (S
              (VP (TO to)
                (VP (VB check)
                  (SBAR (IN if)
                    (S
                      (NP (DT some) (NN vertex))
                      (VP (VBZ s)
                        (NP (PDT such)
                          (NP
                            (NP
                              (NP
                                (NP (DT that) (JJ wrong))
                                (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
                              (-LRB- -LCB-)
                              (NP (NNS v1))
                              (, ,))
                            (: ...)
                            (NP (, ,)
                              (NP (NN vi))
                              (-RRB- -RCB-) (NNS =)))))))))))
          (VP (VBZ is)
            (ADJP (JJ reachable)
              (PP (IN from)
                (NP (NN si))))))))
    (. .)))

nsubj(perform-2, We-1)
root(ROOT-0, perform-2)
det(search-4, a-3)
nsubj(reachable-26, search-4)
mark(check-6, to-5)
acl(search-4, check-6)
mark(wrong-13, if-7)
det(vertex-9, some-8)
nsubj(wrong-13, vertex-9)
cop(wrong-13, s-10)
dep(wrong-13, such-11)
det(wrong-13, that-12)
advcl(check-6, wrong-13)
dep(wrong-13, s-15)
dep(wrong-13, v1-18)
dep(=-24, vi-22)
dep(wrong-13, =-24)
cop(reachable-26, is-25)
ccomp(perform-2, reachable-26)
case(si-28, from-27)
nmod:from(reachable-26, si-28)

(ROOT
  (S
    (S
      (NP (DT This) (NN search))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN performed)
            (PP (IN in)
              (NP
                (NP
                  (NP (NN time) (NN O))
                  (PRN (-LRB- -LRB-)
                    (NP (NNP |) (NNP X) (NNP |) (NNP +) (NNP |) (NNP E) (NNP |))
                    (-RRB- -RRB-)))
                (, ,)
                (SBAR
                  (WHADVP (WRB where))
                  (S
                    (NP (NNP |) (NNP X) (NNP |))
                    (VP (VBZ is)
                      (NP
                        (NP (DT the) (NN number))
                        (PP (IN of)
                          (NP (NNS vertices)))))))))))))
    (CC and)
    (S
      (NP (NNP |) (NNP E) (NNP |))
      (VP (VBZ is)
        (NP
          (NP (DT the) (NN number))
          (PP (IN of)
            (NP (NNS edges))))))
    (. .)))

det(search-2, This-1)
nsubjpass(performed-5, search-2)
aux(performed-5, can-3)
auxpass(performed-5, be-4)
root(ROOT-0, performed-5)
case(O-8, in-6)
compound(O-8, time-7)
nmod:in(performed-5, O-8)
compound(|-16, |-10)
compound(|-16, X-11)
compound(|-16, |-12)
compound(|-16, +-13)
compound(|-16, |-14)
compound(|-16, E-15)
appos(O-8, |-16)
advmod(number-25, where-19)
compound(|-22, |-20)
compound(|-22, X-21)
nsubj(number-25, |-22)
cop(number-25, is-23)
det(number-25, the-24)
acl:relcl(O-8, number-25)
case(vertices-27, of-26)
nmod:of(number-25, vertices-27)
cc(performed-5, and-28)
compound(|-31, |-29)
compound(|-31, E-30)
nsubj(number-34, |-31)
cop(number-34, is-32)
det(number-34, the-33)
conj:and(performed-5, number-34)
case(edges-36, of-35)
nmod:of(number-34, edges-36)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP have)
        (VP (VBN |)
          (S
            (NP (NNP X) (NNP |) (NNP dk)
              (CC and)
              (NNP |) (NNP E) (NNP |))
            (VP (SYM =)
              (NP (NN dk) (DT a)))))))
    (, ,) (IN so)
    (S
      (NP (DT this) (NN search))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN performed)
            (PP (IN in)
              (NP
                (NP (NN time) (NN O))
                (PRN (-LRB- -LRB-)
                  (NP (NNP dk) (NNP a))
                  (-RRB- -RRB-))))))))
    (. .)))

nsubj(|-3, We-1)
aux(|-3, have-2)
root(ROOT-0, |-3)
compound(dk-6, X-4)
compound(dk-6, |-5)
nsubj(dk-12, dk-6)
cc(dk-6, and-7)
compound(|-10, |-8)
compound(|-10, E-9)
conj:and(dk-6, |-10)
nsubj(dk-12, |-10)
dep(dk-12, =-11)
ccomp(|-3, dk-12)
dep(dk-12, a-13)
dep(|-3, so-15)
det(search-17, this-16)
nsubjpass(performed-20, search-17)
aux(performed-20, can-18)
auxpass(performed-20, be-19)
parataxis(|-3, performed-20)
case(O-23, in-21)
compound(O-23, time-22)
nmod:in(performed-20, O-23)
compound(a-26, dk-25)
appos(O-23, a-26)

(ROOT
  (S
    (VP (NN Note)
      (SBAR (IN that)
        (S
          (S
            (VP (VBG creating)
              (NP (DT the) (NN graph))))
          (VP (MD can)
            (ADVP (RB also))
            (VP (VB be)
              (VP (VBN performed)
                (PP (IN in)
                  (NP
                    (NP (NN time) (NN O))
                    (PRN (-LRB- -LRB-)
                      (NP (NNP dk) (NNP a))
                      (-RRB- -RRB-))))))))))
    (. .)))

root(ROOT-0, Note-1)
mark(performed-9, that-2)
csubjpass(performed-9, creating-3)
det(graph-5, the-4)
dobj(creating-3, graph-5)
aux(performed-9, can-6)
advmod(performed-9, also-7)
auxpass(performed-9, be-8)
ccomp(Note-1, performed-9)
case(O-12, in-10)
compound(O-12, time-11)
nmod:in(performed-9, O-12)
compound(a-15, dk-14)
appos(O-12, a-15)

(ROOT
  (S
    (SBAR (IN Since)
      (S
        (S
          (NP (EX there))
          (VP (VBP are)
            (NP
              (NP (NN n) (NN k) (NNS choices))
              (PP (IN for)
                (NP (NNP W))))))
        (, ,)
        (CC and)
        (S
          (NP (PRP we))
          (ADVP (RB potentially))
          (VP (VB improve)
            (NP (NN n) (NNS variables))))))
    (, ,)
    (NP (DT the) (JJ total) (JJ running) (NN time))
    (VP (VBZ is)
      (VP (VBN bounded)
        (PP (IN by)
          (NP
            (NP (NNP O))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NN nk) (CD +1))
                (NP (NN dk) (DT a)))
              (-RRB- -RRB-))))))
    (. .)))

mark(are-3, Since-1)
expl(are-3, there-2)
advcl(bounded-22, are-3)
compound(choices-6, n-4)
compound(choices-6, k-5)
nsubj(are-3, choices-6)
case(W-8, for-7)
nmod:for(choices-6, W-8)
cc(are-3, and-10)
nsubj(improve-13, we-11)
advmod(improve-13, potentially-12)
conj:and(are-3, improve-13)
advcl(bounded-22, improve-13)
compound(variables-15, n-14)
dobj(improve-13, variables-15)
det(time-20, the-17)
amod(time-20, total-18)
amod(time-20, running-19)
nsubjpass(bounded-22, time-20)
auxpass(bounded-22, is-21)
root(ROOT-0, bounded-22)
case(O-24, by-23)
nmod:agent(bounded-22, O-24)
dep(O-24, nk-26)
nummod(nk-26, +1-27)
dep(nk-26, dk-28)
dep(dk-28, a-29)

(ROOT
  (S
    (PP (IN As)
      (NP (DT an) (NN example)))
    (, ,)
    (NP (PRP we))
    (VP (VBP show)
      (SBAR (IN that)
        (S
          (NP
            (NP (DT all) (NNS instances))
            (PP (IN of)
              (NP (DT the) (NNP Gripper) (NN domain))))
          (VP (VBP have)
            (VP (VBN bounded)
              (NP (NN width)))))))
    (. .)))

case(example-3, As-1)
det(example-3, an-2)
nmod:as(show-6, example-3)
nsubj(show-6, we-5)
root(ROOT-0, show-6)
mark(bounded-15, that-7)
det(instances-9, all-8)
nsubj(bounded-15, instances-9)
case(domain-13, of-10)
det(domain-13, the-11)
compound(domain-13, Gripper-12)
nmod:of(instances-9, domain-13)
aux(bounded-15, have-14)
ccomp(show-6, bounded-15)
dobj(bounded-15, width-16)

(ROOT
  (S
    (PP (IN For)
      (NP (NN simplicity)))
    (, ,)
    (NP (PRP we))
    (VP (VBP consider)
      (NP
        (NP (DT a) (NN variation))
        (PP (IN of)
          (NP (DT the) (NNP Gripper) (NN domain))))
      (SBAR
        (WHADVP (WRB where))
        (S
          (NP (EX there))
          (VP (VBZ is)
            (NP (RB only) (CD one) (NN hand))))))
    (. .)))

case(simplicity-2, For-1)
nmod:for(consider-5, simplicity-2)
nsubj(consider-5, we-4)
root(ROOT-0, consider-5)
det(variation-7, a-6)
dobj(consider-5, variation-7)
case(domain-11, of-8)
det(domain-11, the-9)
compound(domain-11, Gripper-10)
nmod:of(variation-7, domain-11)
advmod(is-14, where-12)
expl(is-14, there-13)
advcl(consider-5, is-14)
advmod(hand-17, only-15)
nummod(hand-17, one-16)
nsubj(is-14, hand-17)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ is)
        (PP (TO to)
          (ADJP (JJ easy)))
        (SBAR (IN that)
          (S
            (NP
              (NP (DT the) (JJ same) (NN proof))
              (PP (IN with)
                (NP (DT the) (JJ same) (NN width) (NNS bounds))))
            (VP (VBZ applies)
              (ADVP (DT no) (NN matter))
              (NP
                (NP (DT the) (NN number))
                (PP (IN of)
                  (NP (VBG holding) (NNS devices)))))))))
    (NP (DT the) (NN robot))
    (VP (VBZ has))
    (. .)))

nsubj(easy-4, It-1)
cop(easy-4, is-2)
case(easy-4, to-3)
dep(has-24, easy-4)
mark(applies-14, that-5)
det(proof-8, the-6)
amod(proof-8, same-7)
nsubj(applies-14, proof-8)
case(bounds-13, with-9)
det(bounds-13, the-10)
amod(bounds-13, same-11)
compound(bounds-13, width-12)
nmod:with(proof-8, bounds-13)
ccomp(easy-4, applies-14)
neg(matter-16, no-15)
advmod(applies-14, matter-16)
det(number-18, the-17)
dobj(applies-14, number-18)
case(devices-21, of-19)
amod(devices-21, holding-20)
nmod:of(number-18, devices-21)
det(robot-23, the-22)
nsubj(has-24, robot-23)
root(ROOT-0, has-24)

(ROOT
  (S
    (NP
      (NP (NNP Domain) (CD 3))
      (PRN (-LRB- -LRB-)
        (NP (NNP Gripper) (NN domain))
        (-RRB- -RRB-)))
    (PP (IN In)
      (NP (DT the) (NNP Gripper) (NN domain)))
    (, ,)
    (NP (PRP we))
    (VP (VBP have)
      (NP
        (NP (DT a) (NN robot))
        (PP (IN with)
          (NP
            (NP (DT a) (NN hand))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (MD can)
                  (VP
                    (VP (VB pick)
                      (PRT (RP up)))
                    (CC and)
                    (VP (VB drop)
                      (NP (NNS balls)))
                    (, ,)
                    (CC and)
                    (VP (VB move)
                      (NP (PRP them))
                      (PP (IN from)
                        (NP
                          (NP (CD one) (NN location))
                          (PP (TO to)
                            (NP (DT another))))))))))))))
    (. .)))

nsubj(have-13, Domain-1)
nummod(Domain-1, 3-2)
compound(domain-5, Gripper-4)
appos(Domain-1, domain-5)
case(domain-10, In-7)
det(domain-10, the-8)
compound(domain-10, Gripper-9)
nmod:in(have-13, domain-10)
nsubj(have-13, we-12)
root(ROOT-0, have-13)
det(robot-15, a-14)
dobj(have-13, robot-15)
case(hand-18, with-16)
det(hand-18, a-17)
nmod:with(robot-15, hand-18)
nsubj(pick-21, hand-18)
nsubj(drop-24, hand-18)
nsubj(move-28, hand-18)
ref(hand-18, that-19)
aux(pick-21, can-20)
acl:relcl(hand-18, pick-21)
compound:prt(pick-21, up-22)
cc(pick-21, and-23)
acl:relcl(hand-18, drop-24)
conj:and(pick-21, drop-24)
dobj(drop-24, balls-25)
cc(pick-21, and-27)
acl:relcl(hand-18, move-28)
conj:and(pick-21, move-28)
dobj(move-28, them-29)
case(location-32, from-30)
nummod(location-32, one-31)
nmod:from(move-28, location-32)
case(another-34, to-33)
nmod:to(location-32, another-34)

(ROOT
  (S
    (NP (DT The) (NN hand))
    (VP (MD can)
      (VP (VB hold)
        (NP
          (NP (CD one) (NN ball))
          (PP (IN at)
            (NP (DT a) (NN time))))))
    (. .)))

det(hand-2, The-1)
nsubj(hold-4, hand-2)
aux(hold-4, can-3)
root(ROOT-0, hold-4)
nummod(ball-6, one-5)
dobj(hold-4, ball-6)
case(time-9, at-7)
det(time-9, a-8)
nmod:at(ball-6, time-9)

(ROOT
  (S
    (ADVP (RB Formally))
    (, ,)
    (PP (IN in)
      (NP
        (NP
          (NP (DT an) (NN instance))
          (PRN (-LRB- -LRB-)
            (NP (NNP V))
            (, ,)
            (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
            (-RRB- -RRB-)))
        (PP (IN of)
          (NP (DT the) (NNP Gripper) (NN domain)))))
    (, ,)
    (NP (EX there))
    (VP (VBZ is)
      (NP
        (NP
          (NP (DT a) (NN set))
          (PP (IN of)
            (NP (NNP balls) (NNP B))))
        (, ,)
        (CC and)
        (NP
          (NP (DT a) (NN set))
          (PP (IN of)
            (NP (NNP locations) (NNP L))))))
    (. .)))

advmod(is-21, Formally-1)
case(instance-5, in-3)
det(instance-5, an-4)
nmod:in(is-21, instance-5)
appos(instance-5, V-7)
compound(A-13, init-9)
dep(A-13, goal-11)
dep(V-7, A-13)
case(domain-18, of-15)
det(domain-18, the-16)
compound(domain-18, Gripper-17)
nmod:of(instance-5, domain-18)
expl(is-21, there-20)
root(ROOT-0, is-21)
det(set-23, a-22)
nsubj(is-21, set-23)
case(B-26, of-24)
compound(B-26, balls-25)
nmod:of(set-23, B-26)
cc(set-23, and-28)
det(set-30, a-29)
nsubj(is-21, set-30)
conj:and(set-23, set-30)
case(L-33, of-31)
compound(L-33, locations-32)
nmod:of(set-30, L-33)

(ROOT
  (S
    (NP (DT The) (NN variable))
    (VP (VBD set)
      (SBAR
        (S
          (NP (NNP V))
          (VP (VBZ is)
            (VP (VBN defined)
              (PP (IN as)
                (NP
                  (NP
                    (NP
                      (NP (NNP B))
                      (PRN (-LRB- -LCB-)
                        (NP
                          (NP (NN pos))
                          (, ,)
                          (NP (NN hand)))
                        (-RRB- -RCB-)))
                    (SBAR
                      (WHADVP (WRB where))
                      (S
                        (NP
                          (NP (NNP D))
                          (PRN (-LRB- -LRB-)
                            (NP (NN pos))
                            (-RRB- -RRB-)))
                        (VP (SYM =)
                          (NP (NNP L))))))
                  (, ,)
                  (NP
                    (NP (NNP D) (-LRB- -LRB-) (NN hand) (-RRB- -RRB-))
                    (SBAR
                      (S
                        (VP (SYM =)
                          (NP (NNP B) (-LRB- -LCB-) (NNP empty) (-RRB- -RCB-))))))
                  (, ,)
                  (CC and)
                  (PP (IN for)
                    (NP
                      (NP (DT all) (NNP b) (NNP B))
                      (, ,)
                      (NP
                        (NP
                          (NP (NNP D))
                          (NP
                            (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
                            (VBN =) (NN L)))
                        (-LRB- -LCB-)
                        (NP (NN hand))
                        (-RRB- -RCB-)))))))))))
    (. .)))

det(variable-2, The-1)
nsubj(set-3, variable-2)
root(ROOT-0, set-3)
nsubjpass(defined-6, V-4)
nsubjpass(defined-6', V-4)
auxpass(defined-6, is-5)
ccomp(set-3, defined-6)
ccomp(set-3, defined-6')
conj:and(defined-6, defined-6')
case(B-8, as-7)
nmod:as(defined-6, B-8)
dep(B-8, pos-10)
appos(pos-10, hand-12)
advmod(L-20, where-14)
nsubj(L-20, D-15)
appos(D-15, pos-17)
dep(L-20, =-19)
acl:relcl(B-8, L-20)
compound(hand-24, D-22)
conj(B-8, hand-24)
dep(empty-29, =-26)
compound(empty-29, B-27)
acl:relcl(hand-24, empty-29)
cc(defined-6, and-32)
case(B-36, for-33)
det(B-36, all-34)
compound(B-36, b-35)
nmod:for(defined-6', B-36)
appos(B-36, D-38)
dep(L-43, b-40)
amod(L-43, =-42)
dep(D-38, L-43)
dep(D-38, hand-45)

(ROOT
  (S
    (NP (EX There))
    (VP (VBP are)
      (NP
        (NP (CD three) (NNS kinds))
        (PP (IN of)
          (NP (NNS actions)))))
    (. .)))

expl(are-2, There-1)
root(ROOT-0, are-2)
nummod(kinds-4, three-3)
nsubj(are-2, kinds-4)
case(actions-6, of-5)
nmod:of(kinds-4, actions-6)

(ROOT
  (S
    (S
      (X
        (X (SYM *))
        (NP
          (NP (NN l))
          (, ,)
          (NP (NNP l) (NNP L))
          (, ,)
          (NP (NN movel))
          (, ,)
          (NP
            (NP
              (NP
                (NP (NN l))
                (SBAR
                  (S
                    (VP (SYM =)
                      (NP (NN pos))))))
              (NP (JJ =) (NN l)))
            (: ;)
            (NP
              (NP (NN pos) (NNS =))
              (PP (IN l)
                (X
                  (X
                    (X (SYM *))
                    (NP
                      (NP (NNP l) (NNP L))
                      (, ,)
                      (NP (NNP b) (NNP B))
                      (, ,)
                      (NP (NN dropl))
                      (, ,)
                      (NP
                        (NP
                          (NP (SYM b))
                          (SBAR
                            (S
                              (VP (SYM =)
                                (NP (NN pos))))))
                        (NP (JJ =) (NN l)))
                      (, ,)
                      (NP (NN hand) (NNS =))))
                  (NP (SYM b)))))
            (: ;)
            (NP
              (NP (NN hand))
              (SBAR
                (S
                  (VP (SYM =)
                    (NP (JJ empty)))))))
          (, ,)
          (NP (NNP b) (NNP =) (NNP l))))
      (X
        (X (SYM *))
        (NP
          (NP (NNP l) (NNP L))
          (, ,)
          (NP (NNP b) (NNP B))
          (, ,)
          (NP (NN pickl))
          (, ,)
          (NP
            (NP
              (NP (SYM b))
              (SBAR
                (S
                  (VP (SYM =)
                    (NP (NN pos))))))
            (NP (JJ =) (NN l)))
          (, ,)
          (NP (NN hand))))
      (NP (NNP =))
      (VP (VBP empty) (, ,)
        (S
          (NP (SYM b))
          (VP (SYM =)
            (NP (NNS l))))))
    (: ;)
    (S
      (NP (NN hand))
      (VP (VBD =)
        (X
          (X (SYM b))
          (, ,)
          (X (SYM b))
          (NP
            (NP (JJ =) (NN hand))
            (SBAR
              (S
                (NP (PRP We))
                (VP (VB remark)
                  (SBAR (IN that)
                    (S
                      (NP (PRP we))
                      (VP (VBP consider)
                        (NP (JJ only) (NNS instances))))))))
            (PP (IN of)
              (NP
                (NP (DT the) (NNP Gripper) (NN domain))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBP have)
                      (NP
                        (NP (DT a) (JJ consistent) (JJ initial) (NN state))
                        (, ,)
                        (SBAR
                          (WHPP (IN by)
                            (WHNP (WDT which)))
                          (S
                            (NP (PRP we))
                            (VP (VBP mean)
                              (SBAR (IN that)
                                (S
                                  (PRN (-LRB- -LRB-)
                                    (S
                                      (NP
                                        (NP (NN init))
                                        (PRN (-LRB- -LRB-)
                                          (NP (NN hand))
                                          (-RRB- -RRB-)))
                                      (VP (VBD =)
                                        (X (SYM b))
                                        (S
                                          (VP (VB init)
                                            (S
                                              (NP
                                                (PRN (-LRB- -LRB-)
                                                  (X (SYM b))
                                                  (-RRB- -RRB-)))
                                              (VP (SYM =)
                                                (NP (NN hand))))))))
                                    (-RRB- -RRB-))
                                  (VP (VBZ holds)))))))))))))))))
    (. .)))

dep(l-2, *-1)
dep(empty-61, l-2)
compound(L-5, l-4)
appos(l-2, L-5)
appos(l-2, movel-7)
appos(l-2, l-9)
dep(pos-11, =-10)
acl:relcl(l-9, pos-11)
amod(l-13, =-12)
dep(l-9, l-13)
compound(=-16, pos-15)
dep(l-9, =-16)
case(b-35, l-17)
dep(L-20, *-18)
compound(L-20, l-19)
dep(b-35, L-20)
compound(B-23, b-22)
appos(L-20, B-23)
appos(L-20, dropl-25)
appos(L-20, b-27)
dep(pos-29, =-28)
acl:relcl(b-27, pos-29)
amod(l-31, =-30)
dep(b-27, l-31)
compound(=-34, hand-33)
appos(L-20, =-34)
acl(=-16, b-35)
dep(l-9, hand-37)
dep(empty-39, =-38)
acl:relcl(hand-37, empty-39)
compound(l-43, b-41)
compound(l-43, =-42)
appos(l-2, l-43)
dep(L-46, *-44)
compound(L-46, l-45)
dep(empty-61, L-46)
compound(B-49, b-48)
appos(L-46, B-49)
appos(L-46, pickl-51)
appos(L-46, b-53)
dep(pos-55, =-54)
acl:relcl(b-53, pos-55)
amod(l-57, =-56)
dep(b-53, l-57)
appos(L-46, hand-59)
nsubj(empty-61, =-60)
root(ROOT-0, empty-61)
nsubj(l-65, b-63)
dep(l-65, =-64)
ccomp(empty-61, l-65)
nsubj(=-68, hand-67)
parataxis(empty-61, =-68)
dep(hand-73, b-69)
dep(hand-73, b-71)
amod(hand-73, =-72)
dep(=-68, hand-73)
mark(consider-78, hand-73)
nsubj(remark-75, We-74)
acl:relcl(hand-73, remark-75)
ref(hand-73, that-76)
nsubj(consider-78, we-77)
ccomp(remark-75, consider-78)
amod(instances-80, only-79)
dobj(consider-78, instances-80)
case(domain-84, of-81)
det(domain-84, the-82)
compound(domain-84, Gripper-83)
nmod:of(hand-73, domain-84)
nsubj(have-86, domain-84)
ref(domain-84, that-85)
acl:relcl(domain-84, have-86)
det(state-90, a-87)
amod(state-90, consistent-88)
amod(state-90, initial-89)
dobj(have-86, state-90)
nmod:by(mean-95, state-90)
case(which-93, by-92)
ref(state-90, which-93)
nsubj(mean-95, we-94)
acl:relcl(state-90, mean-95)
mark(holds-111, that-96)
nsubj(=-102, init-98)
appos(init-98, hand-100)
parataxis(holds-111, =-102)
dep(=-102, b-103)
ccomp(=-102, init-104)
nsubj(hand-109, b-106)
dep(hand-109, =-108)
ccomp(init-104, hand-109)
ccomp(mean-95, holds-111)

(ROOT
  (S
    (NP
      (NP
        (QP (CD Theorem) (CD 4))
        (DT All) (NNS instances))
      (PP (IN of)
        (NP (NNP Gripper))))
    (VP (VBP have)
      (VP (VBN width)
        (NP (CD 4))))
    (. .)))

compound(4-2, Theorem-1)
nummod(instances-4, 4-2)
det(instances-4, All-3)
nsubj(width-8, instances-4)
case(Gripper-6, of-5)
nmod:of(instances-4, Gripper-6)
aux(width-8, have-7)
root(ROOT-0, width-8)
dobj(width-8, 4-9)

(ROOT
  (NP
    (NP (NNP Proof))
    (PRN (-LRB- -LRB-)
      (NP (NNP Sketch))
      (-RRB- -RRB-))
    (. .)))

root(ROOT-0, Proof-1)
appos(Proof-1, Sketch-3)

(ROOT
  (S
    (S
      (NP (DT The) (NN proof))
      (VP (VBZ is) (RB not)
        (ADJP (JJ hard))))
    (, ,)
    (CC but)
    (S
      (NP (EX there))
      (VP (VBP are)
        (NP
          (NP (JJ several) (NNS details))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBP need)
                (S
                  (VP (TO to)
                    (VP (VB be)
                      (VP (VBN addressed)
                        (PP (IN in)
                          (NP (DT a) (NN case)))
                        (PP (IN by)
                          (NP
                            (NP (NN case) (NN basis))
                            (PRN (-LRB- -LRB-)
                              (S
                                (PP (IN after)
                                  (NP (DT all)))
                                (, ,)
                                (NP (DT the) (NN proof))
                                (VP (MD must)
                                  (VP (VB depend)
                                    (PP (IN on)
                                      (NP
                                        (NP (DT the) (JJ precise) (NN definition))
                                        (PP (IN of)
                                          (NP
                                            (NP (DT the) (NNS actions))
                                            (PP (IN of)
                                              (NP (DT the) (NNP Gripper) (NN domain))))))))))
                              (-RRB- -RRB-))))))))))))))
    (. .)))

det(proof-2, The-1)
nsubj(hard-5, proof-2)
cop(hard-5, is-3)
neg(hard-5, not-4)
root(ROOT-0, hard-5)
cc(hard-5, but-7)
expl(are-9, there-8)
conj:but(hard-5, are-9)
amod(details-11, several-10)
nsubj(are-9, details-11)
nsubj(need-13, details-11)
nsubjpass:xsubj(addressed-16, details-11)
ref(details-11, that-12)
acl:relcl(details-11, need-13)
mark(addressed-16, to-14)
auxpass(addressed-16, be-15)
xcomp(need-13, addressed-16)
case(case-19, in-17)
det(case-19, a-18)
nmod:in(addressed-16, case-19)
case(basis-22, by-20)
compound(basis-22, case-21)
nmod:agent(addressed-16, basis-22)
case(all-25, after-24)
nmod:after(depend-30, all-25)
det(proof-28, the-27)
nsubj(depend-30, proof-28)
aux(depend-30, must-29)
dep(basis-22, depend-30)
case(definition-34, on-31)
det(definition-34, the-32)
amod(definition-34, precise-33)
nmod:on(depend-30, definition-34)
case(actions-37, of-35)
det(actions-37, the-36)
nmod:of(definition-34, actions-37)
case(domain-41, of-38)
det(domain-41, the-39)
compound(domain-41, Gripper-40)
nmod:of(actions-37, domain-41)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB briefly))
    (VP (VBP explain)
      (NP
        (NP (DT the) (NN reason))
        (SBAR
          (WHADVP (WRB why))
          (S
            (NP (NNP Gripper))
            (VP (VBZ has)
              (VP (VBN bounded) (, ,)
                (NP (JJ small) (NN width))))))))
    (. .)))

nsubj(explain-3, We-1)
advmod(explain-3, briefly-2)
root(ROOT-0, explain-3)
det(reason-5, the-4)
dobj(explain-3, reason-5)
advmod(bounded-9, why-6)
nsubj(bounded-9, Gripper-7)
aux(bounded-9, has-8)
acl:relcl(reason-5, bounded-9)
amod(width-12, small-11)
dobj(bounded-9, width-12)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (PRP s))
        (VP
          (VP (VB be)
            (NP
              (NP (DT a) (JJ reachable) (, ,) (JJ non-goal) (NN state))
              (PP (IN of)
                (NP (DT a) (NNP Gripper) (NN instance)))))
          (, ,)
          (CC and)
          (VP (VB let)
            (S
              (NP (NN u))
              (VP
                (VP (VB be)
                  (NP (DT a) (NN variable)
                    (S
                      (VP (TO to)
                        (VP (VB improve)
                          (PP (IN in)
                            (NP (NN s.)))
                          (S
                            (VP (TO To)
                              (VP (VB improve)
                                (NP (PRP it))))))))))
                (, ,)
                (VP (VB start)
                  (PP (IN by)
                    (S
                      (VP (VBG dropping)
                        (NP (WDT whatever) (NN ball))
                        (SBAR
                          (SBAR
                            (S
                              (NP (DT the) (NN robot))
                              (VP (MD may)
                                (VP (VB hold)))))
                          (, ,)
                          (CC so)
                          (SBAR (IN that)
                            (S
                              (NP (DT the) (NN arm))
                              (VP (VBZ becomes)
                                (ADJP (JJ free))))))))))
                (, ,)
                (CC and)
                (VP
                  (ADVP (RB then))
                  (VB bring)
                  (NP (DT the) (JJ variable) (NN u))
                  (PP (TO to)
                    (NP (PRP$ its) (NN goal) (NN value)))
                  (, ,)
                  (PP (IN by)
                    (S
                      (VP
                        (VP (VBG moving)
                          (NP (DT the) (NN robot)))
                        (CC and)
                        (VP (VBG using)
                          (NP
                            (NP (DT the) (NN arm))
                            (ADJP (IN if) (JJ necessary))))))))))))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(state-8, s-2)
nsubj(let-15, s-2)
cop(state-8, be-3)
det(state-8, a-4)
amod(state-8, reachable-5)
amod(state-8, non-goal-7)
ccomp(Let-1, state-8)
case(instance-12, of-9)
det(instance-12, a-10)
compound(instance-12, Gripper-11)
nmod:of(state-8, instance-12)
cc(state-8, and-14)
ccomp(Let-1, let-15)
conj:and(state-8, let-15)
nsubj(variable-19, u-16)
nsubj(start-28, u-16)
nsubj(bring-47, u-16)
cop(variable-19, be-17)
det(variable-19, a-18)
ccomp(let-15, variable-19)
mark(improve-21, to-20)
acl(variable-19, improve-21)
case(s.-23, in-22)
nmod:in(improve-21, s.-23)
mark(improve-25, To-24)
xcomp(improve-21, improve-25)
dobj(improve-25, it-26)
ccomp(let-15, start-28)
conj:and(variable-19, start-28)
mark(dropping-30, by-29)
advcl(start-28, dropping-30)
det(ball-32, whatever-31)
dobj(dropping-30, ball-32)
det(robot-34, the-33)
nsubj(hold-36, robot-34)
aux(hold-36, may-35)
ccomp(dropping-30, hold-36)
cc(hold-36, so-38)
mark(becomes-42, that-39)
det(arm-41, the-40)
nsubj(becomes-42, arm-41)
ccomp(dropping-30, becomes-42)
conj:so(hold-36, becomes-42)
xcomp(becomes-42, free-43)
cc(variable-19, and-45)
advmod(bring-47, then-46)
ccomp(let-15, bring-47)
conj:and(variable-19, bring-47)
det(u-50, the-48)
amod(u-50, variable-49)
dobj(bring-47, u-50)
case(value-54, to-51)
nmod:poss(value-54, its-52)
compound(value-54, goal-53)
nmod:to(bring-47, value-54)
mark(moving-57, by-56)
advcl(bring-47, moving-57)
det(robot-59, the-58)
dobj(moving-57, robot-59)
cc(moving-57, and-60)
advcl(bring-47, using-61)
conj:and(moving-57, using-61)
det(arm-63, the-62)
dobj(using-61, arm-63)
dep(necessary-65, if-64)
amod(arm-63, necessary-65)

(ROOT
  (S
    (ADVP (RB Finally))
    (, ,)
    (S
      (VP (TO to)
        (VP (VB guarantee)
          (SBAR (IN that)
            (S
              (NP
                (NP (DT no) (NN variable))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBD had)
                      (PP (IN in)
                        (NP (NN state)))))))
              (VP (VBZ s)
                (NP (DT the) (JJ same) (NN value))
                (PP (IN as) (IN in)
                  (NP
                    (NP (DT the) (NN goal) (NN state))
                    (VP (VBZ has)
                      (ADVP (RB now))
                      (NP (DT a) (JJ wrong) (NN value)))))))))))
    (, ,)
    (NP (PRP we))
    (VP (VBP make)
      (S
        (NP (DT the) (NN robot))
        (VP
          (VP (VB hold)
            (NP
              (NP
                (NP (DT the) (NN ball) (NN goal))
                (PRN (-LRB- -LRB-)
                  (NP (NN hand))
                  (-RRB- -RRB-)))
              (PRN (, ,)
                (SBAR (IN if)
                  (FRAG (RB not)
                    (ADJP (JJ empty))))
                (, ,))))
          (CC and)
          (VP (VB move)
            (PP (TO to)
              (NP
                (NP (NN goal))
                (PRN (-LRB- -LRB-)
                  (NP (NN pos))
                  (-RRB- -RRB-)))))))
      (, ,)
      (SBAR (IN if)
        (S
          (NP (PRP it))
          (VP (VBZ is) (RB not)
            (ADVP (RB already))
            (NP (RB there))))))
    (. .)))

advmod(make-28, Finally-1)
mark(guarantee-4, to-3)
advcl(make-28, guarantee-4)
mark(value-15, that-5)
neg(variable-7, no-6)
nsubj(had-9, variable-7)
nsubj(value-15, variable-7)
ref(variable-7, that-8)
acl:relcl(variable-7, had-9)
case(state-11, in-10)
nmod:in(had-9, state-11)
cop(value-15, s-12)
det(value-15, the-13)
amod(value-15, same-14)
ccomp(guarantee-4, value-15)
case(state-20, as-16)
case(state-20, in-17)
det(state-20, the-18)
compound(state-20, goal-19)
nmod:in(value-15, state-20)
dep(state-20, has-21)
advmod(has-21, now-22)
det(value-25, a-23)
amod(value-25, wrong-24)
dobj(has-21, value-25)
nsubj(make-28, we-27)
root(ROOT-0, make-28)
det(robot-30, the-29)
nsubj(hold-31, robot-30)
nsubj(move-44, robot-30)
ccomp(make-28, hold-31)
det(goal-34, the-32)
compound(goal-34, ball-33)
dobj(hold-31, goal-34)
appos(goal-34, hand-36)
mark(not-40, if-39)
dep(goal-34, not-40)
dep(not-40, empty-41)
cc(hold-31, and-43)
ccomp(make-28, move-44)
conj:and(hold-31, move-44)
case(goal-46, to-45)
nmod:to(move-44, goal-46)
appos(goal-46, pos-48)
mark(there-56, if-51)
nsubj(there-56, it-52)
cop(there-56, is-53)
neg(there-56, not-54)
advmod(there-56, already-55)
advcl(make-28, there-56)

(ROOT
  (S
    (ADVP (RB Clearly))
    (NP (DT this) (NN plan))
    (VP
      (ADVP (RB only))
      (VBZ changes)
      (NP
        (NP (DT the) (NNS values))
        (PP (IN of)
          (NP
            (NP (NNS variables) (NN pos))
            (, ,)
            (NP (NN hand))
            (CC and)
            (NP (CD 3) (NNS balls)))))
      (, ,)
      (SBAR (RB so) (IN that)
        (S
          (NP (NNP Gripper))
          (VP (VBZ has)
            (VP (VBN width)
              (NP (CD 5)))))))
    (. .)))

advmod(changes-5, Clearly-1)
det(plan-3, this-2)
nsubj(changes-5, plan-3)
advmod(changes-5, only-4)
root(ROOT-0, changes-5)
det(values-7, the-6)
dobj(changes-5, values-7)
case(pos-10, of-8)
compound(pos-10, variables-9)
nmod:of(values-7, pos-10)
nmod:of(values-7, hand-12)
conj:and(pos-10, hand-12)
cc(pos-10, and-13)
nummod(balls-15, 3-14)
nmod:of(values-7, balls-15)
conj:and(pos-10, balls-15)
mark(width-21, so-17)
mwe(so-17, that-18)
nsubj(width-21, Gripper-19)
aux(width-21, has-20)
advcl(changes-5, width-21)
dobj(width-21, 5-22)

(ROOT
  (S
    (PP (IN With)
      (NP
        (ADJP
          (NP (DT a) (RB bit))
          (JJR more))
        (NN care)))
    (NP (PRP we))
    (VP (VBP see)
      (SBAR
        (SBAR (IN that)
          (S (, ,)
            (PP (IN in)
              (NP (NN fact)))
            (, ,)
            (NP (PRP we))
            (VP (VBP do) (RB not)
              (VP (VB need)
                (S
                  (VP (TO to)
                    (VP (VB change)
                      (NP
                        (NP (DT the) (NNS values))
                        (PP (IN of)
                          (NP
                            (QP (JJR more) (IN than) (CD 2))
                            (NNS balls)))))))))))
        (, ,)
        (CC so)
        (SBAR (IN that)
          (S
            (NP (NNP Gripper))
            (VP (VBZ has)
              (VP (VBN width)
                (NP (CD 4))))))))
    (. .)))

case(care-5, With-1)
det(bit-3, a-2)
nmod:npmod(more-4, bit-3)
amod(care-5, more-4)
nmod:with(see-7, care-5)
nsubj(see-7, we-6)
root(ROOT-0, see-7)
mark(need-16, that-8)
case(fact-11, in-10)
nmod:in(need-16, fact-11)
nsubj(need-16, we-13)
nsubj:xsubj(change-18, we-13)
aux(need-16, do-14)
neg(need-16, not-15)
ccomp(see-7, need-16)
mark(change-18, to-17)
xcomp(need-16, change-18)
det(values-20, the-19)
dobj(change-18, values-20)
case(balls-25, of-21)
advmod(2-24, more-22)
mwe(more-22, than-23)
nummod(balls-25, 2-24)
nmod:of(values-20, balls-25)
cc(need-16, so-27)
mark(width-31, that-28)
nsubj(width-31, Gripper-29)
aux(width-31, has-30)
ccomp(see-7, width-31)
conj:so(need-16, width-31)
dobj(width-31, 4-32)

(ROOT
  (S
    (ADVP
      (ADVP (RB Corollary))
      (NP (CD 5)))
    (NP
      (NP (DT The) (NN plan) (NN generation) (NN problem))
      (PP (IN for)
        (NP
          (NP (DT all) (NNS instances))
          (PP (IN of)
            (NP (NNP Gripper))))))
    (VP (VBZ is)
      (ADJP (JJ solvable)
        (PP (IN in)
          (NP
            (NP (JJ polynomial) (NN time))
            (PP (IN via)
              (NP (DT the) (NNP width) (CD 4) (NN algorithm)))))))
    (. .)))

advmod(5-2, Corollary-1)
advmod(solvable-13, 5-2)
det(problem-6, The-3)
compound(problem-6, plan-4)
compound(problem-6, generation-5)
nsubj(solvable-13, problem-6)
case(instances-9, for-7)
det(instances-9, all-8)
nmod:for(problem-6, instances-9)
case(Gripper-11, of-10)
nmod:of(instances-9, Gripper-11)
cop(solvable-13, is-12)
root(ROOT-0, solvable-13)
case(time-16, in-14)
amod(time-16, polynomial-15)
nmod:in(solvable-13, time-16)
case(algorithm-21, via-17)
det(algorithm-21, the-18)
compound(algorithm-21, width-19)
nummod(algorithm-21, 4-20)
nmod:via(time-16, algorithm-21)

(ROOT
  (NP (NN Proof) (. .)))

root(ROOT-0, Proof-1)

(ROOT
  (NP
    (NP (NNP Immediate))
    (PP (IN from)
      (NP (NNP Theorems) (CD 2)
        (CC and)
        (CD 4)))
    (. .)))

root(ROOT-0, Immediate-1)
case(Theorems-3, from-2)
nmod:from(Immediate-1, Theorems-3)
nummod(Theorems-3, 2-4)
cc(Theorems-3, and-5)
nmod:from(Immediate-1, 4-6)
conj:and(Theorems-3, 4-6)

(ROOT
  (S
    (PP
      (NP (JJ Persistent) (NN width))
      (IN In)
      (NP (DT this) (NN section)))
    (, ,)
    (NP (PRP we))
    (VP (VBP present)
      (NP
        (NP (DT the) (NN notion))
        (PP (IN of)
          (NP (JJ persistent) (NN width)))))
    (. .)))

amod(width-2, Persistent-1)
nmod:in(present-8, width-2)
case(width-2, In-3)
det(section-5, this-4)
dep(width-2, section-5)
nsubj(present-8, we-7)
root(ROOT-0, present-8)
det(notion-10, the-9)
dobj(present-8, notion-10)
case(width-13, of-11)
amod(width-13, persistent-12)
nmod:of(notion-10, width-13)

(ROOT
  (S
    (PP (IN As)
      (NP (DT a) (JJ motivating) (NN example)))
    (, ,)
    (NP (PRP we))
    (VP (VBP consider)
      (SBAR
        (S
          (NP
            (NP (DT the) (NNP Unlock) (NN domain))
            (, ,)
            (SBAR
              (WHNP (WDT which))
              (S
                (NP (PRP we))
                (VP (VBP show)
                  (SBAR
                    (S
                      (VP
                        (VP (VBZ does) (RB not)
                          (VP (VB have)
                            (VP (VBN bounded)
                              (NP (NN width)))))
                        (, ,)
                        (CC but)
                        (VP (VBZ does)))))))))
          (VP (VBP have)
            (VP (VBN bounded)
              (NP (JJ persistent) (NN width)))))))
    (. .)))

case(example-4, As-1)
det(example-4, a-2)
amod(example-4, motivating-3)
nmod:as(consider-7, example-4)
nsubj(consider-7, we-6)
root(ROOT-0, consider-7)
det(domain-10, the-8)
compound(domain-10, Unlock-9)
dobj(show-14, domain-10)
nsubj(bounded-24, domain-10)
ref(domain-10, which-12)
nsubj(show-14, we-13)
acl:relcl(domain-10, show-14)
aux(bounded-18, does-15)
neg(bounded-18, not-16)
aux(bounded-18, have-17)
ccomp(show-14, bounded-18)
dobj(bounded-18, width-19)
cc(bounded-18, but-21)
ccomp(show-14, does-22)
conj:but(bounded-18, does-22)
aux(bounded-24, have-23)
ccomp(consider-7, bounded-24)
amod(width-26, persistent-25)
dobj(bounded-24, width-26)

(ROOT
  (NP
    (NP
      (NP (NNP Domain) (CD 6))
      (PRN (-LRB- -LRB-)
        (NP (NNP Unlock) (NN domain))
        (-RRB- -RRB-))
      (SBAR
        (S
          (NP (DT This) (NN domain))
          (VP (VBZ is)
            (VP (VBN based)
              (PP (IN on)
                (NP (DT the) (JJ benchmark) (NNP Grid) (NN domain))))))))
    (: ;)
    (S
      (NP (DT the) (NNS differences))
      (VP (VBP are)
        (SBAR (IN that)
          (S
            (S
              (ADVP (RB here))
              (NP (PRP we))
              (VP (VBP permit)
                (S
                  (NP
                    (NP (NN movement))
                    (PP (IN in)
                      (NP (DT an)
                        (ADJP (JJ arbitrary))
                        (NN graph))))
                  (ADJP (RB as) (VBN opposed)
                    (PP (TO to)
                      (NP (DT a) (NN grid) (NN graph)))))))
            (, ,)
            (CC and)
            (S
              (NP (PRP we))
              (VP (VBP require)
                (SBAR (IN that)
                  (S
                    (NP (DT all) (NNS locations))
                    (VP (VBP are)
                      (VP (VBG unlocked)
                        (PP (IN in)
                          (NP (DT the) (NN goal) (NN state)))))))))))))
    (. .)))

root(ROOT-0, Domain-1)
nummod(Domain-1, 6-2)
compound(domain-5, Unlock-4)
appos(Domain-1, domain-5)
det(domain-8, This-7)
nsubjpass(based-10, domain-8)
auxpass(based-10, is-9)
acl:relcl(Domain-1, based-10)
case(domain-15, on-11)
det(domain-15, the-12)
amod(domain-15, benchmark-13)
compound(domain-15, Grid-14)
nmod:on(based-10, domain-15)
det(differences-18, the-17)
nsubj(are-19, differences-18)
parataxis(Domain-1, are-19)
mark(permit-23, that-20)
advmod(permit-23, here-21)
nsubj(permit-23, we-22)
ccomp(are-19, permit-23)
nsubj(opposed-30, movement-24)
case(graph-28, in-25)
det(graph-28, an-26)
amod(graph-28, arbitrary-27)
nmod:in(movement-24, graph-28)
advmod(opposed-30, as-29)
xcomp(permit-23, opposed-30)
case(graph-34, to-31)
det(graph-34, a-32)
compound(graph-34, grid-33)
nmod:to(opposed-30, graph-34)
cc(permit-23, and-36)
nsubj(require-38, we-37)
ccomp(are-19, require-38)
conj:and(permit-23, require-38)
mark(unlocked-43, that-39)
det(locations-41, all-40)
nsubj(unlocked-43, locations-41)
aux(unlocked-43, are-42)
ccomp(require-38, unlocked-43)
case(state-47, in-44)
det(state-47, the-45)
compound(state-47, goal-46)
nmod:in(unlocked-43, state-47)

(ROOT
  (S
    (PP (IN For)
      (NP (NN simplicity)))
    (NP (PRP we))
    (VP (VBP consider)
      (NP (JJ only) (NNS domains))
      (SBAR
        (WHADVP (WRB where))
        (S
          (NP (DT each) (NN key))
          (VP (VBZ opens)
            (NP (DT a) (JJ single) (NN location)))))
      (, ,)
      (SBAR (IN although)
        (S
          (NP (DT the) (JJ same) (NN result))
          (VP (VBZ applies)
            (PP (IN for)
              (NP
                (NP (DT any)
                  (ADJP (JJ arbitrary))
                  (NN relation))
                (PP (IN between)
                  (NP (NNS keys)
                    (CC and)
                    (NNS locations)))
                (SBAR
                  (S
                    (NP (PRP they))
                    (VP (VBP open))))))))))
    (. .)))

case(simplicity-2, For-1)
nmod:for(consider-4, simplicity-2)
nsubj(consider-4, we-3)
root(ROOT-0, consider-4)
amod(domains-6, only-5)
dobj(consider-4, domains-6)
advmod(opens-10, where-7)
det(key-9, each-8)
nsubj(opens-10, key-9)
advcl(consider-4, opens-10)
det(location-13, a-11)
amod(location-13, single-12)
dobj(opens-10, location-13)
mark(applies-19, although-15)
det(result-18, the-16)
amod(result-18, same-17)
nsubj(applies-19, result-18)
advcl(consider-4, applies-19)
case(relation-23, for-20)
det(relation-23, any-21)
amod(relation-23, arbitrary-22)
nmod:for(applies-19, relation-23)
case(keys-25, between-24)
nmod:between(relation-23, keys-25)
cc(keys-25, and-26)
nmod:between(relation-23, locations-27)
conj:and(keys-25, locations-27)
nsubj(open-29, they-28)
acl:relcl(relation-23, open-29)

(ROOT
  (S
    (PP (IN In)
      (NP (DT the) (NNP Unlock) (NN domain)))
    (, ,)
    (NP (PRP we))
    (VP (VBP have)
      (NP
        (NP (DT a) (NN robot))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ moves)
              (PP (IN among)
                (NP
                  (NP (DT a) (NN set))
                  (PP (IN of)
                    (NP (NNS locations))))))))))
    (. .)))

case(domain-4, In-1)
det(domain-4, the-2)
compound(domain-4, Unlock-3)
nmod:in(have-7, domain-4)
nsubj(have-7, we-6)
root(ROOT-0, have-7)
det(robot-9, a-8)
dobj(have-7, robot-9)
nsubj(moves-11, robot-9)
ref(robot-9, that-10)
acl:relcl(robot-9, moves-11)
case(set-14, among-12)
det(set-14, a-13)
nmod:among(moves-11, set-14)
case(locations-16, of-15)
nmod:of(set-14, locations-16)

(ROOT
  (S
    (NP (DT Each) (NN location))
    (VP
      (VP (VBZ is) (RB either)
        (VP (VBN locked)))
      (CC or)
      (VP (VBD unlocked)))
    (. .)))

det(location-2, Each-1)
nsubjpass(locked-5, location-2)
nsubjpass(unlocked-7, location-2)
auxpass(locked-5, is-3)
advmod(locked-5, either-4)
root(ROOT-0, locked-5)
cc(locked-5, or-6)
conj:or(locked-5, unlocked-7)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (VB unlock)
          (NP (DT a) (NN location)))))
    (, ,)
    (NP (DT the) (NN robot))
    (VP
      (VP (VBZ has)
        (S
          (VP (TO to)
            (VP (VB pick)
              (PRT (RP up))
              (NP
                (NP (DT a) (NN key))
                (PP (IN for)
                  (NP (DT that) (NN location))))))))
      (CC and)
      (VP (VBP unlock)
        (NP (DT the) (NN location))
        (PP (IN from)
          (NP (DT an) (JJ adjacent) (NN location)))))
    (. .)))

mark(unlock-2, To-1)
advcl(has-8, unlock-2)
det(location-4, a-3)
dobj(unlock-2, location-4)
det(robot-7, the-6)
nsubj(has-8, robot-7)
nsubj:xsubj(pick-10, robot-7)
nsubj(unlock-18, robot-7)
root(ROOT-0, has-8)
mark(pick-10, to-9)
xcomp(has-8, pick-10)
compound:prt(pick-10, up-11)
det(key-13, a-12)
dobj(pick-10, key-13)
case(location-16, for-14)
det(location-16, that-15)
nmod:for(key-13, location-16)
cc(has-8, and-17)
conj:and(has-8, unlock-18)
det(location-20, the-19)
dobj(unlock-18, location-20)
case(location-24, from-21)
det(location-24, an-22)
amod(location-24, adjacent-23)
nmod:from(unlock-18, location-24)

(ROOT
  (S
    (ADVP (RB Formally))
    (, ,)
    (PP (IN in)
      (NP
        (NP (DT an) (NN instance))
        (PP (IN of)
          (NP (DT this) (NN domain)))))
    (, ,)
    (NP (EX there))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN set))
        (PP (IN of)
          (NP
            (NP
              (NP (NNS locations))
              (NP (NNP L)))
            (, ,)
            (NP
              (NP (DT a) (NN set))
              (PP (IN of)
                (NP (NNP keys) (NNP K))))
            (, ,)
            (NP
              (NP (DT a) (NN function))
              (NP (SYM f)))
            (: :)
            (NP (NNP K) (NNP L))
            (, ,)
            (CC and)
            (NP
              (NP (DT an) (JJ undirected) (NN graph) (NN G))
              (PP (IN with)
                (NP (NN vertex) (NN set) (NNP L))))))))
    (. .)))

advmod(is-11, Formally-1)
case(instance-5, in-3)
det(instance-5, an-4)
nmod:in(is-11, instance-5)
case(domain-8, of-6)
det(domain-8, this-7)
nmod:of(instance-5, domain-8)
expl(is-11, there-10)
root(ROOT-0, is-11)
det(set-13, a-12)
nsubj(is-11, set-13)
case(locations-15, of-14)
nmod:of(set-13, locations-15)
appos(locations-15, L-16)
det(set-19, a-18)
nmod:of(set-13, set-19)
conj:and(locations-15, set-19)
case(K-22, of-20)
compound(K-22, keys-21)
nmod:of(set-19, K-22)
det(function-25, a-24)
nmod:of(set-13, function-25)
conj:and(locations-15, function-25)
dep(function-25, f-26)
compound(L-29, K-28)
nmod:of(set-13, L-29)
conj:and(locations-15, L-29)
cc(locations-15, and-31)
det(G-35, an-32)
amod(G-35, undirected-33)
compound(G-35, graph-34)
nmod:of(set-13, G-35)
conj:and(locations-15, G-35)
case(L-39, with-36)
compound(L-39, vertex-37)
compound(L-39, set-38)
nmod:with(G-35, L-39)

(ROOT
  (S
    (NP (DT The) (NN variable))
    (VP (VBD set)
      (SBAR
        (S
          (NP (NNP V))
          (VP (VBZ is)
            (VP (VBN defined)
              (PP (IN as)
                (NP
                  (NP (NNP L) (NNP K))
                  (PRN (-LRB- -LCB-)
                    (NP
                      (NP (NN pos))
                      (, ,)
                      (NP (NN hand)))
                    (-RRB- -RCB-)))))))))
    (. .)))

det(variable-2, The-1)
nsubj(set-3, variable-2)
root(ROOT-0, set-3)
nsubjpass(defined-6, V-4)
auxpass(defined-6, is-5)
ccomp(set-3, defined-6)
case(K-9, as-7)
compound(K-9, L-8)
nmod:as(defined-6, K-9)
dep(K-9, pos-11)
appos(pos-11, hand-13)

(ROOT
  (S
    (PP (IN For)
      (NP (DT each) (NNP l) (NNP L)))
    (, ,)
    (NP
      (NP (NNP D))
      (PRN (-LRB- -LRB-)
        (NP (NN l))
        (-RRB- -RRB-)))
    (VP (VBZ =)
      (PRN (-LRB- -LCB-)
        (NP (NNP locked))
        (, ,)
        (NP (NNP unlocked))
        (-RRB- -RCB-)))
    (. .)))

case(L-4, For-1)
det(L-4, each-2)
compound(L-4, l-3)
nmod:for(=-10, L-4)
nsubj(=-10, D-6)
appos(D-6, l-8)
root(ROOT-0, =-10)
dep(=-10, locked-12)
dep(locked-12, unlocked-14)

(ROOT
  (S
    (PP (IN For)
      (NP (DT each) (NNP t) (NNP K)))
    (, ,)
    (NP
      (NP (NNP D))
      (PRN (-LRB- -LRB-)
        (NP (NN t))
        (-RRB- -RRB-)))
    (VP (VBZ =)
      (NP
        (NP (NNP L))
        (PRN (-LRB- -LCB-)
          (NP (NN hand))
          (-RRB- -RCB-))))
    (. .)))

case(K-4, For-1)
det(K-4, each-2)
compound(K-4, t-3)
nmod:for(=-10, K-4)
nsubj(=-10, D-6)
appos(D-6, t-8)
root(ROOT-0, =-10)
dobj(=-10, L-11)
appos(L-11, hand-13)

(ROOT
  (S
    (PP (IN In)
      (NP (NN addition)))
    (, ,)
    (NP
      (NP
        (NP (NNP D) (-LRB- -LRB-) (NN pos) (-RRB- -RRB-))
        (SBAR
          (S
            (VP (SYM =)
              (NP (NNP L)
                (CC and)
                (NNP D))))))
      (PRN (-LRB- -LRB-)
        (NP (NN hand))
        (-RRB- -RRB-)))
    (VP (VBZ =)
      (NP (NNP K) (-LRB- -LCB-) (NNP empty) (-RRB- -RCB-)))
    (. .)))

case(addition-2, In-1)
nmod:in(=-15, addition-2)
compound(pos-6, D-4)
nsubj(=-15, pos-6)
dep(L-9, =-8)
acl:relcl(pos-6, L-9)
cc(L-9, and-10)
acl:relcl(pos-6, D-11)
conj:and(L-9, D-11)
appos(pos-6, hand-13)
root(ROOT-0, =-15)
compound(empty-18, K-16)
dobj(=-15, empty-18)

(ROOT
  (S
    (NP (DT The) (NNS actions))
    (VP (VBP are)
      (ADJP (RB as) (JJ follows)))
    (. .)))

det(actions-2, The-1)
nsubj(follows-5, actions-2)
cop(follows-5, are-3)
advmod(follows-5, as-4)
root(ROOT-0, follows-5)

(ROOT
  (S
    (SBAR
      (X (SYM *))
      (S
        (PRN (-LRB- -LCB-)
          (NP
            (NP (NN l))
            (, ,)
            (NP (NN l)))
          (-RRB- -RCB-))
        (S
          (NP
            (NP (NNP E)
              (PRN (-LRB- -LRB-)
                (NP (NNP G))
                (-RRB- -RRB-))
              (NNP movel))
            (, ,)
            (NP (FW l) (FW =) (FW l) (FW =) (FW unlocked) (, ,) (FW l) (FW unlocked))
            (, ,))
          (VP (VBP pos)
            (NP (JJ =) (NN l))))
        (: ;)
        (S
          (NP
            (NP (NN pos))
            (NP (JJ =) (NN l)))
          (VP
            (X
              (X (SYM *))
              (NP
                (NP (NNP l) (NNP L))
                (, ,)
                (NP (NNP t) (NNP K))
                (, ,)
                (NP (NN dropl))
                (, ,)
                (NP
                  (NP
                    (NP (NN t))
                    (SBAR
                      (S
                        (VP (SYM =)
                          (NP (NN pos))))))
                  (NP (JJ =) (NN l)))
                (, ,)
                (NP (NN t) (NN =) (NN hand))))
            (: ;)
            (VP (VBN t)
              (NP (NN l)))))))
    (, ,)
    (NP (NN hand) (NNS =))
    (VP (VBP empty)
      (SBAR
        (S
          (S
            (X
              (X (SYM *))
              (NP
                (NP (NNP l) (NNP L))
                (, ,)
                (NP (NNP t) (NNP K))
                (, ,)
                (NP (NN pickl))
                (, ,)
                (NP (NNP t) (NNP =) (NNP pos) (NNP =) (NNP l))
                (, ,)
                (NP
                  (NP (NN hand))
                  (SBAR
                    (S
                      (VP (SYM =)
                        (NP (JJ empty) (, ,) (JJ t) (NN l) (: ;) (NNP t) (NNP =) (NN hand))))))
                (, ,)
                (NP (NN hand) (NN =) (NN t))))
            (X (SYM *))
            (NP (NNP t) (NNP K) (, ,) (NNP l))
            (VP (VBP L)
              (ADJP (JJ such)
                (SBAR (IN that)
                  (FRAG
                    (NP (-LRB- -LCB-)
                      (NP
                        (NP
                          (NP (SYM f))
                          (PRN (-LRB- -LRB-)
                            (NP (NN t))
                            (-RRB- -RRB-))
                          (, ,))
                        (NP (NN l)))
                      (-RRB- -RCB-) (FW E)
                      (NP
                        (NP (-LRB- -LRB-) (NNP G) (-RRB- -RRB-))
                        (, ,)
                        (NP (NN unlockl))
                        (, ,)
                        (NP
                          (NP (NN t) (NN pos))
                          (NP (JJ =) (NN l)))
                        (, ,)
                        (NP (NN hand)))))))
              (S
                (VP (SYM =)
                  (NP (NN t))))))
          (: ;)
          (S
            (NP
              (NP (SYM f))
              (PRN (-LRB- -LRB-)
                (NP (NN t))
                (-RRB- -RRB-)))
            (ADVP (RB =))
            (VP (VBD unlocked)
              (SBAR
                (S
                  (NP (NNP =) (NNP =) (NNP =) (NNP =))
                  (VP (NN Note)
                    (SBAR (IN that)
                      (S
                        (NP (PRP we))
                        (VP (VBP consider)
                          (SBAR
                            (S
                              (NP (RB only) (JJ initial))
                              (VP (VBZ states)
                                (FRAG
                                  (WHADVP (WRB where)))
                                (PRN (-LRB- -LRB-)
                                  (S
                                    (NP (JJ init)
                                      (PRN (-LRB- -LRB-)
                                        (NP (NN hand))
                                        (-RRB- -RRB-))
                                      (JJ =) (NNS t))
                                    (VP (VBP init)
                                      (S
                                        (NP
                                          (PRN (-LRB- -LRB-)
                                            (NP (NN t))
                                            (-RRB- -RRB-)))
                                        (VP (SYM =)
                                          (NP (NN hand))))))
                                  (-RRB- -RRB-)))))))))))))
          (, ,)
          (CC and)
          (S
            (NP (PRP we))
            (VP (VBP assume)
              (SBAR (IN that)
                (S
                  (NP (DT the) (NN goal) (NN state))
                  (VP (VBZ specifies)
                    (SBAR (IN that)
                      (S
                        (NP (DT all) (NNS locations))
                        (VP (VBP are)
                          (ADJP (JJ unlocked)))))))))))))
    (. .)))

dep(pos-22, *-1)
dep(pos-22, l-3)
appos(l-3, l-5)
compound(movel-11, E-7)
appos(movel-11, G-9)
nsubj(pos-22, movel-11)
compound(unlocked-20, l-13)
compound(unlocked-20, =-14)
compound(unlocked-20, l-15)
compound(unlocked-20, =-16)
compound(unlocked-20, unlocked-17)
dep(unlocked-20, l-19)
appos(movel-11, unlocked-20)
advcl(empty-53, pos-22)
amod(l-24, =-23)
dobj(pos-22, l-24)
nsubj(t-48, pos-26)
amod(l-28, =-27)
dep(pos-26, l-28)
dep(L-31, *-29)
compound(L-31, l-30)
dep(t-48, L-31)
compound(K-34, t-33)
appos(L-31, K-34)
appos(L-31, dropl-36)
appos(L-31, t-38)
dep(pos-40, =-39)
acl:relcl(t-38, pos-40)
amod(l-42, =-41)
dep(t-38, l-42)
compound(hand-46, t-44)
compound(hand-46, =-45)
appos(L-31, hand-46)
parataxis(pos-22, t-48)
dobj(t-48, l-49)
compound(=-52, hand-51)
nsubj(empty-53, =-52)
root(ROOT-0, empty-53)
dep(L-56, *-54)
compound(L-56, l-55)
dep(L-88, L-56)
compound(K-59, t-58)
appos(L-56, K-59)
appos(L-56, pickl-61)
compound(l-67, t-63)
compound(l-67, =-64)
compound(l-67, pos-65)
compound(l-67, =-66)
appos(L-56, l-67)
appos(L-56, hand-69)
dep(hand-78, =-70)
amod(hand-78, empty-71)
amod(hand-78, t-73)
compound(hand-78, l-74)
compound(hand-78, t-76)
compound(hand-78, =-77)
acl:relcl(hand-69, hand-78)
compound(t-82, hand-80)
compound(t-82, =-81)
appos(L-56, t-82)
dep(L-88, *-83)
compound(l-87, t-84)
compound(l-87, K-85)
nsubj(L-88, l-87)
dep(empty-53, L-88)
xcomp(L-88, such-89)
mark(f-92, that-90)
dep(such-89, f-92)
appos(f-92, t-94)
dep(f-92, l-97)
dep(f-92, E-99)
dep(f-92, G-101)
appos(G-101, unlockl-104)
compound(pos-107, t-106)
appos(G-101, pos-107)
amod(l-109, =-108)
dep(pos-107, l-109)
appos(G-101, hand-111)
dep(t-113, =-112)
ccomp(L-88, t-113)
nsubj(unlocked-120, f-115)
appos(f-115, t-117)
advmod(unlocked-120, =-119)
dep(empty-53, unlocked-120)
conj:and(L-88, unlocked-120)
compound(=-124, =-121)
compound(=-124, =-122)
compound(=-124, =-123)
nsubj(Note-125, =-124)
ccomp(unlocked-120, Note-125)
mark(consider-128, that-126)
nsubj(consider-128, we-127)
ccomp(Note-125, consider-128)
advmod(initial-130, only-129)
nsubj(states-131, initial-130)
ccomp(consider-128, states-131)
dep(states-131, where-132)
amod(t-139, init-134)
appos(t-139, hand-136)
amod(t-139, =-138)
nsubj(init-140, t-139)
parataxis(states-131, init-140)
nsubj(hand-145, t-142)
dep(hand-145, =-144)
ccomp(init-140, hand-145)
cc(L-88, and-148)
nsubj(assume-150, we-149)
dep(empty-53, assume-150)
conj:and(L-88, assume-150)
mark(specifies-155, that-151)
det(state-154, the-152)
compound(state-154, goal-153)
nsubj(specifies-155, state-154)
ccomp(assume-150, specifies-155)
mark(unlocked-160, that-156)
det(locations-158, all-157)
nsubj(unlocked-160, locations-158)
cop(unlocked-160, are-159)
ccomp(specifies-155, unlocked-160)

(ROOT
  (S
    (PP
      (NP (NNP Theorem) (CD 7))
      (IN For)
      (NP (DT each) (NN k) (CD 1)))
    (, ,)
    (NP (EX there))
    (VP (VBZ exists)
      (NP
        (NP (DT an) (NN instance) (NN k))
        (PP (IN of)
          (NP (DT the) (NNP Unlock) (NN domain)))
        (SBAR
          (S
            (NP (PDT such) (DT that) (NN k))
            (VP (VBZ does) (RB not)
              (VP (VB have)
                (NP (NN width) (NN k))))))))
    (. .)))

nmod:for(exists-9, Theorem-1)
nummod(Theorem-1, 7-2)
case(Theorem-1, For-3)
det(k-5, each-4)
dep(Theorem-1, k-5)
nummod(k-5, 1-6)
expl(exists-9, there-8)
root(ROOT-0, exists-9)
det(k-12, an-10)
compound(k-12, instance-11)
dobj(exists-9, k-12)
det(k-19, k-12)
case(domain-16, of-13)
det(domain-16, the-14)
compound(domain-16, Unlock-15)
nmod:of(k-12, domain-16)
det:predet(k-19, such-17)
ref(k-12, that-18)
nsubj(have-22, k-19)
aux(have-22, does-20)
neg(have-22, not-21)
acl:relcl(k-12, have-22)
compound(k-24, width-23)
dobj(have-22, k-24)

(ROOT
  (NP (CD 76) (NNS Proof) (. .)))

nummod(Proof-2, 76-1)
root(ROOT-0, Proof-2)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP show)
      (NP (PDT such) (DT an) (NN instance) (NN k)))
    (. .)))

nsubj(show-2, We-1)
root(ROOT-0, show-2)
det:predet(k-6, such-3)
det(k-6, an-4)
compound(k-6, instance-5)
dobj(show-2, k-6)

(ROOT
  (S
    (S
      (VP (VB Let)
        (NP
          (NP (NNP L) (NNP =) (NNP K))
          (VP (VBN =) (-LRB- -LCB-)
            (NP (CD 1))
            (, ,))))
      (: ...))
    (, ,)
    (NP (NN k))
    (-RRB- -RCB-)
    (VP
      (VP
        (PRN (, ,)
          (S
            (VP (VB let)
              (S
                (NP (SYM f))
                (VP (VB be)
                  (NP
                    (NP (SYM f))
                    (PRN (-LRB- -LRB-)
                      (NP (NN t))
                      (-RRB- -RRB-))))))))
        (VBD =)
        (NP
          (NP (NN t))
          (PP (IN for)
            (NP (DT all) (NNP t) (NNP K)))))
      (, ,)
      (CC and)
      (VP (VBD let)
        (S
          (NP (NNP G))
          (VP (VB be)
            (NP
              (NP (DT the) (NN graph))
              (PP (IN with)
                (NP
                  (NP
                    (NP (NNS edges))
                    (-LRB- -LCB-)
                    (NP (NNP i) (, ,) (NNP i) (NNP +) (CD 1))
                    (-RRB- -RCB-))
                  (PP (IN for)
                    (NP (DT all) (FW i))))))
            (PP (IN in)
              (NP
                (NP (NNP -LSB-) (CD 1) (, ,) (CD k))
                (: -)
                (NP (CD 1) (NNS -RSB-))))))))
    (. .)))

ccomp(=-21, Let-1)
compound(K-4, L-2)
compound(K-4, =-3)
dobj(Let-1, K-4)
acl(K-4, =-5)
dobj(=-5, 1-7)
nsubj(=-21, k-11)
nsubj(let-29, k-11)
parataxis(=-21, let-14)
nsubj(f-17, f-15)
cop(f-17, be-16)
ccomp(let-14, f-17)
appos(f-17, t-19)
root(ROOT-0, =-21)
dobj(=-21, t-22)
case(K-26, for-23)
det(K-26, all-24)
compound(K-26, t-25)
nmod:for(t-22, K-26)
cc(=-21, and-28)
conj:and(=-21, let-29)
nsubj(graph-33, G-30)
cop(graph-33, be-31)
det(graph-33, the-32)
ccomp(let-29, graph-33)
case(edges-35, with-34)
nmod:with(graph-33, edges-35)
compound(+-40, i-37)
appos(+-40, i-39)
dep(edges-35, +-40)
nummod(+-40, 1-41)
case(i-45, for-43)
det(i-45, all-44)
nmod:for(edges-35, i-45)
case(-LSB--47, in-46)
nmod:in(graph-33, -LSB--47)
nummod(-LSB--47, 1-48)
nummod(-LSB--47, k-50)
nummod(-RSB--53, 1-52)
dep(-LSB--47, -RSB--53)

(ROOT
  (S
    (ADVP (RB Initially))
    (, ,)
    (S
      (NP (DT the) (NN instance) (NN k))
      (VP (VBZ has)
        (NP (PDT all)
          (NP (NNS keys))
          (CC and)
          (NP (DT the) (NN robot)))
        (PP (IN at)
          (NP (NN location) (CD 1)))))
    (, ,)
    (CC and)
    (S
      (NP (DT all) (NNS locations))
      (VP (VBP are)
        (VP (VBN locked))))
    (. .)))

advmod(has-6, Initially-1)
det(k-5, the-3)
compound(k-5, instance-4)
nsubj(has-6, k-5)
root(ROOT-0, has-6)
dep(keys-8, all-7)
dobj(has-6, keys-8)
cc(keys-8, and-9)
det(robot-11, the-10)
dobj(has-6, robot-11)
conj:and(keys-8, robot-11)
case(location-13, at-12)
nmod:at(has-6, location-13)
nummod(location-13, 1-14)
cc(has-6, and-16)
det(locations-18, all-17)
nsubjpass(locked-20, locations-18)
auxpass(locked-20, are-19)
conj:and(has-6, locked-20)

(ROOT
  (S
    (NP (DT The) (NN instance))
    (VP (VBZ does) (RB not)
      (VP (VB have)
        (NP (NN width) (NN k))
        (SBAR (IN because)
          (S (, ,)
            (PP (VBG starting)
              (PP (IN at)
                (NP (DT the) (JJ initial) (NN state))))
            (, ,)
            (NP (EX there))
            (VP (VBZ exists)
              (NP
                (NP (DT a) (JJ variable) (NN u))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (DT the) (CD one) (NNS corresponding))
                    (PP (TO to)
                      (NP (DT the) (JJ k) (: -) (NN th) (NN location))))
                  (-RRB- -RRB-))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (MD can) (RB not)
                      (VP (VB be)
                        (VP (VBN improved)
                          (PP (IN without)
                            (S
                              (VP (VBG unlocking)
                                (NP (DT all) (JJ intermediate) (NNS locations))))))))))))))))
    (. .)))

det(instance-2, The-1)
nsubj(have-5, instance-2)
aux(have-5, does-3)
neg(have-5, not-4)
root(ROOT-0, have-5)
compound(k-7, width-6)
dobj(have-5, k-7)
mark(exists-17, because-8)
case(state-14, starting-10)
case(state-14, at-11)
det(state-14, the-12)
amod(state-14, initial-13)
advcl(exists-17, state-14)
expl(exists-17, there-16)
advcl(have-5, exists-17)
det(u-20, a-18)
amod(u-20, variable-19)
dobj(exists-17, u-20)
nsubjpass(improved-36, u-20)
det(corresponding-24, the-22)
nummod(corresponding-24, one-23)
dep(u-20, corresponding-24)
case(location-30, to-25)
det(location-30, the-26)
amod(location-30, k-27)
compound(location-30, th-29)
nmod:to(corresponding-24, location-30)
ref(u-20, that-32)
aux(improved-36, can-33)
neg(improved-36, not-34)
auxpass(improved-36, be-35)
acl:relcl(u-20, improved-36)
mark(unlocking-38, without-37)
advcl(improved-36, unlocking-38)
det(locations-41, all-39)
amod(locations-41, intermediate-40)
dobj(unlocking-38, locations-41)

(ROOT
  (S
    (S
      (NP
        (NP (NNP Definition) (CD 8))
        (NP (DT A) (NN planning) (NN instance)))
      (VP (VBZ has)
        (NP
          (NP (JJ persistent) (NN width) (NN k))
          (SBAR
            (SBAR (IN if)
              (S
                (NP (DT no) (NN plan))
                (VP (VBZ exists))))
            (, ,)
            (CC or)
            (SBAR (IN for)
              (S
                (NP (DT every) (JJ reachable) (NN state))
                (VP (VBZ s)
                  (SBAR (IN that)
                    (S
                      (VP (VBZ is) (RB not)
                        (NP (DT a) (NN goal) (NN state))))))))))))
    (, ,)
    (NP (EX there))
    (VP (VBZ exists)
      (NP
        (NP (DT a) (JJ variable) (NN u))
        (ADJP (JJ wrong))
        (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
      (PP (JJ such))
      (SBAR (IN that)
        (S
          (NP (NN u))
          (VP (VBZ is)
            (ADJP
              (ADJP (JJ k))
              (: -)
              (ADJP (JJ improvable)
                (PP (IN in)
                  (NP (NN s.) (NN Notice)))))
            (SBAR (IN that)
              (S
                (SBAR (IN if)
                  (S
                    (NP (DT an) (NN instance))
                    (VP (VBZ has)
                      (NP (NN width) (NN k)))))
                (, ,)
                (NP (PRP it))
                (ADVP (RB also))
                (VP (VBZ has)
                  (NP (JJ persistent) (NN width) (NN k)))))))))
    (. .)))

nsubj(has-6, Definition-1)
nummod(Definition-1, 8-2)
det(instance-5, A-3)
compound(instance-5, planning-4)
dep(Definition-1, instance-5)
ccomp(exists-29, has-6)
amod(k-9, persistent-7)
compound(k-9, width-8)
dobj(has-6, k-9)
mark(exists-13, if-10)
neg(plan-12, no-11)
nsubj(exists-13, plan-12)
dep(k-9, exists-13)
cc(exists-13, or-15)
mark(s-20, for-16)
det(state-19, every-17)
amod(state-19, reachable-18)
nsubj(s-20, state-19)
dep(k-9, s-20)
conj:or(exists-13, s-20)
mark(state-26, that-21)
cop(state-26, is-22)
neg(state-26, not-23)
det(state-26, a-24)
compound(state-26, goal-25)
ccomp(s-20, state-26)
expl(exists-29, there-28)
root(ROOT-0, exists-29)
det(u-32, a-30)
amod(u-32, variable-31)
dobj(exists-29, u-32)
amod(u-32, wrong-33)
dep(u-32, s-35)
advcl(exists-29, such-37)
mark(k-41, that-38)
nsubj(k-41, u-39)
cop(k-41, is-40)
ccomp(exists-29, k-41)
dep(k-41, improvable-43)
case(Notice-46, in-44)
compound(Notice-46, s.-45)
nmod:in(improvable-43, Notice-46)
mark(has-57, that-47)
mark(has-51, if-48)
det(instance-50, an-49)
nsubj(has-51, instance-50)
advcl(has-57, has-51)
compound(k-53, width-52)
dobj(has-51, k-53)
nsubj(has-57, it-55)
advmod(has-57, also-56)
ccomp(k-41, has-57)
amod(k-60, persistent-58)
compound(k-60, width-59)
dobj(has-57, k-60)

(ROOT
  (S
    (S
      (NP (DT The) (JJ corresponding) (JJ persistent) (NN width) (NN k) (NN algorithm))
      (VP
        (VP
          (ADVP (RB closely))
          (VBZ resembles)
          (NP
            (NP (DT the) (NN width) (NN k) (NN algorithm))
            (, ,)
            (PP (IN except)
              (SBAR (IN that)
                (S
                  (NP (DT the) (NN algorithm))
                  (VP (VBZ does) (RB not)
                    (ADVP (RB initially))
                    (VP (VB create)
                      (NP
                        (NP (DT a) (NN pre-established))
                        (VP (VBG ordering)
                          (NP (NNS v1))))
                      (, ,))))))
            (: ...)))
        (, ,)
        (NP
          (NP (NN vn))
          (PP (IN of)
            (NP (DT the) (NNS variables))))))
    (, ,)
    (CC but)
    (S
      (NP (DT an) (NN ordering))
      (VP (VBZ is)
        (VP (VBN created)
          (PP (IN during)
            (NP
              (NP (DT the) (NN execution))
              (PP (IN of)
                (NP (DT the) (NN algorithm))))))))
    (. .)))

det(algorithm-6, The-1)
amod(algorithm-6, corresponding-2)
amod(algorithm-6, persistent-3)
compound(algorithm-6, width-4)
compound(algorithm-6, k-5)
nsubj(resembles-8, algorithm-6)
advmod(resembles-8, closely-7)
root(ROOT-0, resembles-8)
det(algorithm-12, the-9)
compound(algorithm-12, width-10)
compound(algorithm-12, k-11)
xcomp(resembles-8, algorithm-12)
mark(create-21, except-14)
mark(create-21, that-15)
det(algorithm-17, the-16)
nsubj(create-21, algorithm-17)
aux(create-21, does-18)
neg(create-21, not-19)
advmod(create-21, initially-20)
acl(algorithm-12, create-21)
det(pre-established-23, a-22)
dobj(create-21, pre-established-23)
acl(pre-established-23, ordering-24)
dobj(ordering-24, v1-25)
dobj(resembles-8, vn-29)
case(variables-32, of-30)
det(variables-32, the-31)
nmod:of(vn-29, variables-32)
cc(resembles-8, but-34)
det(ordering-36, an-35)
nsubjpass(created-38, ordering-36)
auxpass(created-38, is-37)
conj:but(resembles-8, created-38)
case(execution-41, during-39)
det(execution-41, the-40)
nmod:during(created-38, execution-41)
case(algorithm-44, of-42)
det(algorithm-44, the-43)
nmod:of(execution-41, algorithm-44)

(ROOT
  (S
    (PP (IN In)
      (NP (DT the) (NN ith)))
    (S
      (S
        (VP (VB iteration)
          (NP (NNS variables))
          (NP (NNS v1))
          (, ,))
        (: ...))
      (, ,)
      (NP (JJ vi-1))
      (VP (VBP have)
        (ADVP (RB already))
        (VP (VBN been)
          (VP (VBN defined)))))
    (, ,)
    (CC and)
    (S
      (NP (DT the) (NN algorithm))
      (VP (VBZ tries)
        (S
          (VP (TO to)
            (VP (VB find)
              (NP (DT a) (NN k) (: -) (JJ improvable) (NN variable))
              (PP (IN among)
                (NP (DT the) (VBG remaining) (NNS ones))))))))
    (. .)))

case(ith-3, In-1)
det(ith-3, the-2)
nmod:in(defined-14, ith-3)
ccomp(defined-14, iteration-4)
iobj(iteration-4, variables-5)
dobj(iteration-4, v1-6)
nsubjpass(defined-14, vi-1-10)
aux(defined-14, have-11)
advmod(defined-14, already-12)
auxpass(defined-14, been-13)
root(ROOT-0, defined-14)
cc(defined-14, and-16)
det(algorithm-18, the-17)
nsubj(tries-19, algorithm-18)
nsubj:xsubj(find-21, algorithm-18)
conj:and(defined-14, tries-19)
mark(find-21, to-20)
xcomp(tries-19, find-21)
det(variable-26, a-22)
compound(variable-26, k-23)
amod(variable-26, improvable-25)
dobj(find-21, variable-26)
case(ones-30, among-27)
det(ones-30, the-28)
amod(ones-30, remaining-29)
nmod:among(find-21, ones-30)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP one))
        (VP (VBZ is)
          (VP (VBN found)))))
    (, ,)
    (WHNP (WDT that) (NN one))
    (SQ
      (VP (VBZ becomes)
        (NP
          (NP (NN vi))
          (: ;)
          (S
            (ADVP (RB otherwise))
            (, ,)
            (NP (DT the) (NN algorithm))
            (VP (VBZ outputs))
            ('' '')))))
    (. ?) ('' '')))

mark(found-4, If-1)
nsubjpass(found-4, one-2)
auxpass(found-4, is-3)
advcl(becomes-8, found-4)
det(one-7, that-6)
nsubj(becomes-8, one-7)
root(ROOT-0, becomes-8)
xcomp(becomes-8, vi-9)
advmod(outputs-15, otherwise-11)
det(algorithm-14, the-13)
nsubj(outputs-15, algorithm-14)
appos(vi-9, outputs-15)

(ROOT
  (S
    (VP (VB and)
      (NP (NNS halts)))
    (. .)))

root(ROOT-0, and-1)
dobj(and-1, halts-2)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP
          (VP (VB find)
            (NP (PDT such) (DT a) (NN k)))
          (: -)
          (VP (VB improvable)
            (NP (JJ variable) (NN v))))))
    (, ,)
    (NP (PRP we))
    (VP (VBP perform)
      (NP
        (NP (DT the) (JJ following) (NN subroutine))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (MD can)
              (VP (VB be)
                (VP (VBN carried)
                  (PRT (RP out))
                  (PP (IN in)
                    (NP (NN time) (NN O)))))))))
      (PRN (-LRB- -LRB-)
        (S
          (VP (VB nk)
            (NP (NN dk) (DT a))))
        (-RRB- -RRB-)))
    (. .)))

mark(find-2, To-1)
advcl(perform-12, find-2)
det:predet(k-5, such-3)
det(k-5, a-4)
dobj(find-2, k-5)
dep(find-2, improvable-7)
amod(v-9, variable-8)
dobj(improvable-7, v-9)
nsubj(perform-12, we-11)
root(ROOT-0, perform-12)
det(subroutine-15, the-13)
amod(subroutine-15, following-14)
dobj(perform-12, subroutine-15)
nsubjpass(carried-19, subroutine-15)
ref(subroutine-15, that-16)
aux(carried-19, can-17)
auxpass(carried-19, be-18)
acl:relcl(subroutine-15, carried-19)
compound:prt(carried-19, out-20)
case(O-23, in-21)
compound(O-23, time-22)
nmod:in(carried-19, O-23)
parataxis(perform-12, nk-25)
dobj(nk-25, dk-26)
dep(dk-26, a-27)

(ROOT
  (S
    (PP (IN For)
      (NP
        (NP (DT every) (NN choice))
        (PP (IN of)
          (NP (NNP k) (NNP variables) (NNP W)))))
    (, ,)
    (NP (PRP we))
    (VP (VBP create)
      (NP
        (NP (DT a) (NN graph))
        (FRAG
          (ADVP (RB as)
            (PP (IN in)
              (NP (DT the) (NN width) (NN k) (NN algorithm))))
          (, ,)
          (S (CC but)
            (NP (PRP$ our) (NN search))
            (VP (VBZ looks)
              (SBAR (IN for)
                (S
                  (NP (DT a) (NN vertex))
                  (VP (VBZ s)
                    (NP
                      (NP
                        (NP
                          (NP (PDT such) (DT that) (NN wrong))
                          (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
                        (-LRB- -LCB-)
                        (NP (NNS v1))
                        (, ,))
                      (: ...)
                      (NP
                        (NP (, ,)
                          (NP (NNS vi-1) (, ,) (NN v))
                          (-RRB- -RCB-) (NNS =))
                        (PP (IN for)
                          (NP
                            (NP (DT some) (JJ variable) (NN v) (NN outside))
                            (PP (IN of)
                              (NP (CD v1))))))
                      (, ,)))))))
          (: ...)))
      (, ,)
      (S
        (ADJP (JJ vi-1))))
    (. .)))

case(choice-3, For-1)
det(choice-3, every-2)
nmod:for(create-10, choice-3)
case(W-7, of-4)
compound(W-7, k-5)
compound(W-7, variables-6)
nmod:of(choice-3, W-7)
nsubj(create-10, we-9)
root(ROOT-0, create-10)
det(graph-12, a-11)
dobj(create-10, graph-12)
dep(graph-12, as-13)
case(algorithm-18, in-14)
det(algorithm-18, the-15)
compound(algorithm-18, width-16)
compound(algorithm-18, k-17)
nmod:in(as-13, algorithm-18)
cc(looks-23, but-20)
nmod:poss(search-22, our-21)
nsubj(looks-23, search-22)
dep(as-13, looks-23)
mark(wrong-30, for-24)
det(vertex-26, a-25)
nsubj(wrong-30, vertex-26)
cop(wrong-30, s-27)
det:predet(wrong-30, such-28)
det(wrong-30, that-29)
advcl(looks-23, wrong-30)
dep(wrong-30, s-32)
dep(wrong-30, v1-35)
compound(v-41, vi-1-39)
dep(=-43, v-41)
dep(wrong-30, =-43)
case(v1-50, for-44)
det(v1-50, some-45)
amod(v1-50, variable-46)
compound(v1-50, v-47)
case(v1-50, outside-48)
mwe(outside-48, of-49)
nmod:outside_of(=-43, v1-50)
xcomp(create-10, vi-1-54)

(ROOT
  (S
    (NP (NNP Theorem) (CD 9))
    (VP (VBD Let)
      (S
        (NP (NNP C))
        (VP (VB be)
          (NP
            (NP (DT a) (NN set))
            (PP (IN of)
              (NP
                (NP (NN planning) (NNS instances))
                (VP (VBG having)
                  (NP (JJ persistent) (NN width) (NN k)))))))))
    (. .)))

nsubj(Let-3, Theorem-1)
nummod(Theorem-1, 9-2)
root(ROOT-0, Let-3)
nsubj(set-7, C-4)
cop(set-7, be-5)
det(set-7, a-6)
ccomp(Let-3, set-7)
case(instances-10, of-8)
compound(instances-10, planning-9)
nmod:of(set-7, instances-10)
acl(instances-10, having-11)
amod(k-14, persistent-12)
compound(k-14, width-13)
dobj(having-11, k-14)

(ROOT
  (S
    (NP
      (NP (DT The) (NN plan) (NN generation) (NN problem))
      (PP (IN for)
        (NP (NNP C))))
    (VP (VBZ is)
      (ADJP (JJ solvable)
        (PP (IN in)
          (NP
            (NP (JJ polynomial) (NN time))
            (PP (IN via)
              (NP
                (NP (DT the) (JJ persistent) (NN width) (NN k) (NN algorithm))
                (PP (IN in)
                  (NP (NN time) (NN O)))
                (PRN (-LRB- -LRB-)
                  (VP (VBN nk)
                    (NP
                      (NP (CD +1))
                      (ADJP (RB dk) (DT a))))
                  (-RRB- -RRB-))))))))
    (. .)))

det(problem-4, The-1)
compound(problem-4, plan-2)
compound(problem-4, generation-3)
nsubj(solvable-8, problem-4)
case(C-6, for-5)
nmod:for(problem-4, C-6)
cop(solvable-8, is-7)
root(ROOT-0, solvable-8)
case(time-11, in-9)
amod(time-11, polynomial-10)
nmod:in(solvable-8, time-11)
case(algorithm-17, via-12)
det(algorithm-17, the-13)
amod(algorithm-17, persistent-14)
compound(algorithm-17, width-15)
compound(algorithm-17, k-16)
nmod:via(time-11, algorithm-17)
case(O-20, in-18)
compound(O-20, time-19)
nmod:in(algorithm-17, O-20)
dep(algorithm-17, nk-22)
dobj(nk-22, +1-23)
advmod(a-25, dk-24)
amod(+1-23, a-25)

(ROOT
  (S
    (NP
      (NP
        (QP (CD Theorem) (CD 10))
        (DT All) (NNS instances))
      (PP (IN of)
        (NP (DT the) (NNP Unlock) (NN domain))))
    (VP (VBP have)
      (NP (JJ persistent) (NN width))
      (NP (CD 5)))
    (. .)))

compound(10-2, Theorem-1)
nummod(instances-4, 10-2)
det(instances-4, All-3)
nsubj(have-9, instances-4)
case(domain-8, of-5)
det(domain-8, the-6)
compound(domain-8, Unlock-7)
nmod:of(instances-4, domain-8)
root(ROOT-0, have-9)
amod(width-11, persistent-10)
iobj(have-9, width-11)
dobj(have-9, 5-12)

(ROOT
  (NP (NN Proof) (. .)))

root(ROOT-0, Proof-1)

(ROOT
  (S
    (VP (VB Let)
      (VP (VB be)
        (NP
          (NP (DT an) (NN instance))
          (PP (IN of)
            (NP (DT the) (NNP Unlock) (NN domain))))))
    (. .)))

root(ROOT-0, Let-1)
cop(instance-4, be-2)
det(instance-4, an-3)
xcomp(Let-1, instance-4)
case(domain-8, of-5)
det(domain-8, the-6)
compound(domain-8, Unlock-7)
nmod:of(instance-4, domain-8)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP assume)
      (SBAR
        (S
          (VP (VBZ is)
            (NP
              (NP (NN solvable))
              (PRN (-LRB- -LRB-)
                (S
                  (ADVP (RB otherwise))
                  (NP (PRP it))
                  (VP (VBZ has)
                    (NP
                      (NP (JJ persistent) (NN width))
                      (SBAR
                        (WHNP
                          (NP (CD 5))
                          (WHPP (IN by)
                            (WHNP (WDT that) (NN solves))))
                        (S
                          (VP (VBZ induces)
                            (NP (DT an) (JJ ordering) (NN definition))))))))
                (-RRB- -RRB-)))))))
    (. .)))

nsubj(assume-2, We-1)
root(ROOT-0, assume-2)
cop(solvable-4, is-3)
ccomp(assume-2, solvable-4)
advmod(has-8, otherwise-6)
nsubj(has-8, it-7)
dep(solvable-4, has-8)
amod(width-10, persistent-9)
dobj(has-8, width-10)
nsubj(induces-15, 5-11)
case(solves-14, by-12)
det(solves-14, that-13)
nmod:by(5-11, solves-14)
acl:relcl(width-10, induces-15)
det(definition-18, an-16)
amod(definition-18, ordering-17)
dobj(induces-15, definition-18)

(ROOT
  (S
    (S
      (NP (DT Any) (NN plan))
      (VP (VBP P)
        (PP (IN on)
          (NP
            (NP (DT the) (NNS locations))
            (PP (IN of))))))
    (: :)
    (S
      (INTJ (VB say))
      (NP (NNP l))
      (VP (VBD <)
        (NP (NN l))
        (SBAR (IN if)
          (S
            (NP (NN location) (NNS l))
            (VP (VBD was)
              (ADJP (JJ unlocked)))))))
    (. .)))

det(plan-2, Any-1)
nsubj(P-3, plan-2)
root(ROOT-0, P-3)
case(locations-6, on-4)
det(locations-6, the-5)
nmod:on(P-3, locations-6)
acl(locations-6, of-7)
discourse(<-11, say-9)
nsubj(<-11, l-10)
parataxis(P-3, <-11)
dobj(<-11, l-12)
mark(unlocked-17, if-13)
compound(l-15, location-14)
nsubj(unlocked-17, l-15)
cop(unlocked-17, was-16)
advcl(<-11, unlocked-17)

(ROOT
  (S
    (PP (IN before)
      (NP (NN location)))
    (NP (NN l))
    (PP (IN during)
      (NP
        (NP (DT the) (NN course))
        (PP (IN of)
          (NP (DT the) (NN plan)))))
    (NP (NNP P))
    (VP (VBD Let)
      (S
        (NP (PRP s))
        (VP (VB be)
          (NP
            (NP (DT a) (JJ reachable) (NN state))
            (PP (IN of)
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBZ is) (RB not)
                    (NP (DT a) (NN goal) (NN state))))))))))
    (. .)))

case(location-2, before-1)
nmod:before(Let-11, location-2)
nsubj(Let-11, l-3)
case(course-6, during-4)
det(course-6, the-5)
nmod:during(Let-11, course-6)
case(plan-9, of-7)
det(plan-9, the-8)
nmod:of(course-6, plan-9)
nsubj(Let-11, P-10)
root(ROOT-0, Let-11)
nsubj(state-16, s-12)
cop(state-16, be-13)
det(state-16, a-14)
amod(state-16, reachable-15)
ccomp(Let-11, state-16)
mark(state-23, of-17)
nsubj(state-23, that-18)
cop(state-23, is-19)
neg(state-23, not-20)
det(state-23, a-21)
compound(state-23, goal-22)
acl(state-16, state-23)

(ROOT
  (S
    (VP (VB Let) (RB l)
      (VP (VB be)
        (NP
          (NP (DT the) (JJS smallest) (NNS locations))
          (PP (IN in)
            (NP (NNP l) (JJ such)))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ s)
                (NP
                  (NP (-LRB- -LRB-) (NNP l) (-RRB- -RRB-))
                  (ADJP (RB =) (VBN locked)))))))))
    (. .)))

root(ROOT-0, Let-1)
advmod(Let-1, l-2)
cop(locations-6, be-3)
det(locations-6, the-4)
amod(locations-6, smallest-5)
dep(Let-1, locations-6)
nsubj(l-13, locations-6)
case(l-8, in-7)
nmod:in(locations-6, l-8)
amod(l-8, such-9)
ref(locations-6, that-10)
cop(l-13, s-11)
acl:relcl(locations-6, l-13)
advmod(locked-16, =-15)
amod(l-13, locked-16)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP show)
      (SBAR (IN that)
        (S
          (NP (PRP it))
          (VP (VBZ is)
            (ADJP (JJ possible)
              (PP (TO to)
                (NP (JJ 5-improve) (DT the) (JJ variable) (NN u))))
            (NP (JJ =) (NN l))
            (PP (IN by)
              (NP
                (NP (NNS means))
                (PP (IN of)
                  (NP (DT the) (VBG following) (NN plan) (NN P)))))))))
    (. .)))

nsubj(show-2, We-1)
root(ROOT-0, show-2)
mark(possible-6, that-3)
nsubj(possible-6, it-4)
cop(possible-6, is-5)
ccomp(show-2, possible-6)
case(u-11, to-7)
amod(u-11, 5-improve-8)
det(u-11, the-9)
amod(u-11, variable-10)
nmod:to(possible-6, u-11)
amod(l-13, =-12)
dep(possible-6, l-13)
case(P-20, by-14)
mwe(by-14, means-15)
mwe(by-14, of-16)
det(P-20, the-17)
amod(P-20, following-18)
compound(P-20, plan-19)
nmod:by_means_of(possible-6, P-20)

(ROOT
  (S
    (NP
      (NP (NNP *) (NNP Drop))
      (SBAR
        (S
          (NP (DT the) (NN key))
          (VP (VBZ s)
            (NP
              (NP (-LRB- -LRB-) (NN hand) (-RRB- -RRB-))
              (PRN (-LRB- -LRB-)
                (SBAR (IN if)
                  (S
                    (NP (DT the) (NN hand))
                    (VP (VBZ is) (RB not)
                      (ADJP (JJ empty)))))
                (-RRB- -RRB-))
              (PP (IN in)
                (NP (NN localtion) (NNS l1))))))))
    (VP (SYM =)
      (NP (NNP s) (-LRB- -LRB-) (NNP pos) (-RRB- -RRB-)))
    (. .)))

compound(Drop-2, *-1)
nsubj(pos-23, Drop-2)
det(key-4, the-3)
nsubj(hand-7, key-4)
cop(hand-7, s-5)
acl:relcl(Drop-2, hand-7)
mark(empty-15, if-10)
det(hand-12, the-11)
nsubj(empty-15, hand-12)
cop(empty-15, is-13)
neg(empty-15, not-14)
dep(hand-7, empty-15)
case(l1-19, in-17)
compound(l1-19, localtion-18)
nmod:in(hand-7, l1-19)
dep(pos-23, =-20)
compound(pos-23, s-21)
root(ROOT-0, pos-23)

(ROOT
  (X
    (X (SYM *))
    (ADJP (JJ Move)
      (PP (IN from)
        (NP (CD l1)))
      (PP (TO to)
        (NP
          (NP (DT the) (NN location) (NN l2))
          (SBAR
            (WHADVP (WRB where))
            (S
              (NP
                (NP (DT the) (NN key))
                (PP (TO to)
                  (NP (NN unlock))))
              (NP (NN l))
              (VP (VBZ is))))))
      (. .))))

dep(Move-2, *-1)
root(ROOT-0, Move-2)
case(l1-4, from-3)
nmod:from(Move-2, l1-4)
case(l2-8, to-5)
det(l2-8, the-6)
compound(l2-8, location-7)
nmod:to(Move-2, l2-8)
advmod(is-15, where-9)
det(key-11, the-10)
nsubj(is-15, key-11)
case(unlock-13, to-12)
nmod:to(key-11, unlock-13)
nsubj(is-15, l-14)
acl:relcl(l2-8, is-15)

(ROOT
  (FRAG
    (X (SYM *))
    (VP (VBP Pick)
      (NP (PRP it))
      (PRT (RP up)))
    (. .)))

dep(Pick-2, *-1)
root(ROOT-0, Pick-2)
dobj(Pick-2, it-3)
compound:prt(Pick-2, up-4)

(ROOT
  (FRAG
    (X (SYM *))
    (VP (VBD Move)
      (PP (TO to)
        (NP
          (NP (DT a) (NN neighbour) (NN location) (NN l3))
          (PP (IN of)
            (NP (NN l.))
            (X (SYM *)))))
      (NP (NNP Unlock) (NN l))
      (PP (IN with)
        (NP (DT the) (NN key))))
    (. .)))

dep(Move-2, *-1)
root(ROOT-0, Move-2)
case(l3-7, to-3)
det(l3-7, a-4)
compound(l3-7, neighbour-5)
compound(l3-7, location-6)
nmod:to(Move-2, l3-7)
case(l.-9, of-8)
nmod:of(l3-7, l.-9)
dep(l.-9, *-10)
compound(l-12, Unlock-11)
dobj(Move-2, l-12)
case(key-15, with-13)
det(key-15, the-14)
nmod:with(Move-2, key-15)

(ROOT
  (FRAG
    (X (SYM *))
    (VP (VBD Move)
      (PRT (RP back))
      (PP (TO to)
        (NP (CD l2))))
    (. .)))

dep(Move-2, *-1)
root(ROOT-0, Move-2)
compound:prt(Move-2, back-3)
case(l2-5, to-4)
nmod:to(Move-2, l2-5)

(ROOT
  (FRAG
    (X
      (X (SYM *))
      (NP (NNP Drop)))
    (NP (DT the) (NN key) (. .))))

dep(Drop-2, *-1)
dep(key-4, Drop-2)
det(key-4, the-3)
root(ROOT-0, key-4)

(ROOT
  (FRAG
    (X (SYM *))
    (VP (VBD Move)
      (PRT (RP back))
      (PP (TO to)
        (NP (CD l1))))
    (. .)))

dep(Move-2, *-1)
root(ROOT-0, Move-2)
compound:prt(Move-2, back-3)
case(l1-5, to-4)
nmod:to(Move-2, l1-5)

(ROOT
  (FRAG
    (X (SYM *))
    (VP (VBZ Pick)
      (PRT (RP up))
      (NP
        (NP
          (NP (DT the) (JJ key) (NN s))
          (PRN (-LRB- -LRB-)
            (NP (NN hand))
            (-RRB- -RRB-)))
        (PRN (-LRB- -LRB-)
          (SBAR (IN if)
            (S
              (NP (DT the) (NN hand))
              (VP (VBD was) (RB not)
                (ADJP (JJ empty)
                  (PP (IN at)
                    (NP (DT the) (NN beginning)))))))
          (-RRB- -RRB-))))
    (. .)))

dep(Pick-2, *-1)
root(ROOT-0, Pick-2)
compound:prt(Pick-2, up-3)
det(s-6, the-4)
amod(s-6, key-5)
dobj(Pick-2, s-6)
appos(s-6, hand-8)
mark(empty-16, if-11)
det(hand-13, the-12)
nsubj(empty-16, hand-13)
cop(empty-16, was-14)
neg(empty-16, not-15)
dep(s-6, empty-16)
case(beginning-19, at-17)
det(beginning-19, the-18)
nmod:at(empty-16, beginning-19)

(ROOT
  (S
    (ADVP (RB Clearly))
    (NP (DT the) (NN plan))
    (VP (VBP P)
      (NP
        (NP
          (NP
            (NP (JJ 5-improves) (NN l))
            (-LRB- -LRB-)
            (NP (-LRB- -LRB-) (NNP s) (NNP -LSB-) (NNP P) (NNP -RSB-))
            (-RRB- -RRB-))
          (PRN (-LRB- -LRB-)
            (NP (NN l))
            (-RRB- -RRB-)))
        (VP (VBG =)
          (NP
            (NP (NN goal))
            (PRN (-LRB- -LRB-)
              (VP (VBN l))
              (-RRB- -RRB-))
            (CC and)
            (PRN (-LRB- -LRB-)
              (S
                (NP (PRP s))
                (VP (VBZ -LSB-)
                  (NP (NNP P) (NNP -RSB-))))
              (-RRB- -RRB-))
            (NP
              (NP (-LRB- -LRB-) (NN v) (-RRB- -RRB-))
              (SBAR
                (S
                  (VP (SYM =)
                    (NP (PRP s))))))))
        (PRN (-LRB- -LRB-)
          (NP (NN v))
          (-RRB- -RRB-)))
      (PP (IN for)
        (NP (DT all) (VBG remaining) (NNS variables))))
    (-RRB- -RRB-) (. .)))

advmod(P-4, Clearly-1)
det(plan-3, the-2)
nsubj(P-4, plan-3)
root(ROOT-0, P-4)
amod(l-6, 5-improves-5)
dobj(P-4, l-6)
compound(-RSB--12, s-9)
compound(-RSB--12, -LSB--10)
compound(-RSB--12, P-11)
dep(l-6, -RSB--12)
appos(l-6, l-15)
acl(l-6, =-17)
dobj(=-17, goal-18)
dep(goal-18, l-20)
cc(goal-18, and-22)
nsubj(-LSB--25, s-24)
dep(goal-18, -LSB--25)
compound(-RSB--27, P-26)
dobj(-LSB--25, -RSB--27)
dobj(=-17, v-30)
conj:and(goal-18, v-30)
dep(s-33, =-32)
acl:relcl(v-30, s-33)
appos(l-6, v-35)
case(variables-40, for-37)
det(variables-40, all-38)
amod(variables-40, remaining-39)
nmod:for(P-4, variables-40)

(ROOT
  (S
    (NP
      (NP (DT All))
      (SBAR
        (S
          (NP (PRP it))
          (VP (VBZ remains)
            (S
              (VP (TO to)
                (VP (VB show))))))))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (DT the) (NNS movements))
          (VP (VBD described)
            (PP (IN in)
              (NP
                (NP
                  (NP (DT the) (NN plan))
                  (SBAR
                    (S
                      (VP (VBP are)
                        (ADJP (JJ feasible)))))
                  (, ,)
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VBZ is) (, ,)
                        (SBAR
                          (S
                            (NP (EX there))
                            (VP (VBZ is)
                              (NP
                                (NP (DT a) (NN path))
                                (PP (IN between)
                                  (NP (NNS l1)
                                    (CC and)
                                    (NNS l2))))))))))
                  (, ,))
                (CC and)
                (NP
                  (NP (DT a) (NN path))
                  (PP (IN between)
                    (NP
                      (NP (NNS l2)
                        (CC and)
                        (NNS l3))
                      (, ,)
                      (SBAR
                        (WHNP (WDT that))
                        (S
                          (VP (VBZ is) (RB not)
                            (VP (VBN blocked)
                              (PP (IN by)
                                (NP (JJ unlocked) (NNS locations))))))))))))))))
    (. .)))

nsubj(is-6, All-1)
nsubj(remains-3, it-2)
nsubj:xsubj(show-5, it-2)
acl:relcl(All-1, remains-3)
mark(show-5, to-4)
xcomp(remains-3, show-5)
root(ROOT-0, is-6)
mark(described-10, that-7)
det(movements-9, the-8)
nsubj(described-10, movements-9)
ccomp(is-6, described-10)
case(plan-13, in-11)
det(plan-13, the-12)
nmod:in(described-10, plan-13)
nsubj(is-18, plan-13)
cop(feasible-15, are-14)
acl:relcl(plan-13, feasible-15)
ref(plan-13, that-17)
acl:relcl(plan-13, is-18)
expl(is-21, there-20)
ccomp(is-18, is-21)
det(path-23, a-22)
nsubj(is-21, path-23)
case(l1-25, between-24)
nmod:between(path-23, l1-25)
cc(l1-25, and-26)
nmod:between(path-23, l2-27)
conj:and(l1-25, l2-27)
cc(plan-13, and-29)
det(path-31, a-30)
nmod:in(described-10, path-31)
conj:and(plan-13, path-31)
nsubj(is-18, path-31)
case(l2-33, between-32)
nmod:between(path-31, l2-33)
nsubjpass(blocked-40, l2-33)
cc(l2-33, and-34)
nmod:between(path-31, l3-35)
conj:and(l2-33, l3-35)
nsubjpass(blocked-40, l3-35)
ref(l2-33, that-37)
auxpass(blocked-40, is-38)
neg(blocked-40, not-39)
acl:relcl(l2-33, blocked-40)
case(locations-43, by-41)
amod(locations-43, unlocked-42)
nmod:agent(blocked-40, locations-43)

(ROOT
  (S
    (S
      (VP (VB Let)
        (S
          (NP (NNP U))
          (VP
            (VP (VB be)
              (NP
                (NP (DT a) (NN set))
                (PP (IN of)
                  (NP (NNS locations)))))
            (, ,)
            (CC and)
            (VP (VB let)
              (S
                (NP (NNP G) (NNP -LSB-) (NNP U) (NNP -RSB-))
                (VP (VB be)
                  (NP
                    (NP (DT the) (NN graph))
                    (SBAR
                      (WHNP (WDT that))
                      (S
                        (VP (VBZ describes)
                          (NP
                            (NP (JJ valid) (NNS movements))
                            (SBAR
                              (WHADVP (WRB when))
                              (S
                                (NP (DT the) (JJ only) (JJ unlocked) (NNS locations))
                                (VP (VBP are)
                                  (NP
                                    (NP (DT those))
                                    (PP (IN in)
                                      (NP (NNP U)))))))))))))))))))
    (, ,)
    (ADVP (RB namely))
    (, ,)
    (NP (NNP G) (NNP -LSB-) (NNP U) (NNP -RSB-))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN restriction))
        (PP (IN of)
          (NP
            (NP (NNP G))
            (PP (TO to)
              (NP
                (NP (DT the) (NN set))
                (PP (IN of)
                  (NP (NNP vertices) (NNP U)))))))))
    (. .)))

ccomp(restriction-40, Let-1)
nsubj(set-5, U-2)
nsubj(let-10, U-2)
cop(set-5, be-3)
det(set-5, a-4)
ccomp(Let-1, set-5)
case(locations-7, of-6)
nmod:of(set-5, locations-7)
cc(set-5, and-9)
ccomp(Let-1, let-10)
conj:and(set-5, let-10)
compound(-RSB--14, G-11)
compound(-RSB--14, -LSB--12)
compound(-RSB--14, U-13)
nsubj(graph-17, -RSB--14)
cop(graph-17, be-15)
det(graph-17, the-16)
ccomp(let-10, graph-17)
nsubj(describes-19, graph-17)
ref(graph-17, that-18)
acl:relcl(graph-17, describes-19)
amod(movements-21, valid-20)
dobj(describes-19, movements-21)
advmod(those-28, when-22)
det(locations-26, the-23)
amod(locations-26, only-24)
amod(locations-26, unlocked-25)
nsubj(those-28, locations-26)
cop(those-28, are-27)
acl:relcl(movements-21, those-28)
case(U-30, in-29)
nmod:in(those-28, U-30)
advmod(restriction-40, namely-32)
compound(-RSB--37, G-34)
compound(-RSB--37, -LSB--35)
compound(-RSB--37, U-36)
nsubj(restriction-40, -RSB--37)
cop(restriction-40, is-38)
det(restriction-40, the-39)
root(ROOT-0, restriction-40)
case(G-42, of-41)
nmod:of(restriction-40, G-42)
case(set-45, to-43)
det(set-45, the-44)
nmod:to(G-42, set-45)
case(U-48, of-46)
compound(U-48, vertices-47)
nmod:of(set-45, U-48)

(ROOT
  (S
    (S
      (VP (VB Let)
        (S
          (NP (NNP U))
          (VP
            (VP (VB be)
              (ADJP
                (ADJP
                  (NP
                    (NP (DT the) (NN set))
                    (PP (IN of)
                      (NP (NNS locations))))
                  (JJR smaller))
                (SBAR (IN than)
                  (S
                    (NP (DT the) (NN location))
                    (NP (NN l))
                    (NP (PRP we))
                    (VP (VBP are)
                      (VP (VBG trying)
                        (S
                          (VP (TO to)
                            (VP (VB improve))))))))))
            (, ,)
            (CC and)
            (VP (VB let)
              (S
                (NP (NNP U))
                (VP (VB be)
                  (NP
                    (NP (DT the) (NN set))
                    (PP (IN of)
                      (NP (NNS locations)))))))))))
    (VP (VBD unlocked)
      (PP (IN in)
        (NP (NN state) (NNS s))))
    (. .)))

csubj(unlocked-27, Let-1)
nsubj(smaller-8, U-2)
nsubj(let-20, U-2)
cop(smaller-8, be-3)
det(set-5, the-4)
nmod:npmod(smaller-8, set-5)
case(locations-7, of-6)
nmod:of(set-5, locations-7)
ccomp(Let-1, smaller-8)
mark(trying-15, than-9)
det(location-11, the-10)
nsubj(trying-15, location-11)
nsubj:xsubj(improve-17, location-11)
nsubj(trying-15, l-12)
nsubj:xsubj(improve-17, l-12)
nsubj(trying-15, we-13)
nsubj:xsubj(improve-17, we-13)
aux(trying-15, are-14)
ccomp(smaller-8, trying-15)
mark(improve-17, to-16)
xcomp(trying-15, improve-17)
cc(smaller-8, and-19)
ccomp(Let-1, let-20)
conj:and(smaller-8, let-20)
nsubj(set-24, U-21)
cop(set-24, be-22)
det(set-24, the-23)
ccomp(let-20, set-24)
case(locations-26, of-25)
nmod:of(set-24, locations-26)
root(ROOT-0, unlocked-27)
case(s-30, in-28)
compound(s-30, state-29)
nmod:in(unlocked-27, s-30)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP know)
      (SBAR (IN that)
        (S
          (NP (NNS l1))
          (VP (VBZ is)
            (ADJP (JJ connected)
              (S
                (VP (TO to)
                  (VP (VB init)
                    (NP
                      (NP (-LRB- -LRB-) (NN pos) (-RRB- -RRB-))
                      (PP (IN in)
                        (NP (NNP G) (NNP -LSB-) (NNP U) (NNP -RSB-))))))))
            (PRN (-LRB- -LRB-)
              (FRAG
                (ADVP (RB otherwise))
                (NP (DT the) (NN state)
                  (SBAR
                    (S
                      (NP (PRP s))
                      (VP (MD would) (RB not)
                        (VP (VB be)
                          (ADJP (JJ reachable))))))))
              (-RRB- -RRB-))))))
    (. .)))

nsubj(know-2, We-1)
root(ROOT-0, know-2)
mark(connected-6, that-3)
nsubj(connected-6, l1-4)
nsubj:xsubj(init-8, l1-4)
cop(connected-6, is-5)
ccomp(know-2, connected-6)
mark(init-8, to-7)
xcomp(connected-6, init-8)
dobj(init-8, pos-10)
case(-RSB--16, in-12)
compound(-RSB--16, G-13)
compound(-RSB--16, -LSB--14)
compound(-RSB--16, U-15)
nmod:in(pos-10, -RSB--16)
dep(state-20, otherwise-18)
det(state-20, the-19)
dep(connected-6, state-20)
nsubj(reachable-25, s-21)
aux(reachable-25, would-22)
neg(reachable-25, not-23)
cop(reachable-25, be-24)
ccomp(state-20, reachable-25)

(ROOT
  (S
    (NP (DT The) (NN plan) (NN P))
    (VP (MD would)
      (VP (VB be)
        (ADJP (JJ feasible))
        (SBAR (IN if)
          (S
            (NP (DT both) (NNS l2)
              (CC and)
              (NNS l3))
            (VP (VBP are)
              (ADVP (RB also))
              (VP (VBN connected)
                (S
                  (VP (TO to)
                    (VP (VB init)
                      (NP
                        (NP (-LRB- -LRB-) (NN pos) (-RRB- -RRB-))
                        (PP (IN in)
                          (NP (NNP G) (NNP -LSB-) (NNP U) (NNP -RSB-)))))))))))))
    (. .)))

det(P-3, The-1)
compound(P-3, plan-2)
nsubj(feasible-6, P-3)
aux(feasible-6, would-4)
cop(feasible-6, be-5)
root(ROOT-0, feasible-6)
mark(connected-14, if-7)
cc:preconj(l2-9, both-8)
nsubjpass(connected-14, l2-9)
nsubj:xsubj(init-16, l2-9)
cc(l2-9, and-10)
conj:and(l2-9, l3-11)
nsubjpass(connected-14, l3-11)
nsubj:xsubj(init-16, l3-11)
auxpass(connected-14, are-12)
advmod(connected-14, also-13)
advcl(feasible-6, connected-14)
mark(init-16, to-15)
xcomp(connected-14, init-16)
dobj(init-16, pos-18)
case(-RSB--24, in-20)
compound(-RSB--24, G-21)
compound(-RSB--24, -LSB--22)
compound(-RSB--24, U-23)
nmod:in(pos-18, -RSB--24)

(ROOT
  (SINV
    (S
      (NP (DT The) (NN way))
      (NP (NN l))
      (VP (VBD was)
        (VP (VBN chosen))))
    (VP (VBZ implies))
    (NP
      (NP (DT that) (NNP U) (NNP U))
      (, ,)
      (RRC
        (ADVP (RB thus))
        (NP (NNP G) (NNP -LSB-) (NNP U) (NNP -RSB-) (NNP G) (NN -LSB-) (NNP U) (NNP -RSB-))))
    (. .)))

det(way-2, The-1)
nsubjpass(chosen-5, way-2)
nsubjpass(chosen-5, l-3)
auxpass(chosen-5, was-4)
dep(implies-6, chosen-5)
root(ROOT-0, implies-6)
det(U-9, that-7)
compound(U-9, U-8)
nsubj(implies-6, U-9)
advmod(-RSB--19, thus-11)
compound(-RSB--19, G-12)
compound(-RSB--19, -LSB--13)
compound(-RSB--19, U-14)
compound(-RSB--19, -RSB--15)
compound(-RSB--19, G-16)
compound(-RSB--19, -LSB--17)
compound(-RSB--19, U-18)
acl:relcl(U-9, -RSB--19)

(ROOT
  (S
    (NP
      (NP (DT The) (NN fact))
      (VP (VBN managed)
        (PP (TO to)
          (NP (NN unlock) (NN location)))
        (NP (NN l))))
    (VP (VBZ implies)
      (SBAR (IN that)
        (S
          (NP
            (NP (JJ locathat) (NN plan) (NN tion) (NNS l2))
            (CC and)
            (NP
              (ADVP (IN at) (JJS least))
              (NP (DT a) (NN neighbour) (NN location) (NN l3))
              (PP (IN of)
                (NP (NNP l)))))
          (VP (VBP are)
            (VP (VBN connected)
              (S
                (VP (TO to)
                  (VP (VB init)
                    (NP
                      (NP (-LRB- -LRB-) (NN pos) (-RRB- -RRB-))
                      (PP (IN in)
                        (NP (NNP G) (NNP -LSB-) (NNP U) (NNP -RSB-))))))))))))
    (. .)))

det(fact-2, The-1)
nsubj(implies-8, fact-2)
acl(fact-2, managed-3)
case(location-6, to-4)
compound(location-6, unlock-5)
nmod:to(managed-3, location-6)
dobj(managed-3, l-7)
root(ROOT-0, implies-8)
mark(connected-24, that-9)
amod(l2-13, locathat-10)
compound(l2-13, plan-11)
compound(l2-13, tion-12)
nsubjpass(connected-24, l2-13)
nsubj:xsubj(init-26, l2-13)
cc(l2-13, and-14)
case(least-16, at-15)
advmod(l3-20, least-16)
det(l3-20, a-17)
compound(l3-20, neighbour-18)
compound(l3-20, location-19)
conj:and(l2-13, l3-20)
nsubjpass(connected-24, l3-20)
nsubj:xsubj(init-26, l3-20)
case(l-22, of-21)
nmod:of(l3-20, l-22)
auxpass(connected-24, are-23)
ccomp(implies-8, connected-24)
mark(init-26, to-25)
xcomp(connected-24, init-26)
dobj(init-26, pos-28)
case(-RSB--34, in-30)
compound(-RSB--34, G-31)
compound(-RSB--34, -LSB--32)
compound(-RSB--34, U-33)
nmod:in(pos-28, -RSB--34)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ follows)
      (PP (IN from)
        (NP (NNP G) (NNP -LSB-) (NNP U) (NNP -RSB-) (NNP G) (NNP -LSB-) (NNP U) (NN -RSB-)))
      (SBAR (IN that)
        (S
          (NP (NNS l2)
            (CC and)
            (NNS l3))
          (VP (VBP are)
            (ADVP (RB also))
            (VP (VBN connected)
              (S
                (VP (TO to)
                  (VP (VB init) (-LRB- -LRB-)
                    (NP (NN pos))
                    (-RRB- -RRB-)
                    (PP (IN in)
                      (NP
                        (NP (NNP G) (NNP -LSB-) (NNP U) (NNP -RSB-))
                        (SBAR
                          (S
                            (NP (PRP It))
                            (VP (VBZ remains)
                              (S
                                (VP (TO to)
                                  (VP (VB consider)
                                    (NP (DT the) (NN case))
                                    (SBAR
                                      (WHADVP (WRB when))
                                      (S
                                        (NP
                                          (NP (DT all) (NNS locations))
                                          (PP (IN in)
                                            (NP (PRP s))))
                                        (VP (VBP are)
                                          (ADJP (JJ unlocked)))))))))))))))))))))
    (. .)))

nsubj(follows-2, It-1)
root(ROOT-0, follows-2)
case(-RSB--11, from-3)
compound(-RSB--11, G-4)
compound(-RSB--11, -LSB--5)
compound(-RSB--11, U-6)
compound(-RSB--11, -RSB--7)
compound(-RSB--11, G-8)
compound(-RSB--11, -LSB--9)
compound(-RSB--11, U-10)
nmod:from(follows-2, -RSB--11)
mark(connected-18, that-12)
nsubjpass(connected-18, l2-13)
nsubj:xsubj(init-20, l2-13)
cc(l2-13, and-14)
conj:and(l2-13, l3-15)
nsubjpass(connected-18, l3-15)
nsubj:xsubj(init-20, l3-15)
auxpass(connected-18, are-16)
advmod(connected-18, also-17)
ccomp(follows-2, connected-18)
mark(init-20, to-19)
xcomp(connected-18, init-20)
dobj(init-20, pos-22)
case(-RSB--28, in-24)
compound(-RSB--28, G-25)
compound(-RSB--28, -LSB--26)
compound(-RSB--28, U-27)
nmod:in(init-20, -RSB--28)
nsubj(remains-30, It-29)
nsubj:xsubj(consider-32, It-29)
acl:relcl(-RSB--28, remains-30)
mark(consider-32, to-31)
xcomp(remains-30, consider-32)
det(case-34, the-33)
dobj(consider-32, case-34)
advmod(unlocked-41, when-35)
det(locations-37, all-36)
nsubj(unlocked-41, locations-37)
case(s-39, in-38)
nmod:in(locations-37, s-39)
cop(unlocked-41, are-40)
advcl(consider-32, unlocked-41)

(ROOT
  (S (RB Then)
    (NP (DT the) (NN problem))
    (VP (VBZ is)
      (NP
        (NP (DT the) (JJ same))
        (PP (IN as)
          (NP (NNP Gripper))))
      (, ,)
      (SBAR (IN except)
        (S
          (PP (IN for)
            (NP (DT the) (NNS restrictions)))
          (NP (DT the) (NNP graph) (NNP G))
          (VP (VBZ imposes)
            (PP (IN on)
              (NP (DT the) (NNS movements)))))))
    (. .)))

advmod(same-6, Then-1)
det(problem-3, the-2)
nsubj(same-6, problem-3)
cop(same-6, is-4)
det(same-6, the-5)
root(ROOT-0, same-6)
case(Gripper-8, as-7)
nmod:as(same-6, Gripper-8)
mark(imposes-17, except-10)
case(restrictions-13, for-11)
det(restrictions-13, the-12)
nmod:for(imposes-17, restrictions-13)
det(G-16, the-14)
compound(G-16, graph-15)
nsubj(imposes-17, G-16)
advcl(same-6, imposes-17)
case(movements-20, on-18)
det(movements-20, the-19)
nmod:on(imposes-17, movements-20)

(ROOT
  (S
    (NP
      (NP (DT The) (NN fact))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBZ is)
            (ADJP (JJ solvable))))))
    (VP (VBZ means)
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (MD can)
            (VP (VB restrict)
              (PP (TO to)
                (NP
                  (NP (DT the) (JJ connected) (NN component))
                  (SBAR
                    (S
                      (NP (DT the) (NN robot))
                      (VP (VBZ starts)
                        (PRT (RP in))
                        (SBAR (IN in) (NN order)
                          (S
                            (VP (TO to)
                              (VP (VB reach)
                                (NP (DT a) (NN goal) (NN state))))))))))))))))
    (. .)))

det(fact-2, The-1)
nsubj(solvable-5, fact-2)
nsubj(means-6, fact-2)
ref(fact-2, that-3)
cop(solvable-5, is-4)
acl:relcl(fact-2, solvable-5)
root(ROOT-0, means-6)
mark(restrict-10, that-7)
nsubj(restrict-10, we-8)
aux(restrict-10, can-9)
ccomp(means-6, restrict-10)
case(component-14, to-11)
det(component-14, the-12)
amod(component-14, connected-13)
nmod:to(restrict-10, component-14)
det(robot-16, the-15)
nsubj(starts-17, robot-16)
acl:relcl(component-14, starts-17)
compound:prt(starts-17, in-18)
mark(reach-22, in-19)
mwe(in-19, order-20)
mark(reach-22, to-21)
advcl(starts-17, reach-22)
det(state-25, a-23)
compound(state-25, goal-24)
dobj(reach-22, state-25)

(ROOT
  (S
    (ADVP (RB Hence))
    (NP (DT any) (NN action))
    (VP (VBP movel) (, ,)
      (S
        (NP (NN l))
        (VP (VBG appearing)
          (PP (IN in)
            (NP (DT a) (NN plan)))
          (NP
            (NP (NNP P))
            (PP (IN of)
              (SBAR
                (WHADVP (WRB when))
                (S
                  (S
                    (VP (VBN seen)
                      (PP (IN as)
                        (NP
                          (NP (DT an) (NN instance))
                          (PP (IN of)
                            (NP (NNP Gripper)))))))
                  (VP (MD can)
                    (VP (VB be)
                      (VP
                        (ADVP (RB safely))
                        (VBN translated)
                        (PP (TO to)
                          (NP
                            (NP (DT a) (NN sequence))
                            (PP (IN of)
                              (NP (NN move) (NNS actions)))))
                        (PP (IN in)
                          (SBAR
                            (WHADVP (WRB when))
                            (S
                              (VP (VBN seen)
                                (PP (IN as)
                                  (NP
                                    (NP (DT an) (NN instance))
                                    (PP (IN of)
                                      (NP (NNP Unlock)))))
                                (PRN (-LRB- -LRB-)
                                  (NP
                                    (NP (NNP namely))
                                    (, ,)
                                    (NP (DT a) (NN path)))
                                  (PP (IN in)
                                    (NP
                                      (NP (NNP G))
                                      (PP (IN from)
                                        (NP
                                          (QP (CD l) (TO to) (CD l))))))
                                  (-RRB- -RRB-))))))))))))))))
    (. .)))

advmod(movel-4, Hence-1)
det(action-3, any-2)
nsubj(movel-4, action-3)
root(ROOT-0, movel-4)
nsubj(appearing-7, l-6)
dep(movel-4, appearing-7)
case(plan-10, in-8)
det(plan-10, a-9)
nmod:in(appearing-7, plan-10)
dobj(appearing-7, P-11)
mark(translated-23, of-12)
advmod(translated-23, when-13)
csubjpass(translated-23, seen-14)
case(instance-17, as-15)
det(instance-17, an-16)
nmod:as(seen-14, instance-17)
case(Gripper-19, of-18)
nmod:of(instance-17, Gripper-19)
aux(translated-23, can-20)
auxpass(translated-23, be-21)
advmod(translated-23, safely-22)
acl(P-11, translated-23)
case(sequence-26, to-24)
det(sequence-26, a-25)
nmod:to(translated-23, sequence-26)
case(actions-29, of-27)
compound(actions-29, move-28)
nmod:of(sequence-26, actions-29)
mark(seen-32, in-30)
advmod(seen-32, when-31)
advcl(translated-23, seen-32)
case(instance-35, as-33)
det(instance-35, an-34)
nmod:as(seen-32, instance-35)
case(Unlock-37, of-36)
nmod:of(instance-35, Unlock-37)
dep(seen-32, namely-39)
det(path-42, a-41)
appos(namely-39, path-42)
case(G-44, in-43)
nmod:in(namely-39, G-44)
case(l-48, from-45)
compound(l-48, l-46)
dep(l-48, to-47)
nmod:from(G-44, l-48)

(ROOT
  (S
    (PP (IN By)
      (NP
        (NP (NNS means))
        (PP (IN of)
          (NP (DT this) (NN translation)))))
    (NP (PRP it))
    (VP (VBZ follows)
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (MD can)
            (VP (VB 4-improve)
              (NP (DT any) (JJ variable) (NN u))
              (PP (IN in)
                (NP (PRP s)))
              (, ,)
              (ADJP (JJ due)
                (PP (TO to)
                  (NP (DT the) (NNP Theorem) (CD 4)))))))))
    (. .)))

case(translation-5, By-1)
mwe(By-1, means-2)
mwe(By-1, of-3)
det(translation-5, this-4)
nmod:by_means_of(follows-7, translation-5)
nsubj(follows-7, it-6)
root(ROOT-0, follows-7)
mark(4-improve-11, that-8)
nsubj(4-improve-11, we-9)
aux(4-improve-11, can-10)
ccomp(follows-7, 4-improve-11)
det(u-14, any-12)
amod(u-14, variable-13)
dobj(4-improve-11, u-14)
case(s-16, in-15)
nmod:in(4-improve-11, s-16)
xcomp(4-improve-11, due-18)
case(Theorem-21, to-19)
det(Theorem-21, the-20)
nmod:to(due-18, Theorem-21)
nummod(Theorem-21, 4-22)

(ROOT
  (S
    (S
      (VP (VBG Hamming)
        (NP (NN width))))
    (NP (DT This) (NN section))
    (VP (VBZ presents)
      (NP
        (NP (DT the) (NN notion))
        (PP (IN of)
          (NP (NNP Hamming) (NNP width)))))
    (. .)))

dep(presents-5, Hamming-1)
dobj(Hamming-1, width-2)
det(section-4, This-3)
nsubj(presents-5, section-4)
root(ROOT-0, presents-5)
det(notion-7, the-6)
dobj(presents-5, notion-7)
case(width-10, of-8)
compound(width-10, Hamming-9)
nmod:of(notion-7, width-10)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (S
          (PP (IN in)
            (NP (DT the) (JJ previous) (NN section)))
          (, ,)
          (NP (PRP we))
          (VP (VBP consider)
            (S
              (NP (DT a) (NN domain))
              (VP (TO to)
                (VP (VB motivate)
                  (NP
                    (NP (DT this) (NN extension))
                    (PP (IN of)
                      (NP (NN width)))))))))
        (: :)
        (S
          (NP (PRP we))
          (VP (VBP show)
            (SBAR (IN that)
              (S
                (NP
                  (NP (DT an) (NN extension))
                  (PP (IN of)
                    (NP (DT the) (NNP Logistics) (NN domain))))
                (VP
                  (VP (VBZ does) (RB not)
                    (VP (VB have)
                      (VP (VBN bounded)
                        (NP (NN width)))))
                  (, ,)
                  (CC but)
                  (VP (VBZ does)))))))))
    (VP (VBP have)
      (VP (VBN bounded)
        (S
          (VP (VBG Hamming)
            (NP (NN width))))))
    (. .)))

mark(consider-8, As-1)
case(section-5, in-2)
det(section-5, the-3)
amod(section-5, previous-4)
nmod:in(consider-8, section-5)
nsubj(consider-8, we-7)
csubj(bounded-36, consider-8)
det(domain-10, a-9)
dobj(consider-8, domain-10)
nsubj:xsubj(motivate-12, domain-10)
mark(motivate-12, to-11)
xcomp(consider-8, motivate-12)
det(extension-14, this-13)
dobj(motivate-12, extension-14)
case(width-16, of-15)
nmod:of(extension-14, width-16)
nsubj(show-19, we-18)
parataxis(consider-8, show-19)
mark(bounded-30, that-20)
det(extension-22, an-21)
nsubj(bounded-30, extension-22)
nsubj(does-34, extension-22)
case(domain-26, of-23)
det(domain-26, the-24)
compound(domain-26, Logistics-25)
nmod:of(extension-22, domain-26)
aux(bounded-30, does-27)
neg(bounded-30, not-28)
aux(bounded-30, have-29)
ccomp(show-19, bounded-30)
dobj(bounded-30, width-31)
cc(bounded-30, but-33)
ccomp(show-19, does-34)
conj:but(bounded-30, does-34)
aux(bounded-36, have-35)
root(ROOT-0, bounded-36)
xcomp(bounded-36, Hamming-37)
dobj(Hamming-37, width-38)

(ROOT
  (S
    (NP
      (NP (NNP Domain) (CD 11))
      (PRN (-LRB- -LRB-)
        (NP (NNP Logistics) (NN domain))
        (-RRB- -RRB-)))
    (PP (IN In)
      (NP
        (NP (PRP$ our) (NN formulation))
        (PP (IN of)
          (NP (DT the) (NNP Logistics) (NN domain)))))
    (, ,)
    (NP (PRP we))
    (VP (VBP have)
      (NP
        (NP (NNS trucks)
          (CC and)
          (NNS airplanes))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (MD can)
              (VP (VB be)
                (VP (VBN used)
                  (S
                    (VP (TO to)
                      (VP (VB move)
                        (NP
                          (NP (NNS packages))
                          (PP (IN between)
                            (NP (NNS locations))))))))))))))
    (. .)))

nsubj(have-16, Domain-1)
nummod(Domain-1, 11-2)
compound(domain-5, Logistics-4)
appos(Domain-1, domain-5)
case(formulation-9, In-7)
nmod:poss(formulation-9, our-8)
nmod:in(have-16, formulation-9)
case(domain-13, of-10)
det(domain-13, the-11)
compound(domain-13, Logistics-12)
nmod:of(formulation-9, domain-13)
nsubj(have-16, we-15)
root(ROOT-0, have-16)
dobj(have-16, trucks-17)
nsubjpass(used-23, trucks-17)
nsubj:xsubj(move-25, trucks-17)
cc(trucks-17, and-18)
dobj(have-16, airplanes-19)
conj:and(trucks-17, airplanes-19)
nsubjpass(used-23, airplanes-19)
nsubj:xsubj(move-25, airplanes-19)
ref(trucks-17, that-20)
aux(used-23, can-21)
auxpass(used-23, be-22)
acl:relcl(trucks-17, used-23)
mark(move-25, to-24)
xcomp(used-23, move-25)
dobj(move-25, packages-26)
case(locations-28, between-27)
nmod:between(packages-26, locations-28)

(ROOT
  (S
    (S
      (NP (NNS Trucks)
        (CC and)
        (NNS airplanes))
      (VP (MD can)
        (ADVP (RB not)
          (PP (IN in)
            (ADJP (JJ general))))
        (VP (VB move)
          (ADVP (RB arbitrarily))
          (PP (IN between)
            (NP
              (NP (NNS pairs))
              (PP (IN of)
                (NP (NNS locations))))))))
    (, ,)
    (CC but)
    (S
      (ADVP (RB rather))
      (, ,)
      (NP (NNS graphs))
      (VP (VB specify)
        (NP (VBN permitted) (NNS movements))))
    (. .)))

nsubj(move-8, Trucks-1)
cc(Trucks-1, and-2)
conj:and(Trucks-1, airplanes-3)
nsubj(move-8, airplanes-3)
aux(move-8, can-4)
neg(move-8, not-5)
case(general-7, in-6)
advcl(not-5, general-7)
root(ROOT-0, move-8)
advmod(move-8, arbitrarily-9)
case(pairs-11, between-10)
nmod:between(move-8, pairs-11)
case(locations-13, of-12)
nmod:of(pairs-11, locations-13)
cc(move-8, but-15)
advmod(specify-19, rather-16)
nsubj(specify-19, graphs-18)
conj:negcc(move-8, specify-19)
amod(movements-21, permitted-20)
dobj(specify-19, movements-21)

(ROOT
  (S
    (S
      (VP (NN Note)
        (NP
          (NP (DT that))
          (, ,)
          (PP (IN in)
            (NP (NN contrast))))
        (PP (TO to)
          (NP
            (NP (DT a) (JJ typical) (NN formulation))
            (PP (IN of)
              (NP (DT this) (NN domain)))))))
    (, ,)
    (NP (PRP we))
    (VP (VBP permit)
      (NP
        (ADJP (JJ arbitrary))
        (NNS graphs))
      (S
        (VP (TO to)
          (VP (VB specify)
            (NP (NNS movements))))))
    (. .)))

ccomp(permit-15, Note-1)
dobj(Note-1, that-2)
case(contrast-5, in-4)
nmod:in(that-2, contrast-5)
case(formulation-9, to-6)
det(formulation-9, a-7)
amod(formulation-9, typical-8)
nmod:to(Note-1, formulation-9)
case(domain-12, of-10)
det(domain-12, this-11)
nmod:of(formulation-9, domain-12)
nsubj(permit-15, we-14)
root(ROOT-0, permit-15)
amod(graphs-17, arbitrary-16)
dobj(permit-15, graphs-17)
mark(specify-19, to-18)
advcl(permit-15, specify-19)
dobj(specify-19, movements-20)

(ROOT
  (S
    (PP (IN In)
      (NP
        (NP (DT an) (NN instance))
        (PP (IN of)
          (NP (DT the) (NNP Logistics) (NN domain)))))
    (, ,)
    (NP (EX there))
    (VP (VBZ is)
      (NP
        (NP
          (NP (DT a) (NN set))
          (PP (IN of)
            (NP (NNP locations) (NNP L))))
        (, ,)
        (NP
          (NP (DT a) (NN set))
          (PP (IN of)
            (NP
              (NP
                (NP (NNS trucks))
                (NP (NNP T)))
              (, ,)
              (NP
                (NP (DT a) (NN set))
                (PP (IN of)
                  (NP (NNP airplanes) (NNP A))))
              (, ,)
              (CC and)
              (NP
                (NP (DT a) (NN set))
                (PP (IN of)
                  (NP (NNP packages) (NNP Q)))))))
        (, ,)
        (CC and)
        (NP
          (NP (CD two) (JJ undirected) (NNS graphs))
          (NP (NNP GT)
            (CC and)
            (NNP GA))
          (, ,)
          (ADVP (DT both))))
      (VP (VBG having)
        (NP
          (NP (NNP L))
          (PP (IN as)
            (NP (NN vertex) (NN set))))))
    (. .)))

case(instance-3, In-1)
det(instance-3, an-2)
nmod:in(having-45, instance-3)
case(domain-7, of-4)
det(domain-7, the-5)
compound(domain-7, Logistics-6)
nmod:of(instance-3, domain-7)
expl(having-45, there-9)
cop(having-45, is-10)
det(set-12, a-11)
nsubj(having-45, set-12)
case(L-15, of-13)
compound(L-15, locations-14)
nmod:of(set-12, L-15)
det(set-18, a-17)
conj:and(set-12, set-18)
nsubj(having-45, set-18)
case(trucks-20, of-19)
nmod:of(set-18, trucks-20)
appos(trucks-20, T-21)
det(set-24, a-23)
nmod:of(set-18, set-24)
conj:and(trucks-20, set-24)
case(A-27, of-25)
compound(A-27, airplanes-26)
nmod:of(set-24, A-27)
cc(trucks-20, and-29)
det(set-31, a-30)
nmod:of(set-18, set-31)
conj:and(trucks-20, set-31)
case(Q-34, of-32)
compound(Q-34, packages-33)
nmod:of(set-31, Q-34)
cc(set-12, and-36)
nummod(graphs-39, two-37)
amod(graphs-39, undirected-38)
conj:and(set-12, graphs-39)
nsubj(having-45, graphs-39)
dep(graphs-39, GT-40)
cc(GT-40, and-41)
dep(graphs-39, GA-42)
conj:and(GT-40, GA-42)
advmod(graphs-39, both-44)
root(ROOT-0, having-45)
dobj(having-45, L-46)
case(set-49, as-47)
compound(set-49, vertex-48)
nmod:as(L-46, set-49)

(ROOT
  (S
    (S
      (NP (DT The) (JJ variable) (NN set))
      (VP (VBZ is)
        (NP
          (NP
            (NP (DT the) (NN union))
            (NP (NNP T) (NNP A) (NNP Q))
            (, ,)
            (SBAR
              (WHADVP (WRB where))
              (S
                (NP
                  (NP (NNP D))
                  (PRN (-LRB- -LRB-)
                    (NP (NN t))
                    (-RRB- -RRB-)))
                (VP (VBZ =)
                  (NP
                    (NP (NNP L))
                    (PP (IN for)
                      (NP (DT all) (NNP t) (NNP T)))))))
            (, ,)
            (NP
              (NP (NNP D))
              (NP
                (NP
                  (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
                  (NP (NNP =) (NNP L))
                  (PP (IN for)
                    (NP (PDT all) (DT a) (NN A))))
                (, ,)
                (CC and)
                (NP (NNP D))))
            (PRN (-LRB- -LRB-)
              (VP (VBN p))
              (-RRB- -RRB-)))
          (NP
            (NP (NNP =) (NNP L) (NNP A) (NNP T))
            (PP (IN for)
              (NP (DT all) (NNP p) (NNP Q.)))
            (X (SYM *)))
          (NP
            (NP
              (NP (NNP t) (NNP T))
              (CC and)
              (PRN (-LRB- -LCB-)
                (NP
                  (NP (NN l))
                  (, ,)
                  (NP (NN l)))
                (-RRB- -RCB-))
              (NP
                (NP (NN E))
                (PRN (-LRB- -LRB-)
                  (NP (NNP GT))
                  (-RRB- -RRB-))))
            (ADJP (JJ movet))
            (, ,)
            (VP (VBN l)))
          (, ,)
          (VP (VBG l)
            (S
              (VP (SYM =)
                (NP (NN t))))
            (NP (JJ =) (NN l))))
        (: ;)
        (S
          (NP (NN t) (NNS =))
          (ADJP (JJ l))
          (SBAR
            (X (SYM *))
            (S
              (NP
                (NP
                  (NP (DT a) (NN A))
                  (CC and)
                  (PRN (-LRB- -LCB-)
                    (NP
                      (NP (NN l))
                      (, ,)
                      (NP (NN l)))
                    (-RRB- -RCB-))
                  (NP (NNP E)
                    (PRN (-LRB- -LRB-)
                      (NP (NNP GA))
                      (-RRB- -RRB-))
                    (NNP movea)))
                (, ,)
                (NP (NN l))
                (, ,)
                (NP
                  (NP
                    (NP (NNP l) (NNP =))
                    (NP (DT a) (JJ =) (NN l)))
                  (: ;)
                  (NP
                    (NP (DT a) (JJ =) (NN l))
                    (SBAR
                      (S
                        (VP
                          (X
                            (X (SYM *))
                            (NP
                              (NP (NNP v) (NNP T) (NNP A))
                              (, ,)
                              (NP (NNP l) (NNP L))
                              (, ,)
                              (NP (NNP p) (NNP Q))
                              (, ,)
                              (NP (NNP dropv))
                              (, ,)
                              (NP (NN l))
                              (, ,)
                              (NP
                                (NP
                                  (NP (NN p))
                                  (SBAR
                                    (S
                                      (VP (SYM =)
                                        (NP (NN v))))))
                                (NP (JJ =) (NN l)))
                              (, ,)
                              (NP (NN p) (NN =) (NN v))))
                          (: ;)
                          (VP (VBN p)
                            (S
                              (VP (SYM =)
                                (NP (CD l) (CD 77)))))))))))
              (VP
                (X
                  (X (SYM *))
                  (NP
                    (NP (NNP v) (NNP T) (NNP A))
                    (, ,)
                    (NP (NNP l) (NNP L))
                    (, ,)
                    (NP (NNP p) (NNP Q))
                    (, ,)
                    (NP (NNP pickv))
                    (, ,)
                    (NP (NN l))
                    (, ,)
                    (NP
                      (NP
                        (NP (NN p))
                        (SBAR
                          (S
                            (VP (SYM =)
                              (NP (NN v))))))
                      (NP (JJ =) (NN l)))
                    (, ,)
                    (NP (NNP p) (NNP =) (NNP l))))
                (: ;)
                (VP (VBN p)
                  (S
                    (VP (SYM =)
                      (NP (NNP v) (NNP Theorem) (CD 12))))))))
          (PP (IN For)
            (NP (DT each) (NN k) (CD 1))))))
    (, ,)
    (NP (EX there))
    (VP (VBZ exists)
      (NP
        (NP (DT an) (NN instance) (NN k))
        (PP (IN of)
          (NP (DT the) (NNS logistics) (NN domain)))
        (SBAR
          (S
            (NP (PDT such) (DT that) (NN k))
            (VP (VBZ does) (RB not)
              (VP (VB have)
                (NP (NN width) (NN k))))))))
    (. .)))

det(set-3, The-1)
amod(set-3, variable-2)
nsubj(union-6, set-3)
cop(union-6, is-4)
det(union-6, the-5)
ccomp(exists-164, union-6)
compound(Q-9, T-7)
compound(Q-9, A-8)
dep(union-6, Q-9)
advmod(=-16, where-11)
nsubj(=-16, D-12)
appos(D-12, t-14)
acl:relcl(union-6, =-16)
dobj(=-16, L-17)
case(T-21, for-18)
det(T-21, all-19)
compound(T-21, t-20)
nmod:for(L-17, T-21)
appos(union-6, D-23)
dep(L-28, a-25)
compound(L-28, =-27)
dep(D-23, L-28)
case(A-32, for-29)
det:predet(A-32, all-30)
det(A-32, a-31)
nmod:for(L-28, A-32)
cc(L-28, and-34)
dep(D-23, D-35)
conj:and(L-28, D-35)
dep(union-6, p-37)
compound(T-42, =-39)
compound(T-42, L-40)
compound(T-42, A-41)
dep(union-6, T-42)
case(Q.-46, for-43)
det(Q.-46, all-44)
compound(Q.-46, p-45)
nmod:for(T-42, Q.-46)
dep(T-42, *-47)
compound(T-49, t-48)
dep(union-6, T-49)
cc(T-49, and-50)
dep(T-49, l-52)
appos(l-52, l-54)
dep(union-6, E-56)
conj:and(T-49, E-56)
appos(E-56, GT-58)
amod(T-49, movet-60)
acl(T-49, l-62)
acl(union-6, l-64)
dep(t-66, =-65)
ccomp(l-64, t-66)
amod(l-68, =-67)
dobj(l-64, l-68)
compound(=-71, t-70)
nsubj(p-153, =-71)
dep(p-153, l-72)
dep(p-153, *-73)
det(A-75, a-74)
nsubj(p-153, A-75)
cc(A-75, and-76)
dep(A-75, l-78)
appos(l-78, l-80)
compound(movea-86, E-82)
appos(movea-86, GA-84)
conj:and(A-75, movea-86)
nsubj(p-153, movea-86)
appos(A-75, l-88)
compound(=-91, l-90)
appos(A-75, =-91)
det(l-94, a-92)
amod(l-94, =-93)
dep(=-91, l-94)
det(l-98, a-96)
amod(l-98, =-97)
dep(=-91, l-98)
dep(A-102, *-99)
compound(A-102, v-100)
compound(A-102, T-101)
dep(p-124, A-102)
compound(L-105, l-104)
appos(A-102, L-105)
compound(Q-108, p-107)
appos(A-102, Q-108)
appos(A-102, dropv-110)
appos(A-102, l-112)
appos(A-102, p-114)
dep(v-116, =-115)
acl:relcl(p-114, v-116)
amod(l-118, =-117)
dep(p-114, l-118)
compound(v-122, p-120)
compound(v-122, =-121)
appos(A-102, v-122)
acl:relcl(l-98, p-124)
dep(77-127, =-125)
nummod(77-127, l-126)
ccomp(p-124, 77-127)
dep(A-131, *-128)
compound(A-131, v-129)
compound(A-131, T-130)
dep(p-153, A-131)
compound(L-134, l-133)
appos(A-131, L-134)
compound(Q-137, p-136)
appos(A-131, Q-137)
appos(A-131, pickv-139)
appos(A-131, l-141)
appos(A-131, p-143)
dep(v-145, =-144)
acl:relcl(p-143, v-145)
amod(l-147, =-146)
dep(p-143, l-147)
compound(l-151, p-149)
compound(l-151, =-150)
appos(A-131, l-151)
parataxis(union-6, p-153)
dep(Theorem-156, =-154)
compound(Theorem-156, v-155)
ccomp(p-153, Theorem-156)
nummod(Theorem-156, 12-157)
case(k-160, For-158)
det(k-160, each-159)
dep(p-153, k-160)
nummod(k-160, 1-161)
expl(exists-164, there-163)
root(ROOT-0, exists-164)
det(k-167, an-165)
compound(k-167, instance-166)
dobj(exists-164, k-167)
det(k-174, k-167)
case(domain-171, of-168)
det(domain-171, the-169)
compound(domain-171, logistics-170)
nmod:of(k-167, domain-171)
det:predet(k-174, such-172)
ref(k-167, that-173)
nsubj(have-177, k-174)
aux(have-177, does-175)
neg(have-177, not-176)
acl:relcl(k-167, have-177)
compound(k-179, width-178)
dobj(have-177, k-179)

(ROOT
  (NP (NN Proof) (. .)))

root(ROOT-0, Proof-1)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP show)
      (NP (PDT such) (DT an) (NN instance) (NN k)))
    (. .)))

nsubj(show-2, We-1)
root(ROOT-0, show-2)
det:predet(k-6, such-3)
det(k-6, an-4)
compound(k-6, instance-5)
dobj(show-2, k-6)

(ROOT
  (S
    (S
      (VP (VB Let)
        (SBAR
          (SBAR (IN L)
            (FRAG
              (VP (VBN =) (-LRB- -LCB-)
                (NP (CD 1))
                (, ,))))
          (: ...)
          (PRN (, ,)
            (S
              (VP
                (VP (VB k)
                  (ADVP (RB +))
                  (NP (CD 1))
                  (-RRB- -RCB-))
                (, ,)
                (CC and)
                (VP (VB let)
                  (S
                    (NP (NNP A)
                      (CC and)
                      (NNP T))
                    (VP (VB be)
                      (NP
                        (NP (PDT such) (DT that))
                        (PP (IN for)
                          (NP
                            (NP (DT any) (FW i))
                            (-LRB- -LCB-)
                            (NP (CD 1))
                            (, ,))))))))))))
      (: ...))
    (, ,)
    (NP (NN k))
    (-RRB- -RCB-)
    (NP (VBP we))
    (VP (VBP have)
      (NP
        (NP (DT a) (NN truck) (NN ti))
        (SBAR (IN if)
          (S
            (S
              (NP (FW i))
              (VP (VBZ is)
                (ADJP (JJ odd))))
            (, ,)
            (CC and)
            (S
              (NP (DT an) (NN airplane))
              (VP (VBZ ai)
                (SBAR (IN if)
                  (S
                    (NP (FW i))
                    (VP (VBZ is)
                      (ADVP (RB even)))))))))))
    (. .)))

ccomp(have-33, Let-1)
mark(=-3, L-2)
advcl(Let-1, =-3)
dobj(=-3, 1-5)
dep(=-3, k-9)
advmod(k-9, +-10)
dobj(k-9, 1-11)
cc(k-9, and-14)
dep(=-3, let-15)
conj:and(k-9, let-15)
nsubj(that-21, A-16)
cc(A-16, and-17)
conj:and(A-16, T-18)
nsubj(that-21, T-18)
cop(that-21, be-19)
det:predet(that-21, such-20)
ccomp(let-15, that-21)
case(i-24, for-22)
det(i-24, any-23)
nmod:for(that-21, i-24)
dep(i-24, 1-26)
nsubj(have-33, k-30)
nsubj(have-33, we-32)
root(ROOT-0, have-33)
det(ti-36, a-34)
compound(ti-36, truck-35)
dobj(have-33, ti-36)
mark(odd-40, if-37)
nsubj(odd-40, i-38)
cop(odd-40, is-39)
dep(ti-36, odd-40)
cc(odd-40, and-42)
det(airplane-44, an-43)
nsubj(ai-45, airplane-44)
dep(ti-36, ai-45)
conj:and(odd-40, ai-45)
mark(is-48, if-46)
nsubj(is-48, i-47)
advcl(ai-45, is-48)
advmod(is-48, even-49)

(ROOT
  (S
    (S
      (NP (NNP Let) (NNP GT))
      (VP (VB be)
        (NP
          (NP (DT the) (NN graph))
          (PP (IN on)
            (NP (NNP L))))
        (PP (IN with)
          (NP
            (NP
              (NP (NNS edges))
              (-LRB- -LCB-)
              (NP (FW i))
              (, ,)
              (ADJP (JJ i)
                (NP (CD +1)))
              (-RRB- -RCB-))
            (PP (IN for)
              (NP (FW i) (FW odd)))))))
    (, ,)
    (CC and)
    (S
      (NP (NNP GA))
      (VP (VB be)
        (NP
          (NP (DT the) (NN graph))
          (PP (IN with)
            (NP
              (NP (NNS edges))
              (PRN (-LRB- -LCB-)
                (NP (NNP i))
                (, ,)
                (NP ($ i) (CD +) (CD 1))
                (-RRB- -RCB-)))))
        (PP (IN for)
          (NP (FW i))
          (ADVP (RB even)))))
    (. .)))

compound(GT-2, Let-1)
nsubj(graph-5, GT-2)
cop(graph-5, be-3)
det(graph-5, the-4)
root(ROOT-0, graph-5)
case(L-7, on-6)
nmod:on(graph-5, L-7)
case(edges-9, with-8)
nmod:with(graph-5, edges-9)
dep(edges-9, i-11)
amod(edges-9, i-13)
dep(i-13, +1-14)
case(odd-18, for-16)
compound(odd-18, i-17)
nmod:for(edges-9, odd-18)
cc(graph-5, and-20)
nsubj(graph-24, GA-21)
cop(graph-24, be-22)
det(graph-24, the-23)
conj:and(graph-5, graph-24)
case(edges-26, with-25)
nmod:with(graph-24, edges-26)
appos(edges-26, i-28)
dep(1-32, i-30)
nummod(1-32, +-31)
dep(i-28, 1-32)
case(i-35, for-34)
nmod:for(graph-24, i-35)
advmod(i-35, even-36)

(ROOT
  (S
    (NP (NNP Let) (NNP Q))
    (VP (VBP contain)
      (NP
        (NP (DT a) (JJ single) (NN packet))
        (ADJP (RB p) (JJ such))
        (SBAR (IN that)
          (S
            (NP
              (NP
                (NP (JJ init) (-LRB- -LRB-) (NN p) (-RRB- -RRB-))
                (SBAR
                  (S
                    (VP (SYM =)
                      (NP (CD 1))))))
              (CC and)
              (NP
                (NP (NN goal))
                (PRN (-LRB- -LRB-)
                  (NP (NN p))
                  (-RRB- -RRB-))))
            (VP (SYM =)
              (NP (NN k) (NN +) (CD 1)))))))
    (. .)))

compound(Q-2, Let-1)
nsubj(contain-3, Q-2)
root(ROOT-0, contain-3)
det(packet-6, a-4)
amod(packet-6, single-5)
dobj(contain-3, packet-6)
advmod(such-8, p-7)
amod(packet-6, such-8)
mark(+-23, that-9)
amod(p-12, init-10)
nsubj(+-23, p-12)
dep(1-15, =-14)
acl:relcl(p-12, 1-15)
cc(p-12, and-16)
conj:and(p-12, goal-17)
nsubj(+-23, goal-17)
appos(goal-17, p-19)
dep(+-23, =-21)
compound(+-23, k-22)
dep(packet-6, +-23)
nummod(+-23, 1-24)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (DT this))
        (VP (VB be)
          (NP (DT the) (JJ only) (NN goal)))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(goal-6, this-2)
cop(goal-6, be-3)
det(goal-6, the-4)
amod(goal-6, only-5)
ccomp(Let-1, goal-6)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ follows)
      (ADVP (RB easily))
      (SBAR (IN that)
        (S
          (NP (NN init))
          (VP (VBZ is) (RB not)
            (ADJP
              (ADJP (JJ k))
              (: -)
              (ADJP (JJ improvable)))
            (, ,)
            (SBAR (IN because)
              (S
                (NP
                  (NP (DT the) (RB only) (JJ variable) (NN p))
                  (ADJP
                    (ADJP (JJ wrong))
                    (PRN (-LRB- -LRB-)
                      (ADJP (JJ init))
                      (-RRB- -RRB-))))
                (VP (MD can) (RB not)
                  (VP (VB be)
                    (VP (VBN brought)
                      (PP (TO to)
                        (NP
                          (NP (PRP$ its) (NN destination) (NN goal))
                          (PRN (-LRB- -LRB-)
                            (NP (NN p))
                            (-RRB- -RRB-))))
                      (PP (IN without)
                        (S
                          (VP (VBG using)
                            (NP (DT the) (NN k) (NNS trucks)
                              (CC and)
                              (NNS airplanes))))))))))))))
    (. .)))

nsubj(follows-2, It-1)
root(ROOT-0, follows-2)
advmod(follows-2, easily-3)
mark(k-8, that-4)
nsubj(k-8, init-5)
cop(k-8, is-6)
neg(k-8, not-7)
ccomp(follows-2, k-8)
dep(k-8, improvable-10)
mark(brought-24, because-12)
det(p-16, the-13)
advmod(p-16, only-14)
amod(p-16, variable-15)
nsubjpass(brought-24, p-16)
amod(p-16, wrong-17)
dep(wrong-17, init-19)
aux(brought-24, can-21)
neg(brought-24, not-22)
auxpass(brought-24, be-23)
advcl(k-8, brought-24)
case(goal-28, to-25)
nmod:poss(goal-28, its-26)
compound(goal-28, destination-27)
nmod:to(brought-24, goal-28)
appos(goal-28, p-30)
mark(using-33, without-32)
advcl(brought-24, using-33)
det(trucks-36, the-34)
compound(trucks-36, k-35)
dobj(using-33, trucks-36)
cc(trucks-36, and-37)
dobj(using-33, airplanes-38)
conj:and(trucks-36, airplanes-38)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP say)
        (SBAR
          (SBAR (IN that)
            (S
              (NP (DT a) (JJ variable) (NN u))
              (VP (VBZ is)
                (NP
                  (NP (NN k))
                  (: -)
                  (S
                    (NP
                      (NP (NNP Hamming) (NNP improvable))
                      (PP (IN in)
                        (NP (NN state))))
                    (VP (VBZ s)
                      (SBAR
                        (SBAR (IN if)
                          (S
                            (NP (EX there))
                            (VP (VBZ exists)
                              (S
                                (NP (DT a) (NN plan) (NN P))
                                (VP (SYM =)
                                  (NP (NNS a1)))))
                            (, ,)))
                        (: ...)
                        (PRN (, ,)
                          (S
                            (NP
                              (NP (DT an) (VBG improving) (NN u))
                              (PP (IN in)))
                            (VP (VBZ s)
                              (ADJP (JJ such)
                                (SBAR (IN that)
                                  (SBAR (IN for)
                                    (S
                                      (NP (DT all) (FW i))
                                      (VP (SYM =)
                                        (NP (CD 1)))))))))
                          (, ,)))))))))
          (: ...)
          (PRN (, ,)
            (S
              (NP
                (NP (NN n))
                (, ,)
                (NP (NNP dh) (-LRB- -LRB-) (NNP s))
                (, ,))
              (VP (VBZ s)
                (ADJP (RB -LSB-) (JJ a1))))
            (, ,)))))
    (: ...)
    (S
      (NP
        (PRN (, ,)
          (ADVP (RB ai))
          (NP (NNP -RSB-))
          (-RRB- -RRB-)))
      (VP (VBZ k)))
    (. .)))

nsubj(say-2, We-1)
root(ROOT-0, say-2)
mark(k-8, that-3)
det(u-6, a-4)
amod(u-6, variable-5)
nsubj(k-8, u-6)
cop(k-8, is-7)
dep(say-2, k-8)
compound(improvable-11, Hamming-10)
nsubj(s-14, improvable-11)
case(state-13, in-12)
nmod:in(improvable-11, state-13)
appos(k-8, s-14)
mark(exists-17, if-15)
expl(exists-17, there-16)
advcl(s-14, exists-17)
det(P-20, a-18)
compound(P-20, plan-19)
nsubj(a1-22, P-20)
dep(a1-22, =-21)
ccomp(exists-17, a1-22)
det(u-28, an-26)
amod(u-28, improving-27)
nsubj(such-31, u-28)
acl(u-28, in-29)
cop(such-31, s-30)
dep(exists-17, such-31)
mark(1-37, that-32)
mark(1-37, for-33)
det(i-35, all-34)
nsubj(1-37, i-35)
dep(1-37, =-36)
dep(such-31, 1-37)
nsubj(a1-49, n-41)
compound(s-45, dh-43)
appos(n-41, s-45)
cop(a1-49, s-47)
advmod(a1-49, -LSB--48)
dep(k-8, a1-49)
dep(-RSB--54, ai-53)
nsubj(k-56, -RSB--54)
parataxis(say-2, k-56)

(ROOT
  (S
    (ADVP (RB Here))
    (, ,)
    (NP
      (NP (NN dh))
      (PRN (-LRB- -LRB-)
        (NP (NNP *))
        (, ,)
        (NP (NNP *))
        (-RRB- -RRB-)))
    (VP (VBZ denotes)
      (NP (DT the) (VBG Hamming) (JJ metric))
      (PRN (, ,)
        (INTJ (DT that) (VBZ is))
        (, ,))
      (S
        (NP
          (NP (DT the) (NN number))
          (PP (IN of)
            (NP
              (NP (NNS variables))
              (SBAR
                (WHPP (IN at)
                  (WHNP (WDT which)))
                (S
                  (NP (DT the) (CD two) (NNS arguments))
                  (VP (VBP differ)))))))))
    (. .)))

advmod(denotes-9, Here-1)
nsubj(denotes-9, dh-3)
appos(dh-3, *-5)
dep(*-5, *-7)
root(ROOT-0, denotes-9)
det(metric-12, the-10)
amod(metric-12, Hamming-11)
dobj(denotes-9, metric-12)
discourse(denotes-9, that-14)
mwe(that-14, is-15)
det(number-18, the-17)
xcomp(denotes-9, number-18)
case(variables-20, of-19)
nmod:of(number-18, variables-20)
nmod:at(differ-26, variables-20)
case(which-22, at-21)
ref(variables-20, which-22)
det(arguments-25, the-23)
nummod(arguments-25, two-24)
nsubj(differ-26, arguments-25)
acl:relcl(variables-20, differ-26)

(ROOT
  (S
    (NP
      (NP (NNP Definition) (CD 13))
      (SBAR
        (S
          (NP (DT A) (NN planning) (NN instance))
          (VP (VBZ has)
            (NP
              (NP (NNP Hamming) (NNP width) (NNP k))
              (SBAR
                (SBAR (IN if)
                  (S
                    (NP (DT no) (NN plan))
                    (VP (VBZ exists))))
                (, ,)
                (CC or)
                (SBAR (IN for)
                  (S
                    (NP (DT every) (JJ reachable) (NN state))
                    (VP (VBZ s)
                      (SBAR (IN that)
                        (S
                          (VP (VBZ is)
                            (ADJP
                              (PRN (RB not)
                                (NP
                                  (NP (DT a) (NN goal) (NN state))
                                  (, ,)
                                  (NP (DT every) (JJ variable) (NN u))))
                              (JJ wrong)))))))))))))
      (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
    (VP (VBZ is)
      (NP (NN k))
      (: -)
      (S
        (NP
          (NP (NNP Hamming) (NNP improvable))
          (PP (IN in)
            (NP (NN s.))))
        (VP (TO To)
          (VP (VB obtain)
            (NP
              (NP (DT the) (JJ corresponding) (NNP Hamming) (NN width) (NN k) (NN algorithm))
              (SBAR
                (S
                  (NP (PRP we))
                  (ADVP (RB just))
                  (VP (VBP need)
                    (S
                      (VP (TO to)
                        (VP (VB make)
                          (NP (DT a) (JJ minor) (NN change))
                          (PP (TO to)
                            (NP (DT the) (NN width) (NN k) (NN algorithm))))))))))))))
    (. .)))

nsubj(k-36, Definition-1)
nummod(Definition-1, 13-2)
det(instance-5, A-3)
compound(instance-5, planning-4)
nsubj(has-6, instance-5)
acl:relcl(Definition-1, has-6)
compound(k-9, Hamming-7)
compound(k-9, width-8)
dobj(has-6, k-9)
mark(exists-13, if-10)
neg(plan-12, no-11)
nsubj(exists-13, plan-12)
dep(k-9, exists-13)
cc(exists-13, or-15)
mark(s-20, for-16)
det(state-19, every-17)
amod(state-19, reachable-18)
nsubj(s-20, state-19)
dep(k-9, s-20)
conj:or(exists-13, s-20)
mark(wrong-31, that-21)
cop(wrong-31, is-22)
dep(state-26, not-23)
det(state-26, a-24)
compound(state-26, goal-25)
dep(wrong-31, state-26)
det(u-30, every-28)
amod(u-30, variable-29)
appos(state-26, u-30)
ccomp(s-20, wrong-31)
dep(Definition-1, s-33)
cop(k-36, is-35)
root(ROOT-0, k-36)
compound(improvable-39, Hamming-38)
dobj(k-36, improvable-39)
case(s.-41, in-40)
nmod:in(improvable-39, s.-41)
mark(obtain-43, To-42)
advcl(k-36, obtain-43)
det(algorithm-49, the-44)
amod(algorithm-49, corresponding-45)
compound(algorithm-49, Hamming-46)
compound(algorithm-49, width-47)
compound(algorithm-49, k-48)
dobj(obtain-43, algorithm-49)
nsubj(need-52, we-50)
nsubj:xsubj(make-54, we-50)
advmod(need-52, just-51)
acl:relcl(algorithm-49, need-52)
mark(make-54, to-53)
xcomp(need-52, make-54)
det(change-57, a-55)
amod(change-57, minor-56)
dobj(make-54, change-57)
case(algorithm-62, to-58)
det(algorithm-62, the-59)
compound(algorithm-62, width-60)
compound(algorithm-62, k-61)
nmod:to(make-54, algorithm-62)

(ROOT
  (S
    (NP (DT The) (JJ inner) (NN loop))
    (ADVP (RB now))
    (VP (VBZ looks)
      (SBAR (IN for)
        (S
          (NP (NNS plans))
          (VP (VBP P)
            (SBAR (IN that)
              (S
                (S
                  (VP (VB improve)
                    (NP (DT the) (JJ variable) (NN vi))
                    (PP (IN without)
                      (S
                        (VP (VBG differing)
                          (PP (IN from)
                            (NP (NN state))))))))
                (VP (VBZ s)
                  (NP
                    (NP
                      (QP (JJR more) (IN than) (CD k))
                      (NNS variables))
                    (PP (IN at)
                      (NP (DT any) (NN time))))))))))
      (, ,)
      (ADVP (RB irrespective)
        (PP (IN of)
          (SBAR
            (WHADJP (WRB how) (JJ many))
            (S
              (NP (NNP variables) (NNP P))
              (VP (VBZ uses)
                (PP (IN in)
                  (NP (NN total)))))))))
    (. .)))

det(loop-3, The-1)
amod(loop-3, inner-2)
nsubj(looks-5, loop-3)
advmod(looks-5, now-4)
root(ROOT-0, looks-5)
mark(P-8, for-6)
nsubj(P-8, plans-7)
advcl(looks-5, P-8)
mark(variables-22, that-9)
csubj(variables-22, improve-10)
det(vi-13, the-11)
amod(vi-13, variable-12)
dobj(improve-10, vi-13)
mark(differing-15, without-14)
advcl(improve-10, differing-15)
case(state-17, from-16)
nmod:from(differing-15, state-17)
cop(variables-22, s-18)
advmod(k-21, more-19)
mwe(more-19, than-20)
nummod(variables-22, k-21)
ccomp(P-8, variables-22)
case(time-25, at-23)
det(time-25, any-24)
nmod:at(variables-22, time-25)
advmod(looks-5, irrespective-27)
mark(uses-33, of-28)
advmod(many-30, how-29)
dep(uses-33, many-30)
compound(P-32, variables-31)
nsubj(uses-33, P-32)
advcl(irrespective-27, uses-33)
case(total-35, in-34)
nmod:in(uses-33, total-35)

(ROOT
  (S
    (NP
      (NP (VB Note))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (TO to)
            (VP (VB improve)
              (NP
                (NP (CD one) (NN variable))
                (PP (IN in)
                  (NP (DT a) (NN state)))))))))
    (VP (VBZ s) (, ,)
      (SBAR
        (S
          (NP (PRP we))
          (ADVP (RB only))
          (VP (VBP need)
            (S
              (VP (TO to)
                (VP (VB search)
                  (S
                    (NP
                      (NP (DT a) (JJ single) (NN graph))
                      (SBAR (WP$ whose)
                        (S
                          (NP (NNS vertices))
                          (VP (VBP are)
                            (NP
                              (NP (DT all) (NNS states))
                              (PP (IN within)
                                (S
                                  (VP (VBG Hamming)
                                    (NP (NN distance) (NN k))
                                    (PP (IN from)
                                      (NP (NN s.) (NNP Theorem) (CD 14)))))))))))
                    (VP (VB Let)
                      (S
                        (NP (NNP C))
                        (VP (VB be)
                          (NP
                            (NP (DT a) (NN set))
                            (PP (IN of)
                              (NP (NN planning) (NNS instances)))))))))))
            (S
              (VP (VBG having)
                (S
                  (VP (VBG Hamming)
                    (NP (NN width) (NN k))))))))))
    (. .)))

nsubj(improve-4, Note-1)
nsubj(s-10, Note-1)
ref(Note-1, that-2)
mark(improve-4, to-3)
acl:relcl(Note-1, improve-4)
nummod(variable-6, one-5)
dobj(improve-4, variable-6)
case(state-9, in-7)
det(state-9, a-8)
nmod:in(variable-6, state-9)
root(ROOT-0, s-10)
nsubj(need-14, we-12)
nsubj:xsubj(search-16, we-12)
advmod(need-14, only-13)
ccomp(s-10, need-14)
mark(search-16, to-15)
xcomp(need-14, search-16)
det(graph-19, a-17)
amod(graph-19, single-18)
nsubj(Let-33, graph-19)
dep(states-24, whose-20)
nsubj(states-24, vertices-21)
cop(states-24, are-22)
det(states-24, all-23)
dep(graph-19, states-24)
mark(Hamming-26, within-25)
acl(states-24, Hamming-26)
compound(k-28, distance-27)
dobj(Hamming-26, k-28)
case(Theorem-31, from-29)
compound(Theorem-31, s.-30)
nmod:from(Hamming-26, Theorem-31)
nummod(Theorem-31, 14-32)
ccomp(search-16, Let-33)
nsubj(set-37, C-34)
cop(set-37, be-35)
det(set-37, a-36)
ccomp(Let-33, set-37)
case(instances-40, of-38)
compound(instances-40, planning-39)
nmod:of(set-37, instances-40)
xcomp(need-14, having-41)
advcl(having-41, Hamming-42)
compound(k-44, width-43)
dobj(Hamming-42, k-44)

(ROOT
  (S
    (NP
      (NP (DT The) (NN plan) (NN generation) (NN problem))
      (PP (IN for)
        (NP (NNP C))))
    (VP (VBZ is)
      (ADJP (JJ solvable)
        (PP (IN in)
          (NP
            (NP (JJ polynomial) (NN time))
            (PP (IN via)
              (NP (DT the) (NNP Hamming) (NN width) (NN k) (NN algorithm))))))
      (, ,)
      (PP (IN in)
        (NP
          (NP (NN time) (NN O))
          (PRN (-LRB- -LRB-)
            (VP (VBN nk)
              (NP
                (NP (CD +1))
                (ADJP (RB dk) (DT a))))
            (-RRB- -RRB-)))))
    (. .)))

det(problem-4, The-1)
compound(problem-4, plan-2)
compound(problem-4, generation-3)
nsubj(solvable-8, problem-4)
case(C-6, for-5)
nmod:for(problem-4, C-6)
cop(solvable-8, is-7)
root(ROOT-0, solvable-8)
case(time-11, in-9)
amod(time-11, polynomial-10)
nmod:in(solvable-8, time-11)
case(algorithm-17, via-12)
det(algorithm-17, the-13)
compound(algorithm-17, Hamming-14)
compound(algorithm-17, width-15)
compound(algorithm-17, k-16)
nmod:via(time-11, algorithm-17)
case(O-21, in-19)
compound(O-21, time-20)
nmod:in(solvable-8, O-21)
dep(O-21, nk-23)
dobj(nk-23, +1-24)
advmod(a-26, dk-25)
amod(+1-24, a-26)

(ROOT
  (S
    (NP
      (NP
        (QP (CD Theorem) (CD 15))
        (DT All) (NNS instances))
      (PP (IN of)
        (NP (DT the) (NNP Logistics) (NN domain))))
    (VP (VBP have)
      (S
        (VP (VBG Hamming)
          (NP (CD width) (CD 2)))))
    (. .)))

compound(15-2, Theorem-1)
nummod(instances-4, 15-2)
det(instances-4, All-3)
nsubj(have-9, instances-4)
case(domain-8, of-5)
det(domain-8, the-6)
compound(domain-8, Logistics-7)
nmod:of(instances-4, domain-8)
root(ROOT-0, have-9)
xcomp(have-9, Hamming-10)
nummod(2-12, width-11)
dobj(Hamming-10, 2-12)

(ROOT
  (NP
    (NP (NNP Proof))
    (PRN (-LRB- -LRB-)
      (NP (NNP Sketch))
      (-RRB- -RRB-))
    (. .)))

root(ROOT-0, Proof-1)
appos(Proof-1, Sketch-3)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (PRP s))
        (VP
          (VP (VB be)
            (NP
              (NP (JJ reachable) (NN state))
              (PP (IN in)
                (NP (DT a) (JJ solvable) (NN instance)))))
          (, ,)
          (CC and)
          (VP (VB let)
            (S
              (NP (NN u))
              (VP (VB be)
                (NP
                  (NP (DT a) (NN variable))
                  (PP (TO to)
                    (NP (NNP Hamming) (NNP improve))))
                (PP (IN in)
                  (NP (PRP s)))))))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(state-5, s-2)
nsubj(let-12, s-2)
cop(state-5, be-3)
amod(state-5, reachable-4)
ccomp(Let-1, state-5)
case(instance-9, in-6)
det(instance-9, a-7)
amod(instance-9, solvable-8)
nmod:in(state-5, instance-9)
cc(state-5, and-11)
ccomp(Let-1, let-12)
conj:and(state-5, let-12)
nsubj(variable-16, u-13)
cop(variable-16, be-14)
det(variable-16, a-15)
ccomp(let-12, variable-16)
case(improve-19, to-17)
compound(improve-19, Hamming-18)
nmod:to(variable-16, improve-19)
case(s-21, in-20)
nmod:in(variable-16, s-21)

(ROOT
  (S
    (S
      (SBAR
        (WHADVP (WRB When))
        (S
          (NP (NN u))
          (VP (VBZ is)
            (NP (DT a) (NN vehicle)))))
      (NP (PRP it))
      (VP (VBZ is)
        (ADJP (JJ enough)
          (S
            (VP (TO to)
              (VP (VB consider)
                (NP
                  (NP (DT a) (NN sequence))
                  (PP (IN of)
                    (NP (NN move) (NNS actions))))))))))
    (: ;)
    (S
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (NN u))
          (VP (VBZ is)
            (NP (DT a) (NN package)))))
      (, ,)
      (NP (PRP we))
      (VP (MD may)
        (VP (VB need)
          (S
            (VP (TO to)
              (VP (VB use)
                (NP (JJ several) (NNS vehicles))
                (S
                  (VP (TO to)
                    (VP (VB bring)
                      (NP (NN u))
                      (PP (TO to)
                        (NP (PRP$ its) (NN goal) (NN location))))))))))))
    (. .)))

advmod(vehicle-5, When-1)
nsubj(vehicle-5, u-2)
cop(vehicle-5, is-3)
det(vehicle-5, a-4)
advcl(enough-8, vehicle-5)
nsubj(enough-8, it-6)
nsubj:xsubj(consider-10, it-6)
cop(enough-8, is-7)
root(ROOT-0, enough-8)
mark(consider-10, to-9)
xcomp(enough-8, consider-10)
det(sequence-12, a-11)
dobj(consider-10, sequence-12)
case(actions-15, of-13)
compound(actions-15, move-14)
nmod:of(sequence-12, actions-15)
advmod(package-21, when-17)
nsubj(package-21, u-18)
cop(package-21, is-19)
det(package-21, a-20)
advcl(need-25, package-21)
nsubj(need-25, we-23)
nsubj:xsubj(use-27, we-23)
aux(need-25, may-24)
parataxis(enough-8, need-25)
mark(use-27, to-26)
xcomp(need-25, use-27)
amod(vehicles-29, several-28)
dobj(use-27, vehicles-29)
mark(bring-31, to-30)
advcl(use-27, bring-31)
dobj(bring-31, u-32)
case(location-36, to-33)
nmod:poss(location-36, its-34)
compound(location-36, goal-35)
nmod:to(bring-31, location-36)

(ROOT
  (S
    (NP (DT The) (NNP Hamming) (NN width))
    (VP (VBZ is)
      (NP (CD 2))
      (SBAR (IN because)
        (S
          (NP (DT this))
          (VP (MD can)
            (VP (VB be)
              (VP (VBN done)
                (PP (IN in)
                  (NP (PDT such) (DT a) (NN way)))
                (SBAR (IN that)
                  (S
                    (PRN (, ,)
                      (PP (IN at)
                        (NP (DT any) (NN time)))
                      (, ,))
                    (S
                      (ADVP (IN at) (RBS most))
                      (NP (CD one) (NN vehicle) (NN v))
                      (VP (VBZ needs)
                        (S
                          (VP (TO to)
                            (VP (VB stay)
                              (PRT (RP away))
                              (PP (IN from)
                                (NP
                                  (NP (PRP$ its) (JJ initial) (NN location) (NN s))
                                  (PRN (-LRB- -LRB-)
                                    (NP (NN v))
                                    (-RRB- -RRB-))))
                              (S
                                (VP (TO to)
                                  (VP (VB move)
                                    (NP (DT the) (NN package))))))))))
                    (: :)
                    (S
                      (SBAR
                        (WHADVP (WRB when))
                        (S
                          (NP (NN v))
                          (VP (VBZ has)
                            (VP (VBN done)
                              (NP (PRP$ its) (NN share))))))
                      (, ,)
                      (NP (PRP it))
                      (VP (VBZ returns)
                        (PP (TO to)
                          (NP
                            (NP (PRP s))
                            (PRN (-LRB- -LRB-)
                              (NP (NN v))
                              (-RRB- -RRB-))))))))))))))
    (. .)))

det(width-3, The-1)
compound(width-3, Hamming-2)
nsubj(2-5, width-3)
cop(2-5, is-4)
root(ROOT-0, 2-5)
mark(done-10, because-6)
nsubjpass(done-10, this-7)
aux(done-10, can-8)
auxpass(done-10, be-9)
advcl(2-5, done-10)
case(way-14, in-11)
det:predet(way-14, such-12)
det(way-14, a-13)
nmod:in(done-10, way-14)
mark(needs-26, that-15)
case(time-19, at-17)
det(time-19, any-18)
dep(needs-26, time-19)
case(most-22, at-21)
advmod(needs-26, most-22)
nummod(v-25, one-23)
compound(v-25, vehicle-24)
nsubj(needs-26, v-25)
nsubj:xsubj(stay-28, v-25)
ccomp(done-10, needs-26)
mark(stay-28, to-27)
xcomp(needs-26, stay-28)
compound:prt(stay-28, away-29)
case(s-34, from-30)
nmod:poss(s-34, its-31)
amod(s-34, initial-32)
compound(s-34, location-33)
nmod:from(stay-28, s-34)
appos(s-34, v-36)
mark(move-39, to-38)
xcomp(stay-28, move-39)
det(package-41, the-40)
dobj(move-39, package-41)
advmod(done-46, when-43)
nsubj(done-46, v-44)
aux(done-46, has-45)
advcl(returns-51, done-46)
nmod:poss(share-48, its-47)
dobj(done-46, share-48)
nsubj(returns-51, it-50)
parataxis(needs-26, returns-51)
case(s-53, to-52)
nmod:to(returns-51, s-53)
appos(s-53, v-55)

(ROOT
  (S
    (NP (DT The) (JJ corresponding) (JJ persistent) (JJ Hamming) (NN width) (NN k) (NN algorithm))
    (VP (VBZ is)
      (ADVP (RB just))
      (NP
        (NP (DT the) (NN combination))
        (PP (IN of)
          (NP
            (NP (DT the) (NNS improvements))
            (PP (IN of)
              (NP
                (NP (DT the) (JJ persistent) (NN width) (NN k))
                (CC and)
                (NP (DT the) (NNP Hamming) (NN width) (NN k) (NNS algorithms))))))))
    (. .)))

det(algorithm-7, The-1)
amod(algorithm-7, corresponding-2)
amod(algorithm-7, persistent-3)
amod(algorithm-7, Hamming-4)
compound(algorithm-7, width-5)
compound(algorithm-7, k-6)
nsubj(combination-11, algorithm-7)
cop(combination-11, is-8)
advmod(combination-11, just-9)
det(combination-11, the-10)
root(ROOT-0, combination-11)
case(improvements-14, of-12)
det(improvements-14, the-13)
nmod:of(combination-11, improvements-14)
case(k-19, of-15)
det(k-19, the-16)
amod(k-19, persistent-17)
compound(k-19, width-18)
nmod:of(improvements-14, k-19)
cc(k-19, and-20)
det(algorithms-25, the-21)
compound(algorithms-25, Hamming-22)
compound(algorithms-25, width-23)
compound(algorithms-25, k-24)
nmod:of(improvements-14, algorithms-25)
conj:and(k-19, algorithms-25)

(ROOT
  (S
    (NP (NNP Theorem) (CD 17))
    (VP (VBD Let)
      (S
        (NP (NNP C))
        (VP (VB be)
          (NP
            (NP (DT a) (NN set))
            (PP (IN of)
              (NP
                (NP (NN planning) (NNS instances))
                (VP (VBG having)
                  (NP (JJ persistent) (NN Hamming) (NN width) (NN k)))))))))
    (. .)))

nsubj(Let-3, Theorem-1)
nummod(Theorem-1, 17-2)
root(ROOT-0, Let-3)
nsubj(set-7, C-4)
cop(set-7, be-5)
det(set-7, a-6)
ccomp(Let-3, set-7)
case(instances-10, of-8)
compound(instances-10, planning-9)
nmod:of(set-7, instances-10)
acl(instances-10, having-11)
amod(k-15, persistent-12)
compound(k-15, Hamming-13)
compound(k-15, width-14)
dobj(having-11, k-15)

(ROOT
  (S
    (NP
      (NP (DT The) (NN plan) (NN generation) (NN problem))
      (PP (IN for)
        (NP (NNP C))))
    (VP (VBZ is)
      (ADJP (JJ solvable)
        (PP (IN in)
          (NP
            (NP (JJ polynomial) (NN time))
            (PP (IN via)
              (NP (DT the) (JJ persistent) (NNP Hamming) (NN width) (NN k) (NN algorithm))))))
      (, ,)
      (PP (IN in)
        (NP
          (NP (NN time) (NN O))
          (PRN (-LRB- -LRB-)
            (VP (VBN nk)
              (NP
                (NP (CD +1))
                (ADJP (RB dk) (DT a))))
            (-RRB- -RRB-)))))
    (. .)))

det(problem-4, The-1)
compound(problem-4, plan-2)
compound(problem-4, generation-3)
nsubj(solvable-8, problem-4)
case(C-6, for-5)
nmod:for(problem-4, C-6)
cop(solvable-8, is-7)
root(ROOT-0, solvable-8)
case(time-11, in-9)
amod(time-11, polynomial-10)
nmod:in(solvable-8, time-11)
case(algorithm-18, via-12)
det(algorithm-18, the-13)
amod(algorithm-18, persistent-14)
compound(algorithm-18, Hamming-15)
compound(algorithm-18, width-16)
compound(algorithm-18, k-17)
nmod:via(time-11, algorithm-18)
case(O-22, in-20)
compound(O-22, time-21)
nmod:in(solvable-8, O-22)
dep(O-22, nk-24)
dobj(nk-24, +1-25)
advmod(a-27, dk-26)
amod(+1-25, a-27)

(ROOT
  (S
    (NP (DT The) (JJ persistent) (NNP Hamming) (NNP width) (NN k) (NN algorithm))
    (VP (VBZ gives)
      (NP (DT a) (NN uniform))
      (NP
        (NP (NN explanation))
        (PP (IN of)
          (NP
            (NP (DT the) (NN tractability))
            (PP (IN of)
              (NP
                (NP (DT all))
                (PP (IN of)
                  (NP
                    (NP (DT the) (NNS domains))
                    (VP (VBN considered)
                      (ADVP (RB so) (RB far)))))))))))
    (. .)))

det(algorithm-6, The-1)
amod(algorithm-6, persistent-2)
compound(algorithm-6, Hamming-3)
compound(algorithm-6, width-4)
compound(algorithm-6, k-5)
nsubj(gives-7, algorithm-6)
root(ROOT-0, gives-7)
det(uniform-9, a-8)
iobj(gives-7, uniform-9)
dobj(gives-7, explanation-10)
case(tractability-13, of-11)
det(tractability-13, the-12)
nmod:of(explanation-10, tractability-13)
case(all-15, of-14)
nmod:of(tractability-13, all-15)
case(domains-18, of-16)
det(domains-18, the-17)
nmod:of(all-15, domains-18)
acl(domains-18, considered-19)
advmod(far-21, so-20)
advmod(considered-19, far-21)

(ROOT
  (S
    (NP (NNP Theorem) (CD 18))
    (VP (VBD Let)
      (S
        (NP (NNP C))
        (VP (VB be)
          (NP
            (NP (DT the) (NN set))
            (PP (IN of)
              (NP (NNS instances))))
          (PP (IN from)
            (NP (DT the) (NNP Gripper) (, ,) (NNP Unlock) (, ,)
              (CC and)
              (NNP Logistics) (NNS domains))))))
    (. .)))

nsubj(Let-3, Theorem-1)
nummod(Theorem-1, 18-2)
root(ROOT-0, Let-3)
nsubj(set-7, C-4)
cop(set-7, be-5)
det(set-7, the-6)
ccomp(Let-3, set-7)
case(instances-9, of-8)
nmod:of(set-7, instances-9)
case(Unlock-14, from-10)
det(Unlock-14, the-11)
compound(Unlock-14, Gripper-12)
nmod:from(set-7, Unlock-14)
cc(Unlock-14, and-16)
compound(domains-18, Logistics-17)
nmod:from(set-7, domains-18)
conj:and(Unlock-14, domains-18)

(ROOT
  (S
    (NP
      (NP (DT The) (NN plan) (NN generation) (NN problem))
      (PP (IN for)
        (NP (NNP C))))
    (VP (VBZ is)
      (ADJP (JJ solvable)
        (PP (IN in)
          (NP
            (NP (JJ polynomial) (NN time))
            (PP (IN via)
              (NP (DT the) (JJ persistent) (NNP Hamming) (NN width) (CD 5) (NN algorithm)))))))
    (. .)))

det(problem-4, The-1)
compound(problem-4, plan-2)
compound(problem-4, generation-3)
nsubj(solvable-8, problem-4)
case(C-6, for-5)
nmod:for(problem-4, C-6)
cop(solvable-8, is-7)
root(ROOT-0, solvable-8)
case(time-11, in-9)
amod(time-11, polynomial-10)
nmod:in(solvable-8, time-11)
case(algorithm-18, via-12)
det(algorithm-18, the-13)
amod(algorithm-18, persistent-14)
compound(algorithm-18, Hamming-15)
compound(algorithm-18, width-16)
nummod(algorithm-18, 5-17)
nmod:via(time-11, algorithm-18)

(ROOT
  (S
    (S
      (PP
        (NP (NNP Action) (NN monotonicity))
        (IN In)
        (NP (DT this) (NN section)))
      (, ,)
      (NP (PRP we))
      (VP (VB establish)
        (SBAR (IN that)
          (S
            (NP (DT the) (VBN introduced) (NN width))
            (VP (VBZ measures)
              (NP (NN exhibit) (NN action))
              (ADVP (RB monotonicity)))))))
    (: :)
    (S
      (S
        (VP (VBG adding)
          (NP
            (NP (NNS actions))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBP do) (RB not)
                  (VP (VB enlarge)
                    (NP
                      (NP (DT the) (NN set))
                      (PP (IN of)
                        (NP (JJ reachable) (NNS states)))))))))))
      (VP (VBZ does) (RB not)
        (VP (VB increase)
          (NP (NN width)))))
    (. .)))

compound(monotonicity-2, Action-1)
nmod:in(establish-8, monotonicity-2)
case(monotonicity-2, In-3)
det(section-5, this-4)
dep(monotonicity-2, section-5)
nsubj(establish-8, we-7)
root(ROOT-0, establish-8)
mark(measures-13, that-9)
det(width-12, the-10)
amod(width-12, introduced-11)
nsubj(measures-13, width-12)
ccomp(establish-8, measures-13)
compound(action-15, exhibit-14)
dobj(measures-13, action-15)
advmod(measures-13, monotonicity-16)
csubj(increase-31, adding-18)
dobj(adding-18, actions-19)
nsubj(enlarge-23, actions-19)
ref(actions-19, that-20)
aux(enlarge-23, do-21)
neg(enlarge-23, not-22)
acl:relcl(actions-19, enlarge-23)
det(set-25, the-24)
dobj(enlarge-23, set-25)
case(states-28, of-26)
amod(states-28, reachable-27)
nmod:of(set-25, states-28)
aux(increase-31, does-29)
neg(increase-31, not-30)
parataxis(establish-8, increase-31)
dobj(increase-31, width-32)

(ROOT
  (S (-LRB- -LRB-)
    (VP (VB Note)
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (VBP use)
            (NP (DT the) (NNS abbreviations))
            (PP
              (NP (NNP P) (, ,) (NNP H) (, ,)
                (CC and)
                (NNP PH))
              (IN for)
              (NP
                (NP (JJ persistent))
                (, ,)
                (NP (NNP Hamming))
                (, ,)
                (CC and)
                (NP (JJ persistent) (NN Hamming))))
            (, ,)
            (ADVP (RB respectively))))))
    (. .) (-RRB- -RRB-)))

root(ROOT-0, Note-2)
mark(use-5, that-3)
nsubj(use-5, we-4)
ccomp(Note-2, use-5)
det(abbreviations-7, the-6)
dobj(use-5, abbreviations-7)
nmod:for(use-5, P-8)
nmod:for(use-5, H-10)
conj:and(P-8, H-10)
cc(P-8, and-12)
nmod:for(use-5, PH-13)
conj:and(P-8, PH-13)
case(P-8, for-14)
dep(P-8, persistent-15)
dep(P-8, Hamming-17)
conj:and(persistent-15, Hamming-17)
cc(persistent-15, and-19)
amod(Hamming-21, persistent-20)
dep(P-8, Hamming-21)
conj:and(persistent-15, Hamming-21)
advmod(use-5, respectively-23)

(ROOT
  (S
    (NP (NNP Theorem) (CD 19))
    (VP (VBD Let) (RB =)
      (PRN (-LRB- -LRB-)
        (NP (NNP V))
        (, ,)
        (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
        (-RRB- -RRB-))
      (VP (VB be)
        (NP
          (NP (DT a) (VBG planning) (NN instance))
          (VP (VBG having)
            (NP
              (NP (NN width) (NN k))
              (PRN (-LRB- -LRB-)
                (ADVP (RB respectively))
                (, ,)
                (NP
                  (NP (NNP P) (NNP width))
                  (NP (NN k)))
                (, ,)
                (NP
                  (NP (NNP H) (NNP width) (NNP k))
                  (, ,)
                  (NP (NNP PH) (NNP width) (NNP k)))
                (-RRB- -RRB-)))))))
    (. .)))

nsubj(Let-3, Theorem-1)
nummod(Theorem-1, 19-2)
root(ROOT-0, Let-3)
advmod(Let-3, =-4)
dep(Let-3, V-6)
compound(A-12, init-8)
dep(A-12, goal-10)
dep(V-6, A-12)
cop(instance-17, be-14)
det(instance-17, a-15)
amod(instance-17, planning-16)
dep(Let-3, instance-17)
acl(instance-17, having-18)
compound(k-20, width-19)
dobj(having-18, k-20)
dep(width-25, respectively-22)
compound(width-25, P-24)
dep(k-20, width-25)
dep(width-25, k-26)
compound(k-30, H-28)
compound(k-30, width-29)
dep(width-25, k-30)
compound(k-34, PH-32)
compound(k-34, width-33)
appos(k-30, k-34)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (NNP A))
        (VP (VB be)
          (NP
            (NP (DT a) (NN set))
            (PP (IN of)
              (NP
                (NP (NNS actions))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBZ is)
                      (NP
                        (NP (DT a) (NN superset))
                        (PP (IN of)
                          (NP (DT A) (JJ such))))
                      (SBAR (IN that)
                        (S
                          (NP
                            (NP
                              (NP (DT every) (JJ reachable) (NN state))
                              (PP (IN in)
                                (NP (NNP =))))
                            (PRN (-LRB- -LRB-)
                              (NP (NNP V))
                              (, ,)
                              (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
                              (-RRB- -RRB-)))
                          (VP (VBZ is)
                            (ADJP (JJ reachable)
                              (PP (IN in)))))))))))))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(set-5, A-2)
cop(set-5, be-3)
det(set-5, a-4)
ccomp(Let-1, set-5)
case(actions-7, of-6)
nmod:of(set-5, actions-7)
nsubj(superset-11, actions-7)
ref(actions-7, that-8)
cop(superset-11, is-9)
det(superset-11, a-10)
acl:relcl(actions-7, superset-11)
case(such-14, of-12)
det(such-14, A-13)
nmod:of(superset-11, such-14)
mark(reachable-31, that-15)
det(state-18, every-16)
amod(state-18, reachable-17)
nsubj(reachable-31, state-18)
case(=-20, in-19)
nmod:in(state-18, =-20)
appos(state-18, V-22)
compound(A-28, init-24)
dep(A-28, goal-26)
dep(V-22, A-28)
cop(reachable-31, is-30)
ccomp(superset-11, reachable-31)
nmod(reachable-31, in-32)

(ROOT
  (S
    (ADVP (RB Then))
    (, ,)
    (NP (DT the) (NN instance))
    (VP (VBZ has)
      (NP (NN width) (NN k))
      (PRN (-LRB- -LRB-)
        (FRAG
          (ADVP (RB respectively))
          (, ,)
          (NP
            (NP (NNP P) (NNP width))
            (NP (NN k)))
          (, ,)
          (NP
            (NP (NNP H) (NNP width))
            (NP (NN k)))
          (, ,)
          (ADVP (RB PH))
          (NP (NN width) (NN k)))
        (-RRB- -RRB-)))
    (. .)))

advmod(has-5, Then-1)
det(instance-4, the-3)
nsubj(has-5, instance-4)
root(ROOT-0, has-5)
compound(k-7, width-6)
dobj(has-5, k-7)
dep(width-12, respectively-9)
compound(width-12, P-11)
dep(has-5, width-12)
dep(width-12, k-13)
compound(width-16, H-15)
appos(width-12, width-16)
dep(width-16, k-17)
dep(width-12, PH-19)
compound(k-21, width-20)
dep(width-12, k-21)

(ROOT
  (NP (NN Proof) (. .)))

root(ROOT-0, Proof-1)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP prove)
        (NP
          (NP (DT this))
          (PP (IN in)
            (NP
              (NP (DT the) (NN case))
              (PP (IN of)
                (NP (NN width) (NN k))))))))
    (: ;)
    (S
      (NP (DT the) (NN proof))
      (VP (VBZ is)
        (ADJP (JJ similar)
          (PP (IN for)
            (NP
              (NP (DT the) (JJ other) (NNS notions))
              (PP (IN of)
                (NP (NN width))))))))
    (. .)))

nsubj(prove-2, We-1)
root(ROOT-0, prove-2)
dobj(prove-2, this-3)
case(case-6, in-4)
det(case-6, the-5)
nmod:in(this-3, case-6)
case(k-9, of-7)
compound(k-9, width-8)
nmod:of(case-6, k-9)
det(proof-12, the-11)
nsubj(similar-14, proof-12)
cop(similar-14, is-13)
parataxis(prove-2, similar-14)
case(notions-18, for-15)
det(notions-18, the-16)
amod(notions-18, other-17)
nmod:for(similar-14, notions-18)
case(width-20, of-19)
nmod:of(notions-18, width-20)

(ROOT
  (S
    (VP (VB Assume)
      (SBAR (IN that)
        (S
          (VP (VBZ has)
            (NP (NN width) (NN k))))))
    (. .)))

root(ROOT-0, Assume-1)
mark(has-3, that-2)
ccomp(Assume-1, has-3)
compound(k-5, width-4)
dobj(has-3, k-5)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (EX there))
        (VP (VBZ is)
          (NP
            (NP (DT no) (NN plan))
            (VP (VBG solving) (, ,)
              (ADVP (RB then))
              (PP (IN by)
                (NP (NN definition))))))))
    (NP (PRP it))
    (VP (VBZ has)
      (NP (NN width) (NN k)))
    (. .)))

mark(is-3, If-1)
expl(is-3, there-2)
advcl(has-12, is-3)
neg(plan-5, no-4)
nsubj(is-3, plan-5)
acl(plan-5, solving-6)
advmod(solving-6, then-8)
case(definition-10, by-9)
nmod:by(solving-6, definition-10)
nsubj(has-12, it-11)
root(ROOT-0, has-12)
compound(k-14, width-13)
dobj(has-12, k-14)

(ROOT
  (S
    (ADVP (RB Otherwise))
    (, ,)
    (ADVP (RB in))
    (, ,)
    (VP (VBP let)
      (S
        (NP (PRP s))
        (VP
          (VP (VB be)
            (NP
              (NP (DT a) (JJ reachable) (NN state))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBZ is) (RB not)
                    (NP (DT a) (NN goal) (NN state)))))))
          (, ,)
          (CC and)
          (VP (VB let)
            (S
              (NP (NN u))
              (VP (VB be)
                (NP
                  (NP (DT a) (NN variable))
                  (PP (IN in)
                    (NP
                      (NP (JJ wrong))
                      (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))))))))))
    (. .)))

advmod(let-5, Otherwise-1)
advmod(let-5, in-3)
root(ROOT-0, let-5)
nsubj(state-10, s-6)
nsubj(let-19, s-6)
cop(state-10, be-7)
det(state-10, a-8)
amod(state-10, reachable-9)
ccomp(let-5, state-10)
nsubj(state-16, state-10)
ref(state-10, that-11)
cop(state-16, is-12)
neg(state-16, not-13)
det(state-16, a-14)
compound(state-16, goal-15)
acl:relcl(state-10, state-16)
cc(state-10, and-18)
ccomp(let-5, let-19)
conj:and(state-10, let-19)
nsubj(state-16, let-19)
nsubj(variable-23, u-20)
cop(variable-23, be-21)
det(variable-23, a-22)
ccomp(let-19, variable-23)
case(wrong-25, in-24)
nmod:in(variable-23, wrong-25)
dep(wrong-25, s-27)

(ROOT
  (S
    (PP (IN By)
      (NP (NN assumption)))
    (NP (PRP s))
    (VP (VBZ is)
      (ADJP (JJ reachable)
        (PP (IN in))))
    (. .)))

case(assumption-2, By-1)
nmod:in(reachable-5, assumption-2)
nsubj(reachable-5, s-3)
cop(reachable-5, is-4)
root(ROOT-0, reachable-5)
case(assumption-2, in-6)

(ROOT
  (S
    (SBAR (IN Since)
      (S
        (NP (NNP and))
        (VP (VBP have)
          (NP (DT the) (JJ same) (NN goal) (NN state)))))
    (, ,)
    (NP (PRP s))
    (VP (VBZ is) (RB not)
      (NP
        (NP
          (NP (DT a) (NN goal) (NN state))
          (PP (IN in)))
        (, ,)
        (CC and)
        (NP
          (NP
            (NP (NN u) (JJ wrong))
            (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
          (PP (IN with)
            (NP (NN respect)))))
      (PP (TO to)))
    (. .)))

mark(have-3, Since-1)
nsubj(have-3, and-2)
advcl(state-14, have-3)
det(state-7, the-4)
amod(state-7, same-5)
compound(state-7, goal-6)
dobj(have-3, state-7)
nsubj(state-14, s-9)
cop(state-14, is-10)
neg(state-14, not-11)
det(state-14, a-12)
compound(state-14, goal-13)
root(ROOT-0, state-14)
acl(state-14, in-15)
cc(state-14, and-17)
conj:and(state-14, u-18)
amod(u-18, wrong-19)
dep(u-18, s-21)
case(respect-24, with-23)
nmod:with(u-18, respect-24)
nmod(state-14, to-25)

(ROOT
  (S
    (SBAR (IN Since)
      (S
        (VP (VBZ has)
          (NP (NN width) (NN k)))))
    (, ,)
    (NP (EX there))
    (VP (VBZ exists)
      (SBAR
        (S
          (NP (DT a) (NN plan))
          (VP (VBP P)
            (SBAR (IN that)
              (S
                (NP (NN k))
                (: -)
                (VP (VBZ improves)
                  (NP
                    (NP (DT the) (JJ variable) (NN u))
                    (PP (IN in)
                      (NP (NN state) (NNS s))))
                  (, ,)
                  (PP (IN in)
                    (NP (DT the) (NN instance))))))))))
    (. .)))

mark(has-2, Since-1)
advcl(exists-7, has-2)
compound(k-4, width-3)
dobj(has-2, k-4)
expl(exists-7, there-6)
root(ROOT-0, exists-7)
det(plan-9, a-8)
nsubj(P-10, plan-9)
ccomp(exists-7, P-10)
mark(improves-14, that-11)
nsubj(improves-14, k-12)
ccomp(P-10, improves-14)
det(u-17, the-15)
amod(u-17, variable-16)
dobj(improves-14, u-17)
case(s-20, in-18)
compound(s-20, state-19)
nmod:in(u-17, s-20)
case(instance-24, in-22)
det(instance-24, the-23)
nmod:in(improves-14, instance-24)

(ROOT
  (S
    (S
      (NP (DT The) (JJ same) (NN plan))
      (VP (VBP P)
        (ADVP (RB also))
        (NP (NN k))))
    (: -)
    (S
      (NP
        (NP (JJ improves) (NN u))
        (PP (IN in)
          (NP (NN state))))
      (VP (VBZ s)
        (PP (IN in)
          (NP (DT the) (NN instance)))))
    (. .)))

det(plan-3, The-1)
amod(plan-3, same-2)
nsubj(P-4, plan-3)
root(ROOT-0, P-4)
advmod(P-4, also-5)
dobj(P-4, k-6)
amod(u-9, improves-8)
nsubj(instance-15, u-9)
case(state-11, in-10)
nmod:in(u-9, state-11)
cop(instance-15, s-12)
case(instance-15, in-13)
det(instance-15, the-14)
parataxis(P-4, instance-15)

(ROOT
  (SINV
    (S
      (NP (NNP Reformulation))
      (VP (VBP theorem)
        (SBAR
          (S
            (NP (DT This) (NN section))
            (VP
              (VP (VBZ defines)
                (NP
                  (NP (DT a) (NN notion))
                  (PP (IN of)
                    (NP (NN reformulation)))))
              (CC and)
              (VP (VBZ demonstrates)
                (SBAR
                  (NP
                    (WHNP (WDT that))
                    (, ,)
                    (ADJP (JJ relative)
                      (PP (TO to)
                        (NP (DT this) (NN notion))))
                    (, ,))
                  (IN if)
                  (S
                    (NP (DT an) (NN instance))
                    (VP (VBZ is)
                      (NP
                        (NP (DT a) (NN reformulation))
                        (PP (IN of)
                          (NP (DT an) (NN instance)))))))))))))
    (, ,)
    (VP
      (ADVP (RB then))
      (VBD bounded)
      (NP
        (NP (NNP PH) (NNP width))
        (PP (IN of)
          (NP (NNP implies)))))
    (NP
      (NP (DT the) (JJ bounded) (NNP PH) (NN width))
      (PP (IN of)))
    (. .)))

nsubj(theorem-2, Reformulation-1)
ccomp(bounded-30, theorem-2)
det(section-4, This-3)
nsubj(defines-5, section-4)
nsubj(demonstrates-11, section-4)
ccomp(theorem-2, defines-5)
det(notion-7, a-6)
dobj(defines-5, notion-7)
case(reformulation-9, of-8)
nmod:of(notion-7, reformulation-9)
cc(defines-5, and-10)
ccomp(theorem-2, demonstrates-11)
conj:and(defines-5, demonstrates-11)
dep(relative-14, that-12)
dep(reformulation-24, relative-14)
case(notion-17, to-15)
det(notion-17, this-16)
nmod:to(relative-14, notion-17)
mark(reformulation-24, if-19)
det(instance-21, an-20)
nsubj(reformulation-24, instance-21)
cop(reformulation-24, is-22)
det(reformulation-24, a-23)
advcl(demonstrates-11, reformulation-24)
case(instance-27, of-25)
det(instance-27, an-26)
nmod:of(reformulation-24, instance-27)
advmod(bounded-30, then-29)
root(ROOT-0, bounded-30)
compound(width-32, PH-31)
dobj(bounded-30, width-32)
case(implies-34, of-33)
nmod:of(width-32, implies-34)
det(width-38, the-35)
amod(width-38, bounded-36)
compound(width-38, PH-37)
nsubj(bounded-30, width-38)
acl(width-38, of-39)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB then))
    (VP (VB define)
      (SBAR
        (S
          (NP
            (NP (DT the) (JJ binary) (NN formulation) (NN B))
            (PRN (-LRB- -LRB-)
              (VP
                (VP (VBN -RRB-)
                  (PP (IN of)
                    (NP (DT an) (NN instance))))
                (CC and)
                (VP (NN show)
                  (NP (DT that)))
                (, ,)
                (PP (IN with)
                  (NP
                    (NP (NN respect))
                    (PP (TO to)
                      (NP
                        (NP (PRP$ our) (NN definition))
                        (PP (IN of)
                          (NP
                            (NP (NN reformulation))
                            (, ,)
                            (NP (DT the) (NNS instances))
                            (CC and)
                            (NP (NNP B) (NNP -LRB-)))))))))
              (-RRB- -RRB-)))
          (VP (VBP are)
            (ADVP (RB always))
            (NP
              (NP (NNS reformulations))
              (PP (IN of)
                (NP (DT each) (JJ other))))))))
    (. .)))

nsubj(define-3, We-1)
advmod(define-3, then-2)
root(ROOT-0, define-3)
det(B-7, the-4)
amod(B-7, binary-5)
compound(B-7, formulation-6)
nsubj(reformulations-33, B-7)
dep(B-7, -RRB--9)
case(instance-12, of-10)
det(instance-12, an-11)
nmod:of(-RRB--9, instance-12)
cc(-RRB--9, and-13)
dep(B-7, show-14)
conj:and(-RRB--9, show-14)
dobj(show-14, that-15)
case(definition-21, with-17)
mwe(with-17, respect-18)
mwe(with-17, to-19)
nmod:poss(definition-21, our-20)
nmod:with_respect_to(-RRB--9, definition-21)
case(reformulation-23, of-22)
nmod:of(definition-21, reformulation-23)
det(instances-26, the-25)
nmod:of(definition-21, instances-26)
conj:and(reformulation-23, instances-26)
cc(reformulation-23, and-27)
compound(-LRB--29, B-28)
nmod:of(definition-21, -LRB--29)
conj:and(reformulation-23, -LRB--29)
cop(reformulations-33, are-31)
advmod(reformulations-33, always-32)
ccomp(define-3, reformulations-33)
case(other-36, of-34)
det(other-36, each-35)
nmod:of(reformulations-33, other-36)

(ROOT
  (S
    (NP (PRP We))
    (VP (MD can)
      (ADVP (RB consequently))
      (VP (VB observe)
        (SBAR
          (SBAR (IN that)
            (S
              (NP
                (NP (DT any) (NN class))
                (PP (IN of)
                  (NP (NNP instances) (NNP C))))
              (VP (VBZ has)
                (VP (VBN bounded)
                  (S
                    (NP (NNP PH) (NNP width))
                    (ADJP (IN if)))))))
          (CC and)
          (SBAR (RB only) (IN if)
            (S
              (NP
                (NP (DT the) (JJ binary) (NN formulation) (NN B))
                (PRN (-LRB- -LRB-)
                  (NP (NNP C))
                  (-RRB- -RRB-)))
              (VP (VBZ does)))))))
    (. .)))

nsubj(observe-4, We-1)
aux(observe-4, can-2)
advmod(observe-4, consequently-3)
root(ROOT-0, observe-4)
mark(bounded-12, that-5)
det(class-7, any-6)
nsubj(bounded-12, class-7)
case(C-10, of-8)
compound(C-10, instances-9)
nmod:of(class-7, C-10)
aux(bounded-12, has-11)
advcl(observe-4, bounded-12)
compound(width-14, PH-13)
nsubj(if-15, width-14)
xcomp(bounded-12, if-15)
cc(bounded-12, and-16)
advmod(does-26, only-17)
mark(does-26, if-18)
det(B-22, the-19)
amod(B-22, binary-20)
compound(B-22, formulation-21)
nsubj(does-26, B-22)
appos(B-22, C-24)
advcl(observe-4, does-26)
conj:and(bounded-12, does-26)

(ROOT
  (S
    (NP (DT This))
    (VP (MD may)
      (VP (VB be)
        (VP (VBN viewed)
          (PP (IN as)
            (NP
              (NP (DT a) (JJ robustness) (NN result))
              (PP (IN for)
                (NP
                  (NP (DT the) (NN concept))
                  (PP (IN of)
                    (NP (JJ bounded) (NNP PH) (NN width))))))))))
    (. .)))

nsubjpass(viewed-4, This-1)
aux(viewed-4, may-2)
auxpass(viewed-4, be-3)
root(ROOT-0, viewed-4)
case(result-8, as-5)
det(result-8, a-6)
amod(result-8, robustness-7)
nmod:as(viewed-4, result-8)
case(concept-11, for-9)
det(concept-11, the-10)
nmod:for(result-8, concept-11)
case(width-15, of-12)
amod(width-15, bounded-13)
compound(width-15, PH-14)
nmod:of(concept-11, width-15)

(ROOT
  (S
    (NP (NNP Definition) (CD 20))
    (VP (VBD Let)
      (SBAR
        (S
          (NP
            (NP
              (NP (NNP =))
              (PRN (-LRB- -LRB-)
                (NP (NNP V))
                (, ,)
                (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
                (-RRB- -RRB-)))
            (CC and)
            (NP
              (NP (NNP =))
              (PRN (-LRB- -LRB-)
                (NP (NNP V))
                (, ,)
                (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
                (-RRB- -RRB-))))
          (VP
            (VP (VB be)
              (NP (NNS instances)))
            (, ,)
            (CC and)
            (VP (VB let)
              (S
                (NP (NNP S)
                  (CC and)
                  (NNP S))
                (VP (VB denote)
                  (NP
                    (NP (DT the) (NN set))
                    (PP (IN of)
                      (NP
                        (NP (NNS states))
                        (PP (IN of)
                          (NP (NNP and))))))
                  (, ,)
                  (ADVP (RB respectively)))))))))
    (. .)))

nsubj(Let-3, Definition-1)
nummod(Definition-1, 20-2)
root(ROOT-0, Let-3)
nsubj(instances-26, =-4)
nsubj(let-29, =-4)
appos(=-4, V-6)
compound(A-12, init-8)
dep(A-12, goal-10)
dep(V-6, A-12)
cc(=-4, and-14)
conj:and(=-4, =-15)
nsubj(instances-26, =-15)
appos(=-15, V-17)
compound(A-23, init-19)
dep(A-23, goal-21)
dep(V-17, A-23)
cop(instances-26, be-25)
ccomp(Let-3, instances-26)
cc(instances-26, and-28)
ccomp(Let-3, let-29)
conj:and(instances-26, let-29)
nsubj(denote-33, S-30)
cc(S-30, and-31)
conj:and(S-30, S-32)
nsubj(denote-33, S-32)
ccomp(let-29, denote-33)
det(set-35, the-34)
dobj(denote-33, set-35)
case(states-37, of-36)
nmod:of(set-35, states-37)
case(and-39, of-38)
nmod:of(states-37, and-39)
advmod(denote-33, respectively-41)

(ROOT
  (S
    (S
      (NP (DT The) (NN instance))
      (VP (VBZ is)
        (NP
          (NP (DT a) (NN reformulation))
          (PP (IN of)
            (NP
              (NP (DT the) (NN instance))
              (PP (IN with)
                (NP
                  (NP (JJ non-decreasing) (NNP Persistent) (NNP Hamming) (NNP width) (NNP Definition) (CD 16))
                  (SBAR
                    (S
                      (NP (DT A) (NN planning) (NN instance))
                      (VP (VBZ has)
                        (NP
                          (NP (JJ persistent) (NN Hamming) (NN width) (NN k))
                          (SBAR
                            (SBAR (IN if)
                              (S
                                (NP (DT no) (NN plan))
                                (VP (VBZ exists))))
                            (, ,)
                            (CC or)
                            (SBAR (IN for)
                              (S
                                (NP (DT every) (JJ reachable) (NN state))
                                (VP (VBZ s)
                                  (SBAR (IN that)
                                    (S
                                      (VP (VBZ is) (RB not)
                                        (NP (DT a) (NN goal) (NN state))))))))))))))))))))
    (, ,)
    (NP (EX there))
    (VP (VBZ exists)
      (NP
        (NP (DT a) (JJ variable) (NN u))
        (ADJP (JJ wrong))
        (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
      (PP (JJ such))
      (SBAR (IN that)
        (S
          (NP (NN u))
          (VP (VBZ is)
            (NP
              (NP (NN k))
              (: -)
              (NP
                (NP
                  (NP (NNP Hamming) (NNP improvable))
                  (PP (IN in)
                    (NP (NN s.) (CD 78) (NN blowup) (NN function))
                    (X (SYM b))))
                (: :)
                (NP
                  (NP (NNP N) (NNP N))
                  (SBAR (IN if)
                    (S
                      (NP (EX there))
                      (VP (VBZ exists)
                        (NP (DT a) (NN relation) (NN R) (NNP S) (NNP x) (NNP S))
                        (PP (JJ such))
                        (SBAR (IN that)
                          (S
                            (NP (DT the) (JJ following) (NNS conditions))
                            (VP (VBP hold))))))))))))))
    (. .)))

det(instance-2, The-1)
nsubj(reformulation-5, instance-2)
cop(reformulation-5, is-3)
det(reformulation-5, a-4)
ccomp(exists-43, reformulation-5)
case(instance-8, of-6)
det(instance-8, the-7)
nmod:of(reformulation-5, instance-8)
case(Definition-14, with-9)
amod(Definition-14, non-decreasing-10)
compound(Definition-14, Persistent-11)
compound(Definition-14, Hamming-12)
compound(Definition-14, width-13)
nmod:with(instance-8, Definition-14)
nummod(Definition-14, 16-15)
det(instance-18, A-16)
compound(instance-18, planning-17)
nsubj(has-19, instance-18)
acl:relcl(Definition-14, has-19)
amod(k-23, persistent-20)
compound(k-23, Hamming-21)
compound(k-23, width-22)
dobj(has-19, k-23)
mark(exists-27, if-24)
neg(plan-26, no-25)
nsubj(exists-27, plan-26)
dep(k-23, exists-27)
cc(exists-27, or-29)
mark(s-34, for-30)
det(state-33, every-31)
amod(state-33, reachable-32)
nsubj(s-34, state-33)
dep(k-23, s-34)
conj:or(exists-27, s-34)
mark(state-40, that-35)
cop(state-40, is-36)
neg(state-40, not-37)
det(state-40, a-38)
compound(state-40, goal-39)
ccomp(s-34, state-40)
expl(exists-43, there-42)
root(ROOT-0, exists-43)
det(u-46, a-44)
amod(u-46, variable-45)
dobj(exists-43, u-46)
amod(u-46, wrong-47)
dep(u-46, s-49)
advcl(exists-43, such-51)
mark(k-55, that-52)
nsubj(k-55, u-53)
cop(k-55, is-54)
ccomp(exists-43, k-55)
compound(improvable-58, Hamming-57)
dep(k-55, improvable-58)
case(function-63, in-59)
compound(function-63, s.-60)
nummod(function-63, 78-61)
compound(function-63, blowup-62)
nmod:in(improvable-58, function-63)
dep(function-63, b-64)
compound(N-67, N-66)
dep(improvable-58, N-67)
mark(exists-70, if-68)
expl(exists-70, there-69)
dep(N-67, exists-70)
det(S-76, a-71)
compound(S-76, relation-72)
compound(S-76, R-73)
compound(S-76, S-74)
compound(S-76, x-75)
dobj(exists-70, S-76)
advcl(exists-70, such-77)
mark(hold-82, that-78)
det(conditions-81, the-79)
amod(conditions-81, following-80)
nsubj(hold-82, conditions-81)
ccomp(exists-70, hold-82)

(ROOT
  (FRAG
    (NP (CD 1))
    (. .)))

root(ROOT-0, 1-1)

(ROOT
  (S
    (PP (IN For)
      (NP (DT every) (NN reachable)))
    (PRN (, -)
      (S
        (NP (NN state))
        (VP (VBZ s)
          (NP (NNP S))))
      (, ,))
    (S
      (NP (EX there))
      (VP (VBZ exists)
        (NP (DT a) (NN reachable))))
    (: -)
    (S
      (NP (NN state))
      (VP (VBZ s)
        (NP
          (NP (NNP S))
          (PP (JJ such) (IN that)
            (NP
              (PRN (-LRB- -LRB-)
                (NP (PRP s))
                (, ,)
                (NP (PRP s))
                (-RRB- -RRB-))
              (NN R)))
          (NP (CD 2)))))
    (. .)))

case(reachable-3, For-1)
det(reachable-3, every-2)
nmod:for(exists-10, reachable-3)
nsubj(S-7, state-5)
cop(S-7, s-6)
dep(exists-10, S-7)
expl(exists-10, there-9)
root(ROOT-0, exists-10)
det(reachable-12, a-11)
dobj(exists-10, reachable-12)
nsubj(S-16, state-14)
cop(S-16, s-15)
parataxis(exists-10, S-16)
case(R-24, such-17)
case(R-24, that-18)
dep(R-24, s-20)
dep(s-20, s-22)
nmod:that(S-16, R-24)
dep(S-16, 2-25)

(ROOT
  (S
    (S
      (NP (EX there))
      (VP (VBZ exists)
        (NP
          (NP
            (NP (DT a) (NN function) (NN t))
            (: :)
            (NP (DT A)
              (NP
                (NP (DT A) (JJ such) (DT that))
                (PP (IN for)
                  (NP (DT all)))
                (PRN (-LRB- -LRB-)
                  (NP (PRP s))
                  (, ,)
                  (NP (PRP s))
                  (-RRB- -RRB-)))
              (NN R)))
          (, ,)
          (CC and)
          (NP
            (NP (DT all) (NNS actions))
            (NP (DT a) (NN A))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ holds)
      (SBAR (IN that)
        (S (-LRB- -LRB-)
          (NP
            (NP
              (NP
                (NP (SYM a))
                (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
              (, ,)
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (NN t))
                  (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-)))
                (-RRB- -RRB-)))
            (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
          (-RRB- -RRB-)
          (VP (VBZ R)
            (NP (CD 3))))))
    (. .)))

expl(exists-2, there-1)
ccomp(holds-27, exists-2)
det(t-5, a-3)
compound(t-5, function-4)
dobj(exists-2, t-5)
det(R-18, A-7)
det(such-9, A-8)
compound(R-18, such-9)
dep(such-9, that-10)
case(all-12, for-11)
nmod:for(such-9, all-12)
dep(such-9, s-14)
dep(s-14, s-16)
dep(t-5, R-18)
cc(t-5, and-20)
det(actions-22, all-21)
dobj(exists-2, actions-22)
conj:and(t-5, actions-22)
det(A-24, a-23)
dep(actions-22, A-24)
nsubj(holds-27, it-26)
root(ROOT-0, holds-27)
mark(3-46, that-28)
nsubj(3-46, a-30)
dep(a-30, s-32)
dep(a-30, t-36)
appos(t-36, a-38)
dep(a-30, s-42)
cop(3-46, R-45)
ccomp(holds-27, 3-46)

(ROOT
  (S
    (PP (IN for)
      (NP
        (ADJP (DT all)
          (PRN (-LRB- -LRB-)
            (NP (PRP s))
            (, ,)
            (NP (PRP s))
            (-RRB- -RRB-)))
        (NN R)))
    (, ,)
    (NP (PRP s))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN goal) (NN state))
        (PP (IN in)
          (UCP
            (ADJP (IN if))
            (CC and)
            (ADVP (RB only)))))
      (SBAR (IN if)
        (S
          (NP (PRP s))
          (VP (VBZ is)
            (NP
              (NP (DT a) (NN goal) (NN state))
              (PP (IN in)
                (NP (CD 4))))))))
    (. .)))

case(R-8, for-1)
amod(R-8, all-2)
dep(all-2, s-4)
dep(s-4, s-6)
nmod:for(state-14, R-8)
nsubj(state-14, s-10)
cop(state-14, is-11)
det(state-14, a-12)
compound(state-14, goal-13)
root(ROOT-0, state-14)
case(if-16, in-15)
acl(state-14, if-16)
cc(if-16, and-17)
advmod(if-16, only-18)
mark(state-24, if-19)
nsubj(state-24, s-20)
cop(state-24, is-21)
det(state-24, a-22)
compound(state-24, goal-23)
advcl(state-14, state-24)
case(4-26, in-25)
nmod:in(state-24, 4-26)

(ROOT
  (S
    (PP (IN if)
      (PRN (-LRB- -LRB-)
        (NP
          (NP (NNS s1))
          (, ,)
          (NP (NNS s1)))
        (-RRB- -RRB-)))
    (, ,)
    (NP
      (NP
        (NP
          (PRN (-LRB- -LRB-)
            (NP
              (NP (NNS s2))
              (, ,)
              (NP (NNS s2)))
            (-RRB- -RRB-))
          (NNS R))
        (CC and)
        (NP
          (NP (JJ wrong) (-LRB- -LRB-) (NNS s1) (-RRB- -RRB-))
          (NP (JJ wrong) (-LRB- -LRB-) (NNS s2) (-RRB- -RRB-))
          (, ,)
          (ADVP (RB then) (JJ wrong))))
      (PRN (-LRB- -LRB-)
        (NP (NNP s1))
        (-RRB- -RRB-)))
    (VP (VBZ wrong)
      (PRN (-LRB- -LRB-)
        (NP (CD s2))
        (-RRB- -RRB-))
      (NP (CD 5)))
    (. .)))

case(s1-3, if-1)
advcl(wrong-29, s1-3)
appos(s1-3, s1-5)
dep(R-13, s2-9)
appos(s2-9, s2-11)
nsubj(wrong-29, R-13)
cc(R-13, and-14)
amod(s1-17, wrong-15)
conj:and(R-13, s1-17)
nsubj(wrong-29, s1-17)
amod(s2-21, wrong-19)
dep(s1-17, s2-21)
advmod(wrong-25, then-24)
advmod(s1-17, wrong-25)
appos(R-13, s1-27)
root(ROOT-0, wrong-29)
dep(wrong-29, s2-31)
dobj(wrong-29, 5-33)

(ROOT
  (SINV
    (S
      (PP (IN for)
        (NP
          (NP
            (NP
              (NP (DT all))
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (NNS s1))
                  (, ,)
                  (NP (NNS s1)))
                (-RRB- -RRB-)))
            (, ,)
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NNS s2))
                (, ,)
                (NP (NNS s2)))
              (-RRB- -RRB-)))
          (NP (NN R))))
      (, ,)
      (NP (PRP it))
      (VP
        (VP (VBZ holds)
          (NP
            (NP
              (NP (DT that) (NN dh))
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (NNS s1))
                  (, ,)
                  (NP (NNS s2)))
                (-RRB- -RRB-)))
            (NP
              (NP
                (NP (SYM b))
                (-LRB- -LRB-)
                (NP (NN dh))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (NNS s1))
                    (, ,)
                    (NP (NNS s2)))
                  (-RRB- -RRB-))
                (-RRB- -RRB-))
              (NP (NNP Theorem) (CD 21)))
            (SBAR (IN If)
              (S
                (NP
                  (NP (NN instance) (NNS =))
                  (PRN (-LRB- -LRB-)
                    (NP (NNP V))
                    (, ,)
                    (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
                    (-RRB- -RRB-)))
                (VP (VBZ is)
                  (NP
                    (NP
                      (NP (DT a) (NN reformulation))
                      (PP (IN of)
                        (NP
                          (NP
                            (NP (NN instance) (NNS =))
                            (PRN (-LRB- -LRB-)
                              (NP (NNP V))
                              (, ,)
                              (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
                              (-RRB- -RRB-)))
                          (PP (IN with)
                            (NP (NN blowup) (NN function)))))
                      (X (SYM b)))
                    (: :)
                    (NP (NNP N) (NNP N))
                    (, ,)))))))
        (CC and)
        (VP (VBZ has)
          (NP (JJ persistent) (NN Hamming) (NN width) (NN k)))))
    (, ,)
    (VP
      (ADVP (RB then))
      (VBZ has)
      (NP (JJ persistent) (NN Hamming) (NN width)))
    (NP
      (NP (SYM b))
      (PRN (-LRB- -LRB-)
        (NP (NN k))
        (-RRB- -RRB-)))
    (. .)))

case(all-2, for-1)
nmod:for(holds-17, all-2)
dep(all-2, s1-4)
appos(s1-4, s1-6)
dep(all-2, s2-10)
appos(s2-10, s2-12)
dep(all-2, R-14)
nsubj(holds-17, it-16)
nsubj(has-72, it-16)
ccomp(has-79, holds-17)
det(dh-19, that-18)
dobj(holds-17, dh-19)
dep(dh-19, s1-21)
appos(s1-21, s2-23)
dep(dh-19, b-25)
dep(b-25, dh-27)
dep(b-25, s1-29)
appos(s1-29, s2-31)
dep(b-25, Theorem-34)
nummod(Theorem-34, 21-35)
mark(reformulation-50, If-36)
compound(=-38, instance-37)
nsubj(reformulation-50, =-38)
appos(=-38, V-40)
compound(A-46, init-42)
dep(A-46, goal-44)
dep(V-40, A-46)
cop(reformulation-50, is-48)
det(reformulation-50, a-49)
dep(dh-19, reformulation-50)
case(=-53, of-51)
compound(=-53, instance-52)
nmod:of(reformulation-50, =-53)
appos(=-53, V-55)
compound(A-61, init-57)
dep(A-61, goal-59)
dep(V-55, A-61)
case(function-65, with-63)
compound(function-65, blowup-64)
nmod:with(=-53, function-65)
dep(reformulation-50, b-66)
compound(N-69, N-68)
dep(reformulation-50, N-69)
cc(holds-17, and-71)
conj:and(holds-17, has-72)
ccomp(has-79, has-72)
amod(k-76, persistent-73)
compound(k-76, Hamming-74)
compound(k-76, width-75)
dobj(has-72, k-76)
advmod(has-79, then-78)
root(ROOT-0, has-79)
amod(width-82, persistent-80)
compound(width-82, Hamming-81)
dobj(has-79, width-82)
nsubj(has-79, b-83)
appos(b-83, k-85)

(ROOT
  (NP (NN Proof) (. .)))

root(ROOT-0, Proof-1)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB first))
    (VP (VBP make)
      (NP (DT a) (JJ general) (NN observation)))
    (. .)))

nsubj(make-3, We-1)
advmod(make-3, first-2)
root(ROOT-0, make-3)
det(observation-6, a-4)
amod(observation-6, general-5)
dobj(make-3, observation-6)

(ROOT
  (S
    (S
      (VP (VB Let)
        (NP
          (NP
            (NP (NNP P))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (NNS a1))))))
          (, ,)))
      (: ...))
    (PRN (, ,)
      (S
        (NP (DT an))
        (VP
          (VP (VB be)
            (NP (DT any) (NN plan))
            (PP (IN in)))
          (CC and)
          (VP (VB let)
            (S (-LRB- -LRB-)
              (NP (PRP s))
              (, ,)
              (NP (PRP s))
              (-RRB- -RRB-)
              (VP (VB R)
                (ADJP (JJ such)
                  (SBAR (IN that)
                    (SBAR (IN for)
                      (S
                        (NP (DT all) (FW i))
                        (VP (SYM =)
                          (NP (CD 1))))))))))))
      (, ,))
    (: ...)
    (S
      (NP
        (PRN (, ,)
          (ADVP (RB n))
          (, ,)))
      (VP (VBP dh)
        (PRN (-LRB- -LRB-)
          (S
            (NP (PRP s)
              (PRN (, ,)
                (PP (IN s)
                  (NP (CD -LSB-) (NNS a1) (, ,))
                  (: ...))
                (, ,)))
            (VP (VBP ai)
              (ADJP (JJ -RSB-))))
          (-RRB- -RRB-))
        (NP (NN k))))
    (. .)))

root(ROOT-0, Let-1)
dobj(Let-1, P-2)
dep(a1-4, =-3)
acl:relcl(P-2, a1-4)
nsubj(plan-11, an-8)
nsubj(let-14, an-8)
cop(plan-11, be-9)
det(plan-11, any-10)
dep(Let-1, plan-11)
nmod(plan-11, in-12)
cc(plan-11, and-13)
dep(Let-1, let-14)
conj:and(plan-11, let-14)
nsubj(such-21, s-16)
nsubj(such-21, s-18)
cop(such-21, R-20)
ccomp(let-14, such-21)
mark(1-27, that-22)
mark(1-27, for-23)
det(i-25, all-24)
nsubj(1-27, i-25)
dep(1-27, =-26)
dep(such-21, 1-27)
nsubj(dh-33, n-31)
parataxis(Let-1, dh-33)
nsubj(-RSB--44, s-35)
case(a1-39, s-37)
nummod(a1-39, -LSB--38)
nmod:s(s-35, a1-39)
cop(-RSB--44, ai-43)
parataxis(dh-33, -RSB--44)
dobj(dh-33, k-46)

(ROOT
  (S
    (PP (IN By)
      (NP
        (NP (JJ successive) (NN application))
        (PP (IN of)
          (NP (NN condition) (CD 2)))))
    (NP (PRP it))
    (VP (VBZ follows)
      (SBAR
        (SBAR (IN that) (IN for)
          (S
            (NP (DT all))
            (VP (VBZ i)
              (S
                (VP (SYM =)
                  (NP (CD 1)))))
            (, ,)))
        (: ...)
        (PRN (, ,)
          (S
            (VP (VB n)))
          (, ,)))
      (PRN (-LRB- -LRB-)
        (S
          (VP (VBZ s)
            (NP
              (NP (NNP -LSB-) (NNS a1) (, ,))
              (: ...)
              (NP (, ,) (JJ ai) (NN -RSB-))
              (, ,)
              (NP
                (NP
                  (NP (NNP s) (NNP -LSB-) (NNP t))
                  (PRN (-LRB- -LRB-)
                    (NP (NNP a1))
                    (-RRB- -RRB-))
                  (, ,))
                (: ...)
                (NP (, ,)
                  (NP (JJ t) (-LRB- -LRB-) (JJ ai) (-RRB- -RRB-) (NNS -RSB-))
                  (-RRB- -RRB-) (NNS R)))
              (CC and)
              (PRN
                (PP (IN by)
                  (NP
                    (NP (NN condition) (CD 5))
                    (SBAR
                      (S
                        (NP (PRP it))
                        (VP (VBZ follows)
                          (SBAR (IN that)
                            (S
                              (FRAG
                                (FRAG
                                  (PP (IN for)
                                    (NP
                                      (NP (DT all) (FW i))
                                      (SBAR
                                        (S
                                          (VP (SYM =)
                                            (NP (CD 1)))))))
                                  (, ,))
                                (: ...)
                                (FRAG (, ,)
                                  (NP (NN n))))
                              (, ,)
                              (VP (VBP dh)
                                (S (-LRB- -LRB-)
                                  (NP (PRP s))
                                  (, ,)
                                  (NP (PRP s))
                                  (ADVP (RB -LSB-))
                                  (VP (VB t)
                                    (NP (-LRB- -LRB-) (NNS a1) (-RRB- -RRB-)))))
                              (, ,)))))))
                  (: ...))
                (, ,))
              (NP (NNP t)
                (PRN (-LRB- -LRB-)
                  (NP (NNP ai))
                  (-RRB- -RRB-))
                (NNP -RSB-)))))
        (-RRB- -RRB-)))
    (NP
      (NP
        (NP
          (NP (SYM b))
          (-LRB- -LRB-)
          (NP (NN dh))
          (PRN (-LRB- -LRB-)
            (ADVP (RB s))
            (, ,)
            (PP (IN s)
              (NP (CD -LSB-) (NNS a1) (, ,))
              (: ...))
            (, ,)
            (NP (NNP ak) (NNP -RSB-))
            (-RRB- -RRB-))
          (-RRB- -RRB-))
        (NP (SYM b)))
      (PRN (-LRB- -LRB-)
        (NP (NN k))
        (-RRB- -RRB-)))
    (. .)))

case(application-3, By-1)
amod(application-3, successive-2)
nmod:by(follows-8, application-3)
case(condition-5, of-4)
nmod:of(application-3, condition-5)
nummod(condition-5, 2-6)
nsubj(follows-8, it-7)
root(ROOT-0, follows-8)
mark(i-12, that-9)
mark(i-12, for-10)
nsubj(i-12, all-11)
advcl(follows-8, i-12)
dep(1-14, =-13)
ccomp(i-12, 1-14)
dep(i-12, n-18)
cop(a1-23, s-21)
compound(a1-23, -LSB--22)
parataxis(follows-8, a1-23)
amod(-RSB--28, ai-27)
parataxis(follows-8, -RSB--28)
conj:and(a1-23, -RSB--28)
compound(t-32, s-30)
compound(t-32, -LSB--31)
parataxis(follows-8, t-32)
conj:and(a1-23, t-32)
appos(t-32, a1-34)
amod(-RSB--43, t-39)
amod(-RSB--43, ai-41)
dep(R-45, -RSB--43)
dep(t-32, R-45)
cc(a1-23, and-46)
case(condition-48, by-47)
nmod:by(a1-23, condition-48)
mark(dh-63, condition-48)
nummod(condition-48, 5-49)
nsubj(follows-51, it-50)
acl:relcl(condition-48, follows-51)
ref(condition-48, that-52)
case(i-55, for-53)
det(i-55, all-54)
dep(dh-63, i-55)
dep(1-57, =-56)
acl:relcl(i-55, 1-57)
parataxis(i-55, n-61)
ccomp(follows-51, dh-63)
nsubj(t-69, s-65)
nsubj(t-69, s-67)
advmod(t-69, -LSB--68)
ccomp(dh-63, t-69)
dobj(t-69, a1-71)
compound(-RSB--80, t-76)
appos(-RSB--80, ai-78)
parataxis(follows-8, -RSB--80)
conj:and(a1-23, -RSB--80)
dep(follows-8, b-82)
dep(b-82, dh-84)
dep(-RSB--95, s-86)
case(a1-90, s-88)
nummod(a1-90, -LSB--89)
nmod:s(-RSB--95, a1-90)
compound(-RSB--95, ak-94)
appos(b-82, -RSB--95)
dep(b-82, b-98)
appos(b-82, k-100)

(ROOT
  (S
    (ADVP (RB Now))
    (NP (PRP we))
    (VP (VBP prove)
      (NP (DT the) (NN theorem)))
    (. .)))

advmod(prove-3, Now-1)
nsubj(prove-3, we-2)
root(ROOT-0, prove-3)
det(theorem-5, the-4)
dobj(prove-3, theorem-5)

(ROOT
  (X
    (S
      (VP (VB Let)
        (S
          (NP (PRP s))
          (VP (VB be)
            (NP (DT a) (NN reachable))))))
    (: -)
    (NP
      (NP (NN state))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBZ is) (RB not)
            (NP (DT a) (NN goal) (NN state))))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(reachable-5, s-2)
cop(reachable-5, be-3)
det(reachable-5, a-4)
ccomp(Let-1, reachable-5)
dep(Let-1, state-7)
nsubj(state-13, state-7)
ref(state-7, that-8)
cop(state-13, is-9)
neg(state-13, not-10)
det(state-13, a-11)
compound(state-13, goal-12)
acl:relcl(state-7, state-13)

(ROOT
  (S
    (S
      (PP (IN By)
        (NP
          (NP (NN condition) (CD 1))
          (PP (IN in)
            (NP (NNP Definition) (CD 20)))))
      (NP (EX there))
      (VP (VBZ exists)
        (NP (DT a) (NN reachable))))
    (: -)
    (S
      (NP (NN state))
      (VP (VBZ s)
        (NP
          (NP (JJ such)
            (ADJP (DT that)
              (PRN (-LRB- -LRB-)
                (NP (PRP s))
                (, ,)
                (NP (PRP s))
                (-RRB- -RRB-)))
            (NN R))
          (: ;)
          (NP
            (NP (DT the) (NN state))
            (SBAR
              (S
                (NP (PRP s))
                (VP (VBZ is) (RB not)
                  (NP (DT a) (NN goal) (NN state))
                  (PP (IN by)
                    (NP (NN condition) (CD 3))))))))))
    (. .)))

case(condition-2, By-1)
nmod:by(exists-8, condition-2)
nummod(condition-2, 1-3)
case(Definition-5, in-4)
nmod:in(condition-2, Definition-5)
nummod(Definition-5, 20-6)
expl(exists-8, there-7)
root(ROOT-0, exists-8)
det(reachable-10, a-9)
dobj(exists-8, reachable-10)
nsubj(R-21, state-12)
cop(R-21, s-13)
amod(R-21, such-14)
amod(R-21, that-15)
dep(that-15, s-17)
dep(s-17, s-19)
parataxis(exists-8, R-21)
det(state-24, the-23)
dep(R-21, state-24)
nsubj(state-30, s-25)
cop(state-30, is-26)
neg(state-30, not-27)
det(state-30, a-28)
compound(state-30, goal-29)
acl:relcl(state-24, state-30)
case(condition-32, by-31)
nmod:by(state-30, condition-32)
nummod(condition-32, 3-33)

(ROOT
  (S
    (S
      (ADVP (RB Thus))
      (, ,)
      (NP (EX there))
      (VP (VBZ exists)
        (S
          (NP (DT a) (NN plan) (NN P))
          (VP (SYM =)
            (NP (NNS a1)))))
      (, ,))
    (: ...)
    (S
      (VP
        (VP (, ,)
          (S
            (NP (DT an)
              (NP
                (NP (DT that) (NN k))
                (: -)
                (NP
                  (NP (NNP Hamming))
                  (SBAR
                    (S
                      (VP (VBZ improves)
                        (S
                          (NP
                            (NP (DT a) (JJ variable) (NN u))
                            (PP (IN in)
                              (NP (NN state) (NN s.))))
                          (VP (VB Let)
                            (S
                              (NP (NNP P))
                              (VP (VB denote)
                                (NP
                                  (NP (DT the) (NN plan) (NN t))
                                  (PRN (-LRB- -LRB-)
                                    (NP (NNP a1))
                                    (-RRB- -RRB-))))
                              (, ,))))))))
                (: ...))
              (, ,)
              (NP (NN t)))))
        (PRN (-LRB- -LRB-)
          (ADVP (DT an))
          (-RRB- -RRB-))))
    (. .)))

advmod(exists-4, Thus-1)
expl(exists-4, there-3)
root(ROOT-0, exists-4)
det(P-7, a-5)
compound(P-7, plan-6)
nsubj(a1-9, P-7)
dep(a1-9, =-8)
ccomp(exists-4, a1-9)
det(k-15, an-13)
det(k-15, that-14)
parataxis(exists-4, k-15)
dep(k-15, Hamming-17)
acl:relcl(Hamming-17, improves-18)
det(u-21, a-19)
amod(u-21, variable-20)
nsubj(Let-25, u-21)
case(s.-24, in-22)
compound(s.-24, state-23)
nmod:in(u-21, s.-24)
ccomp(improves-18, Let-25)
nsubj(denote-27, P-26)
ccomp(Let-25, denote-27)
det(t-30, the-28)
compound(t-30, plan-29)
dobj(denote-27, t-30)
appos(t-30, a1-32)
appos(k-15, t-37)
dep(k-15, an-39)

(ROOT
  (S
    (PP (IN By)
      (NP (DT the) (NN observation)))
    (, ,)
    (NP (PRP we))
    (VP (VBP have)
      (NP
        (NP
          (NP
            (NP
              (NP
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (NNP s) (NNP -LSB-) (NNP P) (NNP -RSB-))
                    (, ,)
                    (NP (NNP s) (NNP -LSB-) (NNP P) (NNP -RSB-)))
                  (-RRB- -RRB-))
                (NNP R.) (NNP Note))
              (ADJP (RB that) (JJ wrong)))
            (PRN (-LRB- -LRB-)
              (NP (NNP s) (NNP -LSB-) (NNP P) (NNPS -RSB-))
              (-RRB- -RRB-)))
          (ADJP (JJ wrong)))
        (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-))))
    (. .)))

case(observation-3, By-1)
det(observation-3, the-2)
nmod:by(have-6, observation-3)
nsubj(have-6, we-5)
root(ROOT-0, have-6)
compound(-RSB--11, s-8)
compound(-RSB--11, -LSB--9)
compound(-RSB--11, P-10)
dep(Note-19, -RSB--11)
compound(-RSB--16, s-13)
compound(-RSB--16, -LSB--14)
compound(-RSB--16, P-15)
appos(-RSB--11, -RSB--16)
compound(Note-19, R.-18)
dobj(have-6, Note-19)
advmod(wrong-21, that-20)
amod(Note-19, wrong-21)
compound(-RSB--26, s-23)
compound(-RSB--26, -LSB--24)
compound(-RSB--26, P-25)
appos(Note-19, -RSB--26)
amod(Note-19, wrong-28)
dep(Note-19, s-30)

(ROOT
  (NP
    (NP (JJ wrong))
    (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-))
    (. .)))

root(ROOT-0, wrong-1)
dep(wrong-1, s-3)

(ROOT
  (S
    (PP (IN By)
      (NP (NN condition) (CD 4)))
    (, ,)
    (NP (JJ wrong)
      (PRN (-LRB- -LRB-)
        (NP (NNP s) (NNP -LSB-) (NNP P) (NNPS -RSB-))
        (-RRB- -RRB-))
      (NNS Let))
    (VP (VBP u)
      (VP (VB be)
        (NP
          (NP (DT any) (NN variable))
          (PP (IN in)
            (NP
              (NP
                (NP
                  (NP (JJ wrong))
                  (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
                (ADJP (RB \) (JJ wrong)))
              (PRN (-LRB- -LRB-)
                (NP (NNP s) (NNP -LSB-) (NNP P) (NNPS -RSB-))
                (-RRB- -RRB-)))))))
    (. .)))

case(condition-2, By-1)
nmod:by(u-13, condition-2)
nummod(condition-2, 4-3)
amod(Let-12, wrong-5)
compound(-RSB--10, s-7)
compound(-RSB--10, -LSB--8)
compound(-RSB--10, P-9)
appos(Let-12, -RSB--10)
nsubj(u-13, Let-12)
root(ROOT-0, u-13)
cop(variable-16, be-14)
det(variable-16, any-15)
xcomp(u-13, variable-16)
case(wrong-18, in-17)
nmod:in(variable-16, wrong-18)
dep(wrong-18, s-20)
advmod(wrong-23, \-22)
amod(wrong-18, wrong-23)
compound(-RSB--28, s-25)
compound(-RSB--28, -LSB--26)
compound(-RSB--28, P-27)
appos(wrong-18, -RSB--28)

(ROOT
  (S
    (ADVP (RB Thus))
    (, ,)
    (NP (DT the) (NN plan) (NN P))
    (VP (VBZ improves)
      (NP
        (NP (NN u))
        (PP (IN in)
          (NP (PRP s)))))
    (. .)))

advmod(improves-6, Thus-1)
det(P-5, the-3)
compound(P-5, plan-4)
nsubj(improves-6, P-5)
root(ROOT-0, improves-6)
dobj(improves-6, u-7)
case(s-9, in-8)
nmod:in(u-7, s-9)

(ROOT
  (SINV
    (S
      (ADVP (RB Moreover))
      (, ,)
      (NP (DT the) (NN plan) (NNP P) (NNP k) (NNP Hamming))
      (VP (VBZ improves)
        (NP
          (NP
            (NP (NN u))
            (PP (IN in)
              (NP (PRP s)))
            (, ,)
            (SBAR (IN since)
              (FRAG
                (PP (IN by)
                  (NP
                    (NP (DT the) (NN observation))
                    (PRN (, ,)
                      (SBAR (IN for)
                        (S
                          (NP (DT all) (FW i))
                          (VP (SYM =)
                            (NP (CD 1)))))
                      (, ,)))
                  (: ...)))))
          (, ,)
          (NP
            (NP (NN n) (, ,) (NN dh) (-LRB- -LRB-) (NNP s) (, ,) (NNP s) (NNP -LSB-) (NN t))
            (PRN (-LRB- -LRB-)
              (NP (NNP a1))
              (-RRB- -RRB-))
            (, ,))
          (: ...))))
    (, ,)
    (VP (VBP t)
      (PRN (-LRB- -LRB-)
        (S
          (VP (VBZ ai) (-RRB- -RRB-)
            (VP (VBG -RSB-))))
        (-RRB- -RRB-)))
    (NP
      (NP (SYM b))
      (PRN (-LRB- -LRB-)
        (NP (NN k))
        (-RRB- -RRB-)))
    (. .)))

advmod(improves-8, Moreover-1)
det(Hamming-7, the-3)
compound(Hamming-7, plan-4)
compound(Hamming-7, P-5)
compound(Hamming-7, k-6)
nsubj(improves-8, Hamming-7)
ccomp(t-41, improves-8)
dobj(improves-8, u-9)
case(s-11, in-10)
nmod:in(u-9, s-11)
mark(observation-16, since-13)
case(observation-16, by-14)
det(observation-16, the-15)
dep(u-9, observation-16)
mark(1-22, for-18)
det(i-20, all-19)
nsubj(1-22, i-20)
dep(1-22, =-21)
dep(observation-16, 1-22)
compound(t-34, n-26)
dep(t-34, dh-28)
compound(t-34, s-30)
appos(t-34, s-32)
compound(t-34, -LSB--33)
appos(u-9, t-34)
appos(t-34, a1-36)
root(ROOT-0, t-41)
aux(-RSB--45, ai-43)
parataxis(t-41, -RSB--45)
nsubj(t-41, b-47)
appos(b-47, k-49)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBZ remark)
      (SBAR (IN that)
        (S
          (NP (DT this) (NN theorem))
          (VP (VBZ does) (RB not)
            (VP (VB hold)
              (PP (IN for)
                (NP
                  (ADJP (JJ width)
                    (CC nor)
                    (JJ persistent))
                  (NN width))))))))
    (. .)))

nsubj(remark-2, We-1)
root(ROOT-0, remark-2)
mark(hold-8, that-3)
det(theorem-5, this-4)
nsubj(hold-8, theorem-5)
aux(hold-8, does-6)
neg(hold-8, not-7)
ccomp(remark-2, hold-8)
case(width-13, for-9)
amod(width-13, width-10)
cc(width-10, nor-11)
conj:nor(width-10, persistent-12)
amod(width-13, persistent-12)
nmod:for(hold-8, width-13)

(ROOT
  (S
    (NP
      (NP
        (NP (DT The) (JJ binary) (NN formulation) (NNP B) (NNP -LRB-) (-RRB- -RRB-))
        (PP (IN of)
          (NP (DT a) (NN planning) (NN instance) (NN =))))
      (PRN (-LRB- -LRB-)
        (NP (NNP V))
        (, ,)
        (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
        (-RRB- -RRB-)))
    (VP (VBZ is)
      (VP (VBN described)
        (SBAR (IN as)
          (S
            (VP (VBZ follows))))))
    (. .)))

det(-LRB--5, The-1)
amod(-LRB--5, binary-2)
compound(-LRB--5, formulation-3)
compound(-LRB--5, B-4)
nsubjpass(described-22, -LRB--5)
case(=-11, of-7)
det(=-11, a-8)
compound(=-11, planning-9)
compound(=-11, instance-10)
nmod:of(-LRB--5, =-11)
appos(-LRB--5, V-13)
compound(A-19, init-15)
dep(A-19, goal-17)
dep(V-13, A-19)
auxpass(described-22, is-21)
root(ROOT-0, described-22)
mark(follows-24, as-23)
advcl(described-22, follows-24)

(ROOT
  (S
    (S
      (VP
        (VP (VB Consider)
          (NP (DT a) (JJ new) (JJ variable) (NN vd))
          (PP (IN for)
            (NP
              (NP (DT any) (NN pair) (NN v) (NN V))
              (CC and)
              (NP
                (NP (NNP d) (NNP D))
                (PRN (-LRB- -LRB-)
                  (NP (NN v))
                  (-RRB- -RRB-))))))
        (, ,)
        (CC and)
        (VP (VB define)
          (NP (NNP B) (NNP V))
          (SBAR (IN as)
            (S
              (NP
                (NP (DT the) (NN set))
                (PP (IN of)
                  (NP
                    (NP (DT all) (JJ such) (NNS variables))
                    (, ,)
                    (ADVP (RB namely))
                    (NP (NNP B))
                    (PRN (-LRB- -LRB-)
                      (NP (NNP V))
                      (-RRB- -RRB-)))))
              (VP (SYM =)
                (NP (NNP v) (NNP V))))))))
    (, ,)
    (NP
      (NP (NN dD))
      (PRN (-LRB- -LRB-)
        (NP (NN v))
        (-RRB- -RRB-)))
    (VP (VBP vd))
    (. .)))

ccomp(vd-43, Consider-1)
det(vd-5, a-2)
amod(vd-5, new-3)
amod(vd-5, variable-4)
dobj(Consider-1, vd-5)
case(V-10, for-6)
det(V-10, any-7)
compound(V-10, pair-8)
compound(V-10, v-9)
nmod:for(Consider-1, V-10)
cc(V-10, and-11)
compound(D-13, d-12)
nmod:for(Consider-1, D-13)
conj:and(V-10, D-13)
appos(D-13, v-15)
cc(Consider-1, and-18)
conj:and(Consider-1, define-19)
ccomp(vd-43, define-19)
compound(V-21, B-20)
dobj(define-19, V-21)
mark(V-37, as-22)
det(set-24, the-23)
nsubj(V-37, set-24)
case(variables-28, of-25)
det(variables-28, all-26)
amod(variables-28, such-27)
nmod:of(set-24, variables-28)
advmod(B-31, namely-30)
appos(variables-28, B-31)
appos(variables-28, V-33)
dep(V-37, =-35)
compound(V-37, v-36)
advcl(define-19, V-37)
nsubj(vd-43, dD-39)
appos(dD-39, v-41)
root(ROOT-0, vd-43)

(ROOT
  (S
    (PP (IN For)
      (NP
        (NP (DT each) (JJ variable) (NN w) (NN B))
        (PRN (-LRB- -LRB-)
          (NP (NNP V))
          (-RRB- -RRB-))))
    (, ,)
    (NP (PRP we))
    (VP (VB define)
      (NP
        (NP (NNP D)
          (PRN (-LRB- -LRB-)
            (NP (NN w))
            (-RRB- -RRB-))
          (NNP =))
        (PRN (-LRB- -LCB-)
          (NP (CD 0))
          (, ,)
          (NP (CD 1))
          (-RRB- -RCB-))))
    (. .)))

case(B-5, For-1)
det(B-5, each-2)
amod(B-5, variable-3)
compound(B-5, w-4)
nmod:for(define-11, B-5)
appos(B-5, V-7)
nsubj(define-11, we-10)
root(ROOT-0, define-11)
compound(=-16, D-12)
appos(=-16, w-14)
dobj(define-11, =-16)
appos(=-16, 0-18)
dep(0-18, 1-20)

(ROOT
  (S
    (INTJ (DT That) (VBZ is))
    (, ,)
    (S
      (PP (IN for)
        (NP (DT every) (JJ variable) (NN v) (NN V)))
      (, ,)
      (NP (CD one) (JJ binary) (NN variable))
      (VP (VBZ is)
        (VP (VBN introduced)
          (PP (IN for)
            (NP
              (NP (DT each) (NN domain) (NN element))
              (PP (IN in)
                (NP
                  (NP (NNP D))
                  (PRN (-LRB- -LRB-)
                    (NP (NN v))
                    (-RRB- -RRB-)))))))))
    (. .)))

discourse(introduced-14, That-1)
mwe(That-1, is-2)
case(V-8, for-4)
det(V-8, every-5)
amod(V-8, variable-6)
compound(V-8, v-7)
nmod:for(introduced-14, V-8)
nummod(variable-12, one-10)
amod(variable-12, binary-11)
nsubjpass(introduced-14, variable-12)
auxpass(introduced-14, is-13)
root(ROOT-0, introduced-14)
case(element-18, for-15)
det(element-18, each-16)
compound(element-18, domain-17)
nmod:for(introduced-14, element-18)
case(D-20, in-19)
nmod:in(element-18, D-20)
appos(D-20, v-22)

(ROOT
  (S
    (S
      (PP (IN For)
        (NP
          (NP (DT a) (JJ partial) (NN state) (NN p))
          (PP (IN of))))
      (, ,)
      (NP (PRP we))
      (VP (VB define)
        (S
          (NP
            (NP (NNP B))
            (PRN (-LRB- -LRB-)
              (NP (NN p))
              (-RRB- -RRB-)))
          (VP (TO to)
            (VP (VB be)
              (NP
                (NP (DT the) (JJ partial) (NN state))
                (VP (VBN defined)
                  (PP (IN on)
                    (NP
                      (NP (DT the) (NNS variables) (NNS vvars))
                      (PRN (-LRB- -LRB-)
                        (NP (NN p))
                        (-RRB- -RRB-)))))))))))
    (, ,)
    (NP
      (NP (NN dD))
      (PRN (-LRB- -LRB-)
        (NP (NN v))
        (-RRB- -RRB-)))
    (VP (VBP vd)
      (SBAR
        (S
          (NP
            (NP
              (NP (PDT such) (DT that))
              (-LRB- -LRB-)
              (NP (NNP B))
              (PRN (-LRB- -LRB-)
                (NP (NN p))
                (-RRB- -RRB-))
              (-RRB- -RRB-))
            (PRN (-LRB- -LRB-)
              (NP (NN vd))
              (-RRB- -RRB-)))
          (VP (VBZ is)
            (NP (CD 1))
            (SBAR (IN if)
              (S
                (NP
                  (NP (NN p))
                  (PRN (-LRB- -LRB-)
                    (NP (NN v))
                    (-RRB- -RRB-)))
                (VP (VBZ =)
                  (UCP
                    (NP (SYM d))
                    (, ,)
                    (CC and)
                    (VP (VBG 0)
                      (ADVP (RB otherwise)))))))))))
    (. .)))

case(p-5, For-1)
det(p-5, a-2)
amod(p-5, partial-3)
compound(p-5, state-4)
nmod:for(define-9, p-5)
acl(p-5, of-6)
nsubj(define-9, we-8)
ccomp(vd-32, define-9)
dobj(define-9, B-10)
nsubj:xsubj(state-18, B-10)
appos(B-10, p-12)
mark(state-18, to-14)
cop(state-18, be-15)
det(state-18, the-16)
amod(state-18, partial-17)
xcomp(define-9, state-18)
acl(state-18, defined-19)
case(vvars-23, on-20)
det(vvars-23, the-21)
compound(vvars-23, variables-22)
nmod:on(defined-19, vvars-23)
appos(vvars-23, p-25)
nsubj(vd-32, dD-28)
appos(dD-28, v-30)
root(ROOT-0, vd-32)
det:predet(that-34, such-33)
nsubj(1-45, that-34)
dep(that-34, B-36)
appos(that-34, p-38)
appos(that-34, vd-42)
cop(1-45, is-44)
ccomp(vd-32, 1-45)
mark(=-51, if-46)
nsubj(=-51, p-47)
appos(p-47, v-49)
advcl(1-45, =-51)
dobj(=-51, d-52)
cc(d-52, and-54)
acl(d-52, 0-55)
advmod(0-55, otherwise-56)

(ROOT
  (S
    (PP (IN For)
      (NP (DT an) (NN action))
      (ADVP
        (NP (DT a) (NN A))
        (IN of)))
    (, ,)
    (NP (PRP we))
    (VP (VB define)
      (S
        (NP
          (NP (NNP B))
          (PRN (-LRB- -LRB-)
            (X (SYM a))
            (-RRB- -RRB-)))
        (VP (TO to)
          (VP (VB be)
            (NP
              (NP (DT the) (NN action))
              (PP (IN with)
                (NP
                  (NP
                    (NP (NNP precondition) (NNP B))
                    (-LRB- -LRB-)
                    (NP (NN pre))
                    (PRN (-LRB- -LRB-)
                      (X (SYM a))
                      (-RRB- -RRB-))
                    (-RRB- -RRB-))
                  (CC and)
                  (NP
                    (NP (IN with) (JJ postcondition) (NN B))
                    (-LRB- -LRB-)
                    (NP (NN post))
                    (PRN (-LRB- -LRB-)
                      (X (SYM a))
                      (-RRB- -RRB-))
                    (-RRB- -RRB-)))))))))
    (. .)))

case(action-3, For-1)
det(action-3, an-2)
nmod:for(define-9, action-3)
det(A-5, a-4)
advmod(action-3, A-5)
case(A-5, of-6)
nsubj(define-9, we-8)
root(ROOT-0, define-9)
dobj(define-9, B-10)
nsubj:xsubj(action-17, B-10)
dep(B-10, a-12)
mark(action-17, to-14)
cop(action-17, be-15)
det(action-17, the-16)
xcomp(define-9, action-17)
case(B-20, with-18)
compound(B-20, precondition-19)
nmod:with(action-17, B-20)
dep(B-20, pre-22)
dep(B-20, a-24)
cc(B-20, and-27)
amod(B-30, with-28)
amod(B-30, postcondition-29)
nmod:with(action-17, B-30)
conj:and(B-20, B-30)
dep(B-30, post-32)
dep(B-30, a-34)

(ROOT
  (S
    (ADVP (RB Also))
    (, ,)
    (NP (PRP we))
    (VP (VB define)
      (NP
        (NP
          (NP
            (NP (NNP B))
            (PRN (-LRB- -LRB-)
              (NP (NNP A))
              (-RRB- -RRB-)))
          (NN =) (NN aA) (NNP B))
        (PRN (-LRB- -LRB-)
          (X (SYM a))
          (-RRB- -RRB-))))
    (. .)))

advmod(define-4, Also-1)
nsubj(define-4, we-3)
root(ROOT-0, define-4)
compound(B-11, B-5)
appos(B-5, A-7)
compound(B-11, =-9)
compound(B-11, aA-10)
dobj(define-4, B-11)
dep(B-11, a-13)

(ROOT
  (S
    (NP (PRP We))
    (VP (VB define)
      (NP
        (NP (NNP B))
        (PRN (-LRB- -LRB-)
          (VP (VBN -RRB-)
            (S
              (VP (TO to)
                (VP (VB be)
                  (NP
                    (NP
                      (NP (NNP -LRB-) (NNP B))
                      (PRN (-LRB- -LRB-)
                        (NP (NNP V))
                        (-RRB- -RRB-)))
                    (, ,)
                    (NP
                      (NP
                        (NP (NNP B))
                        (PRN (-LRB- -LRB-)
                          (NP (NN init))
                          (-RRB- -RRB-)))
                      (, ,)
                      (NP
                        (NP (NNP B))
                        (PRN (-LRB- -LRB-)
                          (NP (NN goal))
                          (-RRB- -RRB-)))
                      (, ,)
                      (NP
                        (NP (NNP B))
                        (PRN (-LRB- -LRB-)
                          (NP (NNP A))
                          (-RRB- -RRB-)))))))))
          (-RRB- -RRB-))))
    (. .)))

nsubj(define-2, We-1)
root(ROOT-0, define-2)
dobj(define-2, B-3)
dep(B-3, -RRB--5)
mark(B-9, to-6)
cop(B-9, be-7)
compound(B-9, -LRB--8)
xcomp(-RRB--5, B-9)
appos(B-9, V-11)
appos(B-9, B-14)
appos(B-14, init-16)
appos(B-14, B-19)
appos(B-19, goal-21)
appos(B-14, B-24)
appos(B-24, A-26)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP show)
      (SBAR (IN that)
        (S
          (PP (IN for)
            (NP (DT any) (NN instance)))
          (, ,)
          (NP
            (NP (DT the) (NNS instances))
            (CC and)
            (NP (NNP B) (NNP -LRB-))
            (-RRB- -RRB-))
          (VP (VBP are)
            (NP
              (NP (NNS reformulations))
              (PP (IN of)
                (NP (DT each) (JJ other))))))))
    (. .)))

nsubj(show-2, We-1)
root(ROOT-0, show-2)
mark(reformulations-15, that-3)
case(instance-6, for-4)
det(instance-6, any-5)
nmod:for(reformulations-15, instance-6)
det(instances-9, the-8)
nsubj(reformulations-15, instances-9)
cc(instances-9, and-10)
compound(-LRB--12, B-11)
conj:and(instances-9, -LRB--12)
nsubj(reformulations-15, -LRB--12)
cop(reformulations-15, are-14)
ccomp(show-2, reformulations-15)
case(other-18, of-16)
det(other-18, each-17)
nmod:of(reformulations-15, other-18)

(ROOT
  (S
    (NP
      (NP (NNP Proposition) (CD 22))
      (SBAR
        (S
          (PP (IN For)
            (NP (DT any) (NN instance)))
          (, ,)
          (NP (DT the) (NN instance) (NNP B) (NNP -LRB-) (-RRB- -RRB-))
          (VP (VBZ is)
            (NP
              (NP (DT a) (NN reformulation))
              (PP (IN of)
                (NP
                  (NP
                    (NP (DT the) (NN instance))
                    (PP (IN with)
                      (NP (NN blowup) (NN function)))
                    (X (SYM b)))
                  (PRN (-LRB- -LRB-)
                    (INTJ (UH n))
                    (-RRB- -RRB-)))))))))
    (VP (SYM =)
      (NP (NNS 2n)))
    (. .)))

nsubj(2n-26, Proposition-1)
nummod(Proposition-1, 22-2)
case(instance-5, For-3)
det(instance-5, any-4)
nmod:for(reformulation-14, instance-5)
det(-LRB--10, the-7)
compound(-LRB--10, instance-8)
compound(-LRB--10, B-9)
nsubj(reformulation-14, -LRB--10)
cop(reformulation-14, is-12)
det(reformulation-14, a-13)
acl:relcl(Proposition-1, reformulation-14)
case(instance-17, of-15)
det(instance-17, the-16)
nmod:of(reformulation-14, instance-17)
case(function-20, with-18)
compound(function-20, blowup-19)
nmod:with(instance-17, function-20)
dep(instance-17, b-21)
discourse(instance-17, n-23)
dep(2n-26, =-25)
root(ROOT-0, 2n-26)

(ROOT
  (NP (NN Proof) (. .)))

root(ROOT-0, Proof-1)

(ROOT
  (S
    (NP (NNP Letting) (NNP S))
    (VP (VBD denote)
      (NP
        (NP (DT the) (NN set))
        (PP (IN of)
          (NP
            (NP (NNS states))
            (PP (IN of)))))
      (, ,)
      (S
        (NP (PRP we))
        (VP (VB define)
          (NP
            (NP
              (NP (NN R) (NNS =))
              (-LRB- -LCB-)
              (NP (-LRB- -LRB-) (NNP s) (, ,) (NNP B))
              (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-))
              (-RRB- -RRB-))
            (: :)
            (NP (NNP s) (NNP S))))))
    (-RRB- -RCB-) (. .)))

compound(S-2, Letting-1)
nsubj(denote-3, S-2)
root(ROOT-0, denote-3)
det(set-5, the-4)
dobj(denote-3, set-5)
case(states-7, of-6)
nmod:of(set-5, states-7)
acl(states-7, of-8)
nsubj(define-11, we-10)
dep(denote-3, define-11)
compound(=-13, R-12)
dobj(define-11, =-13)
compound(B-18, s-16)
dep(=-13, B-18)
dep(=-13, s-20)
compound(S-25, s-24)
dep(=-13, S-25)

(ROOT
  (S
    (NP (PRP We))
    (VP (VB verify)
      (SBAR (IN that)
        (S
          (NP (DT the) (CD five) (NNS conditions))
          (VP (VBP hold)))))
    (. .)))

nsubj(verify-2, We-1)
root(ROOT-0, verify-2)
mark(hold-7, that-3)
det(conditions-6, the-4)
nummod(conditions-6, five-5)
nsubj(hold-7, conditions-6)
ccomp(verify-2, hold-7)

(ROOT
  (S
    (NP
      (NP (NNP Condition))
      (PRN (-LRB- -LRB-)
        (NP (CD 1))
        (-RRB- -RRB-)))
    (VP (VBZ holds)
      (PP (IN by)
        (NP
          (NP (DT the) (NN fact))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP
                (NP
                  (NP (DT a) (NN state))
                  (SBAR
                    (S
                      (NP (PRP s))
                      (VP (VBZ is)
                        (ADJP (JJ reachable)
                          (PP (IN from)
                            (NP (NN init))))
                        (PP (IN by)
                          (NP
                            (NP
                              (NP (NN plan) (NNS a1))
                              (, ,)
                              (NP (NNP ...))
                              (, ,))
                            (, an)
                            (PP (IN in)
                              (SBAR (IN if)
                                (S
                                  (NP
                                    (NP
                                      (QP (CC and)
                                        (RB only)))
                                    (PP (IN if)
                                      (NP (DT the) (NN state) (NN B)))
                                    (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
                                  (VP (VBZ is)
                                    (ADJP (JJ reachable)
                                      (PP (IN by)
                                        (NP
                                          (NP (NNP B))
                                          (PRN (-LRB- -LRB-)
                                            (NP (NNP a1))
                                            (-RRB- -RRB-)))))))))
                            (, ,)))
                        (: ...)))))
                (, ,)
                (NP
                  (NP (NNP B))
                  (PRN (-LRB- -LRB-)
                    (NP
                      (NP (DT an) (NN -RRB-))
                      (PP (IN in)
                        (NP (NNP B) (NNP -LRB-))))
                    (-RRB- -RRB-)))))))))
    (. .)))

nsubj(holds-5, Condition-1)
appos(Condition-1, 1-3)
root(ROOT-0, holds-5)
case(fact-8, by-6)
det(fact-8, the-7)
nmod:by(holds-5, fact-8)
nsubj(state-11, fact-8)
ref(fact-8, that-9)
det(state-11, a-10)
acl:relcl(fact-8, state-11)
nsubj(reachable-14, s-12)
cop(reachable-14, is-13)
acl:relcl(state-11, reachable-14)
case(init-16, from-15)
nmod:from(reachable-14, init-16)
case(a1-19, by-17)
compound(a1-19, plan-18)
nmod:by(reachable-14, a1-19)
appos(a1-19, ...-21)
mark(reachable-36, in-24)
mark(reachable-36, if-25)
cc(only-27, and-26)
nsubj(reachable-36, only-27)
case(B-31, if-28)
det(B-31, the-29)
compound(B-31, state-30)
nmod:if(only-27, B-31)
dep(only-27, s-33)
cop(reachable-36, is-35)
acl(a1-19, reachable-36)
case(B-38, by-37)
nmod:by(reachable-36, B-38)
appos(B-38, a1-40)
dobj(state-11, B-45)
det(-RRB--48, an-47)
dep(B-45, -RRB--48)
case(-LRB--51, in-49)
compound(-LRB--51, B-50)
nmod:in(-RRB--48, -LRB--51)

(ROOT
  (S
    (NP
      (NP (NNP Condition))
      (PRN (-LRB- -LRB-)
        (NP (CD 2))
        (-RRB- -RRB-)))
    (VP (VBZ follows)
      (ADVP (RB immediately))
      (PP (IN from)
        (NP
          (NP (DT the) (NN definition))
          (PP (IN of)
            (NP
              (NP (DT the) (NNS actions) (NN B))
              (PRN (-LRB- -LRB-)
                (X (SYM a))
                (-RRB- -RRB-)))))))
    (. .)))

nsubj(follows-5, Condition-1)
appos(Condition-1, 2-3)
root(ROOT-0, follows-5)
advmod(follows-5, immediately-6)
case(definition-9, from-7)
det(definition-9, the-8)
nmod:from(follows-5, definition-9)
case(B-13, of-10)
det(B-13, the-11)
compound(B-13, actions-12)
nmod:of(definition-9, B-13)
dep(B-13, a-15)

(ROOT
  (S
    (PP (IN For)
      (NP
        (NP (NN condition))
        (PRN (-LRB- -LRB-)
          (NP (CD 3))
          (-RRB- -RRB-))))
    (, ,)
    (NP (PRP we))
    (VP (VBP observe)
      (SBAR
        (SBAR (IN that)
          (S
            (NP (PRP s))
            (VP (VBZ is)
              (NP (DT a) (JJ -) (NN goal) (NN state))
              (ADVP (IN if)))))
        (CC and)
        (SBAR (RB only) (IN if)
          (S
            (NP
              (NP (NN v) (NNS vars))
              (PRN (-LRB- -LRB-)
                (NP (NN goal))
                (-RRB- -RRB-))
              (, ,))
            (VP (VBZ s)
              (NP
                (NP
                  (PRN (-LRB- -LRB-)
                    (NP (NN v))
                    (-RRB- -RRB-))
                  (JJ =) (NN goal))
                (PRN (-LRB- -LRB-)
                  (NP (NN v))
                  (-RRB- -RRB-))))))))
    (. .)))

case(condition-2, For-1)
nmod:for(observe-8, condition-2)
appos(condition-2, 3-4)
nsubj(observe-8, we-7)
root(ROOT-0, observe-8)
mark(state-15, that-9)
nsubj(state-15, s-10)
cop(state-15, is-11)
det(state-15, a-12)
amod(state-15, --13)
compound(state-15, goal-14)
advcl(observe-8, state-15)
advmod(state-15, if-16)
cc(state-15, and-17)
advmod(goal-31, only-18)
mark(goal-31, if-19)
compound(vars-21, v-20)
nsubj(goal-31, vars-21)
appos(vars-21, goal-23)
cop(goal-31, s-26)
appos(goal-31, v-28)
amod(goal-31, =-30)
advcl(observe-8, goal-31)
conj:and(state-15, goal-31)
appos(goal-31, v-33)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ holds)
      (SBAR (IN if)
        (CC and)
        (RB only)
        (S
          (SBAR (IN if)
            (S
              (NP (PRP v))
              (VP (VBZ vars)
                (NP
                  (NP (-LRB- -LRB-) (NN goal) (-RRB- -RRB-))
                  (, ,)
                  (NP (NNP d) (NNP D))
                  (PRN (-LRB- -LRB-)
                    (INTJ (UH v))
                    (-RRB- -RRB-))))))
          (NP (PRP we))
          (VP (VBP have)
            (NP
              (NP
                (NP
                  (NP
                    (NP
                      (NP (NNP -LRB-) (NNP B))
                      (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-))
                      (-RRB- -RRB-))
                    (PRN (-LRB- -LRB-)
                      (INTJ (UH vd))
                      (-RRB- -RRB-)))
                  (VP (VBN =)))
                (-LRB- -LRB-)
                (NP (NNP B) (-LRB- -LRB-) (NN goal) (-RRB- -RRB-))
                (-RRB- -RRB-))
              (PRN (-LRB- -LRB-)
                (INTJ (UH vd))
                (-RRB- -RRB-))
              (SBAR
                (WHNP (WDT which))
                (S
                  (PP (IN in)
                    (NP (NN turn)))
                  (VP (VBZ holds)
                    (SBAR (IN if)
                      (S
                        (NP
                          (NP
                            (QP (CC and)
                              (RB only)))
                          (PP (IN if)
                            (NP (NNP B)))
                          (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-)))
                        (VP (VBZ is)
                          (NP
                            (NP (DT a) (NNP B) (NNP -LRB-) (-RRB- -RRB-))
                            (: -)
                            (NP (NN goal) (NN state))))))))))))))
    (. .)))

nsubj(holds-2, This-1)
root(ROOT-0, holds-2)
mark(have-19, if-3)
cc(have-19, and-4)
advmod(have-19, only-5)
mark(vars-8, if-6)
nsubj(vars-8, v-7)
advcl(have-19, vars-8)
dobj(vars-8, goal-10)
compound(D-14, d-13)
appos(goal-10, D-14)
discourse(goal-10, v-16)
nsubj(have-19, we-18)
advcl(holds-2, have-19)
compound(B-21, -LRB--20)
dobj(have-19, B-21)
nsubj(holds-42, B-21)
dep(B-21, s-23)
discourse(B-21, vd-27)
acl(B-21, =-29)
compound(goal-33, B-31)
dep(B-21, goal-33)
discourse(B-21, vd-37)
ref(B-21, which-39)
case(turn-41, in-40)
nmod:in(holds-42, turn-41)
acl:relcl(B-21, holds-42)
mark(-LRB--54, if-43)
cc(only-45, and-44)
nsubj(-LRB--54, only-45)
case(B-47, if-46)
nmod:if(only-45, B-47)
dep(only-45, s-49)
cop(-LRB--54, is-51)
det(-LRB--54, a-52)
compound(-LRB--54, B-53)
advcl(holds-42, -LRB--54)
compound(state-58, goal-57)
dep(-LRB--54, state-58)

(ROOT
  (S
    (S
      (NP
        (NP
          (NP (NNS Conditions))
          (PRN (-LRB- -LRB-)
            (NP (CD 4))
            (-RRB- -RRB-)))
        (CC and)
        (NP (-LRB- -LRB-)
          (QP (CD 5))
          (-RRB- -RRB-)))
      (VP (VBP follow)
        (PP (IN from)
          (NP (DT the) (NN observation)))
        (SBAR (IN that)
          (S
            (S
              (SBAR (IN if)
                (S
                  (NP
                    (NP (CD two))
                    (PRN (-LRB- -LRB-)
                      (ADJP (JJ partial))
                      (-RRB- -RRB-)))
                  (: -)
                  (NP (NNS states))
                  (VP (VBP p))))
              (, ,)
              (NP (NN p))
              (VP (VBP differ)
                (PP (IN on)
                  (NP (JJ variable) (NN v)))))
            (, ,) (RB then)
            (S
              (NP
                (NP
                  (NP (NNP B))
                  (PRN (-LRB- -LRB-)
                    (NP (NN p))
                    (-RRB- -RRB-)))
                (CC and)
                (NP
                  (NP (NNP B))
                  (PRN (-LRB- -LRB-)
                    (NP (NN p))
                    (-RRB- -RRB-))))
              (VP (VBP differ)
                (PP (IN on)
                  (NP
                    (NP (NN vp))
                    (PRN (-LRB- -LRB-)
                      (NP (NN v))
                      (-RRB- -RRB-))
                    (CC and)
                    (NP (NN vp))
                    (PRN (-LRB- -LRB-)
                      (NP (NN v))
                      (-RRB- -RRB-))))
                (PP (IN in))))))))
    (: ;)
    (CC and)
    (, ,)
    (S
      (SBAR (IN if)
        (FRAG
          (NP (NN p))))
      (, ,)
      (NP (NN p))
      (VP (VBP do) (RB not)
        (VP (VB differ)
          (PP (IN on)
            (NP (JJ variable) (NN v))))))
    (, ,)
    (S
      (ADVP (RB then))
      (PP (IN for)
        (NP
          (NP (DT all) (NNP d) (NNP D))
          (PRN (-LRB- -LRB-)
            (NP (NN v))
            (-RRB- -RRB-))))
      (NP (PRP we))
      (VP (VBP have)
        (NP
          (NP (DT that) (NN B))
          (PRN (-LRB- -LRB-)
            (NP (NN p))
            (-RRB- -RRB-)))))
    (CC and)
    (S
      (NP
        (NP (NNP B))
        (PRN (-LRB- -LRB-)
          (NP (NN p))
          (-RRB- -RRB-)))
      (VP (VBP are)
        (ADJP (JJ equal)
          (PP (IN on)
            (NP (NN vd))))))
    (. .)))

nsubj(follow-9, Conditions-1)
appos(Conditions-1, 4-3)
cc(Conditions-1, and-5)
conj:and(Conditions-1, 5-7)
nsubj(follow-9, 5-7)
root(ROOT-0, follow-9)
case(observation-12, from-10)
det(observation-12, the-11)
nmod:from(follow-9, observation-12)
mark(differ-24, that-13)
mark(p-21, if-14)
nsubj(p-21, two-15)
dep(two-15, partial-17)
nsubj(p-21, states-20)
advcl(differ-24, p-21)
nsubj(differ-24, p-23)
ccomp(follow-9, differ-24)
case(v-27, on-25)
amod(v-27, variable-26)
nmod:on(differ-24, v-27)
advmod(differ-39, then-29)
nsubj(differ-39, B-30)
appos(B-30, p-32)
cc(B-30, and-34)
conj:and(B-30, B-35)
nsubj(differ-39, B-35)
appos(B-35, p-37)
parataxis(differ-24, differ-39)
case(vp-41, on-40)
nmod:on(differ-39, vp-41)
appos(vp-41, v-43)
cc(vp-41, and-45)
nmod:on(differ-39, vp-46)
conj:and(vp-41, vp-46)
appos(vp-41, v-48)
case(vp-41, in-50)
cc(follow-9, and-52)
mark(p-55, if-54)
advcl(differ-60, p-55)
nsubj(differ-60, p-57)
aux(differ-60, do-58)
neg(differ-60, not-59)
conj:and(follow-9, differ-60)
case(v-63, on-61)
amod(v-63, variable-62)
nmod:on(differ-60, v-63)
advmod(have-74, then-65)
case(D-69, for-66)
det(D-69, all-67)
compound(D-69, d-68)
nmod:for(have-74, D-69)
appos(D-69, v-71)
nsubj(have-74, we-73)
conj:and(follow-9, have-74)
det(B-76, that-75)
dobj(have-74, B-76)
appos(B-76, p-78)
cc(follow-9, and-80)
nsubj(equal-86, B-81)
appos(B-81, p-83)
cop(equal-86, are-85)
conj:and(follow-9, equal-86)
case(vd-88, on-87)
nmod:on(equal-86, vd-88)

(ROOT
  (S
    (NP
      (NP (NNP Proposition) (CD 23))
      (SBAR
        (S
          (NP (DT Any) (NN instance))
          (VP (VBZ is)
            (NP
              (NP (DT a) (NN reformulation))
              (PP (IN of)
                (NP
                  (NP
                    (NP (DT the) (NN instance))
                    (NP
                      (NP (NNP B) (-LRB- -LRB-) (NNP -RRB-))
                      (PP (IN with)
                        (NP (NN blowup) (NN function)))
                      (X (SYM b))))
                  (PRN (-LRB- -LRB-)
                    (INTJ (UH n))
                    (-RRB- -RRB-)))))))))
    (VP (SYM =)
      (NP (NN n) (CD 2)))
    (. .)))

nsubj(n-22, Proposition-1)
nummod(Proposition-1, 23-2)
det(instance-4, Any-3)
nsubj(reformulation-7, instance-4)
cop(reformulation-7, is-5)
det(reformulation-7, a-6)
acl:relcl(Proposition-1, reformulation-7)
case(instance-10, of-8)
det(instance-10, the-9)
nmod:of(reformulation-7, instance-10)
compound(-RRB--13, B-11)
dep(instance-10, -RRB--13)
case(function-16, with-14)
compound(function-16, blowup-15)
nmod:with(-RRB--13, function-16)
dep(-RRB--13, b-17)
discourse(instance-10, n-19)
dep(n-22, =-21)
root(ROOT-0, n-22)
nummod(n-22, 2-23)

(ROOT
  (NP (NN Proof) (. .)))

root(ROOT-0, Proof-1)

(ROOT
  (S
    (NP (NNP Letting) (NNP S))
    (VP (VBP denote)
      (NP
        (NP (DT the) (NN set))
        (PP (IN of)
          (NP
            (NP
              (NP (NNS states))
              (PP (IN of))
              (, ,)
              (NP
                (NP
                  (NP (PRP we))
                  (SBAR
                    (S
                      (S
                        (VP (VB define)
                          (NP (NN R) (NNS =))))
                      (PRN (-LRB- -LCB-)
                        (VP (-LRB- -LRB-) (VB B) (-LRB- -LRB-)
                          (NP (PRP s)))
                        (-RRB- -RRB-)))))
                (, ,)
                (NP (PRP s)))
              (-RRB- -RRB-))
            (: :)
            (NP (NNP s) (NNP S))))))
    (-RRB- -RCB-) (. .)))

compound(S-2, Letting-1)
nsubj(denote-3, S-2)
root(ROOT-0, denote-3)
det(set-5, the-4)
dobj(denote-3, set-5)
case(states-7, of-6)
nmod:of(set-5, states-7)
acl(states-7, of-8)
appos(states-7, we-10)
acl:relcl(we-10, define-11)
compound(=-13, R-12)
dobj(define-11, =-13)
dep(define-11, B-16)
dobj(B-16, s-18)
appos(we-10, s-21)
compound(S-25, s-24)
dep(states-7, S-25)

(ROOT
  (NP
    (NP (NNS Conditions))
    (PRN (-LRB- -LRB-)
      (NP (CD 1))
      (-RRB- -RRB-))
    (: -)
    (NP
      (NP (-LRB- -LRB-)
        (QP (CD 4))
        (-RRB- -RRB-))
      (SBAR
        (S
          (VP (VBP are)
            (VP (VBN verified)
              (PP (IN as) (IN in)
                (NP
                  (NP (DT the) (NN proof))
                  (PP (IN of)
                    (NP (NNP Proposition) (CD 22))))))))))
    (. .)))

root(ROOT-0, Conditions-1)
appos(Conditions-1, 1-3)
dep(Conditions-1, 4-7)
auxpass(verified-10, are-9)
acl:relcl(4-7, verified-10)
case(proof-14, as-11)
case(proof-14, in-12)
det(proof-14, the-13)
nmod:in(verified-10, proof-14)
case(Proposition-16, of-15)
nmod:of(proof-14, Proposition-16)
nummod(Proposition-16, 22-17)

(ROOT
  (S
    (PP (IN From)
      (NP
        (NP
          (NP (DT the) (NN discussion))
          (PP (IN of)
            (NP
              (NP (NNP Conditions))
              (PRN (-LRB- -LRB-)
                (NP (CD 4))
                (-RRB- -RRB-)))))
        (CC and)
        (NP
          (NP (-LRB- -LRB-)
            (QP (CD 5))
            (-RRB- -RRB-))
          (PP (IN in)
            (NP (DT that) (NN proof))))))
    (, ,)
    (NP (PRP we))
    (ADVP (RB also))
    (VP (VBP have)
      (NP
        (NP
          (NP (DT that))
          (SBAR (IN if)
            (S (-LRB- -LRB-)
              (NP
                (NP
                  (NP
                    (NP (NNS s1))
                    (, ,)
                    (ADJP (JJ s2))
                    (-RRB- -RRB-))
                  (, ,)
                  (PRN (-LRB- -LRB-)
                    (NP
                      (NP (NNS s1))
                      (, ,)
                      (NP (NNS s2)))
                    (-RRB- -RRB-)))
                (NP (NN R))
                (, ,))
              (ADVP (RB then))
              (VP (VBP dh)
                (S
                  (NP
                    (PRN (-LRB- -LRB-)
                      (NP
                        (NP (NNS s1))
                        (, ,)
                        (NP (NNS s2)))
                      (-RRB- -RRB-)))
                  (VP (SYM =)
                    (NP (CD 2) (JJ *) (NN dh))))))))
        (PRN (-LRB- -LRB-)
          (NP
            (NP (NNS s1))
            (, ,)
            (NP (NNS s2)))
          (-RRB- -RRB-))))
    (. .)))

case(discussion-3, From-1)
det(discussion-3, the-2)
nmod:from(have-19, discussion-3)
case(Conditions-5, of-4)
nmod:of(discussion-3, Conditions-5)
appos(Conditions-5, 4-7)
cc(discussion-3, and-9)
conj:and(discussion-3, 5-11)
nmod:from(have-19, 5-11)
case(proof-15, in-13)
det(proof-15, that-14)
nmod:in(5-11, proof-15)
nsubj(have-19, we-17)
advmod(have-19, also-18)
root(ROOT-0, have-19)
dobj(have-19, that-20)
mark(dh-36, if-21)
nsubj(dh-36, s1-23)
amod(s1-23, s2-25)
dep(s1-23, s1-29)
appos(s1-29, s2-31)
dep(s1-23, R-33)
advmod(dh-36, then-35)
acl:relcl(that-20, dh-36)
nsubj(dh-45, s1-38)
appos(s1-38, s2-40)
dep(dh-45, =-42)
nummod(dh-45, 2-43)
amod(dh-45, *-44)
ccomp(dh-36, dh-45)
dep(that-20, s1-47)
appos(s1-47, s2-49)

(ROOT
  (SINV
    (NP (PRP It))
    (VP
      (PRN
        (NP
          (NP (CD 1))
          (, ,)
          (NP (NNS s2)))
        (-RRB- -RRB-))
      (VBZ follows)
      (NP
        (NP (DT that) (NN dh))
        (PRN (-LRB- -LRB-)
          (NP
            (NP (NNS s1))
            (, ,)
            (NP (NNS s2)))
          (-RRB- -RRB-))
        (VP (VBN dh) (-LRB- -LRB-)
          (NP (NNS s2))
          (, ,)
          (S
            (VP (VBG yielding)
              (NP
                (NP (NN condition))
                (PRN (-LRB- -LRB-)
                  (NP (CD 5))
                  (-RRB- -RRB-))))))))
    (. .)))

nsubj(follows-6, It-1)
dep(follows-6, 1-2)
appos(1-2, s2-4)
root(ROOT-0, follows-6)
det(dh-8, that-7)
dobj(follows-6, dh-8)
dep(dh-8, s1-10)
appos(s1-10, s2-12)
acl(dh-8, dh-14)
dobj(dh-14, s2-16)
advcl(dh-14, yielding-18)
dobj(yielding-18, condition-19)
appos(condition-19, 5-21)

(ROOT
  (S
    (NP (NNP Theorem) (CD 24))
    (VP (VBD Let)
      (S
        (NP (NNP C))
        (VP (VB be)
          (NP
            (NP (DT a) (NN set))
            (PP (IN of)
              (NP (NN planning) (NNS instances)))))))
    (. .)))

nsubj(Let-3, Theorem-1)
nummod(Theorem-1, 24-2)
root(ROOT-0, Let-3)
nsubj(set-7, C-4)
cop(set-7, be-5)
det(set-7, a-6)
ccomp(Let-3, set-7)
case(instances-10, of-8)
compound(instances-10, planning-9)
nmod:of(set-7, instances-10)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (NNP C))
        (VP (VBZ has)
          (NP (NNP PH) (NN width) (NN k)))))
    (, ,)
    (NP
      (NP
        (ADVP (RB then))
        (NNP B)
        (PRN (-LRB- -LRB-)
          (NP (NNP C))
          (-RRB- -RRB-))
        (NNS =))
      (PRN (-LRB- -LCB-)
        (NP
          (NP (NNP B) (-LRB- -LRB-) (NNP -RRB-))
          (: :)
          (NP (NNP C)))
        (-RRB- -RCB-)))
    (VP (VBZ has)
      (NP (NNP PH) (NN width) (NNS 2k)))
    (. .)))

mark(has-3, If-1)
nsubj(has-3, C-2)
advcl(has-21, has-3)
compound(k-6, PH-4)
compound(k-6, width-5)
dobj(has-3, k-6)
advmod(=-13, then-8)
compound(=-13, B-9)
appos(=-13, C-11)
nsubj(has-21, =-13)
compound(-RRB--17, B-15)
dep(=-13, -RRB--17)
dep(-RRB--17, C-19)
root(ROOT-0, has-21)
compound(2k-24, PH-22)
compound(2k-24, width-23)
dobj(has-21, 2k-24)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP
          (NP (NNP B))
          (PRN (-LRB- -LRB-)
            (NP (NNP C))
            (-RRB- -RRB-)))
        (VP (VBZ has)
          (NP (NNP PH) (NN width) (NN k)))))
    (, ,)
    (ADVP (RB then))
    (NP (NNP C))
    (VP (VBZ has)
      (NP
        (NP (NNP PH) (NNP width))
        (ADJP (JJ k)
          (NP (CD 2)))))
    (. .)))

mark(has-6, If-1)
nsubj(has-6, B-2)
appos(B-2, C-4)
advcl(has-13, has-6)
compound(k-9, PH-7)
compound(k-9, width-8)
dobj(has-6, k-9)
advmod(C-12, then-11)
nsubj(has-13, C-12)
root(ROOT-0, has-13)
compound(width-15, PH-14)
dobj(has-13, width-15)
amod(width-15, k-16)
dep(k-16, 2-17)

(ROOT
  (S
    (ADVP (RB Thus))
    (, ,)
    (NP (DT the) (VBN set) (NNP C))
    (VP (VBZ has)
      (VP (VBN bounded)
        (NP (NNP PH) (NNP width))
        (SBAR (IN if)
          (CC and)
          (RB only)
          (S
            (SBAR (IN if)
              (S
                (NP
                  (NP (NNP B))
                  (PRN (-LRB- -LRB-)
                    (NP (NNP C))
                    (-RRB- -RRB-)))
                (VP (VBZ has)
                  (VP (VBN bounded)))))
            (NP (NNP PH))
            (VP (VBZ width))))))
    (. .)))

advmod(bounded-7, Thus-1)
det(C-5, the-3)
amod(C-5, set-4)
nsubj(bounded-7, C-5)
aux(bounded-7, has-6)
root(ROOT-0, bounded-7)
compound(width-9, PH-8)
dobj(bounded-7, width-9)
mark(width-21, if-10)
cc(width-21, and-11)
advmod(width-21, only-12)
mark(bounded-19, if-13)
nsubj(bounded-19, B-14)
appos(B-14, C-16)
aux(bounded-19, has-18)
advcl(width-21, bounded-19)
nsubj(width-21, PH-20)
advcl(bounded-7, width-21)

(ROOT
  (NP (NN Proof) (. .)))

root(ROOT-0, Proof-1)

(ROOT
  (NP
    (NP (NNP Immediate))
    (PP (IN from)
      (NP
        (NP (NNP Propositions) (CD 22)
          (CC and)
          (CD 23))
        (, ,)
        (CC and)
        (NP (NNP Theorem) (CD 21))))
    (. .)))

root(ROOT-0, Immediate-1)
case(Propositions-3, from-2)
nmod:from(Immediate-1, Propositions-3)
nummod(Propositions-3, 22-4)
cc(Propositions-3, and-5)
nmod:from(Immediate-1, 23-6)
conj:and(Propositions-3, 23-6)
cc(Propositions-3, and-8)
nmod:from(Immediate-1, Theorem-9)
conj:and(Propositions-3, Theorem-9)
nummod(Theorem-9, 21-10)

(ROOT
  (S
    (PP
      (NP (NN Composition) (NNS operations))
      (IN In)
      (NP (DT this) (NN section)))
    (, ,)
    (NP (PRP we))
    (ADVP (RB further))
    (VP (VB investigate)
      (NP
        (NP (DT the) (NNS robustness))
        (PP (IN of)
          (NP (PRP$ our) (NN width) (NNS notions))))
      (PP (IN by)
        (S
          (VP (VBG considering)
            (NP (CD two) (JJ binary) (NN composition) (NNS operations))
            (PP (IN on)
              (NP (NNS instances)))))))
    (. .)))

compound(operations-2, Composition-1)
nmod:in(investigate-9, operations-2)
case(operations-2, In-3)
det(section-5, this-4)
dep(operations-2, section-5)
nsubj(investigate-9, we-7)
advmod(investigate-9, further-8)
root(ROOT-0, investigate-9)
det(robustness-11, the-10)
dobj(investigate-9, robustness-11)
case(notions-15, of-12)
nmod:poss(notions-15, our-13)
compound(notions-15, width-14)
nmod:of(robustness-11, notions-15)
mark(considering-17, by-16)
advcl(investigate-9, considering-17)
nummod(operations-21, two-18)
amod(operations-21, binary-19)
compound(operations-21, composition-20)
dobj(considering-17, operations-21)
case(instances-23, on-22)
nmod:on(considering-17, instances-23)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP give)
      (S
        (NP (NNS results))
        (VP (VBG showing)
          (SBAR (IN that)
            (S
              (NP (PRP$ our) (NN width) (NNS notions))
              (VP (VBP are)
                (VP (VBN closed)
                  (PP (IN under)
                    (NP (DT these) (NNS operations))))))))))
    (. .)))

nsubj(give-2, We-1)
root(ROOT-0, give-2)
nsubj(showing-4, results-3)
dep(give-2, showing-4)
mark(closed-10, that-5)
nmod:poss(notions-8, our-6)
compound(notions-8, width-7)
nsubjpass(closed-10, notions-8)
auxpass(closed-10, are-9)
ccomp(showing-4, closed-10)
case(operations-13, under-11)
det(operations-13, these-12)
nmod:under(closed-10, operations-13)

(ROOT
  (S
    (NP
      (NP (JJ Disjoint) (NN union))
      (NP (NNP Definition) (CD 25)))
    (VP (VBD Let)
      (NP
        (NP (NNP =))
        (PRN (-LRB- -LRB-)
          (NP (NNP V))
          (, ,)
          (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
          (-RRB- -RRB-))
        (CC and)
        (NP (NNP =)))
      (PRN (-LRB- -LRB-)
        (NP (NNP V))
        (, ,)
        (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
        (-RRB- -RRB-))
      (VP (VB be)
        (NP (NNS instances))))
    (. .)))

amod(union-2, Disjoint-1)
nsubj(Let-5, union-2)
dep(union-2, Definition-3)
nummod(Definition-3, 25-4)
root(ROOT-0, Let-5)
dobj(Let-5, =-6)
appos(=-6, V-8)
compound(A-14, init-10)
dep(A-14, goal-12)
dep(V-8, A-14)
cc(=-6, and-16)
dobj(Let-5, =-17)
conj:and(=-6, =-17)
dep(Let-5, V-19)
compound(A-25, init-21)
dep(A-25, goal-23)
dep(V-19, A-25)
cop(instances-28, be-27)
dep(Let-5, instances-28)

(ROOT
  (S
    (NP (DT The) (NN disjoint) (NN union))
    (VP (VBZ is)
      (VP (VBN defined)
        (S
          (VP (TO to)
            (VP (VB be)
              (NP
                (NP (DT the) (NN instance))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (NNP V) (NNP V))
                    (, ,)
                    (NP (JJ init) (NN init))
                    (, ,)
                    (NP (NN goal) (NN goal))
                    (, ,)
                    (NP (DT A) (NN A)))
                  (-RRB- -RRB-))))))))
    (. .)))

det(union-3, The-1)
compound(union-3, disjoint-2)
nsubjpass(defined-5, union-3)
nsubj:xsubj(instance-9, union-3)
auxpass(defined-5, is-4)
root(ROOT-0, defined-5)
mark(instance-9, to-6)
cop(instance-9, be-7)
det(instance-9, the-8)
xcomp(defined-5, instance-9)
compound(V-12, V-11)
dep(instance-9, V-12)
amod(init-15, init-14)
appos(V-12, init-15)
compound(goal-18, goal-17)
appos(V-12, goal-18)
det(A-21, A-20)
appos(V-12, A-21)

(ROOT
  (S
    (S
      (ADVP (RB Here))
      (, ,)
      (NP (PRP we))
      (VP (VBP assume)
        (SBAR (IN that)
          (S
            (NP (DT the) (NN variable))
            (VP (VBZ sets)
              (SBAR
                (S
                  (NP (NNP V)
                    (CC and)
                    (NNP V))
                  (VP (VBP are)
                    (ADJP (JJ disjoint))))))))))
    (: ;)
    (S
      (SBAR (IN if)
        (S
          (NP (PRP they))
          (VP (VBP are) (RB not))))
      (, ,)
      (NP (PRP we))
      (VP (VBP rename)
        (NP (PRP them))
        (ADVP (RB accordingly))))
    (. .)))

advmod(assume-4, Here-1)
nsubj(assume-4, we-3)
root(ROOT-0, assume-4)
mark(sets-8, that-5)
det(variable-7, the-6)
nsubj(sets-8, variable-7)
ccomp(assume-4, sets-8)
nsubj(disjoint-13, V-9)
cc(V-9, and-10)
conj:and(V-9, V-11)
nsubj(disjoint-13, V-11)
cop(disjoint-13, are-12)
ccomp(sets-8, disjoint-13)
mark(are-17, if-15)
nsubj(are-17, they-16)
advcl(rename-21, are-17)
neg(are-17, not-18)
nsubj(rename-21, we-20)
parataxis(assume-4, rename-21)
dobj(rename-21, them-22)
advmod(rename-21, accordingly-23)

(ROOT
  (S
    (VP (NN Note)
      (SBAR (IN that)
        (S (, ,)
          (PP (IN by)
            (NP
              (NP (DT the) (NN union))
              (PP (IN of)
                (NP
                  (NP (CD two) (JJ partial) (NNS states))
                  (NP (NN p) (NN p))))))
          (, ,)
          (NP (PRP we))
          (VP (VBP mean)
            (S
              (NP (DT the) (NN function))
              (VP
                (VP (VBN defined)
                  (PP (IN as)
                    (NP (NN p)))
                  (PP (IN on)
                    (NP
                      (NP (DT all) (NNS variables))
                      (PP (IN in)
                        (NP
                          (NP (NNS vars))
                          (PRN (-LRB- -LRB-)
                            (NP (NN p))
                            (-RRB- -RRB-)))))))
                (CC and)
                (VP
                  (ADJP (RB as) (JJ p))
                  (PP (IN on)
                    (NP
                      (NP (DT all) (NNS variables))
                      (PP (IN in)
                        (NP
                          (NP (NNS vars))
                          (PRN (-LRB- -LRB-)
                            (NP (NN p))
                            (-RRB- -RRB-)))))))))))))
    (. .)))

root(ROOT-0, Note-1)
mark(mean-15, that-2)
case(union-6, by-4)
det(union-6, the-5)
nmod:by(mean-15, union-6)
case(states-10, of-7)
nummod(states-10, two-8)
amod(states-10, partial-9)
nmod:of(union-6, states-10)
compound(p-12, p-11)
dep(states-10, p-12)
nsubj(mean-15, we-14)
ccomp(Note-1, mean-15)
det(function-17, the-16)
nsubj(defined-18, function-17)
nsubj(p-31, function-17)
ccomp(mean-15, defined-18)
case(p-20, as-19)
nmod:as(defined-18, p-20)
case(variables-23, on-21)
det(variables-23, all-22)
nmod:on(defined-18, variables-23)
case(vars-25, in-24)
nmod:in(variables-23, vars-25)
appos(vars-25, p-27)
cc(defined-18, and-29)
advmod(p-31, as-30)
ccomp(mean-15, p-31)
conj:and(defined-18, p-31)
case(variables-34, on-32)
det(variables-34, all-33)
nmod:on(p-31, variables-34)
case(vars-36, in-35)
nmod:in(variables-34, vars-36)
appos(vars-36, p-38)

(ROOT
  (S
    (VP (NN Note)
      (ADVP (RB also))
      (SBAR (IN that)
        (S
          (NP (DT this) (NN notation))
          (VP (VBZ is)
            (VP (VBN used)
              (ADVP (RB only))
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP
                    (NP
                      (NP (NNS vars))
                      (PRN (-LRB- -LRB-)
                        (NP (NN p))
                        (-RRB- -RRB-)))
                    (CC and)
                    (NP
                      (NP (NNS vars))
                      (PRN (-LRB- -LRB-)
                        (NP (NN p))
                        (-RRB- -RRB-))))
                  (VP (VBP are)
                    (ADJP (JJ disjoint))))))))))
    (. .)))

root(ROOT-0, Note-1)
advmod(Note-1, also-2)
mark(used-7, that-3)
det(notation-5, this-4)
nsubjpass(used-7, notation-5)
auxpass(used-7, is-6)
ccomp(Note-1, used-7)
advmod(used-7, only-8)
advmod(disjoint-20, when-9)
nsubj(disjoint-20, vars-10)
appos(vars-10, p-12)
cc(vars-10, and-14)
conj:and(vars-10, vars-15)
nsubj(disjoint-20, vars-15)
appos(vars-15, p-17)
cop(disjoint-20, are-19)
advcl(used-7, disjoint-20)

(ROOT
  (S
    (NP (NNP Theorem) (CD 26))
    (VP (VBD Let)
      (NP
        (NP (NNP =))
        (PRN (-LRB- -LRB-)
          (NP (NNP V))
          (, ,)
          (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
          (-RRB- -RRB-))
        (CC and)
        (NP (NNP =)))
      (PRN (-LRB- -LRB-)
        (NP (NNP V))
        (, ,)
        (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
        (-RRB- -RRB-))
      (VP (VB be)
        (NP
          (NP (NNS instances))
          (VP (VBG having)
            (NP
              (NP (NN width) (NN k))
              (PRN (-LRB- -LRB-)
                (ADVP (RB respectively))
                (, ,)
                (NP
                  (NP (NNP P) (NNP width))
                  (NP (NN k)))
                (, ,)
                (NP
                  (NP (NNP H) (NNP width) (NNP k))
                  (, ,)
                  (NP (NNP PH) (NNP width) (NNP k)))
                (-RRB- -RRB-)))))))
    (. .)))

nsubj(Let-3, Theorem-1)
nummod(Theorem-1, 26-2)
root(ROOT-0, Let-3)
dobj(Let-3, =-4)
appos(=-4, V-6)
compound(A-12, init-8)
dep(A-12, goal-10)
dep(V-6, A-12)
cc(=-4, and-14)
dobj(Let-3, =-15)
conj:and(=-4, =-15)
dep(Let-3, V-17)
compound(A-23, init-19)
dep(A-23, goal-21)
dep(V-17, A-23)
cop(instances-26, be-25)
dep(Let-3, instances-26)
acl(instances-26, having-27)
compound(k-29, width-28)
dobj(having-27, k-29)
dep(width-34, respectively-31)
compound(width-34, P-33)
dep(k-29, width-34)
dep(width-34, k-35)
compound(k-39, H-37)
compound(k-39, width-38)
dep(width-34, k-39)
compound(k-43, PH-41)
compound(k-43, width-42)
appos(k-39, k-43)

(ROOT
  (S
    (NP (DT The) (NN instance) (NN 79))
    (VP (VBZ has)
      (NP (NN width) (NN k))
      (PRN (-LRB- -LRB-)
        (FRAG
          (ADVP (RB respectively))
          (, ,)
          (NP
            (NP (NNP P) (NNP width))
            (NP (NN k)))
          (, ,)
          (NP
            (NP (NNP H) (NNP width))
            (NP (NN k)))
          (, ,)
          (ADVP (RB PH))
          (NP (NN width) (NN k)))
        (-RRB- -RRB-)))
    (. .)))

det(79-3, The-1)
compound(79-3, instance-2)
nsubj(has-4, 79-3)
root(ROOT-0, has-4)
compound(k-6, width-5)
dobj(has-4, k-6)
dep(width-11, respectively-8)
compound(width-11, P-10)
dep(has-4, width-11)
dep(width-11, k-12)
compound(width-15, H-14)
appos(width-11, width-15)
dep(width-15, k-16)
dep(width-11, PH-18)
compound(k-20, width-19)
dep(width-11, k-20)

(ROOT
  (NP (NN Proof) (. .)))

root(ROOT-0, Proof-1)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP prove)
      (NP
        (NP (DT the) (NN theorem))
        (PP (IN for)
          (NP (JJ persistent) (NN width) (NN k)))))
    (. .)))

nsubj(prove-2, We-1)
root(ROOT-0, prove-2)
det(theorem-4, the-3)
dobj(prove-2, theorem-4)
case(k-8, for-5)
amod(k-8, persistent-6)
compound(k-8, width-7)
nmod:for(theorem-4, k-8)

(ROOT
  (S
    (NP
      (NP (DT The) (NN proof))
      (PP (IN for)
        (NP (DT the) (JJ other) (NN width) (NNS notions))))
    (VP (VBZ is)
      (ADJP (JJ similar)))
    (. .)))

det(proof-2, The-1)
nsubj(similar-9, proof-2)
case(notions-7, for-3)
det(notions-7, the-4)
amod(notions-7, other-5)
compound(notions-7, width-6)
nmod:for(proof-2, notions-7)
cop(similar-9, is-8)
root(ROOT-0, similar-9)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (PRP s))
        (VP (VB be)
          (NP
            (NP (DT a) (JJ reachable) (NN state))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBZ is) (RB not)
                  (NP
                    (NP (DT a) (NN goal) (NN state))
                    (PRN (, ,)
                      (ADVP (RB in))
                      (NP (NNP -LRB-))
                      (-RRB- -RRB-))))))))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(state-6, s-2)
cop(state-6, be-3)
det(state-6, a-4)
amod(state-6, reachable-5)
ccomp(Let-1, state-6)
nsubj(state-12, state-6)
ref(state-6, that-7)
cop(state-12, is-8)
neg(state-12, not-9)
det(state-12, a-10)
compound(state-12, goal-11)
acl:relcl(state-6, state-12)
dep(-LRB--15, in-14)
dep(state-12, -LRB--15)

(ROOT
  (S (RB Then)
    (NP
      (NP (DT either))
      (PRN (-LRB- -LRB-)
        (S
          (NP (PRP s))
          (VP (VBZ vars)
            (PRN (-LRB- -LRB-)
              (NP (NN goal))
              (-RRB- -RRB-))))
        (-RRB- -RRB-)))
    (VP (VBZ =)
      (NP
        (NP (NN goal))
        (CC or)
        (PRN (-LRB- -LRB-)
          (S
            (NP (PRP s))
            (NP
              (NP (NNS vars))
              (PRN (-LRB- -LRB-)
                (NP (NN goal))
                (-RRB- -RRB-))))
          (-RRB- -RRB-))
        (NP (JJ =) (NN goal))))
    (. .)))

advmod(=-10, Then-1)
nsubj(=-10, either-2)
nsubj(vars-5, s-4)
dep(either-2, vars-5)
dep(vars-5, goal-7)
root(ROOT-0, =-10)
dobj(=-10, goal-11)
cc(goal-11, or-12)
dep(vars-15, s-14)
dep(goal-11, vars-15)
appos(vars-15, goal-17)
amod(goal-21, =-20)
dobj(=-10, goal-21)
conj:or(goal-11, goal-21)

(ROOT
  (S
    (SBAR (IN If)
      (S (-LRB- -LRB-)
        (NP
          (NP (JJ s) (NNS vars))
          (PRN (-LRB- -LRB-)
            (NP (NN goal))
            (-RRB- -RRB-)))
        (-RRB- -RRB-)
        (VP (VBZ =)
          (NP (NN goal)))))
    (, ,)
    (NP
      (NP (RB then))
      (PP (IN in)
        (NP
          (NP (DT the) (NN state))
          (PRN (-LRB- -LRB-)
            (NP (NNP s) (NNP V))
            (-RRB- -RRB-)))))
    (VP (VBZ is)
      (NP
        (NP (NN reachable))
        (CONJP (CC but)
          (RB not))
        (NP (DT a) (NN goal) (NN state))))
    (. .)))

mark(=-9, If-1)
amod(vars-4, s-3)
nsubj(=-9, vars-4)
appos(vars-4, goal-6)
advcl(reachable-21, =-9)
dobj(=-9, goal-10)
nsubj(reachable-21, then-12)
case(state-15, in-13)
det(state-15, the-14)
nmod:in(then-12, state-15)
compound(V-18, s-17)
appos(state-15, V-18)
cop(reachable-21, is-20)
root(ROOT-0, reachable-21)
cc(not-23, but-22)
cc(reachable-21, not-23)
det(state-26, a-24)
compound(state-26, goal-25)
conj:negcc(reachable-21, state-26)

(ROOT
  (S
    (PP (IN By)
      (NP
        (NP (DT the) (NN assumption))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ has)
              (NP (JJ persistent) (NN width) (NN k)))))))
    (, ,)
    (NP (EX there))
    (VP (VBZ exists)
      (NP
        (NP
          (NP (DT a) (JJ variable) (NN u))
          (ADJP (JJ wrong)))
        (PRN (-LRB- -LRB-)
          (NP (NNP s) (NNP V))
          (-RRB- -RRB-))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ is)
              (NP
                (NP
                  (NP (NN k))
                  (: -)
                  (ADJP (JJ improvable)
                    (PP (IN in))))
                (PRN (-LRB- -LRB-)
                  (NP (NNP s) (NNP V))
                  (-RRB- -RRB-))))))))
    (. .)))

case(assumption-3, By-1)
det(assumption-3, the-2)
nsubj(has-5, assumption-3)
nmod:by(exists-11, assumption-3)
ref(assumption-3, that-4)
acl:relcl(assumption-3, has-5)
amod(k-8, persistent-6)
compound(k-8, width-7)
dobj(has-5, k-8)
expl(exists-11, there-10)
root(ROOT-0, exists-11)
det(u-14, a-12)
amod(u-14, variable-13)
dobj(exists-11, u-14)
nsubj(k-22, u-14)
amod(u-14, wrong-15)
compound(V-18, s-17)
appos(u-14, V-18)
ref(u-14, that-20)
cop(k-22, is-21)
acl:relcl(u-14, k-22)
amod(k-22, improvable-24)
nmod(improvable-24, in-25)
compound(V-28, s-27)
appos(k-22, V-28)

(ROOT
  (S
    (NP
      (NP (DT The) (NN plan) (NN P))
      (VP (VBG performing)
        (NP (DT this) (NN k) (NN improvement))))
    (ADVP (RB also))
    (VP
      (VP (VBZ k))
      (: -)
      (VP (VBZ improves)
        (NP (DT the) (JJ variable) (NN u))
        (PP (IN in)
          (NP (NN state) (NNS s))))
      (, ,)
      (PP (IN in)
        (NP (DT the) (NN instance))))
    (. .)))

det(P-3, The-1)
compound(P-3, plan-2)
nsubj(k-9, P-3)
acl(P-3, performing-4)
det(improvement-7, this-5)
compound(improvement-7, k-6)
dobj(performing-4, improvement-7)
advmod(k-9, also-8)
root(ROOT-0, k-9)
dep(k-9, improves-11)
det(u-14, the-12)
amod(u-14, variable-13)
dobj(improves-11, u-14)
case(s-17, in-15)
compound(s-17, state-16)
nmod:in(improves-11, s-17)
case(instance-21, in-19)
det(instance-21, the-20)
nmod:in(k-9, instance-21)

(ROOT
  (S
    (PP (IN In)
      (NP
        (NP (DT the) (NN case))
        (SBAR (IN that)
          (S (-LRB- -LRB-)
            (NP
              (NP (JJ s) (NNS vars))
              (PRN (-LRB- -LRB-)
                (NP (NN goal))
                (-RRB- -RRB-)))
            (-RRB- -RRB-)
            (VP (VBZ =)
              (NP (NN goal)))))))
    (, ,)
    (NP (DT the) (NN proof))
    (VP (VBZ is)
      (ADJP (JJ similar)))
    (. .)))

case(case-3, In-1)
det(case-3, the-2)
nmod:in(similar-18, case-3)
mark(=-12, that-4)
amod(vars-7, s-6)
nsubj(=-12, vars-7)
appos(vars-7, goal-9)
dep(case-3, =-12)
dobj(=-12, goal-13)
det(proof-16, the-15)
nsubj(similar-18, proof-16)
cop(similar-18, is-17)
root(ROOT-0, similar-18)

(ROOT
  (S
    (S
      (VP (VBG Sequencing)
        (NP (NNP Definition) (CD 27))))
    (VP (VBD Let)
      (NP
        (NP (NNP =))
        (PRN (-LRB- -LRB-)
          (NP (NNP V))
          (, ,)
          (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
          (-RRB- -RRB-))
        (CC and)
        (NP (NNP =)))
      (PRN (-LRB- -LRB-)
        (NP (NNP V))
        (, ,)
        (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
        (-RRB- -RRB-))
      (VP (VB be)
        (NP (NNS instances))))
    (. .)))

csubj(Let-4, Sequencing-1)
dobj(Sequencing-1, Definition-2)
nummod(Definition-2, 27-3)
root(ROOT-0, Let-4)
dobj(Let-4, =-5)
appos(=-5, V-7)
compound(A-13, init-9)
dep(A-13, goal-11)
dep(V-7, A-13)
cc(=-5, and-15)
dobj(Let-4, =-16)
conj:and(=-5, =-16)
dep(Let-4, V-18)
compound(A-24, init-20)
dep(A-24, goal-22)
dep(V-18, A-24)
cop(instances-27, be-26)
dep(Let-4, instances-27)

(ROOT
  (S
    (VP (VB Define)
      (S
        (NP (NNP Agoal))
        (VP (TO to)
          (VP (VB contain)
            (NP
              (NP (DT an) (NN action) (NN agoal))
              (PP (IN for)
                (NP
                  (NP
                    (NP (DT every) (NN action))
                    (NP
                      (NP
                        (NP (DT a)
                          (NP (DT A)
                            (NP
                              (NP (PDT such) (DT that) (NN pre))
                              (PRN (-LRB- -LRB-)
                                (ADJP (JJ agoal))
                                (-RRB- -RRB-)))
                            (NN =))
                          (NN pre))
                        (PRN (-LRB- -LRB-)
                          (X (SYM a))
                          (-RRB- -RRB-)))
                      (SBAR
                        (WHNP
                          (NP (NN goal)
                            (CC and)
                            (NN post))
                          (PRN (-LRB- -LRB-)
                            (ADJP (JJ agoal))
                            (-RRB- -RRB-)))
                        (S
                          (VP (SYM =)
                            (NP (NN post)))))))
                  (PRN (-LRB- -LRB-)
                    (X (SYM a))
                    (-RRB- -RRB-)))))))))
    (. .)))

root(ROOT-0, Define-1)
dobj(Define-1, Agoal-2)
nsubj:xsubj(contain-4, Agoal-2)
mark(contain-4, to-3)
xcomp(Define-1, contain-4)
det(agoal-7, an-5)
compound(agoal-7, action-6)
dobj(contain-4, agoal-7)
case(action-10, for-8)
det(action-10, every-9)
nmod:for(agoal-7, action-10)
det(pre-20, a-11)
det(=-19, A-12)
det:predet(pre-15, such-13)
det(pre-15, that-14)
compound(=-19, pre-15)
dep(pre-15, agoal-17)
compound(pre-20, =-19)
dep(action-10, pre-20)
dep(pre-20, a-22)
nsubj(post-31, goal-24)
cc(goal-24, and-25)
conj:and(goal-24, post-26)
nsubj(post-31, post-26)
dep(goal-24, agoal-28)
dep(post-31, =-30)
acl:relcl(pre-20, post-31)
dep(action-10, a-33)

(ROOT
  (S
    (NP (DT The) (NN sequence))
    (VP (VBZ is)
      (VP (VBN defined)
        (S
          (VP (TO to)
            (VP (VB be)
              (NP
                (NP (DT the) (NN instance))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (NNP V) (NNP V))
                    (, ,)
                    (NP (JJ init) (NN init))
                    (, ,)
                    (NP (NN goal) (NN goal))
                    (, ,)
                    (NP (DT A) (NN Agoal)))
                  (-RRB- -RRB-))))))))
    (. .)))

det(sequence-2, The-1)
nsubjpass(defined-4, sequence-2)
nsubj:xsubj(instance-8, sequence-2)
auxpass(defined-4, is-3)
root(ROOT-0, defined-4)
mark(instance-8, to-5)
cop(instance-8, be-6)
det(instance-8, the-7)
xcomp(defined-4, instance-8)
compound(V-11, V-10)
dep(instance-8, V-11)
amod(init-14, init-13)
appos(V-11, init-14)
compound(goal-17, goal-16)
appos(V-11, goal-17)
det(Agoal-20, A-19)
appos(V-11, Agoal-20)

(ROOT
  (S
    (S
      (ADVP (RB Here))
      (, ,)
      (NP (PRP we))
      (VP (VBP assume)
        (SBAR (IN that)
          (S
            (NP (DT the) (NN variable))
            (VP (VBZ sets)
              (SBAR
                (S
                  (NP (NNP V)
                    (CC and)
                    (NNP V))
                  (VP (VBP are)
                    (ADJP (JJ disjoint))))))))))
    (: ;)
    (S
      (SBAR (IN if)
        (S
          (NP (PRP they))
          (VP (VBP are) (RB not))))
      (, ,)
      (NP (PRP we))
      (VP (VBP rename)
        (NP (PRP them))
        (ADVP (RB accordingly))))
    (. .)))

advmod(assume-4, Here-1)
nsubj(assume-4, we-3)
root(ROOT-0, assume-4)
mark(sets-8, that-5)
det(variable-7, the-6)
nsubj(sets-8, variable-7)
ccomp(assume-4, sets-8)
nsubj(disjoint-13, V-9)
cc(V-9, and-10)
conj:and(V-9, V-11)
nsubj(disjoint-13, V-11)
cop(disjoint-13, are-12)
ccomp(sets-8, disjoint-13)
mark(are-17, if-15)
nsubj(are-17, they-16)
advcl(rename-21, are-17)
neg(are-17, not-18)
nsubj(rename-21, we-20)
parataxis(assume-4, rename-21)
dobj(rename-21, them-22)
advmod(rename-21, accordingly-23)

(ROOT
  (S
    (NP (NNP Theorem) (CD 28))
    (VP (VBD Let)
      (NP
        (NP (NNP =))
        (PRN (-LRB- -LRB-)
          (NP (NNP V))
          (, ,)
          (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
          (-RRB- -RRB-))
        (CC and)
        (NP (NNP =)))
      (PRN (-LRB- -LRB-)
        (NP (NNP V))
        (, ,)
        (NP (NN init) (, ,) (NN goal) (, ,) (NN A))
        (-RRB- -RRB-))
      (VP (VB be)
        (NP
          (NP (NNS instances))
          (VP (VBG having)
            (NP
              (NP (NNP P) (NNP width) (NNP k))
              (PRN (-LRB- -LRB-)
                (ADVP (RB respectively))
                (, ,)
                (NP (NNP PH) (NNP width) (NNP k))
                (-RRB- -RRB-)))))))
    (. .)))

nsubj(Let-3, Theorem-1)
nummod(Theorem-1, 28-2)
root(ROOT-0, Let-3)
dobj(Let-3, =-4)
appos(=-4, V-6)
compound(A-12, init-8)
dep(A-12, goal-10)
dep(V-6, A-12)
cc(=-4, and-14)
dobj(Let-3, =-15)
conj:and(=-4, =-15)
dep(Let-3, V-17)
compound(A-23, init-19)
dep(A-23, goal-21)
dep(V-17, A-23)
cop(instances-26, be-25)
dep(Let-3, instances-26)
acl(instances-26, having-27)
compound(k-30, P-28)
compound(k-30, width-29)
dobj(having-27, k-30)
dep(k-36, respectively-32)
compound(k-36, PH-34)
compound(k-36, width-35)
appos(k-30, k-36)

(ROOT
  (S
    (NP (DT The) (NN instance))
    (VP (VBZ has)
      (NP
        (NP (NNP P) (NNP width) (NNP k))
        (PRN (-LRB- -LRB-)
          (ADVP (RB respectively))
          (, ,)
          (NP (NNP PH) (NNP width) (NNP k))
          (-RRB- -RRB-))))
    (. .)))

det(instance-2, The-1)
nsubj(has-3, instance-2)
root(ROOT-0, has-3)
compound(k-6, P-4)
compound(k-6, width-5)
dobj(has-3, k-6)
dep(k-12, respectively-8)
compound(k-12, PH-10)
compound(k-12, width-11)
appos(k-6, k-12)

(ROOT
  (NP (NN Proof) (. .)))

root(ROOT-0, Proof-1)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP prove)
        (NP
          (NP (DT the) (NN theorem))
          (PP (IN for)
            (NP (NNP P) (NN width) (NN k))))))
    (: ;)
    (S
      (NP
        (NP (DT the) (NN case))
        (PP (IN of)
          (NP (NNP PH) (NN width) (NN k))))
      (VP (VBZ is)
        (ADJP (JJ similar))))
    (. .)))

nsubj(prove-2, We-1)
root(ROOT-0, prove-2)
det(theorem-4, the-3)
dobj(prove-2, theorem-4)
case(k-8, for-5)
compound(k-8, P-6)
compound(k-8, width-7)
nmod:for(theorem-4, k-8)
det(case-11, the-10)
nsubj(similar-17, case-11)
case(k-15, of-12)
compound(k-15, PH-13)
compound(k-15, width-14)
nmod:of(case-11, k-15)
cop(similar-17, is-16)
parataxis(prove-2, similar-17)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (PRP s))
        (VP (VB be)
          (NP
            (NP (DT a) (JJ reachable) (NN state))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBZ is) (RB not)
                  (NP (DT a) (NN goal) (NN state)))))))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(state-6, s-2)
cop(state-6, be-3)
det(state-6, a-4)
amod(state-6, reachable-5)
ccomp(Let-1, state-6)
nsubj(state-12, state-6)
ref(state-6, that-7)
cop(state-12, is-8)
neg(state-12, not-9)
det(state-12, a-10)
compound(state-12, goal-11)
acl:relcl(state-6, state-12)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP consider)
      (NP (CD two) (NNS cases)))
    (. .)))

nsubj(consider-2, We-1)
root(ROOT-0, consider-2)
nummod(cases-4, two-3)
dobj(consider-2, cases-4)

(ROOT
  (S
    (NP (DT The) (JJ first) (NN case))
    (VP (VBZ is)
      (SBAR
        (WHADVP (WRB when))
        (S (-LRB- -LRB-)
          (NP
            (NP (JJ s) (NNS vars))
            (PRN (-LRB- -LRB-)
              (NP (NN goal))
              (-RRB- -RRB-)))
          (-RRB- -RRB-)
          (VP (VBZ =)
            (NP (NN goal))))))
    (. .)))

det(case-3, The-1)
amod(case-3, first-2)
nsubj(is-4, case-3)
root(ROOT-0, is-4)
advmod(=-13, when-5)
amod(vars-8, s-7)
nsubj(=-13, vars-8)
appos(vars-8, goal-10)
advcl(is-4, =-13)
dobj(=-13, goal-14)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN case)))
    (, ,)
    (NP
      (PRN (-LRB- -LRB-)
        (NP (NNP s) (NNP V))
        (-RRB- -RRB-)))
    (VP (VBZ is) (, ,)
      (PP (IN in))
      (, ,)
      (NP
        (NP (DT a) (JJ reachable) (NN state))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ is) (RB not)
              (NP (DT a) (NN goal) (NN state)))))))
    (. .)))

case(case-3, In-1)
det(case-3, this-2)
nmod:in(state-15, case-3)
compound(V-7, s-6)
nsubj(state-15, V-7)
cop(state-15, is-9)
case(case-3, in-11)
det(state-15, a-13)
amod(state-15, reachable-14)
root(ROOT-0, state-15)
nsubj(state-21, state-15)
ref(state-15, that-16)
cop(state-21, is-17)
neg(state-21, not-18)
det(state-21, a-19)
compound(state-21, goal-20)
acl:relcl(state-15, state-21)

(ROOT
  (S
    (SBAR (IN Since)
      (S
        (VP (VBZ has)
          (NP (NNP P) (NN width) (NN k)))))
    (, ,)
    (NP (EX there))
    (VP (VBZ exists)
      (NP
        (NP (DT a) (JJ variable) (NN u) (NN V))
        (SBAR
          (WHADVP (WRB where))
          (S
            (NP
              (NP (NN goal))
              (CC and)
              (NP (PRP s)))
            (VP (VBP differ)
              (SBAR
                (S
                  (NP (DT that))
                  (, ,)
                  (ADVP (RB in))
                  (, ,)
                  (VP (MD can)
                    (VP (VB be)
                      (ADJP
                        (ADJP (JJ k))
                        (: -)
                        (ADJP (VBD improved)
                          (PP (IN in)
                            (NP
                              (NP (NN state))
                              (VP (VBZ s)))))))))))))))
    (. .)))

mark(has-2, Since-1)
advcl(exists-8, has-2)
compound(k-5, P-3)
compound(k-5, width-4)
dobj(has-2, k-5)
expl(exists-8, there-7)
root(ROOT-0, exists-8)
det(V-12, a-9)
amod(V-12, variable-10)
compound(V-12, u-11)
dobj(exists-8, V-12)
nsubj(k-24, V-12)
advmod(differ-17, where-13)
nsubj(differ-17, goal-14)
cc(goal-14, and-15)
conj:and(goal-14, s-16)
nsubj(differ-17, s-16)
acl:relcl(V-12, differ-17)
ref(V-12, that-18)
advmod(k-24, in-20)
aux(k-24, can-22)
cop(k-24, be-23)
ccomp(differ-17, k-24)
dep(k-24, improved-26)
case(state-28, in-27)
nmod:in(improved-26, state-28)
dep(state-28, s-29)

(ROOT
  (S
    (NP
      (NP (DT A) (NN plan) (NN k))
      (: -)
      (NP
        (NP (VBG improving) (NN u))
        (PP (IN in)
          (NP (PRP s)))
        (PP (IN with)
          (NP (NN respect)))
        (PP (TO to)
          (NP (DT the) (NN instance)))))
    (ADVP (RB also))
    (VP (VBZ performs)
      (NP
        (NP (DT the) (NN k) (NN improvement))
        (PP (IN in)
          (NP (DT the) (NN instance)))))
    (. .)))

det(k-3, A-1)
compound(k-3, plan-2)
nsubj(performs-15, k-3)
amod(u-6, improving-5)
dep(k-3, u-6)
case(s-8, in-7)
nmod:in(u-6, s-8)
case(respect-10, with-9)
nmod:with(u-6, respect-10)
case(instance-13, to-11)
det(instance-13, the-12)
nmod:to(u-6, instance-13)
advmod(performs-15, also-14)
root(ROOT-0, performs-15)
det(improvement-18, the-16)
compound(improvement-18, k-17)
dobj(performs-15, improvement-18)
case(instance-21, in-19)
det(instance-21, the-20)
nmod:in(improvement-18, instance-21)

(ROOT
  (S
    (PP (IN In)
      (NP (DT the) (JJ second) (NN case)))
    (, ,)
    (SBAR
      (WHADVP (WRB where))
      (S (-LRB- -LRB-)
        (NP
          (NP (JJ s) (NNS vars))
          (PRN (-LRB- -LRB-)
            (NP (NN goal))
            (-RRB- -RRB-)))
        (-RRB- -RRB-)
        (VP (VBD =)
          (NP (NN goal))
          (, ,)
          (SBAR (IN since)
            (S
              (NP (PRP s))
              (VP (VBZ is)
                (PP (IN by)
                  (NP (NN assumption)))
                (PP (RB not)
                  (NP (DT a) (NN goal) (NN state)))))))))
    (, ,)
    (NP (PRP we))
    (VP (VBP have)
      (S
        (NP
          (PRN (-LRB- -LRB-)
            (S
              (NP (PRP s))
              (NP
                (NP (NNS vars))
                (PRN (-LRB- -LRB-)
                  (NP (NN goal))
                  (-RRB- -RRB-))))
            (-RRB- -RRB-)))
        (VP (SYM =)
          (NP (NN goal)))))
    (. .)))

case(case-4, In-1)
det(case-4, the-2)
amod(case-4, second-3)
nmod:in(have-28, case-4)
advmod(=-14, where-6)
amod(vars-9, s-8)
nsubj(=-14, vars-9)
appos(vars-9, goal-11)
advcl(have-28, =-14)
dobj(=-14, goal-15)
mark(assumption-21, since-17)
nsubj(assumption-21, s-18)
cop(assumption-21, is-19)
case(assumption-21, by-20)
advcl(=-14, assumption-21)
neg(state-25, not-22)
det(state-25, a-23)
compound(state-25, goal-24)
nmod(assumption-21, state-25)
nsubj(have-28, we-27)
root(ROOT-0, have-28)
dep(vars-31, s-30)
nsubj(goal-37, vars-31)
appos(vars-31, goal-33)
dep(goal-37, =-36)
ccomp(have-28, goal-37)

(ROOT
  (S
    (ADVP (RB Then))
    (, ,)
    (NP
      (PRN (-LRB- -LRB-)
        (NP (NNP s) (NNP V))
        (-RRB- -RRB-)))
    (VP (VBZ is) (, ,)
      (PP (IN in))
      (, ,)
      (NP
        (NP (DT a) (JJ reachable) (NN state))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ is) (RB not)
              (NP (DT a) (NN goal) (NN state)))))))
    (. .)))

advmod(state-13, Then-1)
compound(V-5, s-4)
nsubj(state-13, V-5)
cop(state-13, is-7)
nmod(state-13, in-9)
det(state-13, a-11)
amod(state-13, reachable-12)
root(ROOT-0, state-13)
nsubj(state-19, state-13)
ref(state-13, that-14)
cop(state-19, is-15)
neg(state-19, not-16)
det(state-19, a-17)
compound(state-19, goal-18)
acl:relcl(state-13, state-19)

(ROOT
  (S
    (SBAR (IN Since)
      (S
        (VP (VBZ has)
          (NP (NNP P) (NN width) (NN k))
          (PRN (, ,)
            (S
              (NP (EX there))
              (VP (VBZ exists)
                (NP
                  (NP (DT a) (JJ variable) (NN u) (NN V))
                  (SBAR
                    (WHADVP (WRB where))
                    (S
                      (NP
                        (NP (NN goal))
                        (CC and)
                        (NP (PRP s)))
                      (VP (VBP differ)
                        (SBAR
                          (S
                            (NP (DT that))
                            (, ,)
                            (ADVP (RB in))
                            (, ,)
                            (VP (MD can)
                              (VP (VB be)
                                (ADJP
                                  (ADJP (JJ k))
                                  (: -)
                                  (ADJP (VBD improved)
                                    (PP (IN in)
                                      (NP
                                        (NP (NN state))
                                        (VP (VBN s.)
                                          (S
                                            (VP (NNP Let)
                                              (S
                                                (NP (NNP P))
                                                (VP (SYM =)
                                                  (NP (NNS a1)))))))))))))))))))))
            (, ,)))
        (: ...)))
    (, ,)
    (NP (DT an))
    (VP (VB be)
      (NP
        (NP
          (NP (DT a) (NN plan))
          (NP (DT that) (NN k)))
        (: -)
        (NP
          (NP (JJ improves) (NN u))
          (PP (IN in)
            (NP (PRP s)))))
      (PP (IN with)
        (NP
          (NP (NN respect))
          (PP (TO to)
            (NP (DT the) (NN instance))))))
    (. .)))

mark(has-2, Since-1)
advcl(be-38, has-2)
compound(k-5, P-3)
compound(k-5, width-4)
dobj(has-2, k-5)
expl(exists-8, there-7)
parataxis(has-2, exists-8)
det(V-12, a-9)
amod(V-12, variable-10)
compound(V-12, u-11)
dobj(exists-8, V-12)
nsubj(k-24, V-12)
advmod(differ-17, where-13)
nsubj(differ-17, goal-14)
cc(goal-14, and-15)
conj:and(goal-14, s-16)
nsubj(differ-17, s-16)
acl:relcl(V-12, differ-17)
ref(V-12, that-18)
advmod(k-24, in-20)
aux(k-24, can-22)
cop(k-24, be-23)
ccomp(differ-17, k-24)
dep(k-24, improved-26)
case(state-28, in-27)
nmod:in(improved-26, state-28)
acl(state-28, s.-29)
ccomp(s.-29, Let-30)
nsubj(a1-33, P-31)
dep(a1-33, =-32)
ccomp(Let-30, a1-33)
nsubj(be-38, an-37)
root(ROOT-0, be-38)
det(plan-40, a-39)
dep(be-38, plan-40)
det(k-42, that-41)
dep(plan-40, k-42)
amod(u-45, improves-44)
dep(plan-40, u-45)
case(s-47, in-46)
nmod:in(u-45, s-47)
case(instance-52, with-48)
mwe(with-48, respect-49)
mwe(with-48, to-50)
det(instance-52, the-51)
nmod:with_respect_to(be-38, instance-52)

(ROOT
  (S
    (ADVP (RB Then))
    (, ,)
    (NP
      (NP
        (NP (DT the) (NN plan))
        (NP (NNP Pgoal) (NNP =) (NNP a1goal) (, ,)))
      (: ...)
      (NP (, ,) (JJ angoal) (NN k))
      (: -))
    (VP (VBZ improves)
      (NP
        (NP (NN u))
        (PP (IN in)
          (NP (PRP s))))
      (PP (IN in)
        (NP (DT the) (NN instance))))
    (. .)))

advmod(improves-14, Then-1)
det(plan-4, the-3)
nsubj(improves-14, plan-4)
compound(a1goal-7, Pgoal-5)
compound(a1goal-7, =-6)
dep(plan-4, a1goal-7)
amod(k-12, angoal-11)
dep(plan-4, k-12)
root(ROOT-0, improves-14)
dobj(improves-14, u-15)
case(s-17, in-16)
nmod:in(u-15, s-17)
case(instance-20, in-18)
det(instance-20, the-19)
nmod:in(improves-14, instance-20)

(ROOT
  (S
    (VP (NN Note)
      (SBAR (IN that)
        (S
          (PP (IN in)
            (NP (NN state) (NNS s)))
          (NP (PRP it))
          (VP (VBZ holds)
            (SBAR
              (SBAR (IN that)
                (S (-LRB- -LRB-)
                  (NP
                    (NP (JJ s) (NNS vars))
                    (PRN (-LRB- -LRB-)
                      (NP (NN goal))
                      (-RRB- -RRB-)))
                  (-RRB- -RRB-)
                  (VP (VBZ =)
                    (NP (NN goal)))))
              (, ,)
              (CC and)
              (ADVP (RB moreover))
              (SBAR (IN that)
                (S
                  (NP (DT this) (NN property))
                  (VP (VBZ is)
                    (VP (VBN preserved)
                      (PP (IN by)
                        (NP
                          (NP (DT the) (NN application))
                          (PP (IN of)
                            (NP
                              (NP (NNS actions))
                              (PP (IN in)
                                (NP (NNP Agoal))))))))))))))))
    (. .)))

root(ROOT-0, Note-1)
mark(holds-7, that-2)
case(s-5, in-3)
compound(s-5, state-4)
nmod:in(holds-7, s-5)
nsubj(holds-7, it-6)
ccomp(Note-1, holds-7)
mark(=-16, that-8)
amod(vars-11, s-10)
nsubj(=-16, vars-11)
appos(vars-11, goal-13)
ccomp(holds-7, =-16)
dobj(=-16, goal-17)
cc(=-16, and-19)
advmod(preserved-25, moreover-20)
mark(preserved-25, that-21)
det(property-23, this-22)
nsubjpass(preserved-25, property-23)
auxpass(preserved-25, is-24)
ccomp(holds-7, preserved-25)
conj:and(=-16, preserved-25)
case(application-28, by-26)
det(application-28, the-27)
nmod:agent(preserved-25, application-28)
case(actions-30, of-29)
nmod:of(application-28, actions-30)
case(Agoal-32, in-31)
nmod:in(actions-30, Agoal-32)

(ROOT
  (S
    (ADVP (RB Thus))
    (, ,)
    (PP (IN during)
      (NP
        (NP (DT the) (NN execution))
        (PP (IN of)
          (NP (NNP Pgoal)))))
    (NP
      (NP (DT the) (`` ``) (JJ added) (NN precondition) ('' '') (NN goal))
      (PP (IN in)
        (NP
          (NP (DT the) (NNS actions))
          (PP (IN of)
            (NP (NNP Agoal))))))
    (VP (VBZ is)
      (ADVP (RB always))
      (ADJP (JJ satisfied)))
    (. .)))

advmod(satisfied-21, Thus-1)
case(execution-5, during-3)
det(execution-5, the-4)
nmod:during(satisfied-21, execution-5)
case(Pgoal-7, of-6)
nmod:of(execution-5, Pgoal-7)
det(goal-13, the-8)
amod(goal-13, added-10)
compound(goal-13, precondition-11)
nsubj(satisfied-21, goal-13)
case(actions-16, in-14)
det(actions-16, the-15)
nmod:in(goal-13, actions-16)
case(Agoal-18, of-17)
nmod:of(actions-16, Agoal-18)
cop(satisfied-21, is-19)
advmod(satisfied-21, always-20)
root(ROOT-0, satisfied-21)

(ROOT
  (S
    (NP (NNP B))
    (VP (VBP ackstr)
      (NP
        (NP (NN om))
        (, ,)
        (NP (NNP C.))
        (, ,)
        (CC and)
        (NP (NNP Nebel) (, ,) (NNP B.) (CD 1995))))
    (. .)))

nsubj(ackstr-2, B-1)
root(ROOT-0, ackstr-2)
dobj(ackstr-2, om-3)
dobj(ackstr-2, C.-5)
conj:and(om-3, C.-5)
cc(om-3, and-7)
compound(B.-10, Nebel-8)
dobj(ackstr-2, B.-10)
conj:and(om-3, B.-10)
nummod(B.-10, 1995-11)

(ROOT
  (S
    (NP
      (NP (JJ Complexity) (NNS results))
      (PP (IN for)
        (NP (NNP SAS))))
    (VP (VBZ +)
      (NP (NN planning)))
    (. .)))

amod(results-2, Complexity-1)
nsubj(+-5, results-2)
case(SAS-4, for-3)
nmod:for(results-2, SAS-4)
root(ROOT-0, +-5)
dobj(+-5, planning-6)

(ROOT
  (S
    (NP
      (NP (NNP Computational) (NNP Intelligence) (NNP 11))
      (PRN (-LRB- -LRB-)
        (NP (CD 4))
        (-RRB- -RRB-))
      (NP (CD :625))
      (: -))
    (VP (VBZ 655))
    (. .)))

compound(11-3, Computational-1)
compound(11-3, Intelligence-2)
nsubj(655-9, 11-3)
appos(11-3, 4-5)
dep(11-3, :625-7)
root(ROOT-0, 655-9)

(ROOT
  (NP
    (NP (NNP Barrett))
    (, ,)
    (NP (NNP A.))
    (, ,)
    (CC and)
    (NP
      (NP (NNP Weld))
      (, ,)
      (NP (NNP D.) (CD 1993)))
    (. .)))

root(ROOT-0, Barrett-1)
conj:and(Barrett-1, A.-3)
cc(Barrett-1, and-5)
conj:and(Barrett-1, Weld-6)
appos(Weld-6, D.-8)
nummod(D.-8, 1993-9)

(ROOT
  (S
    (VP (VBG Characterizing)
      (NP (JJ subgoal) (NNS interactions))
      (PP (IN for)
        (NP (NN planning))))
    (. .)))

root(ROOT-0, Characterizing-1)
amod(interactions-3, subgoal-2)
dobj(Characterizing-1, interactions-3)
case(planning-5, for-4)
nmod:for(Characterizing-1, planning-5)

(ROOT
  (FRAG
    (PP (IN In)
      (NP
        (NP (NNP Proceedings))
        (PP (IN of)
          (NP (NNP IJCAI-93) (, ,) (CD 1388) (: -) (CD 1393)))))
    (. .)))

case(Proceedings-2, In-1)
root(ROOT-0, Proceedings-2)
case(IJCAI-93-4, of-3)
nmod:of(Proceedings-2, IJCAI-93-4)
nummod(IJCAI-93-4, 1388-6)
nummod(IJCAI-93-4, 1393-8)

(ROOT
  (NP
    (NP (NNP Brafman))
    (, ,)
    (NP (NNP R.))
    (, ,)
    (CC and)
    (NP
      (NP (NNP Domshlak))
      (, ,)
      (NP (NNP C.) (CD 2003)))
    (. .)))

root(ROOT-0, Brafman-1)
conj:and(Brafman-1, R.-3)
cc(Brafman-1, and-5)
conj:and(Brafman-1, Domshlak-6)
appos(Domshlak-6, C.-8)
nummod(C.-8, 2003-9)

(ROOT
  (NP
    (NP (NN Structure)
      (CC and)
      (NN complexity))
    (PP (IN of)
      (S
        (VP (VBG planning)
          (PP (IN with)
            (NP (JJ unary) (NNS operators))))))
    (. .)))

root(ROOT-0, Structure-1)
cc(Structure-1, and-2)
conj:and(Structure-1, complexity-3)
mark(planning-5, of-4)
acl(Structure-1, planning-5)
case(operators-8, with-6)
amod(operators-8, unary-7)
nmod:with(planning-5, operators-8)

(ROOT
  (NP
    (NP (NNP JAIR) (CD 18:315))
    (: -)
    (NP (CD 349))
    (. .)))

root(ROOT-0, JAIR-1)
nummod(JAIR-1, 18:315-2)
dep(JAIR-1, 349-4)

(ROOT
  (NP
    (NP (NNP Brafman))
    (, ,)
    (NP (NNP R.))
    (, ,)
    (CC and)
    (NP
      (NP (NNP Domshlak))
      (, ,)
      (NP (NNP C.) (CD 2006)))
    (. .)))

root(ROOT-0, Brafman-1)
conj:and(Brafman-1, R.-3)
cc(Brafman-1, and-5)
conj:and(Brafman-1, Domshlak-6)
appos(Domshlak-6, C.-8)
nummod(C.-8, 2006-9)

(ROOT
  (VP
    (VP (VB Factored)
      (NP (NN planning))
      (: :)
      (FRAG
        (WHADVP (WRB How))))
    (, ,)
    (ADVP (WRB when))
    (, ,)
    (VP (VB and)
      (SBAR
        (WHADVP (WRB when))
        (FRAG
          (ADVP (RB not) (. .)))))))

root(ROOT-0, Factored-1)
dobj(Factored-1, planning-2)
dep(Factored-1, How-4)
advmod(Factored-1, when-6)
dep(Factored-1, and-8)
advmod(not-10, when-9)
advcl(and-8, not-10)

(ROOT
  (FRAG
    (PP (IN In)
      (NP (NNP AAAI) (CD 2006)))
    (. .)))

case(AAAI-2, In-1)
root(ROOT-0, AAAI-2)
nummod(AAAI-2, 2006-3)

(ROOT
  (NP
    (NP (NNP Bylander))
    (, ,)
    (NP (NNP T.) (CD 1994))
    (. .)))

root(ROOT-0, Bylander-1)
appos(Bylander-1, T.-3)
nummod(T.-3, 1994-4)

(ROOT
  (S
    (NP
      (NP (DT The) (JJ computational) (NN complexity))
      (PP (IN of)
        (NP (NN propositional))))
    (VP (VBZ STRIPS)
      (NP (NN planning)))
    (. .)))

det(complexity-3, The-1)
amod(complexity-3, computational-2)
nsubj(STRIPS-6, complexity-3)
case(propositional-5, of-4)
nmod:of(complexity-3, propositional-5)
root(ROOT-0, STRIPS-6)
dobj(STRIPS-6, planning-7)

(ROOT
  (NP
    (NP (NNP Artificial) (NNP Intelligence))
    (QP (CD 69:165) (CD -204))
    (. .)))

compound(Intelligence-2, Artificial-1)
root(ROOT-0, Intelligence-2)
compound(-204-4, 69:165-3)
nummod(Intelligence-2, -204-4)

(ROOT
  (FRAG
    (NP
      (NP (NNP Erol) (, ,) (NNP K.))
      (: ;)
      (NP
        (NP (NNP Nau))
        (, ,)
        (NP (NNP D.) (NNP S.)))
      (: ;)
      (CC and)
      (NP (NNP Subrahmanian) (, ,) (NNP V.) (NNP S.) (CD 1995)))
    (. .)))

compound(K.-3, Erol-1)
root(ROOT-0, K.-3)
conj:and(K.-3, Nau-5)
compound(S.-8, D.-7)
appos(Nau-5, S.-8)
cc(K.-3, and-10)
compound(S.-14, Subrahmanian-11)
appos(S.-14, V.-13)
conj:and(K.-3, S.-14)
nummod(S.-14, 1995-15)

(ROOT
  (S
    (ADVP (RB Complexity))
    (, ,)
    (NP (NN decidability)
      (CC and)
      (NN undecidability))
    (VP (VBZ results)
      (PP (IN for)
        (NP (JJ domainindependent) (NN planning))))
    (. .)))

advmod(results-6, Complexity-1)
nsubj(results-6, decidability-3)
cc(decidability-3, and-4)
conj:and(decidability-3, undecidability-5)
nsubj(results-6, undecidability-5)
root(ROOT-0, results-6)
case(planning-9, for-7)
amod(planning-9, domainindependent-8)
nmod:for(results-6, planning-9)

(ROOT
  (NP
    (NP (JJ Artificial) (NN intelligence))
    (QP (CD 76:625) (CD -655))
    (. .)))

amod(intelligence-2, Artificial-1)
root(ROOT-0, intelligence-2)
compound(-655-4, 76:625-3)
nummod(intelligence-2, -655-4)

(ROOT
  (S
    (ADVP (RB Haslum))
    (, ,)
    (NP (NNP P.))
    (VP (VBZ 2007))
    (. .)))

advmod(2007-4, Haslum-1)
nsubj(2007-4, P.-3)
root(ROOT-0, 2007-4)

(ROOT
  (S
    (VP (VBG Reducing)
      (NP (JJ accidental) (NN complexity))
      (PP (IN in)
        (NP (NN planning) (NNS problems))))
    (. .)))

root(ROOT-0, Reducing-1)
amod(complexity-3, accidental-2)
dobj(Reducing-1, complexity-3)
case(problems-6, in-4)
compound(problems-6, planning-5)
nmod:in(Reducing-1, problems-6)

(ROOT
  (FRAG
    (PP (IN In)
      (NP (NNP Proc)))
    (. .)))

case(Proc-2, In-1)
root(ROOT-0, Proc-2)

(ROOT
  (NP
    (NP (JJ 20th) (NNP International) (NNP Joint) (NNP Conference))
    (PP (IN on)
      (NP (NNP Artificial) (NNP Intelligence)))
    (. .)))

amod(Conference-4, 20th-1)
compound(Conference-4, International-2)
compound(Conference-4, Joint-3)
root(ROOT-0, Conference-4)
case(Intelligence-7, on-5)
compound(Intelligence-7, Artificial-6)
nmod:on(Conference-4, Intelligence-7)

(ROOT
  (NP
    (NP (NNP Helmert))
    (, ,)
    (NP (NNP M.) (CD 2004))
    (. .)))

root(ROOT-0, Helmert-1)
appos(Helmert-1, M.-3)
nummod(M.-3, 2004-4)

(ROOT
  (S
    (NP (DT A) (NN planning) (NN heuristic))
    (VP (VBN based)
      (PP (IN on)
        (NP (JJ causal) (NN graph) (NN analysis))))
    (. .)))

det(heuristic-3, A-1)
compound(heuristic-3, planning-2)
nsubj(based-4, heuristic-3)
root(ROOT-0, based-4)
case(analysis-8, on-5)
amod(analysis-8, causal-6)
compound(analysis-8, graph-7)
nmod:on(based-4, analysis-8)

(ROOT
  (FRAG
    (PP (IN In)
      (NP
        (NP (NNP Proceedings))
        (PP (IN of)
          (NP
            (NP (DT the) (JJ Fourteenth) (NNP International) (NN Conference))
            (PP (IN on)
              (NP (NNP Automated) (NNP Planning)
                (CC and)
                (NNP Scheduling)))
            (PRN (-LRB- -LRB-)
              (NP (NNP ICAPS) (CD 2004))
              (-RRB- -RRB-))))))
    (, ,)
    (NP (CD 161-170))
    (. .)))

case(Proceedings-2, In-1)
nmod:in(161-170-18, Proceedings-2)
case(Conference-7, of-3)
det(Conference-7, the-4)
amod(Conference-7, Fourteenth-5)
compound(Conference-7, International-6)
nmod:of(Proceedings-2, Conference-7)
case(Planning-10, on-8)
compound(Planning-10, Automated-9)
nmod:on(Conference-7, Planning-10)
cc(Planning-10, and-11)
nmod:on(Conference-7, Scheduling-12)
conj:and(Planning-10, Scheduling-12)
appos(Conference-7, ICAPS-14)
nummod(ICAPS-14, 2004-15)
root(ROOT-0, 161-170-18)

(ROOT
  (NP
    (NP (NNP Helmert))
    (, ,)
    (NP (NNP M.) (CD 2006))
    (. .)))

root(ROOT-0, Helmert-1)
appos(Helmert-1, M.-3)
nummod(M.-3, 2006-4)

(ROOT
  (NP (DT The) (JJ fast) (JJ downward) (NN planning) (NN system) (. .)))

det(system-5, The-1)
amod(system-5, fast-2)
amod(system-5, downward-3)
compound(system-5, planning-4)
root(ROOT-0, system-5)

(ROOT
  (S
    (NP
      (NP (NNP Journal))
      (PP (IN of)
        (NP (NNP Artifical) (NNP Intelligence))))
    (VP (VBZ Research)
      (NP (CD 26:191) (CD -246)))
    (. .)))

nsubj(Research-5, Journal-1)
case(Intelligence-4, of-2)
compound(Intelligence-4, Artifical-3)
nmod:of(Journal-1, Intelligence-4)
root(ROOT-0, Research-5)
nummod(-246-7, 26:191-6)
dobj(Research-5, -246-7)

(ROOT
  (NP
    (NP (NNP Hoffmann))
    (, ,)
    (NP (NNP J.))
    (, ,)
    (CC and)
    (NP
      (NP (NNP Nebel))
      (, ,)
      (NP (NNP B.) (CD 2001)))
    (. .)))

root(ROOT-0, Hoffmann-1)
conj:and(Hoffmann-1, J.-3)
cc(Hoffmann-1, and-5)
conj:and(Hoffmann-1, Nebel-6)
appos(Nebel-6, B.-8)
nummod(B.-8, 2001-9)

(ROOT
  (NP
    (NP (DT The) (NN ff) (NN planning) (NN system))
    (: :)
    (NP
      (NP (JJ Fast) (NN plan) (NN generation))
      (PP (IN through)
        (NP (NN heuristic) (NN search))))
    (. .)))

det(system-4, The-1)
compound(system-4, ff-2)
compound(system-4, planning-3)
root(ROOT-0, system-4)
amod(generation-8, Fast-6)
compound(generation-8, plan-7)
dep(system-4, generation-8)
case(search-11, through-9)
compound(search-11, heuristic-10)
nmod:through(generation-8, search-11)

(ROOT
  (S
    (NP
      (NP (NNP Journal))
      (PP (IN of)
        (NP (NNP Artificial) (NNP Intelligence))))
    (VP (VBZ Research)
      (NP (CD 14:253) (CD -302)))
    (. .)))

nsubj(Research-5, Journal-1)
case(Intelligence-4, of-2)
compound(Intelligence-4, Artificial-3)
nmod:of(Journal-1, Intelligence-4)
root(ROOT-0, Research-5)
nummod(-302-7, 14:253-6)
dobj(Research-5, -302-7)

(ROOT
  (S
    (NP (NNP Jonsson) (, ,) (NNP P.) (, ,)
      (CC and)
      (NNP B))
    (VP (VBP ackstr)
      (NP
        (NP (NN om))
        (, ,)
        (NP (NNP C.) (NNP 1994a))))
    (. .)))

nsubj(ackstr-7, Jonsson-1)
conj:and(Jonsson-1, P.-3)
nsubj(ackstr-7, P.-3)
cc(Jonsson-1, and-5)
conj:and(Jonsson-1, B-6)
nsubj(ackstr-7, B-6)
root(ROOT-0, ackstr-7)
dobj(ackstr-7, om-8)
compound(1994a-11, C.-10)
appos(om-8, 1994a-11)

(ROOT
  (NP
    (NP (JJ Complexity) (NNS results))
    (PP (IN for)
      (NP (JJ state-variable) (NN planning)))
    (PP (IN under)
      (NP (JJ mixed) (JJ syntactical)
        (CC and)
        (JJ structural) (NNS restrictions)))
    (. .)))

amod(results-2, Complexity-1)
root(ROOT-0, results-2)
case(planning-5, for-3)
amod(planning-5, state-variable-4)
nmod:for(results-2, planning-5)
case(syntactical-8, under-6)
amod(syntactical-8, mixed-7)
nmod:under(results-2, syntactical-8)
cc(syntactical-8, and-9)
amod(restrictions-11, structural-10)
nmod:under(results-2, restrictions-11)
conj:and(syntactical-8, restrictions-11)

(ROOT
  (S
    (NP
      (NP (NNP Technical) (NNP Report) (NNP R-95-17))
      (, ,)
      (NP
        (NP (NNP Department))
        (PP (IN of)
          (NP (NNP Computer)
            (CC and)
            (NNP Information) (NNP Science))))
      (, ,))
    (VP (VBZ Link)
      (S
        (VP (VBG oping)
          (NP (NNP University)))))
    (. .)))

compound(R-95-17-3, Technical-1)
compound(R-95-17-3, Report-2)
nsubj(Link-12, R-95-17-3)
appos(R-95-17-3, Department-5)
case(Science-10, of-6)
compound(Science-10, Computer-7)
cc(Computer-7, and-8)
conj:and(Computer-7, Information-9)
compound(Science-10, Information-9)
nmod:of(Department-5, Science-10)
root(ROOT-0, Link-12)
xcomp(Link-12, oping-13)
dobj(oping-13, University-14)

(ROOT
  (S
    (NP (NNP Jonsson) (, ,) (NNP P.) (, ,)
      (CC and)
      (NNP B))
    (VP (VBP ackstr)
      (NP
        (NP (NN om))
        (, ,)
        (NP (NNP C.) (NNP 1994b))))
    (. .)))

nsubj(ackstr-7, Jonsson-1)
conj:and(Jonsson-1, P.-3)
nsubj(ackstr-7, P.-3)
cc(Jonsson-1, and-5)
conj:and(Jonsson-1, B-6)
nsubj(ackstr-7, B-6)
root(ROOT-0, ackstr-7)
dobj(ackstr-7, om-8)
compound(1994b-11, C.-10)
appos(om-8, 1994b-11)

(ROOT
  (NP
    (NP (NNP Tractable))
    (VP (VBG planning)
      (PP (IN with)
        (NP (NN state) (NNS variables)))
      (PP (IN by)
        (S
          (VP (VBG exploiting)
            (NP (JJ structural) (NNS restrictions))))))
    (. .)))

root(ROOT-0, Tractable-1)
acl(Tractable-1, planning-2)
case(variables-5, with-3)
compound(variables-5, state-4)
nmod:with(planning-2, variables-5)
mark(exploiting-7, by-6)
advcl(planning-2, exploiting-7)
amod(restrictions-9, structural-8)
dobj(exploiting-7, restrictions-9)

(ROOT
  (S
    (NP
      (NP (NNP Technical) (NNP Report) (NNP R-95-16))
      (, ,)
      (NP
        (NP (NNP Department))
        (PP (IN of)
          (NP (NNP Computer)
            (CC and)
            (NNP Information) (NNP Science))))
      (, ,))
    (VP (VBZ Link)
      (S
        (VP (VBG oping)
          (NP (NNP University)))))
    (. .)))

compound(R-95-16-3, Technical-1)
compound(R-95-16-3, Report-2)
nsubj(Link-12, R-95-16-3)
appos(R-95-16-3, Department-5)
case(Science-10, of-6)
compound(Science-10, Computer-7)
cc(Computer-7, and-8)
conj:and(Computer-7, Information-9)
compound(Science-10, Information-9)
nmod:of(Department-5, Science-10)
root(ROOT-0, Link-12)
xcomp(Link-12, oping-13)
dobj(oping-13, University-14)

(ROOT
  (NP
    (NP (NNP Korf))
    (, ,)
    (NP
      (NP (NNP R.) (NNP E.))
      (NP (CD 1987)))
    (. .)))

root(ROOT-0, Korf-1)
compound(E.-4, R.-3)
appos(Korf-1, E.-4)
dep(E.-4, 1987-5)

(ROOT
  (NP
    (NP
      (NP (NNP Planning))
      (PP (IN as)
        (NP (NN search))))
    (: :)
    (NP (DT A) (JJ quantitative) (NN approach))
    (. .)))

root(ROOT-0, Planning-1)
case(search-3, as-2)
nmod:as(Planning-1, search-3)
det(approach-7, A-5)
amod(approach-7, quantitative-6)
dep(Planning-1, approach-7)

(ROOT
  (NP
    (NP (NNP Artificial) (NNP Intelligence))
    (QP (CD 33:65) (CD -88))
    (. .)))

compound(Intelligence-2, Artificial-1)
root(ROOT-0, Intelligence-2)
compound(-88-4, 33:65-3)
nummod(Intelligence-2, -88-4)

(ROOT
  (NP
    (NP (NNP Vidal))
    (, ,)
    (NP (NNP V.))
    (, ,)
    (CC and)
    (NP
      (NP (NNP Geffner))
      (, ,)
      (NP (NNP H.) (CD 2005)))
    (. .)))

root(ROOT-0, Vidal-1)
conj:and(Vidal-1, V.-3)
cc(Vidal-1, and-5)
conj:and(Vidal-1, Geffner-6)
appos(Geffner-6, H.-8)
nummod(H.-8, 2005-9)

(ROOT
  (S
    (VP (VBG Solving)
      (NP (JJ simple) (NN planning) (NNS problems))
      (PP (IN with)
        (NP
          (NP (JJR more) (NN inference))
          (CC and)
          (NP (DT no) (NN search)))))
    (. .)))

root(ROOT-0, Solving-1)
amod(problems-4, simple-2)
compound(problems-4, planning-3)
dobj(Solving-1, problems-4)
case(inference-7, with-5)
amod(inference-7, more-6)
nmod:with(Solving-1, inference-7)
cc(inference-7, and-8)
neg(search-10, no-9)
nmod:with(Solving-1, search-10)
conj:and(inference-7, search-10)

(ROOT
  (FRAG
    (PP (IN In)
      (NP (NNP Proc)))
    (. .)))

case(Proc-2, In-1)
root(ROOT-0, Proc-2)

(ROOT
  (FRAG
    (PP (IN of)
      (NP (DT the) (JJ 11th) (NN Int)))
    (. .)))

case(Int-4, of-1)
det(Int-4, the-2)
amod(Int-4, 11th-3)
root(ROOT-0, Int-4)

(ROOT
  (NP (NN Conf) (. .)))

root(ROOT-0, Conf-1)

(ROOT
  (FRAG
    (PP (IN on)
      (NP
        (NP (NNS Principles))
        (CC and)
        (NP
          (NP (NNP Practice))
          (PP (IN of)
            (NP
              (NP (NNP Constraint) (NNP Programming))
              (PRN (-LRB- -LRB-)
                (NP (NNP CP-05))
                (-RRB- -RRB-)))))))
    (. .)))

case(Principles-2, on-1)
root(ROOT-0, Principles-2)
cc(Principles-2, and-3)
conj:and(Principles-2, Practice-4)
case(Programming-7, of-5)
compound(Programming-7, Constraint-6)
nmod:of(Practice-4, Programming-7)
appos(Programming-7, CP-05-9)

(ROOT
  (S
    (ADVP (RB Acknowledgements))
    (NP (DT This) (NN work))
    (VP (VBD was)
      (ADVP (RB partially))
      (VP (VBN supported)
        (PP (IN by)
          (NP
            (NP (NN grant) (NN TIN2004-07925C03-01))
            (PRN (-LRB- -LRB-)
              (NP (NNP GRAMMARS))
              (-RRB- -RRB-))))))
    (. .)))

advmod(supported-6, Acknowledgements-1)
det(work-3, This-2)
nsubjpass(supported-6, work-3)
auxpass(supported-6, was-4)
advmod(supported-6, partially-5)
root(ROOT-0, supported-6)
case(TIN2004-07925C03-01-9, by-7)
compound(TIN2004-07925C03-01-9, grant-8)
nmod:agent(supported-6, TIN2004-07925C03-01-9)
appos(TIN2004-07925C03-01-9, GRAMMARS-11)

(ROOT
  (NP
    (NP (NNP References) (NNP Amir))
    (, ,)
    (NP (NNP E.))
    (, ,)
    (CC and)
    (NP
      (NP (NNP Engelhardt))
      (, ,)
      (NP (NNP B.) (CD 2003)))
    (. .)))

compound(Amir-2, References-1)
root(ROOT-0, Amir-2)
conj:and(Amir-2, E.-4)
cc(Amir-2, and-6)
conj:and(Amir-2, Engelhardt-7)
appos(Engelhardt-7, B.-9)
nummod(B.-9, 2003-10)

(ROOT
  (S
    (VP (VB Factored)
      (NP (NN planning)))
    (. .)))

root(ROOT-0, Factored-1)
dobj(Factored-1, planning-2)

(ROOT
  (FRAG
    (PP (IN In)
      (NP (NNP IJCAI) (CD 2003) (, ,) (CD 929-935)))
    (. .)))

case(IJCAI-2, In-1)
root(ROOT-0, IJCAI-2)
nummod(IJCAI-2, 2003-3)
nummod(IJCAI-2, 929-935-5)

(ROOT
  (FRAG
    (NP (CD 80))))

root(ROOT-0, 80-1)

