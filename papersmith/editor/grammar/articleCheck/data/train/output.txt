(ROOT
  (S
    (S
      (VP (VBG Solving)
        (S
          (S
            (NP (NNP QBF) (NNP Instances))
            (PP (IN With)
              (NP (NNP Nested) (NNP SAT) (NNP Solvers) (NNP Bart) (NNPS Bogaerts)
                (CC and)
                (NNP Tomi) (NNP Janhunen))))
          (CC and)
          (S
            (NP
              (NP (NNP Shahab) (NNP Tasharrofi) (NNP Helsinki) (NNP Institute))
              (PP (IN for)
                (NP
                  (NP (NNP Information) (NNP Technology) (NNP HIIT) (NNP Department))
                  (PP (IN of)
                    (NP
                      (NP (NNP Computer) (NNP Science) (NNP Aalto) (NNP University))
                      (, ,)
                      (NP (NNP FI-00076) (NNP AALTO))
                      (, ,))))))
            (NP (NNP Finland) (NNP Abstract))))))
    (NP (PRP We))
    (VP (VBP present)
      (NP (DT a) (JJ new) (NN approach))
      (PP (IN towards)
        (S
          (VP (VBG solving)
            (S
              (NP
                (NP (NNP quantified) (NNP Boolean) (NNP formulas))
                (PRN (-LRB- -LRB-)
                  (NP (NNP QBFs))
                  (-RRB- -RRB-)))
              (VP (VBG using)
                (NP (JJ nested) (NNP SAT) (NNS solvers))
                (PP (IN with)
                  (NP (JJ lazy) (NN clause) (NN generation)))))))))
    (. .)))

dep(present-35, Solving-1)
compound(Instances-3, QBF-2)
xcomp(Solving-1, Instances-3)
case(Bogaerts-9, With-4)
compound(Bogaerts-9, Nested-5)
compound(Bogaerts-9, SAT-6)
compound(Bogaerts-9, Solvers-7)
compound(Bogaerts-9, Bart-8)
dep(Instances-3, Bogaerts-9)
cc(Bogaerts-9, and-10)
compound(Janhunen-12, Tomi-11)
dep(Instances-3, Janhunen-12)
conj:and(Bogaerts-9, Janhunen-12)
cc(Instances-3, and-13)
compound(Institute-17, Shahab-14)
compound(Institute-17, Tasharrofi-15)
compound(Institute-17, Helsinki-16)
dep(Abstract-33, Institute-17)
case(Department-22, for-18)
compound(Department-22, Information-19)
compound(Department-22, Technology-20)
compound(Department-22, HIIT-21)
nmod:for(Institute-17, Department-22)
case(University-27, of-23)
compound(University-27, Computer-24)
compound(University-27, Science-25)
compound(University-27, Aalto-26)
nmod:of(Department-22, University-27)
compound(AALTO-30, FI-00076-29)
appos(University-27, AALTO-30)
compound(Abstract-33, Finland-32)
xcomp(Solving-1, Abstract-33)
conj:and(Instances-3, Abstract-33)
nsubj(present-35, We-34)
root(ROOT-0, present-35)
det(approach-38, a-36)
amod(approach-38, new-37)
dobj(present-35, approach-38)
mark(solving-40, towards-39)
advcl(present-35, solving-40)
compound(formulas-43, quantified-41)
compound(formulas-43, Boolean-42)
nsubj(using-47, formulas-43)
appos(formulas-43, QBFs-45)
advcl(solving-40, using-47)
amod(solvers-50, nested-48)
compound(solvers-50, SAT-49)
dobj(using-47, solvers-50)
case(generation-54, with-51)
amod(generation-54, lazy-52)
compound(generation-54, clause-53)
nmod:with(using-47, generation-54)

(ROOT
  (S
    (NP (DT The) (NN approach))
    (VP (VBZ has)
      (VP (VBN been)
        (VP (VBN implemented)
          (PP (IN on)
            (NP
              (NP (NN top))
              (PP (IN of)
                (NP (DT the) (NNP Glucose) (NN solver)))))
          (PP (IN by)
            (S
              (VP (VBG adding)
                (NP
                  (NP
                    (NP (NNS mechanisms))
                    (PP (IN for)
                      (NP (JJ nesting) (NNS solvers))))
                  (CONJP (RB as) (RB well) (IN as))
                  (NP (NN clause) (NN learning)))))))))
    (. .)))

det(approach-2, The-1)
nsubjpass(implemented-5, approach-2)
aux(implemented-5, has-3)
auxpass(implemented-5, been-4)
root(ROOT-0, implemented-5)
case(solver-11, on-6)
mwe(on-6, top-7)
mwe(on-6, of-8)
det(solver-11, the-9)
compound(solver-11, Glucose-10)
nmod:on_top_of(implemented-5, solver-11)
mark(adding-13, by-12)
advcl(implemented-5, adding-13)
dobj(adding-13, mechanisms-14)
case(solvers-17, for-15)
amod(solvers-17, nesting-16)
nmod:for(mechanisms-14, solvers-17)
cc(mechanisms-14, as-18)
mwe(as-18, well-19)
mwe(as-18, as-20)
compound(learning-22, clause-21)
dobj(adding-13, learning-22)
conj:and(mechanisms-14, learning-22)

(ROOT
  (S
    (NP (PRP$ Our) (JJ preliminary) (NNS experiments))
    (VP (VBP show)
      (SBAR (IN that)
        (S
          (NP (JJ nested) (NNP SAT) (NNP solving))
          (VP (VBZ performs)
            (PRN (-LRB- -LRB-)
              (PP (RB out) (IN of)
                (NP (DT the) (NN box)))
              (-RRB- -RRB-))
            (NP
              (NP (RB relatively) (RB well))
              (PP (IN on)
                (NP
                  (NP (NNP QBF))
                  (, ,)
                  (SBAR
                    (WHADVP (WRB when))
                    (S
                      (S
                        (VP (VBG taking)
                          (PP (IN into))))
                      (VP (VBP account)
                        (SBAR (IN that)
                          (S
                            (NP (DT no) (JJ particular) (JJ QBF-oriented) (NN solving) (NNS techniques))
                            (VP (VBD were)
                              (VP (VBN incorporated)))))))))))))))
    (. .)))

nmod:poss(experiments-3, Our-1)
amod(experiments-3, preliminary-2)
nsubj(show-4, experiments-3)
root(ROOT-0, show-4)
mark(performs-9, that-5)
amod(solving-8, nested-6)
compound(solving-8, SAT-7)
nsubj(performs-9, solving-8)
ccomp(show-4, performs-9)
case(box-14, out-11)
mwe(out-11, of-12)
det(box-14, the-13)
dep(performs-9, box-14)
advmod(well-17, relatively-16)
dobj(performs-9, well-17)
case(QBF-19, on-18)
nmod:on(well-17, QBF-19)
mark(incorporated-32, QBF-19)
advmod(account-24, when-21)
csubj(account-24, taking-22)
nmod(taking-22, into-23)
acl:relcl(QBF-19, account-24)
ref(QBF-19, that-25)
neg(techniques-30, no-26)
amod(techniques-30, particular-27)
amod(techniques-30, QBF-oriented-28)
compound(techniques-30, solving-29)
nsubjpass(incorporated-32, techniques-30)
auxpass(incorporated-32, were-31)
ccomp(account-24, incorporated-32)

(ROOT
  (S
    (NP
      (NP (DT The)
        (ADJP (RBS most) (JJ important))
        (NN contribution))
      (PP (IN of)
        (NP (DT this) (NN work))))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (PRP it))
          (VP (VBZ provides)
            (NP
              (NP (DT a) (JJ systematic) (NN way))
              (PP (IN of)
                (S
                  (VP (VBG lifting)
                    (NP
                      (NP (NNS advances))
                      (PP (IN in)
                        (NP (NNP SAT) (NNS solvers))))
                    (PP (TO to)
                      (NP (NNP QBFs)))
                    (PP (IN with)
                      (NP (JJ low) (NN implementation) (NN effort)))))))))))
    (. .)))

det(contribution-4, The-1)
advmod(important-3, most-2)
amod(contribution-4, important-3)
nsubj(is-8, contribution-4)
case(work-7, of-5)
det(work-7, this-6)
nmod:of(contribution-4, work-7)
root(ROOT-0, is-8)
mark(provides-11, that-9)
nsubj(provides-11, it-10)
ccomp(is-8, provides-11)
det(way-14, a-12)
amod(way-14, systematic-13)
dobj(provides-11, way-14)
mark(lifting-16, of-15)
acl(way-14, lifting-16)
dobj(lifting-16, advances-17)
case(solvers-20, in-18)
compound(solvers-20, SAT-19)
nmod:in(advances-17, solvers-20)
case(QBFs-22, to-21)
nmod:to(lifting-16, QBFs-22)
case(effort-26, with-23)
amod(effort-26, low-24)
compound(effort-26, implementation-25)
nmod:with(lifting-16, effort-26)

(ROOT
  (S
    (NP (NN ing))
    (VP
      (VP (VBZ 's)
        (ADJP (JJ readability)))
      (CC and)
      (VP
        (VP (VBZ succinctness))
        (, ,)
        (CC or)
        (VP (VB enhance)
          (NP
            (NP (DT the) (NN strength))
            (PP (IN of)
              (NP
                (NP (NN propagation))
                (PP (IN via)
                  (NP (VBN specialized) (NNS propagators)))))))))
    (. .)))

nsubj(readability-3, ing-1)
nsubj(succinctness-5, ing-1)
cop(readability-3, 's-2)
root(ROOT-0, readability-3)
cc(readability-3, and-4)
conj:and(readability-3, succinctness-5)
cc(succinctness-5, or-7)
conj:and(readability-3, enhance-8)
conj:or(succinctness-5, enhance-8)
det(strength-10, the-9)
dobj(enhance-8, strength-10)
case(propagation-12, of-11)
nmod:of(strength-10, propagation-12)
case(propagators-15, via-13)
amod(propagators-15, specialized-14)
nmod:via(propagation-12, propagators-15)

(ROOT
  (S
    (NP
      (NP
        (NP (JJ Recent) (NN work))
        (PP (IN by)
          (NP (NNP Janhunen) (, ,) (NNP Tasharrofi) (, ,)
            (CC and)
            (NNP Ternovska))))
      (PRN (-LRB- -LRB-)
        (NP (CD 2016))
        (-RRB- -RRB-)))
    (VP (VBD started)
      (SBAR (IN from)
        (FRAG
          (NP (DT the) (VBG following) (NN observation))
          (: :) (`` ``)
          (S
            (SBAR (IN if)
              (S
                (NP (NNP SAT) (NNS solvers))
                (VP (VBP are)
                  (ADJP (RB this) (JJ efficient)))))
            (, ,)
            (NP
              (NP (RB then))
              (SBAR
                (WHADVP (WRB why))
                (S (RB not)
                  (VP (TO to)
                    (VP (VB use)
                      (NP (DT a) (NNP SAT) (NN solver))
                      (PP (IN as)
                        (NP (DT a) (JJ smart)))
                      (PRN (-LRB- -LRB-)
                        (PP (IN in)
                          (NP
                            (NP (DT the) (NN sense))
                            (SBAR (IN that)
                              (S
                                (NP (PRP it))
                                (VP (VBZ learns)
                                  (NP (JJ good) (NNS clauses)))))))
                        (-RRB- -RRB-)))))))
            (VP (VBP oracle)
              (PP (IN for)
                (NP (DT a) (NNP SAT) (NN solver)))
              (NP (PRP itself))))
          (. ?) ('' ''))))
    (. .)))

amod(work-2, Recent-1)
nsubj(started-13, work-2)
case(Janhunen-4, by-3)
nmod:by(work-2, Janhunen-4)
nmod:by(work-2, Tasharrofi-6)
conj:and(Janhunen-4, Tasharrofi-6)
cc(Janhunen-4, and-8)
nmod:by(work-2, Ternovska-9)
conj:and(Janhunen-4, Ternovska-9)
appos(work-2, 2016-11)
root(ROOT-0, started-13)
mark(observation-17, from-14)
det(observation-17, the-15)
amod(observation-17, following-16)
advcl(started-13, observation-17)
mark(efficient-25, if-20)
compound(solvers-22, SAT-21)
nsubj(efficient-25, solvers-22)
cop(efficient-25, are-23)
advmod(efficient-25, this-24)
advcl(oracle-48, efficient-25)
nsubj(oracle-48, then-27)
advmod(use-31, why-28)
neg(use-31, not-29)
mark(use-31, to-30)
acl:relcl(then-27, use-31)
det(solver-34, a-32)
compound(solver-34, SAT-33)
dobj(use-31, solver-34)
case(smart-37, as-35)
det(smart-37, a-36)
nmod:as(use-31, smart-37)
case(sense-41, in-39)
det(sense-41, the-40)
dep(use-31, sense-41)
mark(learns-44, that-42)
nsubj(learns-44, it-43)
dep(sense-41, learns-44)
amod(clauses-46, good-45)
dobj(learns-44, clauses-46)
dep(observation-17, oracle-48)
case(solver-52, for-49)
det(solver-52, a-50)
compound(solver-52, SAT-51)
nmod:for(oracle-48, solver-52)
dobj(oracle-48, itself-53)

(ROOT
  (S
    (NP (DT The) (NN idea))
    (ADVP (RB here))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP
            (VP (VB solve)
              (NP (JJ satisfiability) (NNS problems))
              (SBAR (IN for)
                (S
                  (NP
                    (NP (NNS theories))
                    (PP (IN of)
                      (NP (DT the) (NN form) (NN T))))
                  (VP (SYM =)
                    (NP (NNS x))))))
            (: :)
            (VP (, ,)
              (SBAR
                (WHADVP (WRB where))
                (S
                  (S
                    (NP (SYM x))
                    (VP (VBZ is)
                      (NP
                        (NP (DT a) (NN sequence))
                        (PP (IN of)
                          (NP (JJ propositional) (NNS variables))))))
                  (CC and)
                  (S
                    (NP (NNP and))
                    (VP (VBP are)
                      (ADJP (JJ CNF-theories)))))))))))
    (. .)))

det(idea-2, The-1)
nsubj(is-4, idea-2)
nsubj:xsubj(solve-6, idea-2)
advmod(is-4, here-3)
root(ROOT-0, is-4)
mark(solve-6, to-5)
xcomp(is-4, solve-6)
amod(problems-8, satisfiability-7)
dobj(solve-6, problems-8)
mark(x-16, for-9)
nsubj(x-16, theories-10)
case(T-14, of-11)
det(T-14, the-12)
compound(T-14, form-13)
nmod:of(theories-10, T-14)
dep(x-16, =-15)
advcl(solve-6, x-16)
advmod(sequence-23, where-19)
nsubj(sequence-23, x-20)
cop(sequence-23, is-21)
det(sequence-23, a-22)
dep(solve-6, sequence-23)
case(variables-26, of-24)
amod(variables-26, propositional-25)
nmod:of(sequence-23, variables-26)
cc(sequence-23, and-27)
nsubj(CNF-theories-30, and-28)
cop(CNF-theories-30, are-29)
dep(solve-6, CNF-theories-30)
conj:and(sequence-23, CNF-theories-30)

(ROOT
  (S
    (NP
      (NP (NNP Propagation))
      (PP (IN for)
        (NP (NNP T))))
    (VP (VBZ combines)
      (NP (NN unit) (NN propagation))
      (PP (IN on) (IN with)
        (NP
          (NP (DT an) (JJ oracle) (NN call))
          (PP (TO to)
            (NP (DT a) (NNP SAT) (NN solver)))))
      (PP (IN for)))
    (. .)))

nsubj(combines-4, Propagation-1)
case(T-3, for-2)
nmod:for(Propagation-1, T-3)
root(ROOT-0, combines-4)
compound(propagation-6, unit-5)
dobj(combines-4, propagation-6)
case(call-11, on-7)
case(call-11, with-8)
det(call-11, an-9)
amod(call-11, oracle-10)
nmod:with(combines-4, call-11)
case(solver-15, to-12)
det(solver-15, a-13)
compound(solver-15, SAT-14)
nmod:to(call-11, solver-15)
case(call-11, for-16)

(ROOT
  (S
    (S
      (PP (IN From)
        (NP
          (NP (DT the) (NN result))
          (PP (IN of)
            (NP (DT this) (JJ oracle) (NN call)))))
      (, ,)
      (NP (DT a) (JJ learned) (NN clause))
      (VP (VBZ is)
        (VP (VBN generated)
          (CC and)
          (VBN added)
          (PP (TO to)
            (NP
              (NP (CD .1) (NNS Advantages))
              (PP (IN of)
                (NP
                  (NP (DT this) (NN approach))
                  (SBAR
                    (S
                      (VP (VBP are)
                        (VP (VBN manifold))))))))))))
    (: :)
    (S
      (S
        (LST (-LRB- -LRB-) (LS 1) (-RRB- -RRB-))
        (NP (PRP It))
        (VP (VBZ is)
          (NP
            (NP (DT a) (JJ modular) (NN approach))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP
                  (VP (VBZ allows)
                    (S
                      (VP (VBG plugging)
                        (PP (IN in)
                          (NP (DT any) (NNP SAT) (NN solver)))
                        (PP (IN as)
                          (NP (JJ innermost) (NN solver))))))
                  (CC and)
                  (VP
                    (ADVP (RB only))
                    (VBZ requires)
                    (NP (JJ minor) (NNS modifications))
                    (PP (TO to)
                      (NP (DT the) (JJ outermost) (NN solver))))))))))
      (, ,)
      (ADVP (RB hence))
      (S
        (NP
          (NP (NN progress))
          (PP (IN in)
            (NP (NNP SAT))))
        (VP (MD will)
          (ADVP (RB automatically))
          (VP (VB translate)
            (PP (TO to)
              (NP
                (NP (NNS solvers))
                (PP (IN of)
                  (NP (DT this) (JJR richer) (NN formalism)))))))))
    (: ;)
    (S
      (LST (-LRB- -LRB-) (LS 2) (-RRB- -RRB-))
      (NP (PRP It))
      (VP (MD can)
        (VP (VB be)
          (VP
            (ADVP (RB immediately))
            (VBN combined)
            (PP (IN with)
              (NP
                (NP (JJ other) (NNP SAT) (NNS extensions))
                (PRN (-LRB- -LRB-)
                  (PP (JJ such) (IN as)
                    (NP
                      (NP (NN integer) (NNS variables))
                      (, ,)
                      (NP (NN acyclicity))
                      (, ,)
                      (CC or)
                      (NP (DT any) (JJ other) (NN theory) (NN propagator))))
                  (-RRB- -RRB-))))))))
    (: ;)
    (S
      (LST (-LRB- -LRB-) (LS 3) (-RRB- -RRB-))
      (NP (DT No) (JJ dedicated) (NNS propagators))
      (VP (VBP need)
        (S
          (VP (TO to)
            (VP (VB be)
              (VP (VBN developed)
                (PP (IN for)
                  (NP (DT the) (JJ new) (NN extension)))
                (SBAR (IN because)
                  (S
                    (NP (DT the) (JJ nested) (NN solver))
                    (VP (VBZ is)
                      (VP
                        (PRN (-LRB- -LRB-)
                          (ADVP (RB automatically))
                          (-RRB- -RRB-))
                        (VBN used)))))))))
        (PP (IN as)
          (NP
            (NP (DT a) (NN propagator))
            (PP (IN for)
              (NP (PRP$ its) (JJ internal) (NN theory)))))))
    (: ;)
    (S
      (PP (IN for)
        (NP (NN example)))
      (, ,)
      (NP (PRP it))
      (VP (VBD was)
        (VP (VBN shown)
          (PP (IN by)
            (NP (NNP Janhunen) (, ,) (NNP Tasharrofi) (, ,)
              (CC and)
              (NNP Ternovska)))
          (PRN (-LRB- -LRB-) (VB 2016) (-RRB- -RRB-))
          (SBAR
            (WHADVP (WRB how))
            (S
              (S
                (VP (VBG using)
                  (NP (DT an) (JJ internal) (NNP SAT) (NN solver))
                  (S
                    (VP (TO to)
                      (VP (VB propagate)
                        (NP (JJ reachability) (NNS constraints)))))))
              (VP (VBZ leads)
                (PP (TO to)
                  (NP
                    (NP (DT a) (JJ simple) (NN encoding))
                    (PP (IN of)
                      (NP (JJ Hamiltonian) (NNS paths)))
                    (SBAR
                      (WHNP (WDT that))
                      (S
                        (VP (VBZ performs)
                          (ADJP
                            (ADJP (RB much) (JJR better))
                            (SBAR
                              (WHADVP (WRB when))
                              (S
                                (VP (VBN compared)
                                  (PP (TO to)
                                    (NP
                                      (NP (DT a) (JJ direct) (NN encoding))
                                      (PRN (-LRB- -LRB-) (FW i.e.) (, ,)
                                        (ADJP
                                          (NP (DT a) (NN SAT))
                                          (JJ encoding)
                                          (PP (IN without)
                                            (NP (JJ second-order) (NN structure))))
                                        (-RRB- -RRB-)))))))))))))))))))
    (. .)))

case(result-3, From-1)
det(result-3, the-2)
nmod:from(generated-13, result-3)
case(call-7, of-4)
det(call-7, this-5)
amod(call-7, oracle-6)
nmod:of(result-3, call-7)
det(clause-11, a-9)
amod(clause-11, learned-10)
nsubjpass(generated-13, clause-11)
nsubjpass(added-15, clause-11)
auxpass(generated-13, is-12)
root(ROOT-0, generated-13)
cc(generated-13, and-14)
conj:and(generated-13, added-15)
case(Advantages-18, to-16)
nummod(Advantages-18, .1-17)
nmod:to(generated-13, Advantages-18)
case(approach-21, of-19)
det(approach-21, this-20)
nmod:of(Advantages-18, approach-21)
auxpass(manifold-23, are-22)
acl:relcl(approach-21, manifold-23)
dep(approach-32, 1-26)
nsubj(approach-32, It-28)
cop(approach-32, is-29)
det(approach-32, a-30)
amod(approach-32, modular-31)
parataxis(generated-13, approach-32)
nsubj(allows-34, approach-32)
nsubj(requires-45, approach-32)
ref(approach-32, that-33)
acl:relcl(approach-32, allows-34)
xcomp(allows-34, plugging-35)
case(solver-39, in-36)
det(solver-39, any-37)
compound(solver-39, SAT-38)
nmod:in(plugging-35, solver-39)
case(solver-42, as-40)
amod(solver-42, innermost-41)
nmod:as(plugging-35, solver-42)
cc(allows-34, and-43)
advmod(requires-45, only-44)
acl:relcl(approach-32, requires-45)
conj:and(allows-34, requires-45)
amod(modifications-47, minor-46)
dobj(requires-45, modifications-47)
case(solver-51, to-48)
det(solver-51, the-49)
amod(solver-51, outermost-50)
nmod:to(requires-45, solver-51)
advmod(translate-59, hence-53)
nsubj(translate-59, progress-54)
case(SAT-56, in-55)
nmod:in(progress-54, SAT-56)
aux(translate-59, will-57)
advmod(translate-59, automatically-58)
parataxis(approach-32, translate-59)
case(solvers-61, to-60)
nmod:to(translate-59, solvers-61)
case(formalism-65, of-62)
det(formalism-65, this-63)
amod(formalism-65, richer-64)
nmod:of(solvers-61, formalism-65)
dep(combined-74, 2-68)
nsubjpass(combined-74, It-70)
aux(combined-74, can-71)
auxpass(combined-74, be-72)
advmod(combined-74, immediately-73)
parataxis(generated-13, combined-74)
case(extensions-78, with-75)
amod(extensions-78, other-76)
compound(extensions-78, SAT-77)
nmod:with(combined-74, extensions-78)
case(variables-83, such-80)
mwe(such-80, as-81)
compound(variables-83, integer-82)
nmod:such_as(extensions-78, variables-83)
nmod:such_as(extensions-78, acyclicity-85)
conj:or(variables-83, acyclicity-85)
cc(variables-83, or-87)
det(propagator-91, any-88)
amod(propagator-91, other-89)
compound(propagator-91, theory-90)
nmod:such_as(extensions-78, propagator-91)
conj:or(variables-83, propagator-91)
dep(need-100, 3-95)
neg(propagators-99, No-97)
amod(propagators-99, dedicated-98)
nsubj(need-100, propagators-99)
nsubjpass:xsubj(developed-103, propagators-99)
parataxis(generated-13, need-100)
mark(developed-103, to-101)
auxpass(developed-103, be-102)
xcomp(need-100, developed-103)
case(extension-107, for-104)
det(extension-107, the-105)
amod(extension-107, new-106)
nmod:for(developed-103, extension-107)
mark(used-116, because-108)
det(solver-111, the-109)
amod(solver-111, nested-110)
nsubjpass(used-116, solver-111)
auxpass(used-116, is-112)
dep(used-116, automatically-114)
advcl(developed-103, used-116)
case(propagator-119, as-117)
det(propagator-119, a-118)
nmod:as(need-100, propagator-119)
case(theory-123, for-120)
nmod:poss(theory-123, its-121)
amod(theory-123, internal-122)
nmod:for(propagator-119, theory-123)
case(example-126, for-125)
nmod:for(shown-130, example-126)
nsubjpass(shown-130, it-128)
auxpass(shown-130, was-129)
parataxis(generated-13, shown-130)
case(Janhunen-132, by-131)
nmod:agent(shown-130, Janhunen-132)
nmod:agent(shown-130, Tasharrofi-134)
conj:and(Janhunen-132, Tasharrofi-134)
cc(Janhunen-132, and-136)
nmod:agent(shown-130, Ternovska-137)
conj:and(Janhunen-132, Ternovska-137)
dep(shown-130, 2016-139)
advmod(leads-151, how-141)
csubj(leads-151, using-142)
det(solver-146, an-143)
amod(solver-146, internal-144)
compound(solver-146, SAT-145)
dobj(using-142, solver-146)
mark(propagate-148, to-147)
advcl(using-142, propagate-148)
amod(constraints-150, reachability-149)
dobj(propagate-148, constraints-150)
ccomp(shown-130, leads-151)
case(encoding-155, to-152)
det(encoding-155, a-153)
amod(encoding-155, simple-154)
nmod:to(leads-151, encoding-155)
nsubj(performs-160, encoding-155)
case(paths-158, of-156)
amod(paths-158, Hamiltonian-157)
nmod:of(encoding-155, paths-158)
ref(encoding-155, that-159)
acl:relcl(encoding-155, performs-160)
advmod(better-162, much-161)
xcomp(performs-160, better-162)
advmod(compared-164, when-163)
ccomp(better-162, compared-164)
case(encoding-168, to-165)
det(encoding-168, a-166)
amod(encoding-168, direct-167)
nmod:to(compared-164, encoding-168)
dep(encoding-174, i.e.-170)
det(SAT-173, a-172)
nmod:npmod(encoding-174, SAT-173)
dep(encoding-168, encoding-174)
case(structure-177, without-175)
amod(structure-177, second-order-176)
nmod:without(encoding-174, structure-177)

(ROOT
  (S
    (NP
      (NP (DT A) (NN solver))
      (, ,)
      (VP (VBN called)
        (NP
          (NP (NNP SAT)
            (PRN (: -)
              (NP (NNP TO))
              (: -))
            (NNP SAT))
          (, ,)
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ implements)
                (NP (DT this) (NN idea))))))))
    (VP (VBD was)
      (VP (VBN presented)
        (PRN (-LRB- -LRB-)
          (NP
            (NP (NNP Janhunen))
            (, ,)
            (NP (NNP Tasharrofi))
            (, ,)
            (CC and)
            (NP (NNP Ternovska) (CD 2016)))
          (-RRB- -RRB-))))
    (. .)))

det(solver-2, A-1)
nsubjpass(presented-16, solver-2)
acl(solver-2, called-4)
compound(SAT-9, SAT-5)
dep(SAT-9, TO-7)
dobj(called-4, SAT-9)
nsubj(implements-12, SAT-9)
ref(SAT-9, that-11)
acl:relcl(SAT-9, implements-12)
det(idea-14, this-13)
dobj(implements-12, idea-14)
auxpass(presented-16, was-15)
root(ROOT-0, presented-16)
dep(presented-16, Janhunen-18)
dep(presented-16, Tasharrofi-20)
conj:and(Janhunen-18, Tasharrofi-20)
cc(Janhunen-18, and-22)
dep(presented-16, Ternovska-23)
conj:and(Janhunen-18, Ternovska-23)
nummod(Ternovska-23, 2016-24)

(ROOT
  (S
    (SBAR (IN Since)
      (S
        (PP (IN in)
          (NP (NN principle)))
        (NP (DT any) (NNS solver2))
        (VP (MD can)
          (VP (VB be)
            (VP (VBN nested))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is)
      (ADVP (RB also))
      (ADJP (JJ possible)
        (PP
          (PP (TO to)
            (NP
              (NP (NNP nest) (NNP SAT)
                (PRN (: -)
                  (NP (NNP TO))
                  (: -))
                (NNP SAT))
              (PP (IN in)
                (NP (PRP itself)))))
          (, ,)
          (PP (IN as)
            (NP (DT an) (NN oracle))))))
    (. .)))

mark(nested-8, Since-1)
case(principle-3, in-2)
nmod:in(nested-8, principle-3)
det(solver2-5, any-4)
nsubjpass(nested-8, solver2-5)
aux(nested-8, can-6)
auxpass(nested-8, be-7)
advcl(possible-13, nested-8)
nsubj(possible-13, it-10)
cop(possible-13, is-11)
advmod(possible-13, also-12)
root(ROOT-0, possible-13)
case(SAT-20, to-14)
compound(SAT-20, nest-15)
compound(SAT-20, SAT-16)
dep(SAT-20, TO-18)
advcl(possible-13, SAT-20)
case(itself-22, in-21)
nmod:in(SAT-20, itself-22)
case(oracle-26, as-24)
det(oracle-26, an-25)
nmod:as(SAT-20, oracle-26)

(ROOT
  (S
    (PP (IN By)
      (S
        (VP (VBG allowing)
          (NP (JJ such) (JJ arbitrarily) (JJ deep) (NNS nesting)))))
    (, ,)
    (NP (PRP we))
    (ADVP (RB essentially))
    (VP (VBP obtain)
      (NP (DT a) (NNP QBF) (NN solver)))
    (. .)))

mark(allowing-2, By-1)
advcl(obtain-10, allowing-2)
amod(nesting-6, such-3)
amod(nesting-6, arbitrarily-4)
amod(nesting-6, deep-5)
dobj(allowing-2, nesting-6)
nsubj(obtain-10, we-8)
advmod(obtain-10, essentially-9)
root(ROOT-0, obtain-10)
det(solver-13, a-11)
compound(solver-13, QBF-12)
dobj(obtain-10, solver-13)

(ROOT
  (S
    (NP (DT This) (NN paper))
    (VP (VBZ presents)
      (SBAR
        (WHADVP (WRB how))
        (S
          (NP
            (NP (NNP SAT))
            (PRN (: -)
              (NP (NNP TO))
              (: -)))
          (ADVP (RB SAT))
          (VP (MD can)
            (VP (VB be)
              (VP (VBN used)
                (PP (IN for)
                  (NP (NNP QBF) (NNP solving)))))))))
    (. .)))

det(paper-2, This-1)
nsubj(presents-3, paper-2)
root(ROOT-0, presents-3)
advmod(used-12, how-4)
nsubjpass(used-12, SAT-5)
dep(SAT-5, TO-7)
advmod(used-12, SAT-9)
aux(used-12, can-10)
auxpass(used-12, be-11)
ccomp(presents-3, used-12)
case(solving-15, for-13)
compound(solving-15, QBF-14)
nmod:for(used-12, solving-15)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP
        (VP (VB evaluate)
          (SBAR
            (WHADVP (WRB how))
            (S
              (NP (DT this) (NN technique))
              (VP (VBZ performs)
                (PP (IN with)
                  (NP (NN respect)))
                (PP (TO to)
                  (NP (JJ state-of-the) (NN art) (NN QBF) (NNS solvers)))))))
        (CC and)
        (VP (VB conclude)
          (NP (DT that) (NN SAT) (: -) (JJ TO)))))
    (: -)
    (S
      (NP (NNP SAT))
      (VP (VBZ is)
        (ADJP
          (ADJP (RB still) (JJR slower))
          (PP (IN than)
            (NP
              (NP (DT the) (JJS best) (NN QBF) (NN solver))
              (IN around))))))
    (. .)))

nsubj(evaluate-2, We-1)
nsubj(conclude-15, We-1)
root(ROOT-0, evaluate-2)
advmod(performs-6, how-3)
det(technique-5, this-4)
nsubj(performs-6, technique-5)
ccomp(evaluate-2, performs-6)
case(respect-8, with-7)
nmod:with(performs-6, respect-8)
case(solvers-13, to-9)
amod(solvers-13, state-of-the-10)
compound(solvers-13, art-11)
compound(solvers-13, QBF-12)
nmod:to(performs-6, solvers-13)
cc(evaluate-2, and-14)
conj:and(evaluate-2, conclude-15)
det(SAT-17, that-16)
dobj(conclude-15, SAT-17)
amod(SAT-17, TO-19)
nsubj(slower-24, SAT-21)
cop(slower-24, is-22)
advmod(slower-24, still-23)
parataxis(evaluate-2, slower-24)
case(solver-29, than-25)
det(solver-29, the-26)
amod(solver-29, best-27)
compound(solver-29, QBF-28)
nmod:than(slower-24, solver-29)
amod(solver-29, around-30)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP (PRP it))
    (VP
      (VP (VBZ deserves)
        (S
          (VP (TO to)
            (VP (VB be)
              (VP (VBN mentioned)
                (SBAR (IN that)
                  (S
                    (NP (PRP$ our) (NN implementation))
                    (VP (VBZ is)
                      (ADJP (JJ generic))))))))))
      (CC and)
      (VP (VBZ performs)
        (NP
          (NP (DT no)
            (ADJP (JJ optimizations)
              (NP (CD 1)))
            (ADJP
              (QP (CD 2) (CD 1)))
            (NN Introduction))
          (SBAR
            (S
              (PP (IN Since)
                (S
                  (NP
                    (NP (DT the) (NN addition))
                    (PP (IN of)
                      (NP (JJ conflict-driven) (NN clause))))
                  (VP (VBG learning)
                    (PRN (-LRB- -LRB-)
                      (NP
                        (NP (NNP Marques-Silva))
                        (CC and)
                        (NP (NNP Sakallah) (CD 1999)))
                      (-RRB- -RRB-)))))
              (, ,)
              (NP (NNP SAT) (NNS solvers))
              (VP (VBP have)
                (VP (VBN made)
                  (NP (JJ huge) (NNS leaps))
                  (ADVP (RB forward))
                  (PP (IN in)
                    (NP
                      (NP (CD two) (NNS respects))
                      (: :)
                      (NP
                        (NP (PRP$ their) (NN popularity))
                        (PP (IN for)
                          (S
                            (VP (VBG tackling)
                              (NP
                                (NP (JJ real-life) (NNS problems))
                                (CC and)
                                (NP (PRP$ their) (NN efficiency))))))))))))))))
    (. .)))

advmod(deserves-4, However-1)
nsubj(deserves-4, it-3)
nsubjpass:xsubj(mentioned-7, it-3)
nsubj(performs-14, it-3)
root(ROOT-0, deserves-4)
mark(mentioned-7, to-5)
auxpass(mentioned-7, be-6)
xcomp(deserves-4, mentioned-7)
mark(generic-12, that-8)
nmod:poss(implementation-10, our-9)
nsubj(generic-12, implementation-10)
cop(generic-12, is-11)
ccomp(mentioned-7, generic-12)
cc(deserves-4, and-13)
conj:and(deserves-4, performs-14)
neg(Introduction-20, no-15)
amod(Introduction-20, optimizations-16)
dep(optimizations-16, 1-17)
compound(1-19, 2-18)
nummod(Introduction-20, 1-19)
dobj(performs-14, Introduction-20)
mark(learning-27, Since-21)
det(addition-23, the-22)
nsubj(learning-27, addition-23)
case(clause-26, of-24)
amod(clause-26, conflict-driven-25)
nmod:of(addition-23, clause-26)
advcl(made-38, learning-27)
dep(learning-27, Marques-Silva-29)
cc(Marques-Silva-29, and-30)
dep(learning-27, Sakallah-31)
conj:and(Marques-Silva-29, Sakallah-31)
nummod(Sakallah-31, 1999-32)
compound(solvers-36, SAT-35)
nsubj(made-38, solvers-36)
aux(made-38, have-37)
acl:relcl(Introduction-20, made-38)
amod(leaps-40, huge-39)
dobj(made-38, leaps-40)
advmod(made-38, forward-41)
case(respects-44, in-42)
nummod(respects-44, two-43)
nmod:in(made-38, respects-44)
nmod:poss(popularity-47, their-46)
dep(respects-44, popularity-47)
mark(tackling-49, for-48)
acl(popularity-47, tackling-49)
amod(problems-51, real-life-50)
dobj(tackling-49, problems-51)
cc(problems-51, and-52)
nmod:poss(efficiency-54, their-53)
dobj(tackling-49, efficiency-54)
conj:and(problems-51, efficiency-54)

(ROOT
  (S
    (SBAR (RB Now) (IN that)
      (S
        (NP (DT these) (JJ highly-performant) (NNS SAT-solvers))
        (VP (VBP exist))))
    (, ,)
    (NP (NN research))
    (ADVP (RB often))
    (VP (VBZ stretches)
      (PP
        (PP (IN beyond)
          (NP (NNP SAT)))
        (, ,)
        (CC either)
        (RB because)
        (PP (IN of)
          (S
            (VP (VBG trying)
              (S
                (VP (TO to)
                  (VP (VB tackle)
                    (NP
                      (NP (NNS problems))
                      (PP (IN of)
                        (NP
                          (NP (DT a) (NN complexity))
                          (PP
                            (ADVP (JJR higher))
                            (PP (IN than)
                              (NP (NNP NP)))
                            (CC or)
                            (PP (IN because)
                              (NP
                                (S
                                  (NP
                                    (NP
                                      (NP (DT the) (NN input) (NN format))
                                      (PP (IN of)
                                        (NP (NNP SAT) (NNS solvers))))
                                    (PRN (-LRB- -LRB-)
                                      (NP (JJ propositional) (NN logic))
                                      (-RRB- -RRB-)))
                                  (VP (VBZ is)
                                    (ADJP
                                      (ADJP (RB too) (VBN limited)
                                        (PP (TO to)
                                          (NP (NN concisely))))
                                      (CC and)
                                      (ADJP (RB naturally) (JJ express)))))
                                (JJ certain) (NN domain)))
                            (NP
                              (NP (JJ specific) (NNS constraints))
                              (, ,)
                              (PP (JJ such) (IN as)
                                (NP (NN graph) (NNS properties))))))))))))))))
    (. .)))

advmod(exist-6, Now-1)
mark(exist-6, that-2)
det(SAT-solvers-5, these-3)
amod(SAT-solvers-5, highly-performant-4)
nsubj(exist-6, SAT-solvers-5)
advcl(stretches-10, exist-6)
nsubj(stretches-10, research-8)
advmod(stretches-10, often-9)
root(ROOT-0, stretches-10)
case(SAT-12, beyond-11)
nmod:beyond(stretches-10, SAT-12)
dep(SAT-12, either-14)
conj(SAT-12, because-15)
mark(trying-17, of-16)
nmod(SAT-12, trying-17)
mark(tackle-19, to-18)
xcomp(trying-17, tackle-19)
dobj(tackle-19, problems-20)
case(complexity-23, of-21)
det(complexity-23, a-22)
nmod:of(problems-20, complexity-23)
advmod(constraints-50, higher-24)
case(NP-26, than-25)
nmod:than(constraints-50, NP-26)
cc(constraints-50, or-27)
case(domain-48, because-28)
det(format-31, the-29)
compound(format-31, input-30)
nsubjpass(limited-41, format-31)
nsubj(express-46, format-31)
case(solvers-34, of-32)
compound(solvers-34, SAT-33)
nmod:of(format-31, solvers-34)
amod(logic-37, propositional-36)
appos(format-31, logic-37)
auxpass(limited-41, is-39)
advmod(limited-41, too-40)
dep(domain-48, limited-41)
case(concisely-43, to-42)
nmod:to(limited-41, concisely-43)
cc(limited-41, and-44)
advmod(express-46, naturally-45)
conj:and(limited-41, express-46)
dep(domain-48, express-46)
amod(domain-48, certain-47)
nmod(complexity-23, domain-48)
conj:or(constraints-50, domain-48)
amod(constraints-50, specific-49)
nmod(complexity-23, constraints-50)
case(properties-55, such-52)
mwe(such-52, as-53)
compound(properties-55, graph-54)
nmod:such_as(constraints-50, properties-55)

(ROOT
  (S
    (PP (IN For)
      (NP (DT this) (NN reason)))
    (, ,)
    (NP (NNS researchers))
    (VP
      (VP (VBP have)
        (VP (VBN extended)
          (NP (DT the) (NNP SAT) (NN language))
          (PP (IN with)
            (NP (JJ new) (NN language) (NNS constructs)))))
      (, ,)
      (VP
        (ADVP (RB sometimes))
        (ADVP (RB also))
        (VBD called)
        (NP (NNS constraints)))
      (, ,)
      (CC and)
      (VP (VBP have)
        (VP (VBN extended)
          (NP (NNP SAT) (NNS solvers))
          (PP (IN with)
            (NP
              (NP (JJ dedicated) (NNS propagators))
              (PP (IN for)
                (NP
                  (NP (DT those) (NNS constraints))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VB communicate)
                        (PP (IN with)
                          (NP (DT the) (VBG underlying) (NNP SAT) (NN solver)))
                        (PP (IN through)
                          (NP (NNS clauses)))))))))))))
    (. .)))

case(reason-3, For-1)
det(reason-3, this-2)
nmod:for(extended-7, reason-3)
nsubj(extended-7, researchers-5)
nsubj(called-18, researchers-5)
nsubj(extended-23, researchers-5)
aux(extended-7, have-6)
root(ROOT-0, extended-7)
det(language-10, the-8)
compound(language-10, SAT-9)
dobj(extended-7, language-10)
case(constructs-14, with-11)
amod(constructs-14, new-12)
compound(constructs-14, language-13)
nmod:with(extended-7, constructs-14)
advmod(called-18, sometimes-16)
advmod(called-18, also-17)
conj:and(extended-7, called-18)
dobj(called-18, constraints-19)
cc(extended-7, and-21)
aux(extended-23, have-22)
conj:and(extended-7, extended-23)
compound(solvers-25, SAT-24)
dobj(extended-23, solvers-25)
case(propagators-28, with-26)
amod(propagators-28, dedicated-27)
nmod:with(extended-23, propagators-28)
case(constraints-31, for-29)
det(constraints-31, those-30)
nmod:for(propagators-28, constraints-31)
nsubj(communicate-33, constraints-31)
ref(constraints-31, that-32)
acl:relcl(constraints-31, communicate-33)
case(solver-38, with-34)
det(solver-38, the-35)
amod(solver-38, underlying-36)
compound(solver-38, SAT-37)
nmod:with(communicate-33, solver-38)
case(clauses-40, through-39)
nmod:through(communicate-33, clauses-40)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ has)
      (VP (VBN happened)
        (PP (IN for)
          (NP (NN example)))
        (PP (IN in)
          (NP
            (NP (DT the) (NN field))
            (PP (IN of)
              (NP
                (NP
                  (NP (NN constraint) (NN programming))
                  (PRN (-LRB- -LRB-)
                    (ADJP (JJ Apt)
                      (NP (CD 2003)))
                    (-RRB- -RRB-)))
                (PP (IN in)
                  (NP
                    (NP
                      (NP
                        (NP (DT the) (NN form))
                        (PP (IN of)
                          (NP
                            (NP (NNS solvers))
                            (PP (IN with)
                              (NP (JJ lazy) (NN clause) (NN generation))))))
                      (PRN (-LRB- -LRB-)
                        (NP
                          (NP (NNP Ohrimenko))
                          (, ,)
                          (NP (NNP Stuckey))
                          (, ,)
                          (CC and)
                          (NP (NNP Codish) (CD 2009)))
                        (-RRB- -RRB-))
                      (, ,)
                      (PP (IN in)
                        (NP (NNP SAT) (NN modulo) (NNS theories))))
                    (PRN (-LRB- -LRB-)
                      (S
                        (NP (NNP Barrett) (NNP et))
                        (VP (VBP al.)
                          (NP (CD 2009))))
                      (-RRB- -RRB-))
                    (PP
                      (PP (IN in)
                        (NP
                          (NP (DT the) (NN form))
                          (PP (IN of)
                            (NP
                              (NP (JJ DPLL)
                                (PRN (-LRB- -LRB-)
                                  (NP (NNP T))
                                  (-RRB- -RRB-))
                                (NN solvers))
                              (PRN (-LRB- -LRB-)
                                (NP
                                  (NP (NNP Ganzinger))
                                  (CC et)
                                  (NP (NN al.) (CD 2004)))
                                (-RRB- -RRB-))))))
                      (, ,)
                      (CC and)
                      (PP (IN in)
                        (NP
                          (NP (NN answer) (NN set) (NN programming))
                          (PRN (-LRB- -LRB-)
                            (NP
                              (NP (NNP Marek))
                              (CC and)
                              (NP (NNP Truszczy) (NN nski) (CD 1999)))
                            (-RRB- -RRB-))
                          (SBAR
                            (WHADVP (WRB where))
                            (S
                              (NP (DT all) (JJ modern) (NNS solvers))
                              (VP (VBP use)
                                (NP (DT this) (NN architecture))))))))))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (NNP Gebser))
                    (, ,)
                    (NP (NNP Kaufmann))
                    (, ,)
                    (CC and)
                    (NP
                      (NP
                        (NP (NNP Schaub) (CD 2012))
                        (: ;)
                        (NP (CD 2013)))
                      (: ;)
                      (NP
                        (NP (NNP De) (NNP Cat)
                          (CC et)
                          (NNP al.))
                        (NP (CD 2013)))
                      (: ;)
                      (NP (NNP Alviano)
                        (CC et)
                        (NP (NN al.) (CD 2015)))))
                  (-RRB- -RRB-))))))))
    (. .)))

nsubj(happened-3, This-1)
aux(happened-3, has-2)
root(ROOT-0, happened-3)
case(example-5, for-4)
nmod:for(happened-3, example-5)
case(field-8, in-6)
det(field-8, the-7)
nmod:in(happened-3, field-8)
case(programming-11, of-9)
compound(programming-11, constraint-10)
nmod:of(field-8, programming-11)
dep(programming-11, Apt-13)
dep(Apt-13, 2003-14)
case(form-18, in-16)
det(form-18, the-17)
nmod:in(programming-11, form-18)
nmod:in(programming-11, form-18')
conj:and(form-18, form-18')
case(solvers-20, of-19)
nmod:of(form-18, solvers-20)
case(generation-24, with-21)
amod(generation-24, lazy-22)
compound(generation-24, clause-23)
nmod:with(solvers-20, generation-24)
dep(form-18, Ohrimenko-26)
dep(form-18, Stuckey-28)
conj:and(Ohrimenko-26, Stuckey-28)
cc(Ohrimenko-26, and-30)
dep(form-18, Codish-31)
conj:and(Ohrimenko-26, Codish-31)
nummod(Codish-31, 2009-32)
case(theories-38, in-35)
compound(theories-38, SAT-36)
compound(theories-38, modulo-37)
nmod:in(form-18, theories-38)
compound(et-41, Barrett-40)
nsubj(al.-42, et-41)
dep(form-18, al.-42)
dobj(al.-42, 2009-43)
case(form-47, in-45)
det(form-47, the-46)
nmod:in(form-18, form-47)
case(solvers-53, of-48)
amod(solvers-53, DPLL-49)
appos(solvers-53, T-51)
nmod:of(form-47, solvers-53)
dep(solvers-53, Ganzinger-55)
cc(Ganzinger-55, et-56)
dep(solvers-53, al.-57)
conj:et(Ganzinger-55, al.-57)
nummod(al.-57, 2004-58)
cc(form-18, and-61)
case(programming-65, in-62)
compound(programming-65, answer-63)
compound(programming-65, set-64)
nmod:in(form-18', programming-65)
dep(programming-65, Marek-67)
cc(Marek-67, and-68)
compound(nski-70, Truszczy-69)
dep(programming-65, nski-70)
conj:and(Marek-67, nski-70)
nummod(nski-70, 1999-71)
advmod(use-77, where-73)
det(solvers-76, all-74)
amod(solvers-76, modern-75)
nsubj(use-77, solvers-76)
acl:relcl(programming-65, use-77)
det(architecture-79, this-78)
dobj(use-77, architecture-79)
dep(programming-11, Gebser-81)
dep(programming-11, Kaufmann-83)
conj:and(Gebser-81, Kaufmann-83)
cc(Gebser-81, and-85)
dep(programming-11, Schaub-86)
conj:and(Gebser-81, Schaub-86)
nummod(Schaub-86, 2012-87)
dep(Schaub-86, 2013-89)
compound(Cat-92, De-91)
dep(Schaub-86, Cat-92)
cc(Cat-92, et-93)
dep(Schaub-86, al.-94)
conj:et(Cat-92, al.-94)
dep(Cat-92, 2013-95)
dep(Schaub-86, Alviano-97)
cc(Alviano-97, et-98)
dep(Schaub-86, al.-99)
conj:et(Alviano-97, al.-99)
nummod(al.-99, 2015-100)

(ROOT
  (S
    (NP
      (NP (JJ Several) (JJ further) (NNS extensions))
      (PP (TO to)
        (NP (NNP SAT))))
    (VP (VBP use)
      (NP
        (NP (DT the) (JJ same) (NN approach))
        (PRN (-LRB- -LRB-)
          (NP
            (NP (NNP Gebser) (, ,) (NNP Janhunen) (, ,)
              (CC and)
              (NNP Rintanen) (NNP 2014))
            (: ;)
            (NP (NNP Bayless)
              (CC et)
              (NNP al.) (NNP 2015)))
          (-RRB- -RRB-))))
    (. .)))

amod(extensions-3, Several-1)
amod(extensions-3, further-2)
nsubj(use-6, extensions-3)
case(SAT-5, to-4)
nmod:to(extensions-3, SAT-5)
root(ROOT-0, use-6)
det(approach-9, the-7)
amod(approach-9, same-8)
dobj(use-6, approach-9)
compound(Janhunen-13, Gebser-11)
dep(approach-9, Janhunen-13)
cc(Janhunen-13, and-15)
compound(2014-17, Rintanen-16)
dep(approach-9, 2014-17)
conj:and(Janhunen-13, 2014-17)
compound(2015-22, Bayless-19)
cc(Bayless-19, et-20)
conj:et(Bayless-19, al.-21)
compound(2015-22, al.-21)
dep(Janhunen-13, 2015-22)

(ROOT
  (S
    (NP (JJ Such) (NNS extensions))
    (VP (MD may)
      (PRN (-LRB- -LRB-)
        (NP (CD 1))
        (-RRB- -RRB-))
      (VP
        (VP (VB increase)
          (NP
            (NP (NN complexity))
            (PRN (-LRB- -LRB-)
              (PP (IN for)
                (NP
                  (NP (NNS applications))
                  (SBAR
                    (WHPP (IN in)
                      (WHNP (WDT which)))
                    (S
                      (NP
                        (NP (NNS tasks))
                        (PP (IN of)
                          (NP
                            (NP (DT a) (JJR higher) (NN complexity))
                            (PP (IN than)
                              (NP (NNP NP))))))
                      (VP (VBP are)
                        (VP (VBN required)
                          (S
                            (VP (TO to)
                              (VP (VB be)
                                (VP (VBN tackled)))))))))))
              (-RRB- -RRB-)))
          (, ,))
        (CC or)
        (PRN (-LRB- -LRB-)
          (NP (CD 2))
          (-RRB- -RRB-))
        (VP
          (VP (VB remain)
            (PP (IN in)
              (NP (NNP NP))))
          (CC but)
          (RB either)
          (VP (VB improve)
            (NP (DT an) (JJ encodCopyright) (NN c))
            (NP
              (NP (CD 2015))
              (, ,)
              (NP (DT The) (NNS authors)))))))
    (. .)))

amod(extensions-2, Such-1)
nsubj(increase-7, extensions-2)
nsubj(remain-32, extensions-2)
aux(increase-7, may-3)
dep(increase-7, 1-5)
root(ROOT-0, increase-7)
dobj(increase-7, complexity-8)
case(applications-11, for-10)
nmod:for(complexity-8, applications-11)
nmod:in(required-22, applications-11)
case(which-13, in-12)
ref(applications-11, which-13)
nsubjpass(required-22, tasks-14)
nsubjpass:xsubj(tackled-25, tasks-14)
case(complexity-18, of-15)
det(complexity-18, a-16)
amod(complexity-18, higher-17)
nmod:of(tasks-14, complexity-18)
case(NP-20, than-19)
nmod:than(complexity-18, NP-20)
auxpass(required-22, are-21)
acl:relcl(applications-11, required-22)
mark(tackled-25, to-23)
auxpass(tackled-25, be-24)
xcomp(required-22, tackled-25)
cc(increase-7, or-28)
dep(increase-7, 2-30)
conj:or(increase-7, remain-32)
case(NP-34, in-33)
nmod:in(remain-32, NP-34)
cc(remain-32, but-35)
advmod(remain-32, either-36)
dep(remain-32, improve-37)
det(c-40, an-38)
amod(c-40, encodCopyright-39)
iobj(improve-37, c-40)
dobj(improve-37, 2015-41)
det(authors-44, The-43)
appos(2015-41, authors-44)

(ROOT
  (S
    (NP (DT All) (NNS rights))
    (VP (VBD reserved))
    (. .)))

det(rights-2, All-1)
nsubj(reserved-3, rights-2)
root(ROOT-0, reserved-3)

(ROOT
  (S
    (VP (VB See)
      (NP
        (NP (NNP Section) (CD 3))
        (PP (IN for)
          (NP (DT a) (JJ detailed) (NN explanation)))))
    (. .)))

root(ROOT-0, See-1)
dobj(See-1, Section-2)
nummod(Section-2, 3-3)
case(explanation-7, for-4)
det(explanation-7, a-5)
amod(explanation-7, detailed-6)
nmod:for(Section-2, explanation-7)

(ROOT
  (S
    (NP
      (NP (DT Any) (NN solver))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBZ respects)
            (NP (DT the) (NN interface))))))
    (VP (VBN given)
      (PP (IN in)
        (NP (NNP Definition) (CD 3.3))))
    (. .)))

det(solver-2, Any-1)
nsubj(respects-4, solver-2)
nsubj(given-7, solver-2)
ref(solver-2, that-3)
acl:relcl(solver-2, respects-4)
det(interface-6, the-5)
dobj(respects-4, interface-6)
root(ROOT-0, given-7)
case(Definition-9, in-8)
nmod:in(given-7, Definition-9)
nummod(Definition-9, 3.3-10)

(ROOT
  (S
    (VP (VBN designed)
      (PP (IN for)
        (NP (NNP QBF)))
      (ADVP (RB specifically)))
    (. .)))

root(ROOT-0, designed-1)
case(QBF-3, for-2)
nmod:for(designed-1, QBF-3)
advmod(designed-1, specifically-4)

(ROOT
  (S
    (ADVP (RB Furthermore))
    (, ,)
    (NP (PRP$ our) (JJ current) (NN implementation))
    (VP (VBZ is)
      (VP (VBN built)
        (PP (IN on)
          (NP
            (NP (DT the) (JJ popular) (NNP SAT) (NNP solver) (NNP G) (NNP LUCOSE))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NNP Audemard))
                (CC and)
                (NP (NNP Simon) (CD 2009)))
              (-RRB- -RRB-))))))
    (. .)))

advmod(built-7, Furthermore-1)
nmod:poss(implementation-5, our-3)
amod(implementation-5, current-4)
nsubjpass(built-7, implementation-5)
auxpass(built-7, is-6)
root(ROOT-0, built-7)
case(LUCOSE-14, on-8)
det(LUCOSE-14, the-9)
amod(LUCOSE-14, popular-10)
compound(LUCOSE-14, SAT-11)
compound(LUCOSE-14, solver-12)
compound(LUCOSE-14, G-13)
nmod:on(built-7, LUCOSE-14)
dep(LUCOSE-14, Audemard-16)
cc(Audemard-16, and-17)
dep(LUCOSE-14, Simon-18)
conj:and(Audemard-16, Simon-18)
nummod(Simon-18, 2009-19)

(ROOT
  (S
    (PP (IN In)
      (NP (NN principle)))
    (, ,)
    (NP (DT any) (NNP SAT) (NN solver))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN plugged)
          (PRT (RP in))
          (, ,)
          (S
            (VP (VBG resulting)
              (PP (IN in)
                (NP (DT a)
                  (ADJP (RB strongly) (VBN improved))
                  (NN performance))))))))
    (. .)))

case(principle-2, In-1)
nmod:in(plugged-9, principle-2)
det(solver-6, any-4)
compound(solver-6, SAT-5)
nsubjpass(plugged-9, solver-6)
aux(plugged-9, can-7)
auxpass(plugged-9, be-8)
root(ROOT-0, plugged-9)
compound:prt(plugged-9, in-10)
xcomp(plugged-9, resulting-12)
case(performance-17, in-13)
det(performance-17, a-14)
advmod(improved-16, strongly-15)
amod(performance-17, improved-16)
nmod:in(resulting-12, performance-17)

(ROOT
  (S
    (NP
      (NP (DT The) (NNS ideas))
      (VP (VBN presented)
        (ADVP (RB here))))
    (ADVP (RB also))
    (VP (VBD shed)
      (NP (JJ new) (NN light))
      (PP (IN on)
        (NP
          (NP (NNS techniques))
          (VP (VBN used)
            (PP (IN in)
              (NP (NNP QBF)))))))
    (. .)))

det(ideas-2, The-1)
nsubj(shed-6, ideas-2)
acl(ideas-2, presented-3)
advmod(presented-3, here-4)
advmod(shed-6, also-5)
root(ROOT-0, shed-6)
amod(light-8, new-7)
dobj(shed-6, light-8)
case(techniques-10, on-9)
nmod:on(shed-6, techniques-10)
acl(techniques-10, used-11)
case(QBF-13, in-12)
nmod:in(used-11, QBF-13)

(ROOT
  (S
    (PP (IN For)
      (NP (NN example)))
    (, ,)
    (NP
      (NP (JJ conflict-driven) (NN clauselearning)
        (CC and)
        (NN solution-driven) (NN cube-learning))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (NNP Giunchiglia))
          (, ,)
          (NP (NNP Narizzano))
          (, ,)
          (CC and)
          (NP
            (NP
              (NP (NNP Tacchella) (CD 2002))
              (: ;)
              (NP (NNP Letz) (CD 2002)))
            (: ;)
            (NP
              (NP (NNP Zhang))
              (CC and)
              (NP (NNP Malik) (CD 2002)))
            (: ;)
            (NP
              (NP (NNP Chu))
              (CC and)
              (NP (NNP Stuckey) (CD 2014)))))
        (-RRB- -RRB-)))
    (VP (VBP are)
      (ADJP (RB completely) (VBN unified)
        (PP (IN in)
          (NP
            (NP (PRP$ our) (NN framework))
            (PP (IN as)
              (NP
                (NP (JJ clause-learning)
                  (ADJP
                    (ADJP (JJ occurring)
                      (PP (IN in)
                        (ADVP (RB even))))
                    (PRN (-LRB- -LRB-)
                      (ADVP (RB respectively))
                      (ADJP (JJ odd))
                      (-RRB- -RRB-)))
                  (NNS levels))
                (PP (IN of)
                  (NP (JJ nesting) (NN depth)))))))))
    (. .)))

case(example-2, For-1)
nmod:for(unified-33, example-2)
amod(clauselearning-5, conflict-driven-4)
nsubjpass(unified-33, clauselearning-5)
cc(clauselearning-5, and-6)
compound(cube-learning-8, solution-driven-7)
conj:and(clauselearning-5, cube-learning-8)
nsubjpass(unified-33, cube-learning-8)
dep(clauselearning-5, Giunchiglia-10)
dep(clauselearning-5, Narizzano-12)
conj:and(Giunchiglia-10, Narizzano-12)
cc(Giunchiglia-10, and-14)
dep(clauselearning-5, Tacchella-15)
conj:and(Giunchiglia-10, Tacchella-15)
nummod(Tacchella-15, 2002-16)
dep(Tacchella-15, Letz-18)
nummod(Letz-18, 2002-19)
dep(Tacchella-15, Zhang-21)
cc(Zhang-21, and-22)
dep(Tacchella-15, Malik-23)
conj:and(Zhang-21, Malik-23)
nummod(Malik-23, 2002-24)
dep(Tacchella-15, Chu-26)
cc(Chu-26, and-27)
dep(Tacchella-15, Stuckey-28)
conj:and(Chu-26, Stuckey-28)
nummod(Stuckey-28, 2014-29)
auxpass(unified-33, are-31)
advmod(unified-33, completely-32)
root(ROOT-0, unified-33)
case(framework-36, in-34)
nmod:poss(framework-36, our-35)
nmod:in(unified-33, framework-36)
case(levels-46, as-37)
amod(levels-46, clause-learning-38)
amod(levels-46, occurring-39)
case(even-41, in-40)
advcl(occurring-39, even-41)
dep(odd-44, respectively-43)
dep(occurring-39, odd-44)
nmod:as(framework-36, levels-46)
case(depth-49, of-47)
amod(depth-49, nesting-48)
nmod:of(levels-46, depth-49)

(ROOT
  (S
    (S
      (NP
        (NP (DT The) (JJ main) (NNS contributions))
        (PP (IN of)
          (NP (DT this) (NN paper))))
      (VP (VBP are)
        (ADJP (RB as) (JJ follows))))
    (: :)
    (S
      (LST (-LRB- -LRB-) (LS 1) (-RRB- -RRB-))
      (NP (PRP We))
      (VP (VBP show)
        (SBAR
          (WHADVP (WRB how))
          (S
            (NP
              (NP (NNP SAT))
              (PRN (: -)
                (NP (NNP TO))
                (: -)))
            (ADVP (RB SAT))
            (VP (MD can)
              (VP (VB be)
                (VP (VBN extended)
                  (PP (TO to)
                    (NP (DT a) (NNP QBFsolver))))))))))
    (. .)))

det(contributions-3, The-1)
amod(contributions-3, main-2)
nsubj(follows-9, contributions-3)
case(paper-6, of-4)
det(paper-6, this-5)
nmod:of(contributions-3, paper-6)
cop(follows-9, are-7)
advmod(follows-9, as-8)
root(ROOT-0, follows-9)
dep(show-15, 1-12)
nsubj(show-15, We-14)
parataxis(follows-9, show-15)
advmod(extended-24, how-16)
nsubjpass(extended-24, SAT-17)
dep(SAT-17, TO-19)
advmod(extended-24, SAT-21)
aux(extended-24, can-22)
auxpass(extended-24, be-23)
ccomp(show-15, extended-24)
case(QBFsolver-27, to-25)
det(QBFsolver-27, a-26)
nmod:to(extended-24, QBFsolver-27)

(ROOT
  (S
    (S
      (NP (DT This))
      (VP (VBZ results)
        (PP (IN in)
          (NP (DT a) (JJ principled) (, ,) (JJ low-cost) (NN way)))
        (S
          (VP (TO to)
            (VP (VB transfer)
              (NP (NNS improvements))
              (PP (IN from)
                (NP (NNP SAT)))
              (PP (TO to)
                (NP (NNP QBF))))))))
    (: ;)
    (S
      (LST (-LRB- -LRB-) (LS 2) (-RRB- -RRB-))
      (SBAR
        (UCP
          (ADVP (RB Furthermore))
          (, ,)
          (PP (IN since)))
        (S
          (NP (DT the) (JJ nesting) (NN idea))
          (VP (VBZ is)
            (ADJP (RB completely) (JJ orthogonal)
              (PP (TO to)
                (NP (JJ other) (NN language) (NNS extensions)))))))
      (, ,)
      (NP (PRP we))
      (VP (MD can)
        (ADVP (RB also))
        (VP (VB lift)
          (NP
            (NP (NNS extensions))
            (PP (IN of)
              (NP (NNP SAT))))
          (PP (TO to)
            (NP (NNP QBF)))
          (, ,)
          (PP (IN for)
            (NP
              (NP (NN example))
              (VP (VBG resulting)
                (PP (IN in)
                  (NP
                    (NP
                      (NP (NNP QBF) (NN modulo) (NNS theories))
                      (-LRB- -LRB-)
                      (NP (NNP QBF))
                      (PRN (-LRB- -LRB-)
                        (NP (NNP T))
                        (-RRB- -RRB-))
                      (-RRB- -RRB-))
                    (CC or)
                    (NP
                      (NP (NNS solvers))
                      (PP (IN for)
                        (NP
                          (NP (NNP QBF) (NN modulo) (NN acyclicity))
                          (PRN (-LRB- -LRB-)
                            (NP (NNP Acyc-QBF))
                            (-RRB- -RRB-)))))))))))))
    (. .)))

nsubj(results-2, This-1)
nsubj:xsubj(transfer-10, This-1)
root(ROOT-0, results-2)
case(way-8, in-3)
det(way-8, a-4)
amod(way-8, principled-5)
amod(way-8, low-cost-7)
nmod:in(results-2, way-8)
mark(transfer-10, to-9)
xcomp(results-2, transfer-10)
dobj(transfer-10, improvements-11)
case(SAT-13, from-12)
nmod:from(transfer-10, SAT-13)
case(QBF-15, to-14)
nmod:to(transfer-10, QBF-15)
dep(lift-37, 2-18)
advmod(orthogonal-28, Furthermore-20)
dep(Furthermore-20, since-22)
det(idea-25, the-23)
amod(idea-25, nesting-24)
nsubj(orthogonal-28, idea-25)
cop(orthogonal-28, is-26)
advmod(orthogonal-28, completely-27)
advcl(lift-37, orthogonal-28)
case(extensions-32, to-29)
amod(extensions-32, other-30)
compound(extensions-32, language-31)
nmod:to(orthogonal-28, extensions-32)
nsubj(lift-37, we-34)
aux(lift-37, can-35)
advmod(lift-37, also-36)
parataxis(results-2, lift-37)
dobj(lift-37, extensions-38)
case(SAT-40, of-39)
nmod:of(extensions-38, SAT-40)
case(QBF-42, to-41)
nmod:to(lift-37, QBF-42)
case(example-45, for-44)
nmod:for(lift-37, example-45)
acl(example-45, resulting-46)
case(theories-50, in-47)
compound(theories-50, QBF-48)
compound(theories-50, modulo-49)
nmod:in(resulting-46, theories-50)
dep(theories-50, QBF-52)
appos(theories-50, T-54)
cc(theories-50, or-57)
nmod:in(resulting-46, solvers-58)
conj:or(theories-50, solvers-58)
case(acyclicity-62, for-59)
compound(acyclicity-62, QBF-60)
compound(acyclicity-62, modulo-61)
nmod:for(solvers-58, acyclicity-62)
appos(acyclicity-62, Acyc-QBF-64)

(ROOT
  (S
    (VP (VBZ is)
      (VP (VBN called)
        (NP (DT a) (NNP QBF) (NN sentence))))
    (. .)))

auxpass(called-2, is-1)
root(ROOT-0, called-2)
det(sentence-5, a-3)
compound(sentence-5, QBF-4)
dobj(called-2, sentence-5)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP use)))
    (: :)
    (S
      (VP (TO to)
        (VP (VB abbreviate)
          (NP
            (NP (NNS p1))
            (: ...)
            (NP (NN pn))
            (: :))
          (SBAR
            (SBAR (IN if)
              (FRAG
                (VP (VBN =) (-LRB- -LCB-)
                  (NP (NNS p1))
                  (, ,))))
            (: ...)
            (PRN (, ,)
              (S
                (VP (VB pn)))))
          (-RRB- -RCB-))))
    (. .)))

nsubj(use-2, We-1)
root(ROOT-0, use-2)
mark(abbreviate-5, to-4)
parataxis(use-2, abbreviate-5)
dobj(abbreviate-5, p1-6)
dep(p1-6, pn-8)
mark(=-11, if-10)
advcl(abbreviate-5, =-11)
dobj(=-11, p1-13)
dep(=-11, pn-17)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (VP (VBZ is)
          (NP (DT a) (JJ propositional) (NN formula)))))
    (, ,)
    (NP (PRP we))
    (VP (VBP use)
      (SBAR
        (S
          (NP (NNP -LRB-))
          (-RRB- -RRB-)
          (VP (TO to)
            (VP (VB denote)
              (SBAR (IN that)
                (S
                  (NP
                    (NP (DT the) (JJ free) (NNS symbols))
                    (PP (IN of)))
                  (VP (VBP are)
                    (ADVP (DT all) (IN in))
                    (, ,)
                    (INTJ (UH i.e.))
                    (, ,)
                    (SBAR (IN that)
                      (S
                        (VP (VBZ is)
                          (NP (DT a) (NNP -) (NNP QBF)))))))))))))
    (. .)))

mark(formula-5, If-1)
cop(formula-5, is-2)
det(formula-5, a-3)
amod(formula-5, propositional-4)
advcl(use-8, formula-5)
nsubj(use-8, we-7)
root(ROOT-0, use-8)
nsubj(denote-12, -LRB--9)
mark(denote-12, to-11)
ccomp(use-8, denote-12)
mark(are-18, that-13)
det(symbols-16, the-14)
amod(symbols-16, free-15)
nsubj(are-18, symbols-16)
acl(symbols-16, of-17)
ccomp(denote-12, are-18)
advmod(are-18, all-19)
case(all-19, in-20)
discourse(are-18, i.e.-22)
mark(QBF-28, that-24)
cop(QBF-28, is-25)
det(QBF-28, a-26)
compound(QBF-28, --27)
ccomp(are-18, QBF-28)

(ROOT
  (S
    (NP (DT A) (NN prenex) (NN QBF))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NNP QBF))
        (SBAR
          (WHPP (IN in)
            (WHNP (WDT which)))
          (S
            (NP (DT all) (NNS quantifiers))
            (VP (VBP are)
              (PP (IN in)
                (NP (DT the) (NN front)))
              (, ,)
              (INTJ (UH i.e.))
              (, ,)
              (NP
                (NP (DT a) (NN set))
                (PP (IN of)
                  (NP
                    (NP (NNS quantifiers))
                    (VP (VBN followed)
                      (PP (IN by)
                        (NP (DT a) (JJ propositional) (NN formula))))))))))))
    (. .)))

det(QBF-3, A-1)
compound(QBF-3, prenex-2)
nsubj(QBF-6, QBF-3)
cop(QBF-6, is-4)
det(QBF-6, a-5)
root(ROOT-0, QBF-6)
nmod:in(set-19, QBF-6)
case(which-8, in-7)
ref(QBF-6, which-8)
det(quantifiers-10, all-9)
nsubj(set-19, quantifiers-10)
cop(set-19, are-11)
case(front-14, in-12)
det(front-14, the-13)
nmod:in(set-19, front-14)
discourse(set-19, i.e.-16)
det(set-19, a-18)
acl:relcl(QBF-6, set-19)
case(quantifiers-21, of-20)
nmod:of(set-19, quantifiers-21)
acl(quantifiers-21, followed-22)
case(formula-26, by-23)
det(formula-26, a-24)
amod(formula-26, propositional-25)
nmod:by(followed-22, formula-26)

(ROOT
  (S
    (NP (DT The) (NNP QDIMACS) (NN format))
    (VP (VBZ is)
      (NP (DT a) (JJ numerical) (NN format)
        (S
          (VP (TO to)
            (VP (VB describe)
              (NP
                (NP (DT a) (JJ prenex) (NN QBF))
                (SBAR
                  (WHPP (IN in)
                    (WHNP (WDT which)))
                  (S
                    (NP (DT the) (JJ propositional) (NN formula))
                    (VP (VBZ is)
                      (NP (DT a) (NNP CNF) (NN formula)))))))))))
    (. .)))

det(format-3, The-1)
compound(format-3, QDIMACS-2)
nsubj(format-7, format-3)
cop(format-7, is-4)
det(format-7, a-5)
amod(format-7, numerical-6)
root(ROOT-0, format-7)
mark(describe-9, to-8)
acl(format-7, describe-9)
det(QBF-12, a-10)
amod(QBF-12, prenex-11)
dobj(describe-9, QBF-12)
nmod:in(formula-21, QBF-12)
case(which-14, in-13)
ref(QBF-12, which-14)
det(formula-17, the-15)
amod(formula-17, propositional-16)
nsubj(formula-21, formula-17)
cop(formula-21, is-18)
det(formula-21, a-19)
compound(formula-21, CNF-20)
acl:relcl(QBF-12, formula-21)

(ROOT
  (S
    (NP (DT The) (NN format))
    (VP (VBZ is)
      (NP
        (NP (DT the) (JJ de-facto) (NN standard))
        (PP (IN for)
          (S
            (VP (VBG representing)
              (NP (NNP QBF) (NNS instances)))))))
    (. .)))

det(format-2, The-1)
nsubj(standard-6, format-2)
cop(standard-6, is-3)
det(standard-6, the-4)
amod(standard-6, de-facto-5)
root(ROOT-0, standard-6)
mark(representing-8, for-7)
acl(standard-6, representing-8)
compound(instances-10, QBF-9)
dobj(representing-8, instances-10)

(ROOT
  (NP
    (NP (NNP Satisfiability) (NNP Relation))
    (PP (IN for)
      (NP (NNP QBFs)))
    (. .)))

compound(Relation-2, Satisfiability-1)
root(ROOT-0, Relation-2)
case(QBFs-4, for-3)
nmod:for(Relation-2, QBFs-4)

(ROOT
  (S
    (S
      (NP
        (NP (DT The) (JJ satisfiability) (NN relation))
        (PP (IN between) (: -)
          (NP
            (NP (NNS interpretations) (NN I))
            (CC and)
            (NP (DT a) (: -) (NNS QBFs))))
        (, ,)
        (VP (VBN denoted)
          (PP (IN by)
            (S
              (NP (PRP I))
              (VP (VBG |)
                (NP (NNS =))))))
        (, ,))
      (VP (VBZ is)
        (VP (VBN defined)
          (ADVP (RB recursively))
          (PP (IN in)
            (NP (DT the) (JJ standard) (NN way))))))
    (: :)
    (S
      (X (SYM *))
      (NP (PRP I))
      (VP (VBP |)
        (S
          (VP (SYM =)
            (NP (NN p))))
        (SBAR (IN if)
          (S
            (NP (PRP I)
              (PRN (-LRB- -LRB-)
                (NP (NN p))
                (-RRB- -RRB-)))
            (ADVP (RB =))
            (VP (VBP t.)
              (SBAR
                (SBAR
                  (X (SYM *))
                  (S
                    (NP (PRP I))
                    (ADVP (RB |))
                    (VP (VBZ =)
                      (SBAR (IN if)
                        (S
                          (NP (PRP I))
                          (VP (VBZ |)
                            (ADJP (JJ =))))))))
                (: ;)
                (SBAR
                  (X (SYM *))
                  (S
                    (NP (PRP I))
                    (VP
                      (ADVP (RB |))
                      (VBZ =) (-LRB- -LRB-)
                      (NP (NN resp)))))))))))
    (. .)))

det(relation-3, The-1)
amod(relation-3, satisfiability-2)
nsubjpass(defined-20, relation-3)
case(I-7, between-4)
compound(I-7, interpretations-6)
nmod:between(relation-3, I-7)
cc(I-7, and-8)
det(QBFs-11, a-9)
nmod:between(relation-3, QBFs-11)
conj:and(I-7, QBFs-11)
acl(relation-3, denoted-13)
mark(|-16, by-14)
nsubj(|-16, I-15)
advcl(denoted-13, |-16)
dobj(|-16, =-17)
auxpass(defined-20, is-19)
root(ROOT-0, defined-20)
advmod(defined-20, recursively-21)
case(way-25, in-22)
det(way-25, the-23)
amod(way-25, standard-24)
nmod:in(defined-20, way-25)
dep(|-29, *-27)
nsubj(|-29, I-28)
parataxis(defined-20, |-29)
dep(p-31, =-30)
ccomp(|-29, p-31)
mark(t.-38, if-32)
nsubj(t.-38, I-33)
appos(I-33, p-35)
advmod(t.-38, =-37)
advcl(|-29, t.-38)
dep(=-42, *-39)
nsubj(=-42, I-40)
advmod(=-42, |-41)
dep(t.-38, =-42)
mark(|-45, if-43)
nsubj(|-45, I-44)
advcl(=-42, |-45)
xcomp(|-45, =-46)
dep(=-51, *-48)
nsubj(=-51, I-49)
advmod(=-51, |-50)
dep(=-42, =-51)
dobj(=-51, resp-53)

(ROOT
  (S
    (NP (NNP I) (NNP |) (NNP =) (-RRB- -RRB-))
    (SBAR (IN if)
      (S
        (NP (PRP I))
        (ADVP (RB |))
        (VP
          (ADVP (RB =))
          (VB and) (-LRB- -LRB-)
          (NP (NN resp)))))
    (. .)))

compound(=-3, I-1)
compound(=-3, |-2)
dep(and-9, =-3)
mark(and-9, if-5)
nsubj(and-9, I-6)
advmod(and-9, |-7)
advmod(and-9, =-8)
root(ROOT-0, and-9)
dobj(and-9, resp-11)

(ROOT
  (FRAG
    (FRAG (CC or)
      (PP (IN -RRB-)
        (NP (PRP I))))
    (: |)
    (FRAG
      (NP (NNP =))
      (: ;)
      (FRAG
        (FRAG
          (X (SYM *))
          (NP (PRP I)))
        (: |)
        (FRAG
          (X
            (X (SYM =))
            (NP (SYM x)))
          (: :)
          (NP (JJ -LRB-) (NN resp))))
      (. .))))

root(ROOT-0, or-1)
case(I-3, -RRB--2)
nmod:-rrb-(or-1, I-3)
parataxis(or-1, =-5)
dep(I-8, *-7)
dep(=-5, I-8)
dep(x-11, =-10)
dep(resp-14, x-11)
amod(resp-14, -LRB--13)
parataxis(I-8, resp-14)

(ROOT
  (S
    (NP (PRP I))
    (VP
      (PRN
        (NP
          (NP (NNP |))
          (PP (IN =)
            (NP
              (NP (SYM x))
              (: :))))
        (-RRB- -RRB-))
      (PP (IN if)
        (NP
          (NP
            (PRN (-LRB- -LRB-)
              (NP
                (NP (PRP I))
                (NP (-LRB- -LCB-) (NN xt) (-RRB- -RCB-)))
              (-RRB- -RRB-))
            (NNP |) (NNP =))
          (NP (NNP and) (-LRB- -LRB-) (NNP resp)))))
    (. .)))

nsubj(|-2, I-1)
root(ROOT-0, |-2)
case(x-4, =-3)
nmod:=(|-2, x-4)
case(=-15, if-7)
dep(=-15, I-9)
appos(I-9, xt-11)
compound(=-15, |-14)
nmod:if(|-2, =-15)
compound(resp-18, and-16)
dep(=-15, resp-18)

(ROOT
  (S
    (NP
      (QP (CC or)
        (CD -RRB-))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (PRP I))
          (NP (-LRB- -LCB-) (NN xf) (-RRB- -RCB-)))
        (-RRB- -RRB-)))
    (VP (VBP |)
      (ADJP (JJ =)))
    (. .)))

cc(-RRB--2, or-1)
nsubj(|-9, -RRB--2)
dep(-RRB--2, I-4)
appos(I-4, xf-6)
root(ROOT-0, |-9)
xcomp(|-9, =-10)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (PRP I))
        (VP (VB be)
          (NP
            (NP (DT a) (-LRB- -LRB-) (NN partial) (-RRB- -RRB-))
            (: -)
            (NP (NN interpretation))))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(partial-6, I-2)
cop(partial-6, be-3)
det(partial-6, a-4)
ccomp(Let-1, partial-6)
dep(partial-6, interpretation-9)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP call)
      (NP (DT a)
        (PRN (: -)
          (NP (NNP QBF) (NNP I))
          (: -))
        (NN satisfiable))
      (SBAR (IN if)
        (S
          (S
            (NP (EX there))
            (VP (VBZ exists)
              (NP
                (NP (DT a) (NN model))
                (PP (IN of)
                  (ADJP
                    (ADJP (RBR more) (JJ precise))
                    (PP (IN than)
                      (NP (PRP I))))))))
          (CC and)
          (S
            (NP (PRP I))
            (: -)
            (NP
              (NP (NN unsatisfiable))
              (ADVP (RB otherwise)))))))
    (. .)))

nsubj(call-2, We-1)
root(ROOT-0, call-2)
det(satisfiable-8, a-3)
compound(I-6, QBF-5)
dep(satisfiable-8, I-6)
dobj(call-2, satisfiable-8)
mark(exists-11, if-9)
expl(exists-11, there-10)
advcl(call-2, exists-11)
det(model-13, a-12)
dobj(exists-11, model-13)
case(precise-16, of-14)
advmod(precise-16, more-15)
acl(model-13, precise-16)
case(I-18, than-17)
nmod:than(precise-16, I-18)
cc(exists-11, and-19)
dep(unsatisfiable-22, I-20)
advcl(call-2, unsatisfiable-22)
conj:and(exists-11, unsatisfiable-22)
advmod(unsatisfiable-22, otherwise-23)

(ROOT
  (NP
    (NP (CD 2))
    (NP (NNP Background) (NNPS Vocabularies)
      (CC and)
      (NNPS Interpretations))
    (. .)))

root(ROOT-0, 2-1)
compound(Vocabularies-3, Background-2)
dep(2-1, Vocabularies-3)
cc(Vocabularies-3, and-4)
dep(2-1, Interpretations-5)
conj:and(Vocabularies-3, Interpretations-5)

(ROOT
  (S
    (NP (DT A) (NN vocabulary))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN set))
        (PP (IN of)
          (NP
            (NP (NNS symbols))
            (, ,)
            (VP
              (ADVP (RB also))
              (VBN called)
              (NP
                (NP (NNS atoms))
                (: ;)
                (S
                  (NP (PRP we))
                  (VP (VBP use)))))
            (, ,))))
      (, ,)
      (S
        (VP (TO to)
          (VP (VB refer)
            (PP (TO to)
              (NP (NNS vocabularies)))))))
    (. .)))

det(vocabulary-2, A-1)
nsubj(set-5, vocabulary-2)
cop(set-5, is-3)
det(set-5, a-4)
root(ROOT-0, set-5)
case(symbols-7, of-6)
nmod:of(set-5, symbols-7)
advmod(called-10, also-9)
acl(symbols-7, called-10)
dobj(called-10, atoms-11)
nsubj(use-14, we-13)
appos(atoms-11, use-14)
mark(refer-18, to-17)
advcl(set-5, refer-18)
case(vocabularies-20, to-19)
nmod:to(refer-18, vocabularies-20)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (VP (VBZ is)
          (NP (DT a) (NN vocabulary)))))
    (, ,)
    (NP (DT a)
      (PRN (-LRB- -LRB-)
        (ADJP (JJ two-valued))
        (-RRB- -RRB-))
      (NN interpretation))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN mapping))
        (PRN (-LRB- -LCB-)
          (NP
            (NP (NN t))
            (, ,)
            (NP (SYM f)))
          (-RRB- -RCB-))
        (SBAR
          (WHADVP (WRB where))
          (S
            (S
              (NP (NN t))
              (VP (VBZ denotes)
                (ADJP (JJ true))))
            (CC and)
            (S
              (NP (SYM f))
              (ADJP (JJ false)))))))
    (. .)))

mark(vocabulary-4, If-1)
cop(vocabulary-4, is-2)
det(vocabulary-4, a-3)
advcl(mapping-13, vocabulary-4)
det(interpretation-10, a-6)
dep(interpretation-10, two-valued-8)
nsubj(mapping-13, interpretation-10)
cop(mapping-13, is-11)
det(mapping-13, a-12)
root(ROOT-0, mapping-13)
dep(mapping-13, t-15)
appos(t-15, f-17)
advmod(denotes-21, where-19)
nsubj(denotes-21, t-20)
nsubj(false-25, t-20)
acl:relcl(mapping-13, denotes-21)
xcomp(denotes-21, true-22)
cc(denotes-21, and-23)
dep(false-25, f-24)
acl:relcl(mapping-13, false-25)
conj:and(denotes-21, false-25)

(ROOT
  (S
    (NP (DT A) (JJ partial) (NN -) (NN interpretation))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN mapping))
        (PRN (-LRB- -LCB-)
          (NP
            (NP (NN t))
            (, ,)
            (NP (SYM f))
            (, ,)
            (NP (NN u)))
          (-RRB- -RCB-)))
      (, ,)
      (SBAR
        (WHADVP (WRB where))
        (S
          (NP (NN u))
          (VP (VBZ denotes)
            (ADJP (JJ unknown))))))
    (. .)))

det(interpretation-4, A-1)
amod(interpretation-4, partial-2)
compound(interpretation-4, --3)
nsubj(mapping-7, interpretation-4)
cop(mapping-7, is-5)
det(mapping-7, a-6)
root(ROOT-0, mapping-7)
dep(mapping-7, t-9)
appos(t-9, f-11)
appos(t-9, u-13)
advmod(denotes-18, where-16)
nsubj(denotes-18, u-17)
advcl(mapping-7, denotes-18)
xcomp(denotes-18, unknown-19)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB often))
    (VP (VBP identify)
      (NP (DT a)
        (UCP
          (ADJP (JJ partial))
          (: -)
          (NP
            (NP (NNP interpretation) (NNP J))
            (PP (IN with)
              (NP
                (NP (DT a) (NN set))
                (PP (IN of)
                  (NP (NNS tuples)))))))
        (NN pv))
      (PP (IN with)
        (NP
          (NP (NN p))
          (, ,)
          (NP
            (NP (NN v))
            (PRN (-LRB- -LCB-)
              (NP
                (NP (NN t))
                (, ,)
                (NP (SYM f)))
              (-RRB- -RCB-)))))
      (PRN (-LRB- -LRB-)
        (PP (IN with)
          (NP
            (NP (DT each) (NN atom))
            (VP (VBG occurring)
              (ADVP (IN at) (RBS most))
              (ADVP (RB once)))))
        (-RRB- -RRB-))
      (, ,)
      (S
        (VP (VBG meaning)
          (SBAR (IN that)
            (S
              (NP (NNP J))
              (VP (VBZ sends)
                (NP
                  (NP
                    (NP (DT all) (NNS atoms))
                    (VP (VBG occurring)
                      (PP (IN in)
                        (NP (DT this) (NN set)))
                      (PP (TO to)
                        (NP (PRP$ their) (JJ corresponding) (NNS values)))))
                  (, ,)
                  (CC and)
                  (NP
                    (NP (DT all) (NNS others))
                    (PP (TO to)
                      (NP (NN unknown)))))))))))
    (. .)))

nsubj(identify-3, We-1)
advmod(identify-3, often-2)
root(ROOT-0, identify-3)
det(pv-14, a-4)
amod(pv-14, partial-5)
compound(J-8, interpretation-7)
dep(partial-5, J-8)
case(set-11, with-9)
det(set-11, a-10)
nmod:with(J-8, set-11)
case(tuples-13, of-12)
nmod:of(set-11, tuples-13)
dobj(identify-3, pv-14)
case(p-16, with-15)
nmod:with(identify-3, p-16)
appos(p-16, v-18)
dep(v-18, t-20)
appos(t-20, f-22)
case(atom-27, with-25)
det(atom-27, each-26)
dep(identify-3, atom-27)
acl(atom-27, occurring-28)
case(most-30, at-29)
advmod(occurring-28, most-30)
advmod(occurring-28, once-31)
xcomp(identify-3, meaning-34)
mark(sends-37, that-35)
nsubj(sends-37, J-36)
ccomp(meaning-34, sends-37)
det(atoms-39, all-38)
dobj(sends-37, atoms-39)
acl(atoms-39, occurring-40)
case(set-43, in-41)
det(set-43, this-42)
nmod:in(occurring-40, set-43)
case(values-47, to-44)
nmod:poss(values-47, their-45)
amod(values-47, corresponding-46)
nmod:to(occurring-40, values-47)
cc(atoms-39, and-49)
det(others-51, all-50)
dobj(sends-37, others-51)
conj:and(atoms-39, others-51)
case(unknown-53, to-52)
nmod:to(others-51, unknown-53)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ allows)
      (S
        (NP (PRP us))
        (VP (TO to)
          (VP (VB define)
            (NP
              (NP (DT the) (`` ``) (NN union) ('' ''))
              (PP (IN of)
                (NP (CD two) (NN interpretation))))))))
    (. .)))

nsubj(allows-2, This-1)
root(ROOT-0, allows-2)
dobj(allows-2, us-3)
nsubj:xsubj(define-5, us-3)
mark(define-5, to-4)
xcomp(allows-2, define-5)
det(union-8, the-6)
dobj(define-5, union-8)
case(interpretation-12, of-10)
nummod(interpretation-12, two-11)
nmod:of(union-8, interpretation-12)

(ROOT
  (S
    (S
      (ADVP (RB E.g.))
      (, ,)
      (SBAR (IN if)
        (S
          (NP (NNP and))
          (VP (VBP are)
            (ADJP (JJ disjoint)))))
      (, ,)
      (NP (PRP I))
      (VP (VBZ is)
        (NP (DT a)
          (ADJP
            (ADJP (-LRB- -LRB-)
              (NP
                (QP (CD partial)))
              (-RRB- -RRB-))
            (PRN (: -)
              (S
                (NP
                  (NP (NN interpretation))
                  (CC and)
                  (NP (NNP J)))
                (NP (DT a) (-LRB- -LRB-) (NN partial) (-RRB- -RRB-)))
              (: -)))
          (NN interpretation))))
    (, ,)
    (NP (PRP we))
    (VP (VBP use)
      (SBAR
        (S
          (NP (PRP I))
          (VP (VBZ J)
            (S
              (VP (TO to)
                (VP (VB interpret)
                  (NP (NNS symbols))
                  (PP (IN in) (IN in)
                    (NP
                      (NP (DT the) (JJ same) (NN way))
                      (PP (IN as)
                        (NP (PRP I)
                          (CC and)
                          (NNS symbols)))))
                  (PP (IN in) (IN in)
                    (NP
                      (NP (DT the) (JJ same) (NN way))
                      (PP (IN as)
                        (NP (NNP J))))))))))))
    (. .)))

advmod(interpretation-23, E.g.-1)
mark(disjoint-6, if-3)
nsubj(disjoint-6, and-4)
cop(disjoint-6, are-5)
advcl(interpretation-23, disjoint-6)
nsubj(interpretation-23, I-8)
cop(interpretation-23, is-9)
det(interpretation-23, a-10)
amod(interpretation-23, partial-12)
dep(partial-20, interpretation-15)
cc(interpretation-15, and-16)
conj:and(interpretation-15, J-17)
dep(partial-20, J-17)
det(partial-20, a-18)
dep(partial-12, partial-20)
ccomp(use-26, interpretation-23)
nsubj(use-26, we-25)
root(ROOT-0, use-26)
nsubj(J-28, I-27)
nsubj:xsubj(interpret-30, I-27)
ccomp(use-26, J-28)
mark(interpret-30, to-29)
xcomp(J-28, interpret-30)
dobj(interpret-30, symbols-31)
case(way-36, in-32)
case(way-36, in-33)
det(way-36, the-34)
amod(way-36, same-35)
nmod:in(interpret-30, way-36)
case(I-38, as-37)
nmod:as(way-36, I-38)
cc(I-38, and-39)
nmod:as(way-36, symbols-40)
conj:and(I-38, symbols-40)
case(way-45, in-41)
case(way-45, in-42)
det(way-45, the-43)
amod(way-45, same-44)
nmod:in(interpret-30, way-45)
case(J-47, as-46)
nmod:as(way-45, J-47)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP I)
          (CC and)
          (NNP J))
        (VP (VBP are)
          (NP
            (NP (CD two))
            (: -)
            (NP (NNS interpretations))))))
    (, ,)
    (NP (PRP we))
    (VP (MD will)
      (VP (VB use)
        (NP
          (NP (DT the) (NN expression))
          (SBAR
            (S
              (NP (PRP I))
              (VP (VBZ J)
                (SBAR (RB only) (IN if)
                  (S
                    (NP (NNP I) (NNP J))
                    (ADVP (RB indeed))
                    (VP (VBZ defines)
                      (NP
                        (NP (DT a) (JJ partial) (NN interpretation))
                        (PRN (-LRB- -LRB-) (FW i.e.) (, ,)
                          (ADJP (JJ contains)
                            (NP
                              (QP
                                (NP (RB not) (DT both) (NN pt))
                                (CC and)
                                (NP (NN pf)))))
                          (-RRB- -RRB-))))))))))))
    (. .)))

mark(two-6, If-1)
nsubj(two-6, I-2)
cc(I-2, and-3)
conj:and(I-2, J-4)
nsubj(two-6, J-4)
cop(two-6, are-5)
advcl(use-12, two-6)
dep(two-6, interpretations-8)
nsubj(use-12, we-10)
aux(use-12, will-11)
root(ROOT-0, use-12)
det(expression-14, the-13)
dobj(use-12, expression-14)
nsubj(J-16, I-15)
acl:relcl(expression-14, J-16)
advmod(defines-22, only-17)
mark(defines-22, if-18)
compound(J-20, I-19)
nsubj(defines-22, J-20)
advmod(defines-22, indeed-21)
advcl(J-16, defines-22)
det(interpretation-25, a-23)
amod(interpretation-25, partial-24)
dobj(defines-22, interpretation-25)
dep(contains-29, i.e.-27)
dep(interpretation-25, contains-29)
neg(pt-32, not-30)
det(pt-32, both-31)
dep(contains-29, pt-32)
cc(pt-32, and-33)
dep(contains-29, pf-34)
conj:and(pt-32, pf-34)

(ROOT
  (S
    (NP
      (NP (DT The) (NN truth) (NN order) (NN <) (NN t))
      (PP (IN on)
        (NP (NN truth) (NNS values))))
    (VP (VBZ is)
      (VP (VBN induced)
        (PP (IN by)
          (NP (NNP f) (NNP <) (NNP t) (NNP u) (NNP <) (NN t) (NN t)))))
    (. .)))

det(t-5, The-1)
compound(t-5, truth-2)
compound(t-5, order-3)
compound(t-5, <-4)
nsubjpass(induced-10, t-5)
case(values-8, on-6)
compound(values-8, truth-7)
nmod:on(t-5, values-8)
auxpass(induced-10, is-9)
root(ROOT-0, induced-10)
case(t-18, by-11)
compound(t-18, f-12)
compound(t-18, <-13)
compound(t-18, t-14)
compound(t-18, u-15)
compound(t-18, <-16)
compound(t-18, t-17)
nmod:agent(induced-10, t-18)

(ROOT
  (S
    (NP
      (NP (DT The) (NN precision) (NN order) (NN <) (NN p))
      (PP (IN on)
        (NP (NN truth) (NNS values))))
    (VP (VBZ is)
      (VP (VBN induced)
        (PP (IN by)
          (NP (JJ u) (NNP <) (NN p) (NN t) (, ,) (NN u) (CD <) (NN p) (NNS f)))))
    (. .)))

det(p-5, The-1)
compound(p-5, precision-2)
compound(p-5, order-3)
compound(p-5, <-4)
nsubjpass(induced-10, p-5)
case(values-8, on-6)
compound(values-8, truth-7)
nmod:on(p-5, values-8)
auxpass(induced-10, is-9)
root(ROOT-0, induced-10)
case(f-20, by-11)
amod(f-20, u-12)
compound(f-20, <-13)
compound(f-20, p-14)
compound(f-20, t-15)
dep(f-20, u-17)
nummod(f-20, <-18)
compound(f-20, p-19)
nmod:agent(induced-10, f-20)

(ROOT
  (S
    (S
      (NP (DT This) (NN order))
      (VP (VBZ is)
        (VP (VBN extended)
          (S
            (ADJP (JJ pointwise)
              (PP (TO to)
                (NP (JJ partial) (NNS interpretations))))))))
    (: :)
    (S
      (NP (PRP I))
      (VP (VBD <)
        (NP (NNP p) (NNP J))
        (SBAR (IN if)
          (S
            (NP (PRP I)
              (PRN (-LRB- -LRB-)
                (NP (NN q))
                (-RRB- -RRB-)))
            (VP (VBD <)
              (NP
                (NP
                  (NP (NNP p) (NNP J))
                  (PRN (-LRB- -LRB-)
                    (NP (NN q))
                    (-RRB- -RRB-)))
                (PP (IN for)
                  (NP (DT all) (NN q))))
              (PP (IN in)))))))
    (. .)))

det(order-2, This-1)
nsubjpass(extended-4, order-2)
auxpass(extended-4, is-3)
root(ROOT-0, extended-4)
xcomp(extended-4, pointwise-5)
case(interpretations-8, to-6)
amod(interpretations-8, partial-7)
nmod:to(pointwise-5, interpretations-8)
nsubj(<-11, I-10)
parataxis(extended-4, <-11)
compound(J-13, p-12)
dobj(<-11, J-13)
mark(<-19, if-14)
nsubj(<-19, I-15)
appos(I-15, q-17)
advcl(<-11, <-19)
compound(J-21, p-20)
dobj(<-19, J-21)
appos(J-21, q-23)
case(q-27, for-25)
det(q-27, all-26)
nmod:for(J-21, q-27)
nmod(<-19, in-28)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP I))
        (VP (VBZ is)
          (NP
            (NP (DT a) (JJ -) (NN interpretation))
            (CC and)
            (, ,)
            (ADJP (DT any)
              (PRN (-LRB- -LRB-)
                (ADJP (JJ partial))
                (-RRB- -RRB-)))))))
    (PRN (: -)
      (S
        (NP (NN interpretation))
        (VP (VBZ is)
          (VP (VBN identified)
            (PP (IN with)
              (NP (DT the) (JJ partial))))))
      (: -))
    (NP (NN interpretation))
    (VP (VBP equal)
      (PP (TO to)
        (NP (PRP I)))
      (UCP
        (PP (IN on))
        (CC and)
        (S
          (VP (VBG mapping)
            (NP (DT all) (NNS symbols))
            (PP (IN in)
              (NP (NNP \)))
            (PP (TO to)
              (NP (NN u.) (NNS Formulas)))))))
    (. .)))

mark(interpretation-6, If-1)
nsubj(interpretation-6, I-2)
cop(interpretation-6, is-3)
det(interpretation-6, a-4)
amod(interpretation-6, --5)
advcl(equal-22, interpretation-6)
cc(interpretation-6, and-7)
conj:and(interpretation-6, any-9)
advcl(equal-22, any-9)
dep(any-9, partial-11)
nsubjpass(identified-16, interpretation-14)
auxpass(identified-16, is-15)
parataxis(equal-22, identified-16)
case(partial-19, with-17)
det(partial-19, the-18)
nmod:with(identified-16, partial-19)
nsubj(equal-22, interpretation-21)
root(ROOT-0, equal-22)
case(I-24, to-23)
nmod:to(equal-22, I-24)
dep(equal-22, on-25)
cc(on-25, and-26)
dep(equal-22, mapping-27)
conj:and(on-25, mapping-27)
det(symbols-29, all-28)
dobj(mapping-27, symbols-29)
case(\-31, in-30)
nmod:in(mapping-27, \-31)
case(Formulas-34, to-32)
compound(Formulas-34, u.-33)
nmod:to(mapping-27, Formulas-34)

(ROOT
  (S
    (S
      (NP (DT A) (JJ propositional) (NN formula))
      (VP (VBZ is)
        (ADVP (RB recursively))
        (VP (VBN built)
          (PP (IN from)
            (NP
              (NP (JJ propositional) (NNS atoms) (NN p))
              (, ,)
              (NP
                (NP (NN q))
                (, ,)
                (NP (SYM r))
                (, ,)))))))
    (: ...)
    (S
      (S
        (VP (VBG using)
          (NP (NNS connectives))))
      (, ,)
      (S
        (VP (VB and))))
    (. .)))

det(formula-3, A-1)
amod(formula-3, propositional-2)
nsubjpass(built-6, formula-3)
auxpass(built-6, is-4)
advmod(built-6, recursively-5)
root(ROOT-0, built-6)
case(p-10, from-7)
amod(p-10, propositional-8)
compound(p-10, atoms-9)
nmod:from(built-6, p-10)
appos(p-10, q-12)
appos(q-12, r-14)
parataxis(built-6, using-17)
dobj(using-17, connectives-18)
parataxis(using-17, and-20)

(ROOT
  (S
    (NP (DT A) (JJ propositional) (NN formula))
    (VP (VBZ is)
      (NP (DT a) (JJ -) (NN formula))
      (SBAR (IN if)
        (S
          (NP (PRP$ its) (NNS atoms))
          (VP (VBP are)
            (PP (IN in))))))
    (. .)))

det(formula-3, A-1)
amod(formula-3, propositional-2)
nsubj(formula-7, formula-3)
cop(formula-7, is-4)
det(formula-7, a-5)
amod(formula-7, --6)
root(ROOT-0, formula-7)
mark(in-12, if-8)
nmod:poss(atoms-10, its-9)
nsubj(in-12, atoms-10)
cop(in-12, are-11)
advcl(formula-7, in-12)

(ROOT
  (S
    (NP (DT A) (NN literal))
    (VP (VBZ is)
      (NP
        (NP (DT an) (NN atom))
        (CC or)
        (NP (PRP$ its) (NN negation))))
    (. .)))

det(literal-2, A-1)
nsubj(atom-5, literal-2)
cop(atom-5, is-3)
det(atom-5, an-4)
root(ROOT-0, atom-5)
cc(atom-5, or-6)
nmod:poss(negation-8, its-7)
conj:or(atom-5, negation-8)

(ROOT
  (S
    (NP (DT A) (NN clause))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN disjunction))
        (PP (IN of)
          (NP (NNS literals)))))
    (. .)))

det(clause-2, A-1)
nsubj(disjunction-5, clause-2)
cop(disjunction-5, is-3)
det(disjunction-5, a-4)
root(ROOT-0, disjunction-5)
case(literals-7, of-6)
nmod:of(disjunction-5, literals-7)

(ROOT
  (S
    (NP (DT A) (NNP CNF))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN conjunction))
        (PP (IN of)
          (NP (NNS clauses)))))
    (. .)))

det(CNF-2, A-1)
nsubj(conjunction-5, CNF-2)
cop(conjunction-5, is-3)
det(conjunction-5, a-4)
root(ROOT-0, conjunction-5)
case(clauses-7, of-6)
nmod:of(conjunction-5, clauses-7)

(ROOT
  (S
    (NP (DT A) (NN sub-formula))
    (VP
      (ADVP (RB occurs))
      (VBZ positively) (-LRB- -LRB-)
      (NP (NN resp)))
    (. .)))

det(sub-formula-2, A-1)
nsubj(positively-4, sub-formula-2)
advmod(positively-4, occurs-3)
root(ROOT-0, positively-4)
dobj(positively-4, resp-6)

(ROOT
  (FRAG
    (ADVP (RB negatively))
    (: -RRB-)
    (SBAR (IN if)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (PP (IN within)
            (NP
              (NP (DT the) (NN scope))
              (PP (IN of)
                (NP (DT an) (RB even) (JJ -LRB-) (NN resp))))))))
    (. .)))

root(ROOT-0, negatively-1)
mark(scope-8, if-3)
nsubj(scope-8, it-4)
cop(scope-8, is-5)
case(scope-8, within-6)
det(scope-8, the-7)
parataxis(negatively-1, scope-8)
case(resp-13, of-9)
det(resp-13, an-10)
advmod(resp-13, even-11)
amod(resp-13, -LRB--12)
nmod:of(scope-8, resp-13)

(ROOT
  (SQ
    (VP (VB odd) (-RRB- -RRB-)
      (NP (NN number))
      (PP (IN of)
        (NP (NNS negations))))
    (. .)))

root(ROOT-0, odd-1)
dobj(odd-1, number-3)
case(negations-5, of-4)
nmod:of(odd-1, negations-5)

(ROOT
  (S
    (NP
      (NP (DT A) (NNP quantified) (NNP Boolean) (NN formula))
      (PRN (-LRB- -LRB-)
        (NP (NNP QBF))
        (-RRB- -RRB-)))
    (VP (VBZ is)
      (VP
        (VP (VBN built)
          (S
            (VP (VBG using)
              (NP (DT the) (JJ same) (NN recursive) (NNS rules)))))
        (, ,)
        (CC but)
        (VP
          (PP (IN with)
            (NP
              (NP (JJ added) (NNS quantifiers))
              (CC and)
              (S
                (VP (TO to)
                  (VP (VB quantify)
                    (PP (IN over)
                      (NP (JJ propositional) (NNS atoms)))))))))))
    (. .)))

det(formula-4, A-1)
compound(formula-4, quantified-2)
compound(formula-4, Boolean-3)
nsubjpass(built-9, formula-4)
appos(formula-4, QBF-6)
auxpass(built-9, is-8)
root(ROOT-0, built-9)
xcomp(built-9, using-10)
det(rules-14, the-11)
amod(rules-14, same-12)
compound(rules-14, recursive-13)
dobj(using-10, rules-14)
cc(built-9, but-16)
case(quantifiers-19, with-17)
amod(quantifiers-19, added-18)
conj:but(built-9, quantifiers-19)
cc(quantifiers-19, and-20)
mark(quantify-22, to-21)
acl(quantifiers-19, quantify-22)
case(atoms-25, over-23)
amod(atoms-25, propositional-24)
nmod:over(quantify-22, atoms-25)

(ROOT
  (FRAG
    (NP (NNP A))
    (: -)
    (S
      (NP (NNP QBF))
      (VP (VBZ is)
        (NP
          (NP (DT a) (NNP QBF))
          (PP (IN with)
            (NP
              (NP (JJ free) (NNS symbols))
              (VP (VBG belonging)
                (PP (TO to))))))))
    (. .)))

root(ROOT-0, A-1)
nsubj(QBF-6, QBF-3)
cop(QBF-6, is-4)
det(QBF-6, a-5)
parataxis(A-1, QBF-6)
case(symbols-9, with-7)
amod(symbols-9, free-8)
nmod:with(QBF-6, symbols-9)
acl(symbols-9, belonging-10)
nmod(belonging-10, to-11)

(ROOT
  (S
    (NP
      (NP (NNP A))
      (: -)
      (NP
        (NP
          (NP (NNP QBF))
          (PP (IN with)
            (S
              (VP (SYM =)
                (NP (-LRB- -LCB-) (NNP -RCB-) (CD 3) (NNS SAT))))))
        (: -)
        (S
          (VP (TO TO))))
      (: -))
    (VP (VBP SAT)
      (SBAR
        (S
          (SBAR (IN In) (NN order)
            (S
              (VP (TO to)
                (VP (VB discuss)
                  (NP
                    (NP (DT the) (NN working))
                    (PP (IN of)
                      (NP (NNP SAT)
                        (PRN (: -)
                          (NP (NNP TO))
                          (: -))
                        (NNP SAT))))))))
          (, ,)
          (NP (PRP we))
          (ADVP (RB first))
          (VP (VBP present)
            (NP
              (NP (DT a) (NN formalisation))
              (PP (IN of)
                (NP
                  (NP (NNP SAT-solvers))
                  (PP (IN for)
                    (NP (PRP$ our) (NNS purposes))))))))))
    (. .)))

nsubj(SAT-13, A-1)
dep(A-1, QBF-3)
mark(SAT-9, with-4)
dep(SAT-9, =-5)
compound(SAT-9, -RCB--7)
nummod(SAT-9, 3-8)
acl(QBF-3, SAT-9)
acl(QBF-3, TO-11)
root(ROOT-0, SAT-13)
mark(discuss-17, In-14)
mwe(In-14, order-15)
mark(discuss-17, to-16)
advcl(present-29, discuss-17)
det(working-19, the-18)
dobj(discuss-17, working-19)
case(SAT-25, of-20)
compound(SAT-25, SAT-21)
dep(SAT-25, TO-23)
nmod:of(working-19, SAT-25)
nsubj(present-29, we-27)
advmod(present-29, first-28)
ccomp(SAT-13, present-29)
det(formalisation-31, a-30)
dobj(present-29, formalisation-31)
case(SAT-solvers-33, of-32)
nmod:of(formalisation-31, SAT-solvers-33)
case(purposes-36, for-34)
nmod:poss(purposes-36, our-35)
nmod:for(SAT-solvers-33, purposes-36)

(ROOT
  (NP
    (NP (NNP SAT))
    (VP (VBG solving))
    (. .)))

root(ROOT-0, SAT-1)
acl(SAT-1, solving-2)

(ROOT
  (S
    (NP
      (NP (DT The) (JJ principal) (NN goal))
      (PP (IN of)
        (NP (DT a) (NNP SAT) (NN solver))))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP (VB find)
            (NP (DT a)
              (S
                (S
                  (VP (VB model)
                    (PP (IN for)
                      (NP (DT a) (NNP CNF)))))
                (, ,) (FW i.e.) (, ,)
                (S
                  (VP (TO to)
                    (VP
                      (VP (VB check)
                        (NP
                          (NP (DT the) (NN validity))
                          (PP (IN of)
                            (NP (DT a) (NN formula)))))
                      (: :)
                      (VP (, ,)
                        (SBAR
                          (WHADVP (WRB where))
                          (S
                            (VP (VBZ is)
                              (NP (DT a) (NNP CNF)))))))))))))))
    (. .)))

det(goal-3, The-1)
amod(goal-3, principal-2)
nsubj(is-8, goal-3)
nsubj:xsubj(find-10, goal-3)
case(solver-7, of-4)
det(solver-7, a-5)
compound(solver-7, SAT-6)
nmod:of(goal-3, solver-7)
root(ROOT-0, is-8)
mark(find-10, to-9)
xcomp(is-8, find-10)
dobj(find-10, a-11)
dep(a-11, model-12)
case(CNF-15, for-13)
det(CNF-15, a-14)
nmod:for(model-12, CNF-15)
dep(model-12, i.e.-17)
mark(check-20, to-19)
parataxis(model-12, check-20)
det(validity-22, the-21)
dobj(check-20, validity-22)
case(formula-25, of-23)
det(formula-25, a-24)
nmod:of(validity-22, formula-25)
advmod(CNF-31, where-28)
cop(CNF-31, is-29)
det(CNF-31, a-30)
dep(check-20, CNF-31)

(ROOT
  (S
    (NP (JJ Many) (JJ modern) (NNP SAT) (NNS solvers))
    (VP (VBP do)
      (ADVP (RBR more) (IN than) (RB that))
      (: :)
      (S
        (NP (PRP they))
        (VP (VB explain)
          (NP (PRP$ their) (NN answer))
          (PP (IN in)
            (NP
              (NP (NNS terms))
              (PP (IN of)
                (NP
                  (NP (DT a) (NN set))
                  (PP (IN of)
                    (NP
                      (NP (JJ so-called) (NNS assumptions))
                      (PRN (-LRB- -LRB-)
                        (NP
                          (NP (NNP Nadel))
                          (CC and)
                          (NP (NNP Ryvchin) (CD 2012)))
                        (-RRB- -RRB-)))))))))))
    (. .)))

amod(solvers-4, Many-1)
amod(solvers-4, modern-2)
compound(solvers-4, SAT-3)
nsubj(do-5, solvers-4)
root(ROOT-0, do-5)
advmod(that-8, more-6)
case(that-8, than-7)
advmod(do-5, that-8)
nsubj(explain-11, they-10)
ccomp(do-5, explain-11)
nmod:poss(answer-13, their-12)
dobj(explain-11, answer-13)
case(terms-15, in-14)
nmod:in(explain-11, terms-15)
case(set-18, of-16)
det(set-18, a-17)
nmod:of(terms-15, set-18)
case(assumptions-21, of-19)
amod(assumptions-21, so-called-20)
nmod:of(set-18, assumptions-21)
dep(assumptions-21, Nadel-23)
cc(Nadel-23, and-24)
dep(assumptions-21, Ryvchin-25)
conj:and(Nadel-23, Ryvchin-25)
nummod(Ryvchin-25, 2012-26)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN text)))
    (, ,)
    (NP (PRP we))
    (VP (VBZ assume3)
      (SBAR (IN that)
        (S
          (VP (VBZ is)
            (NP
              (NP (DT the) (JJ disjoint) (NN union))
              (PP (IN of)
                (NP
                  (NP (CD two) (NNS vocabularies))
                  (CC and)
                  (, ,)
                  (NP (DT an) (NN assumption) (NN vocabulary))
                  (CC and)
                  (NP (DT an) (JJ internal) (NN vocabulary)))))))))
    (. .)))

case(text-3, In-1)
det(text-3, this-2)
nmod:in(assume3-6, text-3)
nsubj(assume3-6, we-5)
root(ROOT-0, assume3-6)
mark(union-11, that-7)
cop(union-11, is-8)
det(union-11, the-9)
amod(union-11, disjoint-10)
ccomp(assume3-6, union-11)
case(vocabularies-14, of-12)
nummod(vocabularies-14, two-13)
nmod:of(union-11, vocabularies-14)
cc(vocabularies-14, and-15)
det(vocabulary-19, an-17)
compound(vocabulary-19, assumption-18)
nmod:of(union-11, vocabulary-19)
conj:and(vocabularies-14, vocabulary-19)
cc(vocabularies-14, and-20)
det(vocabulary-23, an-21)
amod(vocabulary-23, internal-22)
nmod:of(union-11, vocabulary-23)
conj:and(vocabularies-14, vocabulary-23)

(ROOT
  (S
    (NP (DT A) (NN solver))
    (VP
      (CONJP (RB not) (JJ only))
      (VP (VBZ returns)
        (NP (DT a) (NN model)
          (CC or)
          (NN UNSAT)))
      (CC but)
      (VP
        (ADVP (RB also))
        (VBZ explains)
        (NP
          (NP (DT this))
          (PP (IN in)
            (NP
              (NP (NNS terms))
              (PP (IN of)
                (NP (DT the) (NNS assumptions))))))))
    (. .)))

det(solver-2, A-1)
nsubj(returns-5, solver-2)
nsubj(explains-12, solver-2)
neg(only-4, not-3)
cc:preconj(returns-5, only-4)
root(ROOT-0, returns-5)
det(model-7, a-6)
dobj(returns-5, model-7)
cc(model-7, or-8)
dobj(returns-5, UNSAT-9)
conj:or(model-7, UNSAT-9)
cc(returns-5, but-10)
advmod(explains-12, also-11)
conj:and(returns-5, explains-12)
dobj(explains-12, this-13)
case(terms-15, in-14)
nmod:in(this-13, terms-15)
case(assumptions-18, of-16)
det(assumptions-18, the-17)
nmod:of(terms-15, assumptions-18)

(ROOT
  (NP
    (NP (NNP Definition) (CD 3.1))
    (PRN (-LRB- -LRB-)
      (NP (NNP Explaining) (NNP Satisfiability))
      (-RRB- -RRB-))
    (. .)))

root(ROOT-0, Definition-1)
nummod(Definition-1, 3.1-2)
compound(Satisfiability-5, Explaining-4)
appos(Definition-1, Satisfiability-5)

(ROOT
  (S
    (VP
      (VP (VB Let)
        (VP (VB be)
          (NP (DT any) (NN formula))))
      (CC and)
      (VP (VB =)
        (SBARQ
          (WHADVP (WRB where))))
      (CC and)
      (VP (VBP are)
        (ADJP (JJ disjoint))))
    (. .)))

root(ROOT-0, Let-1)
cop(formula-4, be-2)
det(formula-4, any-3)
xcomp(Let-1, formula-4)
cc(Let-1, and-5)
conj:and(Let-1, =-6)
ccomp(=-6, where-7)
cc(Let-1, and-8)
cop(disjoint-10, are-9)
conj:and(Let-1, disjoint-10)

(ROOT
  (S
    (VP (VB Let)
      (NP (NNP J))
      (VP (VB be)
        (NP (DT a) (JJ partial)
          (PRN (: -)
            (S
              (NP (NNP interpretation)
                (CC and)
                (NNP M))
              (VP (VB be)
                (NP (DT a) (JJ partial))))
            (: -))
          (NN interpretation))))
    (. .)))

root(ROOT-0, Let-1)
dobj(Let-1, J-2)
cop(interpretation-14, be-3)
det(interpretation-14, a-4)
amod(interpretation-14, partial-5)
nsubj(partial-12, interpretation-7)
cc(interpretation-7, and-8)
conj:and(interpretation-7, M-9)
nsubj(partial-12, M-9)
cop(partial-12, be-10)
det(partial-12, a-11)
dep(interpretation-14, partial-12)
dep(Let-1, interpretation-14)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP say)
      (SBAR (IN that)
        (S
          (NP
            (PRN (-LRB- -LRB-)
              (NP (NNP J))
              (, ,)
              (NP (NNP M))
              (-RRB- -RRB-)))
          (VP (VBZ explains)
            (NP
              (NP (DT the) (NN satisfiability))
              (PP (IN of)
                (SBAR (IN if)
                  (S
                    (NP (DT each) (NN interpretation))
                    (ADJP (RBR more) (JJ precise)
                      (SBAR (IN than)
                        (S
                          (NP (NNP J) (NNP M))
                          (VP (VBZ is)
                            (NP
                              (NP (DT a) (NN model))
                              (PP (IN of)
                                (NP (NNP Example) (CD 3.2))))))))))))))))
    (. .)))

nsubj(say-2, We-1)
root(ROOT-0, say-2)
mark(explains-9, that-3)
nsubj(explains-9, J-5)
dep(J-5, M-7)
ccomp(say-2, explains-9)
det(satisfiability-11, the-10)
dobj(explains-9, satisfiability-11)
mark(precise-17, of-12)
mark(precise-17, if-13)
det(interpretation-15, each-14)
dep(precise-17, interpretation-15)
advmod(precise-17, more-16)
acl(satisfiability-11, precise-17)
mark(model-23, than-18)
compound(M-20, J-19)
nsubj(model-23, M-20)
cop(model-23, is-21)
det(model-23, a-22)
ccomp(precise-17, model-23)
case(Example-25, of-24)
nmod:of(model-23, Example-25)
nummod(Example-25, 3.2-26)

(ROOT
  (S
    (VP (VB Let)
      (NP
        (NP
          (NP
            (NP (NNP =))
            (PRN (-LRB- -LCB-)
              (NP (NN o) (, ,) (NN p) (, ,) (NN q))
              (-RRB- -RCB-)))
          (, ,)
          (NP
            (NP (NNP =))
            (-LRB- -LCB-)
            (NP (SYM r))
            (-RRB- -RCB-))
          (CC and)
          (NP
            (NP
              (QP (CD 1) (CD =)))
            (PRN (-LRB- -LRB-)
              (NP (JJ p) (NN q) (NN r))
              (-RRB- -RRB-))))
        (PRN (-LRB- -LRB-)
          (NP (NN o) (NN r))
          (-RRB- -RRB-))))
    (. .)))

root(ROOT-0, Let-1)
dobj(Let-1, =-2)
compound(q-8, o-4)
dep(q-8, p-6)
appos(=-2, q-8)
dobj(Let-1, =-11)
conj:and(=-2, =-11)
dep(=-11, r-13)
cc(=-2, and-15)
compound(=-17, 1-16)
dobj(Let-1, =-17)
conj:and(=-2, =-17)
amod(r-21, p-19)
compound(r-21, q-20)
appos(=-17, r-21)
compound(r-25, o-24)
appos(=-2, r-25)

(ROOT
  (S
    (ADVP (RB Furthermore))
    (, ,)
    (VP (VB let)
      (S
        (NP (NNP J))
        (VP (VB be)
          (NP
            (NP
              (NP (DT the) (JJ partial))
              (: -)
              (NP
                (NP (NN interpretation))
                (-LRB- -LCB-)
                (NP (NN pt))
                (-RRB- -RCB-)))
            (CC and)
            (NP
              (NP (NNP M))
              (NP
                (NP (DT the) (JJ -) (NN interpretation))
                (-LRB- -LCB-)
                (NP (NN rf))
                (-RRB- -RCB-)))))))
    (. .)))

advmod(let-3, Furthermore-1)
root(ROOT-0, let-3)
nsubj(partial-7, J-4)
cop(partial-7, be-5)
det(partial-7, the-6)
ccomp(let-3, partial-7)
dep(partial-7, interpretation-9)
dep(interpretation-9, pt-11)
cc(partial-7, and-13)
ccomp(let-3, M-14)
conj:and(partial-7, M-14)
det(interpretation-17, the-15)
amod(interpretation-17, --16)
dep(M-14, interpretation-17)
dep(interpretation-17, rf-19)

(ROOT
  (SINV
    (PP (IN In)
      (NP
        (NP (DT this) (NN case))
        (PRN (-LRB- -LRB-)
          (NP (NNP J))
          (, ,)
          (NP (NNP M))
          (-RRB- -RRB-))))
    (VP (VBZ explains))
    (NP
      (NP (DT the) (NN satisfiability))
      (PP (IN of)
        (NP (CD 1))))
    (. .)))

case(case-3, In-1)
det(case-3, this-2)
nmod:in(explains-9, case-3)
appos(case-3, J-5)
dep(J-5, M-7)
root(ROOT-0, explains-9)
det(satisfiability-11, the-10)
nsubj(explains-9, satisfiability-11)
case(1-13, of-12)
nmod:of(satisfiability-11, 1-13)

(ROOT
  (S
    (ADVP (RB Indeed))
    (, ,)
    (NP (NNP J))
    (VP (VBZ guarantees)
      (SBAR (IN that)
        (S
          (NP
            (NP (DT the) (JJ first) (NN clause))
            (PP (IN of)
              (NP (CD 1))))
          (VP (VBZ is)
            (ADJP (JJ satisfied))
            (, ,)
            (SBAR (IN while)
              (S
                (NP (NNP M))
                (VP (VBZ guarantees)
                  (SBAR (IN that)
                    (S
                      (NP (DT the) (NN second))
                      (VP (VBZ is)))))))))))
    (. .)))

advmod(guarantees-4, Indeed-1)
nsubj(guarantees-4, J-3)
root(ROOT-0, guarantees-4)
mark(satisfied-12, that-5)
det(clause-8, the-6)
amod(clause-8, first-7)
nsubj(satisfied-12, clause-8)
case(1-10, of-9)
nmod:of(clause-8, 1-10)
cop(satisfied-12, is-11)
ccomp(guarantees-4, satisfied-12)
mark(guarantees-16, while-14)
nsubj(guarantees-16, M-15)
advcl(satisfied-12, guarantees-16)
mark(is-20, that-17)
det(second-19, the-18)
nsubj(is-20, second-19)
ccomp(guarantees-16, is-20)

(ROOT
  (NP
    (NP (NNP Definition) (CD 3.3))
    (PRN (-LRB- -LRB-)
      (NP (NNP SAT-solver))
      (-RRB- -RRB-))
    (. .)))

root(ROOT-0, Definition-1)
nummod(Definition-1, 3.3-2)
appos(Definition-1, SAT-solver-4)

(ROOT
  (S
    (VP (VB Suppose)
      (NP (DT that) (NN =)))
    (. .)))

root(ROOT-0, Suppose-1)
det(=-3, that-2)
dobj(Suppose-1, =-3)

(ROOT
  (S
    (NP (DT A) (NNP SAT-solver))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN procedure))
        (SBAR (IN that)
          (SINV
            (VP (VBZ takes)
              (PP (IN as)
                (NP (NN input)))
              (NP (DT a)
                (PRN (: -)
                  (NP
                    (NP (NNP CNF) (NNP T))
                    (CC and)
                    (NP (DT a) (NN two-valued)))
                  (: -))
                (NN interpretation)))
            (NP (PRP I))))))
    (. .)))

det(SAT-solver-2, A-1)
nsubj(procedure-5, SAT-solver-2)
cop(procedure-5, is-3)
det(procedure-5, a-4)
root(ROOT-0, procedure-5)
mark(takes-7, that-6)
dep(procedure-5, takes-7)
case(input-9, as-8)
nmod:as(takes-7, input-9)
det(interpretation-18, a-10)
compound(T-13, CNF-12)
dep(interpretation-18, T-13)
cc(T-13, and-14)
det(two-valued-16, a-15)
conj:and(T-13, two-valued-16)
dep(interpretation-18, two-valued-16)
dobj(takes-7, interpretation-18)
nsubj(takes-7, I-19)

(ROOT
  (S
    (SBAR
      (X (SYM *))
      (S
        (SBAR (IN If)
          (S
            (NP (NNP T))
            (VP (VBZ is)
              (NP (PRP I))
              (: -)
              (FRAG
                (VP (VB satisfiable))))))
        (, ,)
        (NP (PRP it))
        (VP (VBZ returns)
          (PRN (-LRB- -LRB-)
            (NP (NNP SAT))
            (, ,)
            (NP (NNP J) (, ,) (NNP M))
            (-RRB- -RRB-))
          (NP (PDT such) (DT that) (NN J)))))
    (VP
      (VP (VBP p)
        (NP (PRP I)))
      (CC and)
      (PRN (-LRB- -LRB-)
        (NP (NNP J))
        (, ,)
        (NP (NNP M))
        (-RRB- -RRB-))
      (VP (VBZ explains)
        (NP
          (NP (DT the) (NN satisfiability))
          (PP (IN of)))))
    (. .)))

dep(returns-10, *-1)
mark(I-5, If-2)
nsubj(I-5, T-3)
cop(I-5, is-4)
advcl(returns-10, I-5)
dep(I-5, satisfiable-7)
nsubj(returns-10, it-9)
csubj(p-21, returns-10)
csubj(explains-29, returns-10)
dep(returns-10, SAT-12)
compound(M-16, J-14)
dep(SAT-12, M-16)
det:predet(J-20, such-18)
det(J-20, that-19)
dobj(returns-10, J-20)
root(ROOT-0, p-21)
dobj(p-21, I-22)
cc(p-21, and-23)
dep(p-21, J-25)
dep(J-25, M-27)
conj:and(p-21, explains-29)
det(satisfiability-31, the-30)
dobj(explains-29, satisfiability-31)
acl(satisfiability-31, of-32)

(ROOT
  (S
    (LST (LS 3))
    (NP (DT This) (NN assumption))
    (VP (VBZ is) (RB not)
      (NP
        (NP
          (ADJP (JJ vital)
            (CC but)
            (JJ simplifies))
          (NX
            (NX
              (NP (DT the) (NN presentation))
              (SBAR
                (X (SYM *))
                (S
                  (ADVP (RB Otherwise))
                  (, ,)
                  (NP (PRP it))
                  (VP (VBZ returns)))))
            (PRN (-LRB- -LRB-)
              (NP (NNP UNSAT))
              (, ,)
              (NP (NNP J))
              (-RRB- -RRB-))))
        (SBAR
          (WHADVP (WRB where))
          (S
            (NP (NNP J))
            (VP (VBP p)
              (SBAR
                (S
                  (NP (PRP I))
                  (VP (VBZ is)
                    (ADJP (JJ such))
                    (SBAR (IN that)
                      (S
                        (NP (NNP T))
                        (VP (VBZ is)
                          (ADJP
                            (ADJP (JJ J))
                            (: -)
                            (ADJP (JJ unsatisfiable))))))))))))))
    (. .)))

dep(presentation-10, 3-1)
det(assumption-3, This-2)
nsubj(presentation-10, assumption-3)
cop(presentation-10, is-4)
neg(presentation-10, not-5)
amod(presentation-10, vital-6)
cc(vital-6, but-7)
conj:but(vital-6, simplifies-8)
amod(presentation-10, simplifies-8)
det(presentation-10, the-9)
root(ROOT-0, presentation-10)
dep(returns-15, *-11)
advmod(returns-15, Otherwise-12)
nsubj(returns-15, it-14)
dep(presentation-10, returns-15)
dep(presentation-10, UNSAT-17)
dep(UNSAT-17, J-19)
advmod(p-23, where-21)
nsubj(p-23, J-22)
acl:relcl(presentation-10, p-23)
nsubj(such-26, I-24)
cop(such-26, is-25)
ccomp(p-23, such-26)
mark(J-30, that-27)
nsubj(J-30, T-28)
cop(J-30, is-29)
ccomp(such-26, J-30)
dep(J-30, unsatisfiable-32)

(ROOT
  (S
    (S
      (ADVP (RB Hence))
      (NP (DT a) (NNP SAT) (NN solver))
      (VP (VBZ solves)
        (NP (DT the) (NN problem))))
    (: :)
    (S
      (NP
        (NP (NNP T))
        (PP (IN under)
          (NP (NNS assumptions))))
      (NP (PRP I)))
    (. .)))

advmod(solves-5, Hence-1)
det(solver-4, a-2)
compound(solver-4, SAT-3)
nsubj(solves-5, solver-4)
root(ROOT-0, solves-5)
det(problem-7, the-6)
dobj(solves-5, problem-7)
dep(I-12, T-9)
case(assumptions-11, under-10)
nmod:under(T-9, assumptions-11)
parataxis(solves-5, I-12)

(ROOT
  (S
    (S
      (VP (NN Note)
        (NP
          (NP (DT that))
          (PP (IN in)
            (NP
              (NP (NNS formalisations))
              (PP (IN of)
                (NP (NNP SAT) (NNS solvers))))))))
    (, ,)
    (NP
      (ADVP (RB often))
      (NP (DT a) (NNP J))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBZ explains)
            (NP
              (NP (DT the) (NN answer))
              (PP (IN of)
                (NP (DT the) (NN solver))))))))
    (VP (VBZ is) (RB not)
      (ADJP (JJ present)))
    (. .)))

ccomp(present-21, Note-1)
dobj(Note-1, that-2)
case(formalisations-4, in-3)
nmod:in(that-2, formalisations-4)
case(solvers-7, of-5)
compound(solvers-7, SAT-6)
nmod:of(formalisations-4, solvers-7)
advmod(J-11, often-9)
det(J-11, a-10)
nsubj(explains-13, J-11)
nsubj(present-21, J-11)
ref(J-11, that-12)
acl:relcl(J-11, explains-13)
det(answer-15, the-14)
dobj(explains-13, answer-15)
case(solver-18, of-16)
det(solver-18, the-17)
nmod:of(answer-15, solver-18)
cop(present-21, is-19)
neg(present-21, not-20)
root(ROOT-0, present-21)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN case)))
    (, ,)
    (NP (NNP J))
    (VP (MD can)
      (ADVP (RB always))
      (VP (VB be)
        (ADJP (JJ equal)
          (PP (TO to)
            (NP (PRP I))))))
    (. .)))

case(case-3, In-1)
det(case-3, this-2)
nmod:in(equal-9, case-3)
nsubj(equal-9, J-5)
aux(equal-9, can-6)
advmod(equal-9, always-7)
cop(equal-9, be-8)
root(ROOT-0, equal-9)
case(I-11, to-10)
nmod:to(equal-9, I-11)

(ROOT
  (S
    (NP
      (NP (JJ Several) (NNP SAT) (NNS solvers))
      (, ,)
      (PP (JJ such) (IN as)
        (NP
          (NP (NNP MiniSAT))
          (PRN (-LRB- -LRB-)
            (NP
              (NP (NNP E) (NNP en))
              (CC and)
              (NP (NNP S) (NN orensson) (CD 2003)))
            (-RRB- -RRB-))))
      (, ,))
    (VP (VBP support)
      (S
        (NP (JJ smart) (NN reasoning) (NNS methods))
        (VP (TO to)
          (VP (VB generate)
            (NP
              (ADJP
                (ADJP (JJR better))
                (PRN (-LRB- -LRB-)
                  (ADJP (RBR less) (JJ precise))
                  (-RRB- -RRB-)))
              (NNS J))))))
    (. .)))

amod(solvers-3, Several-1)
compound(solvers-3, SAT-2)
nsubj(support-17, solvers-3)
case(MiniSAT-7, such-5)
mwe(such-5, as-6)
nmod:such_as(solvers-3, MiniSAT-7)
compound(en-10, E-9)
dep(MiniSAT-7, en-10)
cc(en-10, and-11)
compound(orensson-13, S-12)
dep(MiniSAT-7, orensson-13)
conj:and(en-10, orensson-13)
nummod(orensson-13, 2003-14)
root(ROOT-0, support-17)
amod(methods-20, smart-18)
compound(methods-20, reasoning-19)
dobj(support-17, methods-20)
nsubj:xsubj(generate-22, methods-20)
mark(generate-22, to-21)
xcomp(support-17, generate-22)
amod(J-28, better-23)
advmod(precise-26, less-25)
dep(better-23, precise-26)
dobj(generate-22, J-28)

(ROOT
  (S
    (SBAR (IN In) (NN order)
      (S
        (VP (TO to)
          (VP (VB solve)
            (NP
              (NP
                (NP (NNS problems))
                (PP (IN of)
                  (NP (NN form))))
              (: :)
              (NP (NNP T)))))))
    (, ,)
    (NP (JJ state-of-the-art) (NNP SAT) (NNS solvers))
    (VP (VBP use)
      (NP
        (NP (DT the) (JJ conflict-driven) (NN clause) (NN learning)
          (PRN (-LRB- -LRB-)
            (NP (NNP CDCL))
            (-RRB- -RRB-))
          (NN algorithm))
        (PRN (-LRB- -LRB-)
          (NP
            (NP (NN Silva))
            (, ,)
            (NP (NNP Lynce))
            (, ,)
            (CC and)
            (NP (NNP Malik) (CD 2009)))
          (-RRB- -RRB-))))
    (. .)))

mark(solve-4, In-1)
mwe(In-1, order-2)
mark(solve-4, to-3)
advcl(use-14, solve-4)
dobj(solve-4, problems-5)
case(form-7, of-6)
nmod:of(problems-5, form-7)
dep(problems-5, T-9)
amod(solvers-13, state-of-the-art-11)
compound(solvers-13, SAT-12)
nsubj(use-14, solvers-13)
root(ROOT-0, use-14)
det(algorithm-22, the-15)
amod(algorithm-22, conflict-driven-16)
compound(algorithm-22, clause-17)
compound(algorithm-22, learning-18)
appos(algorithm-22, CDCL-20)
dobj(use-14, algorithm-22)
dep(algorithm-22, Silva-24)
dep(algorithm-22, Lynce-26)
conj:and(Silva-24, Lynce-26)
cc(Silva-24, and-28)
dep(algorithm-22, Malik-29)
conj:and(Silva-24, Malik-29)
nummod(Malik-29, 2009-30)

(ROOT
  (S
    (NP (DT The) (NNP CDCL) (NN algorithm))
    (VP (VBZ works)
      (PP (IN by)
        (S
          (VP (VBG maintaining)
            (NP
              (NP (DT a) (NN state))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBZ represents)
                    (NP (DT a) (JJ partial) (JJ -) (NN interpretation))))))))))
    (. .)))

det(algorithm-3, The-1)
compound(algorithm-3, CDCL-2)
nsubj(works-4, algorithm-3)
root(ROOT-0, works-4)
mark(maintaining-6, by-5)
advcl(works-4, maintaining-6)
det(state-8, a-7)
dobj(maintaining-6, state-8)
nsubj(represents-10, state-8)
ref(state-8, that-9)
acl:relcl(state-8, represents-10)
det(interpretation-14, a-11)
amod(interpretation-14, partial-12)
amod(interpretation-14, --13)
dobj(represents-10, interpretation-14)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP use)
      (S
        (NP
          (NP (NNP S))
          (PRN (-LRB- -LRB-)
            (NP (NNP S))
            (-RRB- -RRB-)))
        (VP (TO to)
          (VP (VB denote)
            (NP
              (NP (DT the) (NN state))
              (PP (IN of)
                (NP (DT a) (NN solver) (NNP S))))))))
    (. .)))

nsubj(use-2, We-1)
root(ROOT-0, use-2)
dobj(use-2, S-3)
nsubj:xsubj(denote-8, S-3)
appos(S-3, S-5)
mark(denote-8, to-7)
xcomp(use-2, denote-8)
det(state-10, the-9)
dobj(denote-8, state-10)
case(S-14, of-11)
det(S-14, a-12)
compound(S-14, solver-13)
nmod:of(state-10, S-14)

(ROOT
  (S
    (NP (DT The) (NN algorithm))
    (VP (VBZ uses)
      (S
        (NP
          (NP (NNS operations))
          (PP (IN of)
            (NP (NN propagation) (, ,) (NN decision) (, ,) (NN backjumping)
              (CC and)
              (NN restart))))
        (VP (TO to)
          (VP (VB manipulate)
            (NP (PRP$ its) (NN state))))))
    (. .)))

det(algorithm-2, The-1)
nsubj(uses-3, algorithm-2)
root(ROOT-0, uses-3)
dobj(uses-3, operations-4)
nsubj:xsubj(manipulate-14, operations-4)
case(propagation-6, of-5)
nmod:of(operations-4, propagation-6)
nmod:of(operations-4, decision-8)
conj:and(propagation-6, decision-8)
nmod:of(operations-4, backjumping-10)
conj:and(propagation-6, backjumping-10)
cc(propagation-6, and-11)
nmod:of(operations-4, restart-12)
conj:and(propagation-6, restart-12)
mark(manipulate-14, to-13)
xcomp(uses-3, manipulate-14)
nmod:poss(state-16, its-15)
dobj(manipulate-14, state-16)

(ROOT
  (S
    (NP (NNP Propagation))
    (VP
      (VP (VBZ takes)
        (NP
          (NP
            (NP (DT a) (NN state))
            (NP
              (NP (NNP S))
              (PRN (-LRB- -LRB-)
                (NP (NNP S))
                (-RRB- -RRB-))))
          (CC and)
          (NP
            (NP (DT either)
              (ADJP
                (NP
                  (NP (NNS returns))
                  (ADJP (DT a)
                    (PRN (-LRB- -LRB-)
                      (ADVP (RB possibly))
                      (-RRB- -RRB-))))
                (RBR more))
              (JJ precise) (NN state))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBZ is)
                  (NP
                    (NP (DT the) (NN consequence))
                    (PP (IN of)
                      (NP (PRP$ its) (JJ previous) (NN state))))))))))
      (CC or)
      (VP (VBZ returns)
        (NP (DT a) (NN conflict) (NN clause))
        (S
          (VP (VBG showing)
            (SBAR
              (S
                (NP (DT no) (NN model))
                (VP (MD can)
                  (VP (VB extend)
                    (NP (DT the) (JJ current) (NN state))))))))))
    (. .)))

nsubj(takes-2, Propagation-1)
nsubj(returns-28, Propagation-1)
root(ROOT-0, takes-2)
det(state-4, a-3)
dobj(takes-2, state-4)
dep(state-4, S-5)
appos(S-5, S-7)
cc(state-4, and-9)
det(state-18, either-10)
nmod:npmod(more-16, returns-11)
amod(returns-11, a-12)
dep(a-12, possibly-14)
amod(state-18, more-16)
amod(state-18, precise-17)
dobj(takes-2, state-18)
conj:and(state-4, state-18)
nsubj(consequence-22, state-18)
ref(state-18, that-19)
cop(consequence-22, is-20)
det(consequence-22, the-21)
acl:relcl(state-18, consequence-22)
case(state-26, of-23)
nmod:poss(state-26, its-24)
amod(state-26, previous-25)
nmod:of(consequence-22, state-26)
cc(takes-2, or-27)
conj:or(takes-2, returns-28)
det(clause-31, a-29)
compound(clause-31, conflict-30)
dobj(returns-28, clause-31)
xcomp(returns-28, showing-32)
neg(model-34, no-33)
nsubj(extend-36, model-34)
aux(extend-36, can-35)
ccomp(showing-32, extend-36)
det(state-39, the-37)
amod(state-39, current-38)
dobj(extend-36, state-39)

(ROOT
  (S
    (NP (DT The) (NN decision) (NN operation))
    (VP (VBZ takes)
      (NP
        (NP
          (NP (DT a) (JJ non-conflicting) (NN state))
          (NP
            (NP (NNP S))
            (PRN (-LRB- -LRB-)
              (NP (NNP S))
              (-RRB- -RRB-))))
        (CC and)
        (NP
          (NP (NNS branches))
          (NP (DT the) (NN search))))
      (PP (IN on)
        (NP
          (NP (DT a) (JJ variable) (NN v))
          (PRN (-LRB- -LRB-) (NN decision) (NNS variable) (-RRB- -RRB-))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ is)
                (ADVP (RB currently))
                (VP (VBN unassigned)
                  (PP (IN in)
                    (NP
                      (NP (NNP S))
                      (PRN (-LRB- -LRB-)
                        (NP (NNP S))
                        (-RRB- -RRB-)))))))))))
    (. .)))

det(operation-3, The-1)
compound(operation-3, decision-2)
nsubj(takes-4, operation-3)
root(ROOT-0, takes-4)
det(state-7, a-5)
amod(state-7, non-conflicting-6)
dobj(takes-4, state-7)
dep(state-7, S-8)
appos(S-8, S-10)
cc(state-7, and-12)
dobj(takes-4, branches-13)
conj:and(state-7, branches-13)
det(search-15, the-14)
dep(branches-13, search-15)
case(v-19, on-16)
det(v-19, a-17)
amod(v-19, variable-18)
nmod:on(takes-4, v-19)
nsubjpass(unassigned-27, v-19)
dep(v-19, decision-21)
dep(decision-21, variable-22)
ref(v-19, that-24)
auxpass(unassigned-27, is-25)
advmod(unassigned-27, currently-26)
acl:relcl(v-19, unassigned-27)
case(S-29, in-28)
nmod:in(unassigned-27, S-29)
appos(S-29, S-31)

(ROOT
  (SINV
    (VP (VBG Backjumping))
    (VP (VBZ takes)
      (NP (DT a) (JJ conflicting) (NN state)))
    (NP
      (NP (NNP S))
      (PRN (-LRB- -LRB-)
        (NP (NNP S))
        (-RRB- -RRB-))
      (, ,)
      (VP (VBN learns)
        (NP
          (NP (DT a) (NN clause))
          (PP (IN from)
            (NP (PRP it)
              (CC and)
              (NNS returns))))
        (PP (TO to)
          (NP (DT a)
            (ADJP (RBR less) (JJ precise))
            (JJ non-conflicting) (NN state)))))
    (. .)))

root(ROOT-0, Backjumping-1)
dep(Backjumping-1, takes-2)
det(state-5, a-3)
amod(state-5, conflicting-4)
dobj(takes-2, state-5)
nsubj(Backjumping-1, S-6)
appos(S-6, S-8)
acl(S-6, learns-11)
det(clause-13, a-12)
dobj(learns-11, clause-13)
case(it-15, from-14)
nmod:from(clause-13, it-15)
cc(it-15, and-16)
nmod:from(clause-13, returns-17)
conj:and(it-15, returns-17)
case(state-23, to-18)
det(state-23, a-19)
advmod(precise-21, less-20)
amod(state-23, precise-21)
amod(state-23, non-conflicting-22)
nmod:to(learns-11, state-23)

(ROOT
  (S
    (NP (DT The) (JJ restart) (NN operation))
    (VP (VBZ restarts)
      (NP (DT the) (NN search))
      (SBAR (IN while)
        (S
          (NP (VBG remembering))
          (VP (VBD learnt)
            (NP (NNS clauses))))))
    (. .)))

det(operation-3, The-1)
amod(operation-3, restart-2)
nsubj(restarts-4, operation-3)
root(ROOT-0, restarts-4)
det(search-6, the-5)
dobj(restarts-4, search-6)
mark(learnt-9, while-7)
nsubj(learnt-9, remembering-8)
advcl(restarts-4, learnt-9)
dobj(learnt-9, clauses-10)

(ROOT
  (NP
    (NP (NNP SAT))
    (: -)
    (S
      (ADJP (JJ TO))
      (: -)
      (NP (NNP SAT)))
    (. .)))

root(ROOT-0, SAT-1)
parataxis(SAT-1, TO-3)
dep(TO-3, SAT-5)

(ROOT
  (S
    (ADVP (RB Recently))
    (, ,)
    (NP (NNP Janhunen) (, ,) (NNP Tasharrofi) (, ,)
      (CC and)
      (NNP Ternovska))
    (PRN (-LRB- -LRB-)
      (NP (CD 2016))
      (-RRB- -RRB-))
    (VP (VBD introduced)
      (NP
        (NP (NNP SAT)
          (PRN (: -)
            (NP (NNP TO))
            (: -))
          (NNP SAT))
        (, ,)
        (NP
          (NP (DT a) (NN framework))
          (PP (IN for)
            (S
              (VP (VBG combining)
                (NP (NNP SAT) (NNS solvers))
                (ADVP (RB so) (RB that))
                (, ,)
                (ADVP (RB together))
                (, ,)
                (S
                  (NP (PRP they))
                  (VP (VB solve)
                    (NP (NNP QBF) (NNS problems))))))))))
    (. .)))

advmod(introduced-12, Recently-1)
nsubj(introduced-12, Janhunen-3)
conj:and(Janhunen-3, Tasharrofi-5)
nsubj(introduced-12, Tasharrofi-5)
cc(Janhunen-3, and-7)
conj:and(Janhunen-3, Ternovska-8)
nsubj(introduced-12, Ternovska-8)
dep(introduced-12, 2016-10)
root(ROOT-0, introduced-12)
compound(SAT-17, SAT-13)
dep(SAT-17, TO-15)
dobj(introduced-12, SAT-17)
det(framework-20, a-19)
appos(SAT-17, framework-20)
mark(combining-22, for-21)
acl(framework-20, combining-22)
compound(solvers-24, SAT-23)
dobj(combining-22, solvers-24)
advmod(that-26, so-25)
advmod(combining-22, that-26)
advmod(combining-22, together-28)
nsubj(solve-31, they-30)
dep(combining-22, solve-31)
compound(problems-33, QBF-32)
dobj(solve-31, problems-33)

(ROOT
  (S
    (ADVP (RB Essentially))
    (, ,)
    (NP (DT this) (NN framework))
    (VP (VBZ performs)
      (NP
        (NP (JJ lazy) (NN clause) (NN generation))
        (PRN (-LRB- -LRB-)
          (NP
            (NP (NNP Ohrimenko))
            (, ,)
            (NP (NNP Stuckey))
            (, ,)
            (CC and)
            (NP (NNP Codish) (CD 2009)))
          (-RRB- -RRB-))
        (SBAR
          (WHADVP (WRB where))
          (S
            (NP (NNS clauses))
            (VP (VBP are)
              (VP (VBN obtained)
                (PP (IN from)
                  (NP (NNS calls)))
                (PP (TO to)
                  (NP (DT another) (NNP SAT) (NN solver)))))))))
    (. .)))

advmod(performs-5, Essentially-1)
det(framework-4, this-3)
nsubj(performs-5, framework-4)
root(ROOT-0, performs-5)
amod(generation-8, lazy-6)
compound(generation-8, clause-7)
dobj(performs-5, generation-8)
dep(generation-8, Ohrimenko-10)
dep(generation-8, Stuckey-12)
conj:and(Ohrimenko-10, Stuckey-12)
cc(Ohrimenko-10, and-14)
dep(generation-8, Codish-15)
conj:and(Ohrimenko-10, Codish-15)
nummod(Codish-15, 2009-16)
advmod(obtained-21, where-18)
nsubjpass(obtained-21, clauses-19)
auxpass(obtained-21, are-20)
acl:relcl(generation-8, obtained-21)
case(calls-23, from-22)
nmod:from(obtained-21, calls-23)
case(solver-27, to-24)
det(solver-27, another-25)
compound(solver-27, SAT-26)
nmod:to(obtained-21, solver-27)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN section)))
    (, ,)
    (NP (PRP we))
    (VP (VBP recall)
      (SBAR
        (WHADVP (WRB how))
        (S
          (NP
            (NP (NNP SAT))
            (PRN (: -)
              (NP (NNP TO))
              (: -)))
          (ADVP (RB SAT))
          (VP (VBZ works)
            (PP (IN in)
              (NP (DT a)
                (ADJP (RB slightly) (JJ generalised))
                (NN setting)))))))
    (. .)))

case(section-3, In-1)
det(section-3, this-2)
nmod:in(recall-6, section-3)
nsubj(recall-6, we-5)
root(ROOT-0, recall-6)
advmod(works-13, how-7)
nsubj(works-13, SAT-8)
dep(SAT-8, TO-10)
advmod(works-13, SAT-12)
ccomp(recall-6, works-13)
case(setting-18, in-14)
det(setting-18, a-15)
advmod(generalised-17, slightly-16)
amod(setting-18, generalised-17)
nmod:in(works-13, setting-18)

(ROOT
  (S
    (NP
      (NP
        (NP
          (NP (DT The) (NN input))
          (PP (IN for)
            (NP (NNP SAT))))
        (: -)
        (S
          (VP (TO TO))))
      (PRN (: -)
        (S
          (NP (NNP SAT))
          (VP (VBZ is)
            (NP
              (NP
                (NP (DT an) (NNP QBF))
                (PP (IN of)
                  (NP
                    (NP (DT the) (NN form) (NNP T) (NNP =))
                    (: :)
                    (NP
                      (PRN (-LRB- -LRB-)
                        (NP
                          (NP (CD 1))
                          (: :)
                          (NP (CD 1)))
                        (-RRB- -RRB-))
                      (NNP *) (NNP *))))
                (X (SYM *)))
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (NN n))
                  (: :)
                  (NP (NN n)))
                (-RRB- -RRB-)))
            (, ,)
            (SBAR
              (WHADVP (WRB where))
              (S
                (VP (VBZ is)
                  (NP
                    (NP (SYM a))
                    (: -)
                    (S
                      (NP
                        (NP (NNP CNF))
                        (CC and)
                        (NP (DT the) (FW i) (POS 's)))
                      (VP (VBP are)
                        (NP (FW i))))))))))
        (, -)
        (NP
          (NP (NNP CNFs))
          (PP (IN with)
            (NP (FW i))))))
    (VP (SYM =)
      (NP (FW i)))
    (. .)))

det(input-2, The-1)
nsubj(i-48, input-2)
case(SAT-4, for-3)
nmod:for(input-2, SAT-4)
acl(input-2, TO-6)
nsubj(QBF-11, SAT-8)
cop(QBF-11, is-9)
det(QBF-11, an-10)
dep(input-2, QBF-11)
case(=-16, of-12)
det(=-16, the-13)
compound(=-16, form-14)
compound(=-16, T-15)
nmod:of(QBF-11, =-16)
dep(*-24, 1-19)
dep(1-19, 1-21)
compound(*-24, *-23)
dep(=-16, *-24)
dep(QBF-11, *-25)
dep(QBF-11, n-27)
dep(n-27, n-29)
advmod(a-34, where-32)
cop(a-34, is-33)
advcl(QBF-11, a-34)
nsubj(i-42, CNF-36)
cc(CNF-36, and-37)
det(i-39, the-38)
conj:and(CNF-36, i-39)
nsubj(i-42, i-39)
case(i-39, 's-40)
cop(i-42, are-41)
dep(a-34, i-42)
dep(QBF-11, CNFs-44)
case(i-46, with-45)
nmod:with(CNFs-44, i-46)
dep(i-48, =-47)
root(ROOT-0, i-48)

(ROOT
  (S
    (PP (IN Without)
      (NP
        (NP (NN loss))
        (PP (IN of)
          (NP (NN generality)))))
    (, ,)
    (ADVP
      (PP (IN from)
        (ADVP (RB now)))
      (IN on))
    (, ,)
    (NP (PRP we))
    (VP
      (VP (VBP assume)
        (S
          (NP (DT that) (NN n))
          (VP (SYM =)
            (NP (CD 1)))))
      (CC and)
      (VP (VBP use)
        (PP
          (PP (IN for)
            (NP (CD 1)))
          (, ,)
          (PP (IN for)
            (NP (CD 1)))
          (CC and)
          (PP (IN for)))))
    (. .)))

case(loss-2, Without-1)
nmod:without(assume-11, loss-2)
case(generality-4, of-3)
nmod:of(loss-2, generality-4)
case(now-7, from-6)
advmod(assume-11, now-7)
case(now-7, on-8)
nsubj(assume-11, we-10)
nsubj(use-17, we-10)
root(ROOT-0, assume-11)
det(n-13, that-12)
nsubj(1-15, n-13)
dep(1-15, =-14)
ccomp(assume-11, 1-15)
cc(assume-11, and-16)
conj:and(assume-11, use-17)
conj:and(assume-11, use-17')
conj:and(use-17, use-17')
case(1-19, for-18)
nmod:for(use-17, 1-19)
case(1-22, for-21)
nmod:for(use-17', 1-22)
cc(use-17, and-23)
conj(1-19, for-24)

(ROOT
  (NP
    (NP (NNP SAT))
    (: -)
    (S
      (S
        (VP (TO TO)
          (VP (VB -)
            (NP
              (NP (NNP SAT) (NNS checks) (NN validity))
              (PP (IN of)
                (NP (NNP T)))))))
      (, ,) (FW i.e.) (, ,)
      (S
        (NP
          (NP (PRP it) (NNS returns))
          (SBAR
            (S
              (NP (NNP SAT))
              (VP (VBP iff)
                (SBAR
                  (S
                    (NP (EX there))
                    (VP (VBZ exists)
                      (NP
                        (NP (DT a) (JJ -) (NN interpretation) (NN I))
                        (SBAR
                          (WHNP (WDT that))
                          (S
                            (VP (VBZ satisfies)
                              (NP
                                (NP (JJ such))
                                (SBAR
                                  (WHNP (WDT that))
                                  (S
                                    (VP
                                      (VP (VBZ is)
                                        (NP (PRP I))
                                        (: -)
                                        (FRAG
                                          (ADJP (JJ unsatisfiable))))
                                      (CC and)
                                      (VP (VBZ returns)
                                        (NP (NNP UNSAT))
                                        (ADVP (RB otherwise))))))))))))))))))))
    (. .)))

root(ROOT-0, SAT-1)
mark(--4, TO-3)
parataxis(SAT-1, --4)
compound(validity-7, SAT-5)
compound(validity-7, checks-6)
dobj(--4, validity-7)
case(T-9, of-8)
nmod:of(validity-7, T-9)
dep(--4, i.e.-11)
dep(returns-14, it-13)
parataxis(--4, returns-14)
nsubj(iff-16, SAT-15)
acl:relcl(returns-14, iff-16)
expl(exists-18, there-17)
ccomp(iff-16, exists-18)
det(I-22, a-19)
amod(I-22, --20)
compound(I-22, interpretation-21)
dobj(exists-18, I-22)
nsubj(satisfies-24, I-22)
ref(I-22, that-23)
acl:relcl(I-22, satisfies-24)
dobj(satisfies-24, such-25)
nsubj(I-28, such-25)
nsubj(returns-32, such-25)
ref(such-25, that-26)
cop(I-28, is-27)
acl:relcl(such-25, I-28)
dep(I-28, unsatisfiable-30)
cc(I-28, and-31)
acl:relcl(such-25, returns-32)
conj:and(I-28, returns-32)
dobj(returns-32, UNSAT-33)
advmod(returns-32, otherwise-34)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (VB explain)
          (SBAR
            (WHADVP (WRB how))
            (S
              (NP
                (NP (NNP SAT))
                (PRN (: -)
                  (NP (NNP TO))
                  (: -)))
              (ADVP (RB SAT))
              (VP (VBZ works)))))))
    (, ,)
    (NP (PRP we))
    (VP (VBP need)
      (NP
        (NP (DT some) (NN terminology))
        (: :)
        (NP
          (NP (NNP Definition) (CD 3.4))
          (PRN (-LRB- -LRB-)
            (NP (NNP Lowerbound/Upperbound) (NNP Mapping))
            (-RRB- -RRB-)))))
    (. .)))

mark(explain-2, To-1)
advcl(need-12, explain-2)
advmod(works-9, how-3)
nsubj(works-9, SAT-4)
dep(SAT-4, TO-6)
advmod(works-9, SAT-8)
ccomp(explain-2, works-9)
nsubj(need-12, we-11)
root(ROOT-0, need-12)
det(terminology-14, some-13)
dobj(need-12, terminology-14)
dep(terminology-14, Definition-16)
nummod(Definition-16, 3.4-17)
compound(Mapping-20, Lowerbound/Upperbound-19)
appos(Definition-16, Mapping-20)

(ROOT
  (S
    (NP
      (NP (DT The) (NN LU-mapping))
      (PP (IN of)
        (NP (NN vocabulary))))
    (VP (VBZ is)
      (NP
        (NP
          (NP (NN lu) (NNS =))
          (-LRB- -LCB-)
          (NP (NN pu) (NN |) (NN p))
          (-RRB- -RCB-) (-LRB- -LCB-)
          (ADJP
            (NP (CD pl) (NNS |))
            (JJ p))
          (-RRB- -RCB-))
        (VP
          (ADVP (RP with))
          (VBN pu) (-LRB- -LRB-)
          (NP (NN resp)))))
    (. .)))

det(LU-mapping-2, The-1)
nsubj(=-7, LU-mapping-2)
case(vocabulary-4, of-3)
nmod:of(LU-mapping-2, vocabulary-4)
cop(=-7, is-5)
compound(=-7, lu-6)
root(ROOT-0, =-7)
compound(p-11, pu-9)
compound(p-11, |-10)
dep(=-7, p-11)
nummod(|-15, pl-14)
nmod:npmod(p-16, |-15)
amod(=-7, p-16)
advmod(pu-19, with-18)
acl(=-7, pu-19)
dobj(pu-19, resp-21)

(ROOT
  (S
    (INTJ (UH pl))
    (VP
      (VP (VB -RRB-)
        (S
          (VP (VBG representing)
            (NP (JJ upper)))))
      (: -)
      (VP (NN -LRB-) (NN resp)))
    (. .)))

discourse(-RRB--2, pl-1)
root(ROOT-0, -RRB--2)
xcomp(-RRB--2, representing-3)
dobj(representing-3, upper-4)
dep(-RRB--2, -LRB--6)
dep(-LRB--6, resp-7)

(ROOT
  (SQ
    (VP (VB lower) (-RRB- -RRB-)
      (NP (NNS bound))
      (PP (IN of)
        (NP (NN p))))
    (. .)))

root(ROOT-0, lower-1)
dobj(lower-1, bound-3)
case(p-5, of-4)
nmod:of(lower-1, p-5)

(ROOT
  (S
    (NP
      (NP (DT The) (NN LU-mapping))
      (PP (IN of)
        (NP
          (NP (DT a) (JJ partial) (NN interpretation))
          (SBAR
            (S
              (NP (PRP I))
              (, ,)
              (S
                (VP (VBN denoted)
                  (PP (IN as)
                    (NP (NNP Ilu)))))
              (, ,)
              (VP (VBZ is)
                (NP
                  (NP (DT a) (JJ 2-valued) (NN lu))
                  (: -)
                  (S
                    (S
                      (VP (VBG interpretation)
                        (SBAR (IN so)
                          (S
                            (NP (DT that))
                            (VP (VB Ilu)
                              (S
                                (NP
                                  (PRN (-LRB- -LRB-)
                                    (NP (NN pu))
                                    (-RRB- -RRB-)))
                                (VP (SYM =)
                                  (NP (NN t))))
                              (SBAR (IN if)
                                (CC and)
                                (RB only)
                                (S
                                  (SBAR (IN if)
                                    (S
                                      (NP (PRP I)
                                        (PRN (-LRB- -LRB-)
                                          (NP (NN p))
                                          (-RRB- -RRB-)))
                                      (VP (VBZ =)
                                        (NP
                                          (NP (SYM f))
                                          (CC and)
                                          (NP (NNP Ilu)
                                            (PRN (-LRB- -LRB-)
                                              (NP (NN pl))
                                              (-RRB- -RRB-))
                                            (NNP =))))))
                                  (VP (VBP t)
                                    (SBAR (IN if)
                                      (CC and)
                                      (RB only)
                                      (S
                                        (SBAR (IN if)
                                          (S
                                            (NP
                                              (NP
                                                (NP (PRP I))
                                                (PRN (-LRB- -LRB-)
                                                  (NP (NN p))
                                                  (-RRB- -RRB-)))
                                              (ADJP (RB =) (JJ t.)))
                                            (VP (NN Note)
                                              (NP
                                                (NP (DT that))
                                                (PP (IN for)
                                                  (NP (DT each) (NN atom) (NN p))))
                                              (PP (IN in)
                                                (NP (DT the) (NN vocabulary))))))
                                        (, ,)
                                        (NP
                                          (NP (NNP Ilu) (NNP satisfies) (NNP Ilu))
                                          (PRN (-LRB- -LRB-)
                                            (NP (NN pl))
                                            (-RRB- -RRB-)))
                                        (VP (VBP t)
                                          (S
                                            (NP (PRP I))
                                            (PRN (-LRB- -LRB-)
                                              (NP (NN p))
                                              (-RRB- -RRB-))
                                            (VP (VB t)
                                              (NP (NNP Ilu) (-LRB- -LRB-) (NNP pu) (-RRB- -RRB-)))))))))))))))
                    (, ,) (FW i.e.) (, ,)
                    (S
                      (VP (VBN pl))))))))
          (PRN (-LRB- -LRB-)
            (VP
              (ADVP (RB respectively))
              (VBN pu))
            (-RRB- -RRB-)))))
    (VP (VBZ is)
      (NP
        (NP (DT a)
          (ADJP
            (ADJP (JJR lower))
            (PRN (-LRB- -LRB-)
              (ADVP (RB respectively))
              (ADJP (JJ upper))
              (-RRB- -RRB-)))
          (NN bound))
        (PP (IN on)
          (NP
            (NP (DT the) (NN truth))
            (PP (IN of)
              (NP (NN p.) (NNP Definition) (CD 3.5)))))
        (PRN (-LRB- -LRB-)
          (NP (JJ -) (NN under-approximation))
          (-RRB- -RRB-))))
    (. .)))

det(LU-mapping-2, The-1)
nsubj(bound-95, LU-mapping-2)
case(interpretation-6, of-3)
det(interpretation-6, a-4)
amod(interpretation-6, partial-5)
nmod:of(LU-mapping-2, interpretation-6)
nsubj(lu-16, I-7)
advcl(lu-16, denoted-9)
case(Ilu-11, as-10)
nmod:as(denoted-9, Ilu-11)
cop(lu-16, is-13)
det(lu-16, a-14)
amod(lu-16, 2-valued-15)
acl:relcl(interpretation-6, lu-16)
dep(lu-16, interpretation-18)
mark(Ilu-21, so-19)
nsubj(Ilu-21, that-20)
advcl(interpretation-18, Ilu-21)
nsubj(t-26, pu-23)
dep(t-26, =-25)
ccomp(Ilu-21, t-26)
mark(t-43, if-27)
cc(t-43, and-28)
advmod(t-43, only-29)
mark(=-35, if-30)
nsubj(=-35, I-31)
appos(I-31, p-33)
csubj(t-43, =-35)
dobj(=-35, f-36)
cc(f-36, and-37)
compound(=-42, Ilu-38)
appos(=-42, pl-40)
dobj(=-35, =-42)
conj:and(f-36, =-42)
advcl(Ilu-21, t-43)
mark(t-70, if-44)
cc(t-70, and-45)
advmod(t-70, only-46)
mark(Note-54, if-47)
nsubj(Note-54, I-48)
appos(I-48, p-50)
advmod(t.-53, =-52)
amod(I-48, t.-53)
advcl(t-70, Note-54)
dobj(Note-54, that-55)
case(p-59, for-56)
det(p-59, each-57)
compound(p-59, atom-58)
nmod:for(that-55, p-59)
case(vocabulary-62, in-60)
det(vocabulary-62, the-61)
nmod:in(Note-54, vocabulary-62)
compound(Ilu-66, Ilu-64)
compound(Ilu-66, satisfies-65)
nsubj(t-70, Ilu-66)
appos(Ilu-66, pl-68)
advcl(t-43, t-70)
nsubj(t-75, I-71)
dep(t-75, p-73)
ccomp(t-70, t-75)
compound(pu-78, Ilu-76)
dobj(t-75, pu-78)
dep(interpretation-18, i.e.-81)
parataxis(interpretation-18, pl-83)
advmod(pu-86, respectively-85)
dep(interpretation-6, pu-86)
cop(bound-95, is-88)
det(bound-95, a-89)
amod(bound-95, lower-90)
dep(upper-93, respectively-92)
dep(lower-90, upper-93)
root(ROOT-0, bound-95)
case(truth-98, on-96)
det(truth-98, the-97)
nmod:on(bound-95, truth-98)
case(Definition-101, of-99)
compound(Definition-101, p.-100)
nmod:of(truth-98, Definition-101)
nummod(Definition-101, 3.5-102)
amod(under-approximation-105, --104)
appos(bound-95, under-approximation-105)

(ROOT
  (S
    (VP (VB Let)
      (VP (VB be)
        (NP (DT a) (NN formula))))
    (. .)))

root(ROOT-0, Let-1)
cop(formula-4, be-2)
det(formula-4, a-3)
xcomp(Let-1, formula-4)

(ROOT
  (S
    (S
      (NP
        (NP (DT A) (JJ -) (NN under-approximation))
        (PP (IN of)))
      (VP (VBZ is)
        (NP (DT any) (NN lu) (NN formula))
        (PP (JJ such)
          (NP
            (NP (DT that))
            (PP (IN for)
              (NP (DT all) (NNS interpretations) (NN I)))))))
    (: :)
    (S
      (S
        (LST (-LRB- -LRB-) (LS 1) (-RRB- -RRB-))
        (SBAR (IN if)
          (S
            (NP (PRP I))
            (VP (VBZ is)
              (NP (DT a) (NN two-valued) (: -) (NN interpretation)))))
        (, ,)
        (NP
          (NP (RB then))
          (: :)
          (VP (VBZ is)
            (ADJP (VBN satisfied)
              (PP (IN in)
                (NP (NNP Ilu) (NNP iff)))))
          (: :))
        (VP (VBZ is)
          (ADJP (VBN satisfied)
            (PP (IN in)
              (NP (PRP I))))))
      (, ,)
      (CC and)
      (S
        (LST (-LRB- -LRB-) (LS 2) (-RRB- -RRB-))
        (SBAR (IN if)
          (S
            (NP (PRP I))
            (VP (VBZ is)
              (NP (DT a) (JJ partial) (JJ -) (NN interpretation)))))
        (, ,)
        (S
          (VP
            (ADVP (RB then))
            (VBN Ilu)
            (NP (JJ |) (NNS =))))
        (: :)
        (VP (VBZ implies)
          (S
            (NP (DT that))
            (ADJP (DT every) (JJ two-valued))))))
    (: -)
    (S
      (NP (NN interpretation))
      (ADJP (RBR more) (JJ precise)
        (SBAR (IN than)
          (S
            (NP (PRP I))
            (VP (VBZ satisfies))))))
    (: :) (. .)))

det(under-approximation-3, A-1)
amod(under-approximation-3, --2)
nsubj(formula-8, under-approximation-3)
acl(under-approximation-3, of-4)
cop(formula-8, is-5)
det(formula-8, any-6)
compound(formula-8, lu-7)
root(ROOT-0, formula-8)
case(that-10, such-9)
nmod:such(formula-8, that-10)
case(I-14, for-11)
det(I-14, all-12)
compound(I-14, interpretations-13)
nmod:for(that-10, I-14)
dep(satisfied-36, 1-17)
mark(interpretation-25, if-19)
nsubj(interpretation-25, I-20)
cop(interpretation-25, is-21)
det(interpretation-25, a-22)
compound(interpretation-25, two-valued-23)
advcl(satisfied-36, interpretation-25)
nsubjpass(satisfied-36, then-27)
auxpass(satisfied-30, is-29)
dep(then-27, satisfied-30)
case(iff-33, in-31)
compound(iff-33, Ilu-32)
nmod:in(satisfied-30, iff-33)
auxpass(satisfied-36, is-35)
parataxis(formula-8, satisfied-36)
case(I-38, in-37)
nmod:in(satisfied-36, I-38)
cc(satisfied-36, and-40)
dep(implies-57, 2-42)
mark(interpretation-50, if-44)
nsubj(interpretation-50, I-45)
cop(interpretation-50, is-46)
det(interpretation-50, a-47)
amod(interpretation-50, partial-48)
amod(interpretation-50, --49)
dep(implies-57, interpretation-50)
advmod(Ilu-53, then-52)
csubj(implies-57, Ilu-53)
amod(=-55, |-54)
dobj(Ilu-53, =-55)
parataxis(formula-8, implies-57)
conj:and(satisfied-36, implies-57)
nsubj(two-valued-60, that-58)
det(two-valued-60, every-59)
xcomp(implies-57, two-valued-60)
dep(precise-64, interpretation-62)
advmod(precise-64, more-63)
parataxis(formula-8, precise-64)
mark(satisfies-67, than-65)
nsubj(satisfies-67, I-66)
ccomp(precise-64, satisfies-67)

(ROOT
  (S
    (NP (DT The) (JJ first) (NN condition))
    (VP (VBZ guarantees)
      (SBAR (IN that)
        (S
          (PP (IN in)
            (NP (JJ two-valued) (NNS interpretations)))
          (NP (DT the) (NN approximation))
          (VP (VBZ coincides)
            (PP (IN with)
              (NP (DT the) (JJ original) (NN formula)))))))
    (. .)))

det(condition-3, The-1)
amod(condition-3, first-2)
nsubj(guarantees-4, condition-3)
root(ROOT-0, guarantees-4)
mark(coincides-11, that-5)
case(interpretations-8, in-6)
amod(interpretations-8, two-valued-7)
nmod:in(coincides-11, interpretations-8)
det(approximation-10, the-9)
nsubj(coincides-11, approximation-10)
ccomp(guarantees-4, coincides-11)
case(formula-15, with-12)
det(formula-15, the-13)
amod(formula-15, original-14)
nmod:with(coincides-11, formula-15)

(ROOT
  (S
    (S
      (NP (DT The) (NN second))
      (VP (VBZ states)
        (SBAR (IN that) (IN if)
          (S
            (NP (NNP Ilu))
            (VP (MD can)
              (VP (VB be)
                (VP (VBN expanded)
                  (PP (TO to)
                    (NP
                      (NP (DT a) (NN model))
                      (PP (IN of)))))))))))
    (, ,) (RB then)
    (S
      (NP (PRP I))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN expanded)
            (PP (TO to)
              (NP
                (NP (DT a) (NN model))
                (PP (IN of))))))))
    (. .)))

det(second-2, The-1)
nsubj(states-3, second-2)
root(ROOT-0, states-3)
mark(expanded-9, that-4)
mark(expanded-9, if-5)
nsubjpass(expanded-9, Ilu-6)
aux(expanded-9, can-7)
auxpass(expanded-9, be-8)
advcl(states-3, expanded-9)
case(model-12, to-10)
det(model-12, a-11)
nmod:to(expanded-9, model-12)
acl(model-12, of-13)
advmod(expanded-19, then-15)
nsubjpass(expanded-19, I-16)
aux(expanded-19, can-17)
auxpass(expanded-19, be-18)
parataxis(states-3, expanded-19)
case(model-22, to-20)
det(model-22, a-21)
nmod:to(expanded-19, model-22)
acl(model-22, of-23)

(ROOT
  (NP
    (NP (NNP Example) (CD 3.6))
    (PRN (-LRB- -LRB-)
      (ADJP
        (NP (NNP Example) (CD 3.2))
        (JJ continued))
      (-RRB- -RRB-))
    (. .)))

root(ROOT-0, Example-1)
nummod(Example-1, 3.6-2)
dep(continued-6, Example-4)
nummod(Example-4, 3.2-5)
dep(Example-1, continued-6)

(ROOT
  (S
    (VP (VB Let)
      (NP
        (NP
          (NP
            (QP (CD 1) (CD =)))
          (PRN (-LRB- -LRB-)
            (NP (JJ pl) (NN ql) (NN r))
            (-RRB- -RRB-)))
        (PRN (-LRB- -LRB-)
          (NP (NN ou) (NN r))
          (-RRB- -RRB-))))
    (. .)))

root(ROOT-0, Let-1)
compound(=-3, 1-2)
dobj(Let-1, =-3)
amod(r-7, pl-5)
compound(r-7, ql-6)
appos(=-3, r-7)
compound(r-11, ou-10)
appos(=-3, r-11)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN case)))
    (NP (CD 1))
    (VP (VBZ is)
      (NP
        (NP (DT a) (JJ -) (NN under-approximation))
        (PP (IN of)
          (NP (CD 1)))))
    (. .)))

case(case-3, In-1)
det(case-3, this-2)
nmod:in(under-approximation-8, case-3)
nsubj(under-approximation-8, 1-4)
cop(under-approximation-8, is-5)
det(under-approximation-8, a-6)
amod(under-approximation-8, --7)
root(ROOT-0, under-approximation-8)
case(1-10, of-9)
nmod:of(under-approximation-8, 1-10)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP show)
      (NP
        (NP (DT this))
        (PP (IN for)
          (NP (DT some) (JJ partial) (CD -) (NNS interpretations)))))
    (. .)))

nsubj(show-2, We-1)
root(ROOT-0, show-2)
dobj(show-2, this-3)
case(interpretations-8, for-4)
det(interpretations-8, some-5)
amod(interpretations-8, partial-6)
nummod(interpretations-8, --7)
nmod:for(this-3, interpretations-8)

(ROOT
  (S
    (SBAR
      (X (SYM *))
      (S
        (SBAR
          (WHADVP (WRB When))
          (S
            (NP (PRP I))
            (VP (VBZ is)
              (ADJP (JJ 2-valued)))))
        (, ,)
        (VP (VB Ilu)
          (S
            (NP
              (PRN (-LRB- -LRB-)
                (NP (NN xl))
                (-RRB- -RRB-)))
            (VP (SYM =)
              (NP (PRP I)))))))
    (NP
      (NP
        (NP
          (PRN (-LRB- -LRB-)
            (NP (NNP x))
            (-RRB- -RRB-))
          (NNP =) (NNP Ilu))
        (PRN (-LRB- -LRB-)
          (NP (NN xu))
          (-RRB- -RRB-)))
      (PP (IN for)
        (NP (DT all))))
    (VP (VBZ x))
    (. .)))

dep(Ilu-7, *-1)
advmod(2-valued-5, When-2)
nsubj(2-valued-5, I-3)
cop(2-valued-5, is-4)
advcl(Ilu-7, 2-valued-5)
advcl(x-23, Ilu-7)
nsubj(I-12, xl-9)
dep(I-12, =-11)
ccomp(Ilu-7, I-12)
appos(Ilu-17, x-14)
compound(Ilu-17, =-16)
nsubj(x-23, Ilu-17)
appos(Ilu-17, xu-19)
case(all-22, for-21)
nmod:for(Ilu-17, all-22)
root(ROOT-0, x-23)

(ROOT
  (S
    (ADVP (RB Hence))
    (NP
      (NP
        (NP (NNP Condition))
        (PRN (-LRB- -LRB-)
          (NP (CD 1))
          (-RRB- -RRB-)))
      (PP (IN in)
        (NP (NNP Definition) (CD 3.5))))
    (VP (VBZ is)
      (ADJP (JJ satisfied)))
    (. .)))

advmod(satisfied-10, Hence-1)
nsubj(satisfied-10, Condition-2)
appos(Condition-2, 1-4)
case(Definition-7, in-6)
nmod:in(Condition-2, Definition-7)
nummod(Definition-7, 3.5-8)
cop(satisfied-10, is-9)
root(ROOT-0, satisfied-10)

(ROOT
  (FRAG
    (X (SYM *))
    (VP (VBD Let)
      (S
        (NP (NNP I0))
        (VP
          (VP (VB be)
            (NP (DT the) (JJ partial)))
          (: -)
          (NP
            (NP (NN interpretation))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBD maps)
                  (NP (DT all) (NNS atoms))
                  (PP (TO to)
                    (NP (NN u))))))))))
    (. .)))

dep(Let-2, *-1)
root(ROOT-0, Let-2)
nsubj(partial-6, I0-3)
cop(partial-6, be-4)
det(partial-6, the-5)
ccomp(Let-2, partial-6)
dobj(partial-6, interpretation-8)
nsubj(maps-10, interpretation-8)
ref(interpretation-8, that-9)
acl:relcl(interpretation-8, maps-10)
det(atoms-12, all-11)
dobj(maps-10, atoms-12)
case(u-14, to-13)
nmod:to(maps-10, u-14)

(ROOT
  (S
    (S
      (PP (IN In)
        (NP (DT this) (NN case)))
      (, ,)
      (NP (CD 1))
      (VP (VBZ is)
        (ADJP
          (PRN (-LRB- -LRB-)
            (NP (NNP I0))
            (-RRB- -RRB-))
          (JJ lu))))
    (: -)
    (S
      (ADVP (RB unsatisfiable))
      (, ,)
      (NP
        (NP (RB hence) (JJ Condition)
          (PRN (-LRB- -LRB-)
            (NP (CD 2))
            (-RRB- -RRB-)))
        (PP (IN in)
          (NP (NNP Definition) (CD 3.5))))
      (VP (VBZ is)
        (ADJP (RB clearly) (VBN satisfied)
          (PP (IN as)
            (ADVP (RB well))))))
    (. .)))

case(case-3, In-1)
det(case-3, this-2)
nmod:in(lu-10, case-3)
nsubj(lu-10, 1-5)
cop(lu-10, is-6)
dep(lu-10, I0-8)
root(ROOT-0, lu-10)
advmod(satisfied-24, unsatisfiable-12)
advmod(Condition-15, hence-14)
nsubjpass(satisfied-24, Condition-15)
appos(Condition-15, 2-17)
case(Definition-20, in-19)
nmod:in(Condition-15, Definition-20)
nummod(Definition-20, 3.5-21)
auxpass(satisfied-24, is-22)
advmod(satisfied-24, clearly-23)
parataxis(lu-10, satisfied-24)
case(well-26, as-25)
advcl(satisfied-24, well-26)

(ROOT
  (S
    (ADVP (RB *))
    (ADVP (RB Now))
    (, ,)
    (VP (VBP let)
      (S
        (NP (NNP I1))
        (VP (VB be)
          (NP
            (NP (DT the) (JJ partial))
            (: -)
            (NP
              (NP (NN interpretation))
              (-LRB- -LCB-)
              (NP (NN pt))
              (-RRB- -RCB-))))))
    (. .)))

advmod(let-4, *-1)
advmod(let-4, Now-2)
root(ROOT-0, let-4)
nsubj(partial-8, I1-5)
cop(partial-8, be-6)
det(partial-8, the-7)
ccomp(let-4, partial-8)
dep(partial-8, interpretation-10)
dep(interpretation-10, pt-12)

(ROOT
  (S
    (SBAR (IN Since)
      (S (-LRB- -LRB-)
        (NP (NNP I1))
        (-RRB- -RRB-)
        (VP (VBP lu)
          (S
            (NP
              (PRN (-LRB- -LRB-)
                (NP (NN pl))
                (-RRB- -RRB-)))
            (VP (SYM =)
              (NP (NN t)))))))
    (, ,)
    (NP (NNP M) (NNP =) (-LRB- -LCB-) (NNP rt) (-RRB- -RCB-))
    (VP (VBZ is)
      (ADVP
        (NP (DT a) (NN model))
        (IN of))
      (: :)
      (NP (CD 1)))
    (. .)))

mark(lu-5, Since-1)
nsubj(lu-5, I1-3)
advcl(1-22, lu-5)
nsubj(t-10, pl-7)
dep(t-10, =-9)
ccomp(lu-5, t-10)
compound(rt-15, M-12)
compound(rt-15, =-13)
nsubj(1-22, rt-15)
cop(1-22, is-17)
det(model-19, a-18)
advmod(1-22, model-19)
case(model-19, of-20)
root(ROOT-0, 1-22)

(ROOT
  (S
    (S
      (PP (IN For)
        (NP (DT each) (JJ two-valued) (NN interpretation)))
      (NP (PRP I))
      (VP (VBP p)
        (NP (NNP I1))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ holds)
      (SBAR (IN that)
        (S
          (NP (NNP I) (NNP M))
          (VP (VBZ is)
            (NP
              (NP (DT a) (NN model))
              (PP (IN of)
                (NP
                  (NP (DT the) (JJ original) (NN formula))
                  (NP (CD 1)))))))))
    (. .)))

case(interpretation-4, For-1)
det(interpretation-4, each-2)
amod(interpretation-4, two-valued-3)
nmod:for(p-6, interpretation-4)
nsubj(p-6, I-5)
ccomp(holds-10, p-6)
dobj(p-6, I1-7)
nsubj(holds-10, it-9)
root(ROOT-0, holds-10)
mark(model-16, that-11)
compound(M-13, I-12)
nsubj(model-16, M-13)
cop(model-16, is-14)
det(model-16, a-15)
ccomp(holds-10, model-16)
case(formula-20, of-17)
det(formula-20, the-18)
amod(formula-20, original-19)
nmod:of(model-16, formula-20)
dep(formula-20, 1-21)

(ROOT
  (S
    (S
      (VP (VBG Assuming)
        (NP (DT a) (JJ -) (NN under-approximation))
        (PP (IN for))))
    (, ,)
    (NP (DT the)
      (NP (NNP SAT)
        (PRN (: -)
          (NP (NNP TO))
          (: -))
        (NNP SAT))
      (NN algorithm))
    (VP (VBZ instantiates)
      (NP
        (NP (CD two) (NNP CDCL-solvers) (NNP S))
        (PRN (-LRB- -LRB-)
          (VP (VBN tasked)
            (PP (IN with)
              (S
                (VP (VBG solving)))))
          (-RRB- -RRB-))
        (CC and)
        (NP
          (NP (NNP S))
          (PRN (-LRB- -LRB-)
            (VP (VBN tasked)
              (PP (IN with)
                (S
                  (VP (VBG solving)))))
            (-RRB- -RRB-)))))
    (. .)))

advcl(instantiates-14, Assuming-1)
det(under-approximation-4, a-2)
amod(under-approximation-4, --3)
dobj(Assuming-1, under-approximation-4)
nmod(Assuming-1, for-5)
det(algorithm-13, the-7)
compound(SAT-12, SAT-8)
dep(SAT-12, TO-10)
compound(algorithm-13, SAT-12)
nsubj(instantiates-14, algorithm-13)
root(ROOT-0, instantiates-14)
nummod(S-17, two-15)
compound(S-17, CDCL-solvers-16)
dobj(instantiates-14, S-17)
dep(S-17, tasked-19)
mark(solving-21, with-20)
advcl(tasked-19, solving-21)
cc(S-17, and-23)
dobj(instantiates-14, S-24)
conj:and(S-17, S-24)
dep(S-24, tasked-26)
mark(solving-28, with-27)
advcl(tasked-26, solving-28)

(ROOT
  (S
    (PP (IN After)
      (NP
        (NP (DT each) (NN unit) (NN propagation) (NN phase))
        (PP (IN of)
          (NP (NNP S)))))
    (, ,)
    (NP (NNP solver) (NNP S))
    (VP (VBZ is)
      (VP (VBN called)
        (PP (IN with)
          (NP (NNP assumptions) (NNP S)
            (PRN (-LRB- -LRB-)
              (NP (NNP S))
              (-RRB- -RRB-))
            (NNP lu)))))
    (. .)))

case(phase-5, After-1)
det(phase-5, each-2)
compound(phase-5, unit-3)
compound(phase-5, propagation-4)
nmod:after(called-12, phase-5)
case(S-7, of-6)
nmod:of(phase-5, S-7)
compound(S-10, solver-9)
nsubjpass(called-12, S-10)
auxpass(called-12, is-11)
root(ROOT-0, called-12)
case(lu-19, with-13)
compound(lu-19, assumptions-14)
compound(lu-19, S-15)
appos(lu-19, S-17)
nmod:with(called-12, lu-19)

(ROOT
  (S
    (S
      (X (SYM *))
      (PP (IN If)
        (NP
          (NP (NNP S) (NNS returns))
          (PRN (-LRB- -LRB-)
            (NP (NNP SAT))
            (, ,)
            (NP (NNP J))
            (, ,)
            (NP (NNP M))
            (-RRB- -RRB-))))
      (, ,)
      (NP (PRP it))
      (ADVP (RB then))
      (VP (VBZ follows)
        (PP (IN from)
          (NP
            (NP (DT the) (NN fact))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBZ is)
                  (NP
                    (NP (DT a) (JJ -) (NN under-approximation))
                    (PP (IN of)
                      (NP (DT that)))))))))))
    (: :)
    (S
      (NP
        (PRN (-LRB- -LRB-)
          (CC and)
          (ADVP (RB hence))
          (NP (RB also) (NN T))
          (-RRB- -RRB-)))
      (VP (VBZ is)
        (NP (PRP I))
        (: -)
        (FRAG
          (VP (VB unsatisfiable)))))
    (. .)))

dep(follows-15, *-1)
case(returns-4, If-2)
compound(returns-4, S-3)
nmod:if(follows-15, returns-4)
appos(returns-4, SAT-6)
dep(SAT-6, J-8)
dep(SAT-6, M-10)
nsubj(follows-15, it-13)
advmod(follows-15, then-14)
root(ROOT-0, follows-15)
case(fact-18, from-16)
det(fact-18, the-17)
nmod:from(follows-15, fact-18)
nsubj(under-approximation-23, fact-18)
ref(fact-18, that-19)
cop(under-approximation-23, is-20)
det(under-approximation-23, a-21)
amod(under-approximation-23, --22)
acl:relcl(fact-18, under-approximation-23)
case(that-25, of-24)
nmod:of(under-approximation-23, that-25)
cc(T-31, and-28)
dep(T-31, hence-29)
advmod(T-31, also-30)
nsubj(I-34, T-31)
cop(I-34, is-33)
parataxis(follows-15, I-34)
dep(I-34, unsatisfiable-36)

(ROOT
  (S
    (S
      (PP (IN In)
        (NP (DT this) (NN case)))
      (, ,)
      (NP (NNP J))
      (VP (VBZ is)
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP (VB create)
                (NP
                  (NP (DT a) (NN clause))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VBZ falsifies)
                        (NP
                          (NP (NNP S) (POS 's))
                          (JJ current) (NN assignment))))))))))))
    (: ;)
    (S
      (NP (DT this) (NN clause))
      (VP (VBZ is)
        (VP (VBN added)
          (S
            (VP (TO to))))))
    (. .)))

case(case-3, In-1)
det(case-3, this-2)
nmod:in(used-7, case-3)
nsubjpass(used-7, J-5)
nsubj:xsubj(create-9, J-5)
auxpass(used-7, is-6)
root(ROOT-0, used-7)
mark(create-9, to-8)
xcomp(used-7, create-9)
det(clause-11, a-10)
dobj(create-9, clause-11)
nsubj(falsifies-13, clause-11)
ref(clause-11, that-12)
acl:relcl(clause-11, falsifies-13)
nmod:poss(assignment-17, S-14)
case(S-14, 's-15)
amod(assignment-17, current-16)
dobj(falsifies-13, assignment-17)
det(clause-20, this-19)
nsubjpass(added-22, clause-20)
nsubj:xsubj(to-23, clause-20)
auxpass(added-22, is-21)
parataxis(used-7, added-22)
xcomp(added-22, to-23)

(ROOT
  (FRAG
    (SBAR
      (X (SYM *))
      (S
        (SBAR (IN If)
          (S
            (NP (NNP S))
            (VP (VBZ returns)
              (PRN (-LRB- -LRB-)
                (NP (NNP UNSAT))
                (, ,)
                (NP (NNP J))
                (-RRB- -RRB-)))))
        (, ,)
        (NP (NN nothing))
        (VP (MD can)
          (VP (VB be)
            (VP (VBN concluded))))))
    (. .)))

dep(concluded-14, *-1)
mark(returns-4, If-2)
nsubj(returns-4, S-3)
advcl(concluded-14, returns-4)
dep(returns-4, UNSAT-6)
dep(UNSAT-6, J-8)
nsubjpass(concluded-14, nothing-11)
aux(concluded-14, can-12)
auxpass(concluded-14, be-13)
root(ROOT-0, concluded-14)

(ROOT
  (S
    (NP
      (NP (NNS Literals))
      (PP (IN in)
        (NP (NNP J))))
    (VP (VBP are)
      (VP (VBN used)
        (NP
          (ADJP (RB as) (VBN watched))
          (NNS literals))
        (S
          (VP (TO to)
            (VP (VB avoid)
              (S
                (VP (VBG calling)
                  (NP
                    (NP (NNP S))
                    (ADVP (RB again) (RB as) (RB long)
                      (SBAR (IN as)
                        (S
                          (NP
                            (NP (NNP S))
                            (PRN (-LRB- -LRB-)
                              (NP (NNP S))
                              (-RRB- -RRB-)))
                          (ADVP (RB lu))
                          (VP (VBZ is)
                            (ADJP (RBR more) (JJ precise)
                              (PP (IN than)
                                (NP (NNP J))))))))))))))))
    (. .)))

nsubjpass(used-5, Literals-1)
case(J-3, in-2)
nmod:in(Literals-1, J-3)
auxpass(used-5, are-4)
root(ROOT-0, used-5)
advmod(watched-7, as-6)
amod(literals-8, watched-7)
dobj(used-5, literals-8)
mark(avoid-10, to-9)
advcl(used-5, avoid-10)
xcomp(avoid-10, calling-11)
dobj(calling-11, S-12)
advmod(long-15, again-13)
advmod(long-15, as-14)
advmod(S-12, long-15)
mark(precise-24, as-16)
nsubj(precise-24, S-17)
appos(S-17, S-19)
advmod(precise-24, lu-21)
cop(precise-24, is-22)
advmod(precise-24, more-23)
ccomp(long-15, precise-24)
case(J-26, than-25)
nmod:than(precise-24, J-26)

(ROOT
  (S
    (NP
      (NP (DT The) (NN use))
      (PP (IN of)
        (NP (DT the) (NN under-approximation))))
    (VP (VBZ has)
      (NP
        (NP (DT the) (NN effect))
        (SBAR (IN that)
          (S
            (SBAR (IN if)
              (S
                (NP
                  (NP (NNP S))
                  (PRN (-LRB- -LRB-)
                    (NP (NNP S))
                    (-RRB- -RRB-)))
                (VP (VBZ is) (RB not)
                  (ADJP (JJ exact)))))
            (, ,)
            (NP
              (NP (DT the) (NN call))
              (PP (TO to)
                (NP (DT the) (JJ nested) (NN solver) (NNP S))))
            (VP (VBZ remains)
              (ADJP (JJ sound)
                (PP (IN in)
                  (NP (DT the) (NN sense))))
              (SBAR (IN that)
                (S
                  (SBAR
                    (WHADVP (WRB whenever))
                    (S
                      (NP (NNP S))
                      (VP (VBZ finds)
                        (NP (DT a) (NN model)))))
                  (, ,)
                  (NP (DT a) (NN conflict) (NN clause))
                  (VP (MD can)
                    (VP (VB be)
                      (VP (VBN added)
                        (S
                          (VP (TO to)))))))))))))
    (. .)))

det(use-2, The-1)
nsubj(has-6, use-2)
case(under-approximation-5, of-3)
det(under-approximation-5, the-4)
nmod:of(use-2, under-approximation-5)
root(ROOT-0, has-6)
det(effect-8, the-7)
dobj(has-6, effect-8)
mark(remains-26, that-9)
mark(exact-17, if-10)
nsubj(exact-17, S-11)
appos(S-11, S-13)
cop(exact-17, is-15)
neg(exact-17, not-16)
advcl(remains-26, exact-17)
det(call-20, the-19)
nsubj(remains-26, call-20)
case(S-25, to-21)
det(S-25, the-22)
amod(S-25, nested-23)
compound(S-25, solver-24)
nmod:to(call-20, S-25)
dep(effect-8, remains-26)
xcomp(remains-26, sound-27)
case(sense-30, in-28)
det(sense-30, the-29)
nmod:in(sound-27, sense-30)
mark(added-43, that-31)
advmod(finds-34, whenever-32)
nsubj(finds-34, S-33)
advcl(added-43, finds-34)
det(model-36, a-35)
dobj(finds-34, model-36)
det(clause-40, a-38)
compound(clause-40, conflict-39)
nsubjpass(added-43, clause-40)
nsubj:xsubj(to-44, clause-40)
aux(added-43, can-41)
auxpass(added-43, be-42)
ccomp(remains-26, added-43)
xcomp(added-43, to-44)

(ROOT
  (S
    (PP (IN In)
      (NP
        (NP (NN case))
        (SBAR
          (S
            (NP (NNP S))
            (VP (VBZ is)
              (ADJP (JJ unsatisfiable)))))
        (PRN (-LRB- -LRB-)
          (PP (IN with)
            (NP (DT the) (VBN given) (NN assumption)))
          (-RRB- -RRB-))))
    (, ,)
    (NP (NN nothing) (JJ final))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN concluded)
          (ADVP (RB yet)))))
    (. .)))

case(case-2, In-1)
nmod:in(concluded-17, case-2)
nsubj(unsatisfiable-5, S-3)
cop(unsatisfiable-5, is-4)
acl:relcl(case-2, unsatisfiable-5)
case(assumption-10, with-7)
det(assumption-10, the-8)
amod(assumption-10, given-9)
nmod:with(case-2, assumption-10)
nsubjpass(concluded-17, nothing-13)
amod(nothing-13, final-14)
aux(concluded-17, can-15)
auxpass(concluded-17, be-16)
root(ROOT-0, concluded-17)
advmod(concluded-17, yet-18)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN case)))
    (, ,)
    (NP
      (NP (DT the) (NN explanation))
      (PP (IN of)
        (NP (NN unsatisfiability))))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP (VB avoid)
                (S
                  (VP (VBG calling)
                    (NP (DT the) (JJ nested) (NN solver))
                    (ADVP (RB too) (RB often))))))))))
    (. .)))

case(case-3, In-1)
det(case-3, this-2)
nmod:in(used-11, case-3)
det(explanation-6, the-5)
nsubjpass(used-11, explanation-6)
nsubj:xsubj(avoid-13, explanation-6)
case(unsatisfiability-8, of-7)
nmod:of(explanation-6, unsatisfiability-8)
aux(used-11, can-9)
auxpass(used-11, be-10)
root(ROOT-0, used-11)
mark(avoid-13, to-12)
xcomp(used-11, avoid-13)
xcomp(avoid-13, calling-14)
det(solver-17, the-15)
amod(solver-17, nested-16)
dobj(calling-14, solver-17)
advmod(often-19, too-18)
advmod(calling-14, often-19)

(ROOT
  (S
    (NP
      (NP (DT The) (NN use))
      (PP (IN of)
        (NP (DT the) (NN under-approximation))))
    (ADVP (RB roughly))
    (VP (VBZ has)
      (NP
        (NP (DT the) (JJ same) (NN effect))
        (PP (IN as)
          (S
            (VP
              (VP (VBG calling)
                (NP (DT a) (NN SAT-solver))
                (PP (IN for)
                  (PRN (, ,)
                    (PP (IN with)
                      (NP
                        (NP (NNP assumptions) (NNP S))
                        (PRN (-LRB- -LRB-)
                          (NP (NNP S))
                          (-RRB- -RRB-))))
                    (, ,))))
              (CC but)
              (VP (VBG obliging)
                (NP (DT the) (JJ nested) (NN solver))
                (S
                  (VP (TO to)
                    (VP (VB keep)
                      (NP (DT all) (NNS variables))
                      (PP (IN in)
                        (SBAR
                          (WHNP (WDT that))
                          (S
                            (VP (VBP are)
                              (VP (VBN unassigned)
                                (PP (IN in)
                                  (NP (NNP S)
                                    (PRN (-LRB- -LRB-)
                                      (NP (NNP S))
                                      (-RRB- -RRB-))
                                    (NN unassigned)))))))))))))))))
    (. .)))

det(use-2, The-1)
nsubj(has-7, use-2)
case(under-approximation-5, of-3)
det(under-approximation-5, the-4)
nmod:of(use-2, under-approximation-5)
advmod(has-7, roughly-6)
root(ROOT-0, has-7)
det(effect-10, the-8)
amod(effect-10, same-9)
dobj(has-7, effect-10)
mark(calling-12, as-11)
acl(effect-10, calling-12)
det(SAT-solver-14, a-13)
dobj(calling-12, SAT-solver-14)
case(S-19, for-15)
case(S-19, with-17)
compound(S-19, assumptions-18)
advcl(calling-12, S-19)
appos(S-19, S-21)
cc(calling-12, but-24)
acl(effect-10, obliging-25)
conj:but(calling-12, obliging-25)
det(solver-28, the-26)
amod(solver-28, nested-27)
dobj(obliging-25, solver-28)
mark(keep-30, to-29)
advcl(obliging-25, keep-30)
det(variables-32, all-31)
dobj(keep-30, variables-32)
mark(unassigned-36, in-33)
nsubjpass(unassigned-36, that-34)
auxpass(unassigned-36, are-35)
advcl(keep-30, unassigned-36)
case(unassigned-42, in-37)
compound(unassigned-42, S-38)
appos(unassigned-42, S-40)
nmod:in(unassigned-36, unassigned-42)

(ROOT
  (S
    (NP (DT This))
    (VP (MD would)
      (VP (VB require)
        (S
          (NP (PRP us))
          (VP (TO to)
            (VP (VB modify)
              (NP
                (NP (DT the) (NNS internals))
                (PP (IN of)
                  (NP (DT the) (NN solver) (NNP S))))
              (S
                (VP (TO to)
                  (VP (VB find)
                    (NP (NNS models))
                    (PP (IN in)
                      (NP
                        (NP (DT a) (JJ partial) (NN context))
                        (, ,)
                        (SBAR
                          (WHNP (WDT which))
                          (S
                            (VP (VBZ is)
                              (NP
                                (NP (NN something))
                                (SBAR
                                  (S
                                    (NP (PRP we))
                                    (VP (VBP try)
                                      (S
                                        (VP (TO to)
                                          (VP (VB avoid)))))))))))))))))))))
    (. .)))

nsubj(require-3, This-1)
aux(require-3, would-2)
root(ROOT-0, require-3)
dobj(require-3, us-4)
nsubj:xsubj(modify-6, us-4)
mark(modify-6, to-5)
xcomp(require-3, modify-6)
det(internals-8, the-7)
dobj(modify-6, internals-8)
case(S-12, of-9)
det(S-12, the-10)
compound(S-12, solver-11)
nmod:of(internals-8, S-12)
mark(find-14, to-13)
advcl(modify-6, find-14)
dobj(find-14, models-15)
case(context-19, in-16)
det(context-19, a-17)
amod(context-19, partial-18)
nmod:in(find-14, context-19)
nsubj(something-23, context-19)
ref(context-19, which-21)
cop(something-23, is-22)
acl:relcl(context-19, something-23)
nsubj(try-25, we-24)
nsubj:xsubj(avoid-27, we-24)
acl:relcl(something-23, try-25)
mark(avoid-27, to-26)
xcomp(try-25, avoid-27)

(ROOT
  (S
    (PP (IN As)
      (NP (JJ such)))
    (, ,)
    (NP (DT the) (NN under-approximation))
    (VP (VBZ serves)
      (NP
        (NP (CD two) (NNS purposes))
        (SBAR
          (S
            (S
              (LST (-LRB- -LRB-) (LS 1) (-RRB- -RRB-))
              (NP (PRP it))
              (VP (VBZ allows)
                (S
                  (NP (PRP us))
                  (VP (TO to)
                    (VP (VB call)
                      (NP (DT the) (JJ nested) (NN solver))
                      (PP (IN after)
                        (NP (DT each) (NN unit) (NN propagation))))))))
            (, ,)
            (S
              (LST (-LRB- -LRB-) (LS 2) (-RRB- -RRB-))
              (NP (PRP it))
              (VP (VBZ ensures)
                (SBAR
                  (S
                    (NP (PRP we))
                    (VP (MD can)
                      (VP (VB use)
                        (NP (DT the) (JJ nested) (NNP SAT) (NN solver))
                        (PP (IN as)
                          (NP (DT a) (NN blackbox)))))))))))))
    (. .)))

case(such-2, As-1)
nmod:as(serves-6, such-2)
det(under-approximation-5, the-4)
nsubj(serves-6, under-approximation-5)
root(ROOT-0, serves-6)
nummod(purposes-8, two-7)
dobj(serves-6, purposes-8)
dep(allows-13, 1-10)
nsubj(allows-13, it-12)
acl:relcl(purposes-8, allows-13)
dobj(allows-13, us-14)
nsubj:xsubj(call-16, us-14)
mark(call-16, to-15)
xcomp(allows-13, call-16)
det(solver-19, the-17)
amod(solver-19, nested-18)
dobj(call-16, solver-19)
case(propagation-23, after-20)
det(propagation-23, each-21)
compound(propagation-23, unit-22)
nmod:after(call-16, propagation-23)
dep(ensures-29, 2-26)
nsubj(ensures-29, it-28)
parataxis(allows-13, ensures-29)
nsubj(use-32, we-30)
aux(use-32, can-31)
ccomp(ensures-29, use-32)
det(solver-36, the-33)
amod(solver-36, nested-34)
compound(solver-36, SAT-35)
dobj(use-32, solver-36)
case(blackbox-39, as-37)
det(blackbox-39, a-38)
nmod:as(use-32, blackbox-39)

(ROOT
  (NP
    (NP (NNP Example) (CD 3.7))
    (PRN (-LRB- -LRB-)
      (ADJP
        (NP (NNP Example) (CD 3.6))
        (JJ continued))
      (-RRB- -RRB-))
    (. .)))

root(ROOT-0, Example-1)
nummod(Example-1, 3.7-2)
dep(continued-6, Example-4)
nummod(Example-4, 3.6-5)
dep(Example-1, continued-6)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (NNP T))
        (VP
          (VP (VB be)
            (NP (DT the) (NNP QBF) (CD 1)))
          (: :)
          (NP
            (NP (CD 1))
            (, ,)
            (SBAR
              (WHADVP (WRB where))
              (S
                (NP
                  (ADJP
                    (NP (CD 1) (NNS =))
                    (JJ p))
                  (NNP q.) (NNP SAT)
                  (PRN (: -)
                    (NP (NNP TO))
                    (: -))
                  (NNP SAT))
                (VP (VBZ solves)
                  (NP (DT the) (JJ satisfiability) (NN task))
                  (PP (IN for)
                    (NP (NNP T)))
                  (SBAR (IN as)
                    (S
                      (VP
                        (VP (VBZ follows) (: :)
                          (FRAG
                            (FRAG
                              (X (SYM *))
                              (NP (NNP SAT)))
                            (: -)
                            (FRAG (RB TO))))
                        (: -)
                        (NP
                          (NP (NNP SAT) (NNS starts))
                          (PP (IN from)
                            (NP (DT the) (JJ partial) (: -) (NN interpretation) (NN I0)))
                          (SBAR
                            (WHPP (IN in)
                              (WHNP (WDT which)))
                            (S
                              (NP (DT all) (NNS atoms))
                              (ADVP (RB in))
                              (VP (VBP are)
                                (ADJP (JJ unknown))))))))))))))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(QBF-5, T-2)
cop(QBF-5, be-3)
det(QBF-5, the-4)
ccomp(Let-1, QBF-5)
nummod(QBF-5, 1-6)
dobj(QBF-5, 1-8)
advmod(solves-20, where-10)
nummod(=-12, 1-11)
nmod:npmod(p-13, =-12)
amod(SAT-19, p-13)
compound(SAT-19, q.-14)
compound(SAT-19, SAT-15)
dep(SAT-19, TO-17)
nsubj(solves-20, SAT-19)
acl:relcl(1-8, solves-20)
det(task-23, the-21)
amod(task-23, satisfiability-22)
dobj(solves-20, task-23)
case(T-25, for-24)
nmod:for(solves-20, T-25)
mark(follows-27, as-26)
advcl(solves-20, follows-27)
dep(SAT-30, *-29)
dep(follows-27, SAT-30)
parataxis(SAT-30, TO-32)
compound(starts-35, SAT-34)
dobj(follows-27, starts-35)
nmod:in(unknown-48, starts-35)
case(I0-41, from-36)
det(I0-41, the-37)
amod(I0-41, partial-38)
compound(I0-41, interpretation-40)
nmod:from(starts-35, I0-41)
case(which-43, in-42)
ref(starts-35, which-43)
det(atoms-45, all-44)
nsubj(unknown-48, atoms-45)
advmod(unknown-48, in-46)
cop(unknown-48, are-47)
acl:relcl(starts-35, unknown-48)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN case)))
    (, ,)
    (NP
      (NP (IN as))
      (VP (VBN shown)
        (PP (IN in)
          (NP (NNP Example) (CD 3.6) (, ,) (CD 1)))))
    (VP (VBZ is)
      (ADJP (JJ unsatisfiable)))
    (. .)))

case(case-3, In-1)
det(case-3, this-2)
nmod:in(unsatisfiable-13, case-3)
nsubj(unsatisfiable-13, as-5)
acl(as-5, shown-6)
case(Example-8, in-7)
nmod:in(shown-6, Example-8)
nummod(Example-8, 3.6-9)
nummod(Example-8, 1-11)
cop(unsatisfiable-13, is-12)
root(ROOT-0, unsatisfiable-13)

(ROOT
  (S
    (NP
      (NP (DT A) (JJ SAT-solver) (JJ f) (NN t))
      (PP (IN for)
        (NP (CD 1))))
    (VP (MD can)
      (VP (VB return)
        (PRN (-LRB- -LRB-)
          (NP
            (NP (NNP UNSAT))
            (, ,)
            (NP (-LRB- -LCB-) (NN pf) (NNP l) (, ,) (NNP ql))
            (, ,)
            (NP (NN ou)))
          (-RRB- -RCB-))))
    (-RRB- -RRB-) (. .)))

det(t-4, A-1)
amod(t-4, SAT-solver-2)
amod(t-4, f-3)
nsubj(return-8, t-4)
case(1-6, for-5)
nmod:for(t-4, 1-6)
aux(return-8, can-7)
root(ROOT-0, return-8)
dep(return-8, UNSAT-10)
compound(ql-16, pf-13)
compound(ql-16, l-14)
appos(UNSAT-10, ql-16)
appos(UNSAT-10, ou-18)

(ROOT
  (FRAG
    (NP
      (NP (NNP SAT))
      (: -)
      (NP (NNP TO)))
    (: -)
    (S
      (NP (NNP SAT))
      (VP (VBZ interprets)
        (NP (DT this) (NN result))
        (PP (IN by)
          (S
            (VP (VBG watching)
              (NP
                (NP (JJ literals) (NN p))
                (, ,)
                (NP (NN q))
                (, ,)
                (CC and)
                (NP (NN o))))))))
    (. .)))

root(ROOT-0, SAT-1)
dep(SAT-1, TO-3)
nsubj(interprets-6, SAT-5)
parataxis(SAT-1, interprets-6)
det(result-8, this-7)
dobj(interprets-6, result-8)
mark(watching-10, by-9)
advcl(interprets-6, watching-10)
amod(p-12, literals-11)
dobj(watching-10, p-12)
dobj(watching-10, q-14)
conj:and(p-12, q-14)
cc(p-12, and-16)
dobj(watching-10, o-17)
conj:and(p-12, o-17)

(ROOT
  (S
    (ADVP (RB As) (RB soon)
      (SBAR (IN as)
        (S
          (NP
            (NP (CD one))
            (PP (IN of)
              (NP (DT these) (NNS literals))))
          (VP (VBZ becomes)
            (ADJP (JJ false))))))
    (, ,)
    (NP (DT the) (NN subsolver))
    (VP (MD will)
      (VP (VB be)
        (VP (VBN called)
          (ADVP (RB again)))))
    (. .)))

advmod(soon-2, As-1)
advmod(called-15, soon-2)
mark(becomes-8, as-3)
nsubj(becomes-8, one-4)
case(literals-7, of-5)
det(literals-7, these-6)
nmod:of(one-4, literals-7)
ccomp(soon-2, becomes-8)
xcomp(becomes-8, false-9)
det(subsolver-12, the-11)
nsubjpass(called-15, subsolver-12)
aux(called-15, will-13)
auxpass(called-15, be-14)
root(ROOT-0, called-15)
advmod(called-15, again-16)

(ROOT
  (S
    (FRAG
      (FRAG
        (X (SYM *))
        (NP (NNP SAT)))
      (: -)
      (FRAG (RB TO)))
    (: -)
    (S
      (NP (NNP SAT))
      (VP (VBZ chooses)
        (S
          (NP (NNP I1))
          (VP (SYM =)
            (NP (-LRB- -LCB-) (NNS pf) (-RRB- -RCB-))))))
    (. .)))

dep(SAT-2, *-1)
dep(chooses-7, SAT-2)
parataxis(SAT-2, TO-4)
nsubj(chooses-7, SAT-6)
root(ROOT-0, chooses-7)
nsubj(pf-11, I1-8)
dep(pf-11, =-9)
ccomp(chooses-7, pf-11)

(ROOT
  (S
    (NP
      (NP (NN None))
      (PP (IN of)
        (NP
          (NP (DT the) (NNS watches) (NN fire))
          (NP (RB hence) (DT the) (JJ internal) (NN solver)))))
    (VP (VBZ is) (RB not)
      (VP (VBN called)))
    (. .)))

nsubjpass(called-12, None-1)
case(fire-5, of-2)
det(fire-5, the-3)
compound(fire-5, watches-4)
nmod:of(None-1, fire-5)
advmod(solver-9, hence-6)
det(solver-9, the-7)
amod(solver-9, internal-8)
dep(fire-5, solver-9)
auxpass(called-12, is-10)
neg(called-12, not-11)
root(ROOT-0, called-12)

(ROOT
  (S
    (FRAG
      (FRAG
        (X (SYM *))
        (NP (NNP SAT)))
      (: -)
      (FRAG (RB TO)))
    (: -)
    (S
      (NP (NNP SAT))
      (VP (VBZ chooses)
        (S
          (NP (NNP I2))
          (VP (SYM =)
            (NP (-LRB- -LCB-) (NN pf) (, ,) (NN q) (NNS t) (-RRB- -RCB-))))))
    (. .)))

dep(SAT-2, *-1)
dep(chooses-7, SAT-2)
parataxis(SAT-2, TO-4)
nsubj(chooses-7, SAT-6)
root(ROOT-0, chooses-7)
nsubj(t-14, I2-8)
dep(t-14, =-9)
compound(t-14, pf-11)
dep(t-14, q-13)
ccomp(chooses-7, t-14)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN case)))
    (NP (CD 1))
    (VP (VBZ has)
      (NP
        (NP
          (NP (DT a) (NN model))
          (-LRB- -LRB-)
          (NP (NNP M) (NNP =))
          (PRN (-LRB- -LCB-)
            (NP (NN rf))
            (-RRB- -RCB-))
          (-RRB- -RRB-))
        (ADJP (RBR more) (JJ precise)))
      (PP (IN than)
        (NP
          (PRN (-LRB- -LRB-)
            (NP (NNP I2))
            (-RRB- -RRB-))
          (NN lu))))
    (. .)))

case(case-3, In-1)
det(case-3, this-2)
nmod:in(has-5, case-3)
nsubj(has-5, 1-4)
root(ROOT-0, has-5)
det(model-7, a-6)
dobj(has-5, model-7)
compound(=-10, M-9)
dep(model-7, =-10)
appos(model-7, rf-12)
advmod(precise-16, more-15)
amod(model-7, precise-16)
case(lu-21, than-17)
appos(lu-21, I2-19)
nmod:than(has-5, lu-21)

(ROOT
  (NP
    (NP (DT The) (JJ internal) (NN t) (NN solver) (NNS returns))
    (PRN (-LRB- -LRB-)
      (NP (NNP SAT))
      (, ,)
      (NP
        (NP (-LRB- -LCB-) (NN ql) (-RRB- -RCB-))
        (, ,)
        (NP (NNP M)))
      (-RRB- -RRB-))
    (. .)))

det(returns-5, The-1)
amod(returns-5, internal-2)
compound(returns-5, t-3)
compound(returns-5, solver-4)
root(ROOT-0, returns-5)
dep(returns-5, SAT-7)
dep(SAT-7, ql-10)
appos(ql-10, M-13)

(ROOT
  (FRAG
    (NP
      (NP (NNP SAT))
      (: -)
      (NP (NNP TO)))
    (: -)
    (S
      (NP (NNP SAT))
      (VP (VBZ interprets)
        (NP (DT this) (NN result))
        (PP (IN by)
          (S
            (VP (VBG adding)
              (NP (DT the) (NN clause) (NN q))
              (PP (TO to)
                (NP (CD 1))))))))
    (. .)))

root(ROOT-0, SAT-1)
dep(SAT-1, TO-3)
nsubj(interprets-6, SAT-5)
parataxis(SAT-1, interprets-6)
det(result-8, this-7)
dobj(interprets-6, result-8)
mark(adding-10, by-9)
advcl(interprets-6, adding-10)
det(q-13, the-11)
compound(q-13, clause-12)
dobj(adding-10, q-13)
case(1-15, to-14)
nmod:to(adding-10, 1-15)

(ROOT
  (S
    (X (SYM *))
    (NP
      (NP (DT The) (NN solver))
      (PP (IN for)
        (NP (CD 1)))
      (ADVP (RB now)))
    (VP
      (VP (VBZ finds)
        (NP (DT a) (NN conflict)))
      (, ,)
      (VP (VBZ backjumps))
      (CC and)
      (VP (VBZ continues)
        (NP (NN search))))
    (. .)))

dep(finds-7, *-1)
det(solver-3, The-2)
nsubj(finds-7, solver-3)
nsubj(backjumps-11, solver-3)
nsubj(continues-13, solver-3)
case(1-5, for-4)
nmod:for(solver-3, 1-5)
advmod(solver-3, now-6)
root(ROOT-0, finds-7)
det(conflict-9, a-8)
dobj(finds-7, conflict-9)
conj:and(finds-7, backjumps-11)
cc(finds-7, and-12)
conj:and(finds-7, continues-13)
dobj(continues-13, search-14)

(ROOT
  (S
    (NP
      (NP (DT The) (JJ only) (NN thing))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBZ remains)
            (S
              (VP (TO to)
                (VP (VB be)
                  (VP (VBN explained)))))))))
    (VP (VBZ is)
      (SBAR
        (WHADVP (WRB how))
        (FRAG
          (NP (NNP SAT))
          (: -)
          (NP
            (NP (NNP TO))
            (: -)
            (NP (NNP SAT) (NNP obtains) (NNP a)))
          (: -)
          (VP (VBN approximation)
            (PP (IN of))))))
    (. .)))

det(thing-3, The-1)
amod(thing-3, only-2)
nsubj(remains-5, thing-3)
nsubjpass:xsubj(explained-8, thing-3)
nsubj(is-9, thing-3)
ref(thing-3, that-4)
acl:relcl(thing-3, remains-5)
mark(explained-8, to-6)
auxpass(explained-8, be-7)
xcomp(remains-5, explained-8)
root(ROOT-0, is-9)
advmod(SAT-11, how-10)
dep(is-9, SAT-11)
dep(SAT-11, TO-13)
compound(a-17, SAT-15)
compound(a-17, obtains-16)
dep(TO-13, a-17)
dep(SAT-11, approximation-19)
nmod(approximation-19, of-20)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is)
      (VP (VBN done)
        (PP (IN by)
          (NP (DT the) (JJ following) (JJ syntactical) (NN transformation)))))
    (. .)))

nsubjpass(done-3, This-1)
auxpass(done-3, is-2)
root(ROOT-0, done-3)
case(transformation-8, by-4)
det(transformation-8, the-5)
amod(transformation-8, following-6)
amod(transformation-8, syntactical-7)
nmod:agent(done-3, transformation-8)

(ROOT
  (NP (NNS Lemma) (CD 3.8) (. .)))

root(ROOT-0, Lemma-1)
nummod(Lemma-1, 3.8-2)

(ROOT
  (S
    (VP (VB Let)
      (VP (VB be)
        (NP (DT a) (NNP -) (NNP CNF))))
    (. .)))

root(ROOT-0, Let-1)
cop(CNF-5, be-2)
det(CNF-5, a-3)
compound(CNF-5, --4)
xcomp(Let-1, CNF-5)

(ROOT
  (S
    (VP (VB Let)
      (NP (NN lu))
      (VP (VB be)
        (NP
          (NP (DT the) (NN lu) (NN CNF))
          (VP (VBN obtained)
            (PP (IN from)
              (PP (IN by)
                (NP (CD 1))))))))
    (. .)))

root(ROOT-0, Let-1)
dobj(Let-1, lu-2)
cop(CNF-6, be-3)
det(CNF-6, the-4)
compound(CNF-6, lu-5)
dep(Let-1, CNF-6)
acl(CNF-6, obtained-7)
case(1-10, from-8)
case(1-10, by-9)
nmod:by(obtained-7, 1-10)

(ROOT
  (S
    (VP (VBG replacing)
      (NP (DT each) (JJ literal) (NN p))
      (PP (IN in) (IN with)
        (NP
          (NP
            (NP (NN p))
            (PP (IN by)
              (NP (NN pu))))
          (, ,)
          (CC and)
          (NP (CD 2)))))
    (. .)))

root(ROOT-0, replacing-1)
det(p-4, each-2)
amod(p-4, literal-3)
dobj(replacing-1, p-4)
case(p-7, in-5)
case(p-7, with-6)
nmod:with(replacing-1, p-7)
case(pu-9, by-8)
nmod:by(p-7, pu-9)
cc(p-7, and-11)
nmod:with(replacing-1, 2-12)
conj:and(p-7, 2-12)

(ROOT
  (S
    (VP (VBG replacing)
      (NP (DT each) (JJ literal) (NN p))
      (PP (IN in)
        (PP (IN with)
          (NP (NN p))))
      (PP (IN by)
        (NP (NN pl))))
    (. .)))

root(ROOT-0, replacing-1)
det(p-4, each-2)
amod(p-4, literal-3)
dobj(replacing-1, p-4)
case(p-7, in-5)
case(p-7, with-6)
nmod:with(replacing-1, p-7)
case(pl-9, by-8)
nmod:by(replacing-1, pl-9)

(ROOT
  (S
    (ADVP (RB Then))
    (, ,)
    (NP (NN lu))
    (VP (VBZ is)
      (NP
        (NP (DT a) (JJ -) (NN under-approximation))
        (PP (IN of))))
    (. .)))

advmod(under-approximation-7, Then-1)
nsubj(under-approximation-7, lu-3)
cop(under-approximation-7, is-4)
det(under-approximation-7, a-5)
amod(under-approximation-7, --6)
root(ROOT-0, under-approximation-7)
acl(under-approximation-7, of-8)

(ROOT
  (S
    (NP (DT This) (NN lemma))
    (VP (VBZ follows)
      (NP (DT the) (NN fact))
      (SBAR (IN that)
        (S (, ,)
          (PP (IN for)
            (NP (DT each) (JJ partial) (NN interpretation) (PRP I)))
          (, ,)
          (NP (PRP we))
          (VP (VBP have)
            (VP (VBN Ilu)
              (S (-LRB- -LRB-)
                (NP (NN pl))
                (-RRB- -RRB-)
                (VP (VB t)
                  (S
                    (NP (PRP I))
                    (PRN (-LRB- -LRB-)
                      (NP (NN p))
                      (-RRB- -RRB-))
                    (VP (VB t)
                      (NP (NNP Ilu) (-LRB- -LRB-) (NNP pu) (-RRB- -RRB-)))))))))))
    (. .)))

det(lemma-2, This-1)
nsubj(follows-3, lemma-2)
root(ROOT-0, follows-3)
det(fact-5, the-4)
dobj(follows-3, fact-5)
mark(Ilu-16, that-6)
case(interpretation-11, for-8)
det(interpretation-11, each-9)
amod(interpretation-11, partial-10)
nmod:for(Ilu-16, interpretation-11)
dep(interpretation-11, I-12)
nsubj(Ilu-16, we-14)
aux(Ilu-16, have-15)
ccomp(follows-3, Ilu-16)
nsubj(t-20, pl-18)
ccomp(Ilu-16, t-20)
nsubj(t-25, I-21)
dep(t-25, p-23)
ccomp(t-20, t-25)
compound(pu-28, Ilu-26)
dobj(t-25, pu-28)

(ROOT
  (NP
    (NP (NNP Example) (CD 3.9))
    (PRN (-LRB- -LRB-)
      (ADJP
        (NP (NNP Example) (CD 3.6))
        (JJ continued))
      (-RRB- -RRB-))
    (. .)))

root(ROOT-0, Example-1)
nummod(Example-1, 3.9-2)
dep(continued-6, Example-4)
nummod(Example-4, 3.6-5)
dep(Example-1, continued-6)

(ROOT
  (S
    (NP
      (NP (DT The) (NN formula) (CD 1) (NN equals))
      (PRN (-LRB- -LRB-)
        (NP (CD 1))
        (-RRB- -RRB-)))
    (VP (VBP lu)
      (SBAR (IN as)
        (S
          (VP (VBN defined)
            (PP (IN in)
              (NP (NNP Lemma) (CD 3.8)))))))
    (. .)))

det(equals-4, The-1)
compound(equals-4, formula-2)
nummod(equals-4, 1-3)
nsubj(lu-8, equals-4)
appos(equals-4, 1-6)
root(ROOT-0, lu-8)
mark(defined-10, as-9)
advcl(lu-8, defined-10)
case(Lemma-12, in-11)
nmod:in(defined-10, Lemma-12)
nummod(Lemma-12, 3.8-13)

(ROOT
  (NP
    (NP (NNP Example) (CD 4.2))
    (PRN (-LRB- -LRB-)
      (ADJP
        (NP (NNP Example) (CD 3.7))
        (JJ continued))
      (-RRB- -RRB-))
    (. .)))

root(ROOT-0, Example-1)
nummod(Example-1, 4.2-2)
dep(continued-6, Example-4)
nummod(Example-4, 3.7-5)
dep(Example-1, continued-6)

(ROOT
  (S
    (VP (VB Let)
      (NP
        (NP
          (NP (CD 1))
          (-LRB- -LCB-)
          (NP
            (NP
              (NP (NN p))
              (, ,)
              (ADJP (JJ o))
              (-RRB- -RCB-))
            (, ,)
            (NP
              (NP (CD 2) (NNS =))
              (-LRB- -LCB-)
              (NP (NN q))
              (-RRB- -RCB-))
            (CC and)
            (NP
              (NP
                (NP (NNP T))
                (PRN (-LRB- -LRB-)
                  (NP (CD 1))
                  (-RRB- -RRB-)))
              (QP (CD =) (CD 2))))
          (: :))
        (PRN (-LRB- -LRB-)
          (NP
            (NP (CD 1))
            (: :)
            (NP (CD 1)))
          (-RRB- -RRB-))))
    (. .)))

root(ROOT-0, Let-1)
dobj(Let-1, 1-2)
dep(1-2, p-4)
amod(p-4, o-6)
nummod(=-10, 2-9)
dep(1-2, =-10)
conj:and(p-4, =-10)
dep(=-10, q-12)
cc(p-4, and-14)
dep(1-2, T-15)
conj:and(p-4, T-15)
appos(T-15, 1-17)
compound(2-20, =-19)
nummod(T-15, 2-20)
dep(1-2, 1-23)
dep(1-23, 1-25)

(ROOT
  (S
    (ADVP (RB =))
    (ADVP (RB Furthermore))
    (, ,)
    (VP (VBP let)
      (NP
        (NP
          (NP (NNP J) (NNP =))
          (-LRB- -LCB-)
          (NP (NN pf))
          (-RRB- -RCB-))
        (CC and)
        (NP
          (NP (NNP J) (NNP =))
          (-LRB- -LCB-)
          (NP (NN pf))
          (PRN (, ,)
            (ADVP (RB q))
            (NP
              (NP (SYM f))
              (, ,)
              (NP (NN ot))))
          (-RRB- -RCB-))))
    (. .)))

advmod(let-4, =-1)
advmod(let-4, Furthermore-2)
root(ROOT-0, let-4)
compound(=-6, J-5)
dobj(let-4, =-6)
dep(=-6, pf-8)
cc(=-6, and-10)
compound(=-12, J-11)
dobj(let-4, =-12)
conj:and(=-6, =-12)
dep(=-12, pf-14)
dep(f-17, q-16)
dep(=-12, f-17)
appos(f-17, ot-19)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN case)))
    (, ,)
    (S
      (NP (NNP J))
      (VP (VBZ explains)
        (NP
          (NP (NN satisfiability))
          (PP (IN of)
            (NP (CD 1))))))
    (CC and)
    (S
      (NP (NNP J))
      (VP (VBZ explains)
        (NP
          (NP (NN unsatisfiability))
          (PP (IN of)
            (NP (CD 1))))))
    (. .)))

case(case-3, In-1)
det(case-3, this-2)
nmod:in(explains-6, case-3)
nsubj(explains-6, J-5)
root(ROOT-0, explains-6)
dobj(explains-6, satisfiability-7)
case(1-9, of-8)
nmod:of(satisfiability-7, 1-9)
cc(explains-6, and-10)
nsubj(explains-12, J-11)
conj:and(explains-6, explains-12)
dobj(explains-12, unsatisfiability-13)
case(1-15, of-14)
nmod:of(unsatisfiability-13, 1-15)

(ROOT
  (S
    (NP (NNP Theorem) (NNP 4.1))
    (VP (VBZ shows)
      (SBAR (IN that)
        (S
          (NP
            (NP (NNP J) (NNP =))
            (PRN (-LRB- -LCB-)
              (NP
                (NP (NN pf))
                (, ,)
                (NP (NN ot)))
              (-RRB- -RCB-)))
          (VP (VBZ explains)
            (NP
              (NP (NN satisfiability))
              (PP (IN of)
                (NP
                  (NP (NNP T))
                  (PRN (-LRB- -LRB-)
                    (NP (CD 1))
                    (-RRB- -RRB-)))))))))
    (. .)))

compound(4.1-2, Theorem-1)
nsubj(shows-3, 4.1-2)
root(ROOT-0, shows-3)
mark(explains-12, that-4)
compound(=-6, J-5)
nsubj(explains-12, =-6)
dep(=-6, pf-8)
appos(pf-8, ot-10)
ccomp(shows-3, explains-12)
dobj(explains-12, satisfiability-13)
case(T-15, of-14)
nmod:of(satisfiability-13, T-15)
appos(T-15, 1-17)

(ROOT
  (S
    (S
      (NP
        (NP (DT The) (NN case))
        (PP (IN of)
          (NP (NN unsatisfiability))))
      (VP (VBZ is)
        (ADJP (JJR easier))))
    (: :)
    (S
      (NP (DT every) (NN time))
      (VP (VBP SAT)))
    (: -)
    (S
      (ADVP (RB TO))
      (PRN (, -)
        (S
          (NP (NNP SAT))
          (VP (VBZ finds)
            (NP
              (NP (DT a) (NN model))
              (PP (IN for)
                (NP (PRP$ its) (JJ nested) (NN expression))))))
        (, ,))
      (NP (DT a) (NN clause))
      (VP (VBZ is)
        (VP (VBN added)
          (PP (TO to)
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBZ invalidates)
                  (NP (DT the) (JJ current) (JJ partial) (NN interpretation)))))))))
    (. .)))

det(case-2, The-1)
nsubj(easier-6, case-2)
case(unsatisfiability-4, of-3)
nmod:of(case-2, unsatisfiability-4)
cop(easier-6, is-5)
root(ROOT-0, easier-6)
det(time-9, every-8)
nsubj(SAT-10, time-9)
parataxis(easier-6, SAT-10)
advmod(added-26, TO-12)
nsubj(finds-15, SAT-14)
parataxis(added-26, finds-15)
det(model-17, a-16)
dobj(finds-15, model-17)
case(expression-21, for-18)
nmod:poss(expression-21, its-19)
amod(expression-21, nested-20)
nmod:for(model-17, expression-21)
det(clause-24, a-23)
nsubjpass(added-26, clause-24)
auxpass(added-26, is-25)
parataxis(easier-6, added-26)
mark(invalidates-29, to-27)
nsubj(invalidates-29, that-28)
advcl(added-26, invalidates-29)
det(interpretation-33, the-30)
amod(interpretation-33, current-31)
amod(interpretation-33, partial-32)
dobj(invalidates-29, interpretation-33)

(ROOT
  (S
    (ADVP (RB Hence))
    (, ,)
    (PP (IN in)
      (NP (DT the) (NN end)))
    (, ,)
    (NP
      (NP (DT the) (JJ only) (NN way))
      (PP (IN for)
        (NP (NNP T)))
      (S
        (VP (TO to)
          (VP (VB become)
            (NP (NN unsatisfiable))))))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (VP (VBZ becomes)
            (ADJP (JJ unsatisfiable))))))
    (. .)))

advmod(is-15, Hence-1)
case(end-5, in-3)
det(end-5, the-4)
nmod:in(is-15, end-5)
det(way-9, the-7)
amod(way-9, only-8)
nsubj(is-15, way-9)
case(T-11, for-10)
nmod:for(way-9, T-11)
mark(become-13, to-12)
acl(way-9, become-13)
xcomp(become-13, unsatisfiable-14)
root(ROOT-0, is-15)
mark(becomes-17, that-16)
ccomp(is-15, becomes-17)
xcomp(becomes-17, unsatisfiable-18)

(ROOT
  (S
    (VP (VB Theorem)
      (NP (CD 4.3)))
    (. .)))

root(ROOT-0, Theorem-1)
dobj(Theorem-1, 4.3-2)

(ROOT
  (S
    (VP (VB Let) (RB T)
      (VP (VB be)
        (NP
          (NP (DT a) (NNP QBF))
          (PP (IN of)
            (NP
              (NP (DT the) (NN form) (NN T))
              (-LRB- -LRB-)
              (NP (NNP -RRB-) (NNP =))
              (: :)))
          (PRN (-LRB- -LRB-)
            (NP (NNP :))
            (-RRB- -RRB-)))
        (, ,)
        (SBAR
          (WHADVP (WRB where))
          (S
            (VP
              (VP (VBZ is)
                (NP (DT a) (NNP CNF)))
              (CC and)
              (VP (VBZ is)
                (NP (DT an)
                  (ADJP
                    (ADJP (JJ arbitrary))
                    (PRN (-LRB- -LRB-)
                      (NP (NNP QBF))
                      (-RRB- -RRB-)))
                  (NN formula))))))))
    (. .)))

root(ROOT-0, Let-1)
advmod(Let-1, T-2)
cop(QBF-5, be-3)
det(QBF-5, a-4)
dep(Let-1, QBF-5)
case(T-9, of-6)
det(T-9, the-7)
compound(T-9, form-8)
nmod:of(QBF-5, T-9)
compound(=-12, -RRB--11)
dep(T-9, =-12)
appos(QBF-5, :-15)
advmod(CNF-21, where-18)
cop(CNF-21, is-19)
det(CNF-21, a-20)
advcl(QBF-5, CNF-21)
cc(CNF-21, and-22)
cop(formula-29, is-23)
det(formula-29, an-24)
amod(formula-29, arbitrary-25)
dep(arbitrary-25, QBF-27)
advcl(QBF-5, formula-29)
conj:and(CNF-21, formula-29)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (PRP I))
        (VP (VB be)
          (NP (DT a) (JJ -) (NN interpretation)))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(interpretation-6, I-2)
cop(interpretation-6, be-3)
det(interpretation-6, a-4)
amod(interpretation-6, --5)
ccomp(Let-1, interpretation-6)

(ROOT
  (S
    (S
      (NP (NNP Suppose))
      (VP (VBZ is)
        (NP (NNP J))))
    (: -)
    (S
      (S
        (NP (NNP unsatisfiable)
          (CC and)
          (NNP J))
        (VP (VBP p)
          (NP (PRP I))))
      (, ,) (RB then)
      (S
        (NP (NNP T))
        (VP (VBZ is)
          (ADJP
            (ADJP (JJ J))
            (: -)
            (ADJP (JJ unsatisfiable))
            (ADVP (RB as) (RB well))))))
    (. .)))

nsubj(J-3, Suppose-1)
cop(J-3, is-2)
root(ROOT-0, J-3)
nsubj(p-8, unsatisfiable-5)
cc(unsatisfiable-5, and-6)
conj:and(unsatisfiable-5, J-7)
nsubj(p-8, J-7)
parataxis(J-3, p-8)
dobj(p-8, I-9)
advmod(J-14, then-11)
nsubj(J-14, T-12)
cop(J-14, is-13)
parataxis(p-8, J-14)
dep(J-14, unsatisfiable-16)
advmod(J-14, as-17)
mwe(as-17, well-18)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB now))
    (VP (VBP show)
      (SBAR
        (WHADVP (WRB how))
        (S
          (NP (NNP Lemma) (CD 3.8))
          (VP (VBZ extends)
            (PP (TO to)
              (NP (JJ general) (NNS QBFs)))))))
    (. .)))

nsubj(show-3, We-1)
advmod(show-3, now-2)
root(ROOT-0, show-3)
advmod(extends-7, how-4)
nsubj(extends-7, Lemma-5)
nummod(Lemma-5, 3.8-6)
ccomp(show-3, extends-7)
case(QBFs-10, to-8)
amod(QBFs-10, general-9)
nmod:to(extends-7, QBFs-10)

(ROOT
  (NP (NNS Lemma) (CD 4.4) (. .)))

root(ROOT-0, Lemma-1)
nummod(Lemma-1, 4.4-2)

(ROOT
  (S
    (VP (VB Let)
      (VP (VB be)
        (NP (DT a) (NNP -) (NNP QBF))))
    (. .)))

root(ROOT-0, Let-1)
cop(QBF-5, be-2)
det(QBF-5, a-3)
compound(QBF-5, --4)
xcomp(Let-1, QBF-5)

(ROOT
  (S
    (VP (VB Let)
      (NP (NN lu))
      (VP (VB be)
        (NP
          (NP (DT the) (NN lu) (NN QBF))
          (VP (VBN obtained)
            (PP (IN from)
              (PP (IN by)
                (NP (CD 1))))))))
    (. .)))

root(ROOT-0, Let-1)
dobj(Let-1, lu-2)
cop(QBF-6, be-3)
det(QBF-6, the-4)
compound(QBF-6, lu-5)
dep(Let-1, QBF-6)
acl(QBF-6, obtained-7)
case(1-10, from-8)
case(1-10, by-9)
nmod:by(obtained-7, 1-10)

(ROOT
  (S
    (VP (VBG replacing)
      (NP
        (NP (DT each) (JJ negative) (NNS occurrences))
        (PP (IN of)
          (NP (NN p))))
      (PP (IN by)
        (NP
          (NP (NN pu))
          (, ,)
          (CC and)
          (NP (CD 2)))))
    (. .)))

root(ROOT-0, replacing-1)
det(occurrences-4, each-2)
amod(occurrences-4, negative-3)
dobj(replacing-1, occurrences-4)
case(p-6, of-5)
nmod:of(occurrences-4, p-6)
case(pu-8, by-7)
nmod:by(replacing-1, pu-8)
cc(pu-8, and-10)
nmod:by(replacing-1, 2-11)
conj:and(pu-8, 2-11)

(ROOT
  (S
    (VP (VBG replacing)
      (NP
        (NP (DT each) (JJ positive) (NNS occurrences))
        (PP (IN of)
          (NP (NN p))))
      (PP (IN by)
        (NP (NN pl))))
    (. .)))

root(ROOT-0, replacing-1)
det(occurrences-4, each-2)
amod(occurrences-4, positive-3)
dobj(replacing-1, occurrences-4)
case(p-6, of-5)
nmod:of(occurrences-4, p-6)
case(pl-8, by-7)
nmod:by(replacing-1, pl-8)

(ROOT
  (S
    (ADVP (RB Then))
    (, ,)
    (NP (NN lu))
    (VP (VBZ is)
      (NP
        (NP (DT a) (JJ -) (NN under-approximation))
        (PP (IN of))))
    (. .)))

advmod(under-approximation-7, Then-1)
nsubj(under-approximation-7, lu-3)
cop(under-approximation-7, is-4)
det(under-approximation-7, a-5)
amod(under-approximation-7, --6)
root(ROOT-0, under-approximation-7)
acl(under-approximation-7, of-8)

(ROOT
  (S
    (ADVP (RB Again))
    (, ,)
    (NP (DT this) (NN lemma))
    (VP (VBZ follows)
      (PP (IN from)
        (NP (DT the) (NN fact)))
      (SBAR (IN that)
        (S (, ,)
          (PP (IN for)
            (NP (DT all) (JJ partial) (: -) (NN interpretations) (NN I)))
          (, ,)
          (NP (PRP we))
          (VP (VBP have)
            (VP (VBN Ilu)
              (S (-LRB- -LRB-)
                (NP (NN pl))
                (-RRB- -RRB-)
                (VP (VB t)
                  (S
                    (NP (PRP I))
                    (PRN (-LRB- -LRB-)
                      (NP (NN p))
                      (-RRB- -RRB-))
                    (VP (VB t)
                      (NP (NNP Ilu) (-LRB- -LRB-) (NNP pu) (-RRB- -RRB-)))))))))))
    (. .)))

advmod(follows-5, Again-1)
det(lemma-4, this-3)
nsubj(follows-5, lemma-4)
root(ROOT-0, follows-5)
case(fact-8, from-6)
det(fact-8, the-7)
nmod:from(follows-5, fact-8)
mark(Ilu-20, that-9)
case(I-16, for-11)
det(I-16, all-12)
amod(I-16, partial-13)
compound(I-16, interpretations-15)
nmod:for(Ilu-20, I-16)
nsubj(Ilu-20, we-18)
aux(Ilu-20, have-19)
ccomp(follows-5, Ilu-20)
nsubj(t-24, pl-22)
ccomp(Ilu-20, t-24)
nsubj(t-29, I-25)
dep(t-29, p-27)
ccomp(t-24, t-29)
compound(pu-32, Ilu-30)
dobj(t-29, pu-32)

(ROOT
  (S
    (NP (NNP Lemma) (CD 4.4))
    (VP (VBZ shows)
      (SBAR
        (WHADVP (WRB how))
        (S
          (VP (TO to)
            (VP (VB obtain)
              (NP
                (NP (NNS under-approximations))
                (PP (IN for)
                  (NP (NNP QBFs))))
              (PP (IN in)
                (NP (NN general))))))))
    (. .)))

nsubj(shows-3, Lemma-1)
nummod(Lemma-1, 4.4-2)
root(ROOT-0, shows-3)
advmod(obtain-6, how-4)
mark(obtain-6, to-5)
ccomp(shows-3, obtain-6)
dobj(obtain-6, under-approximations-7)
case(QBFs-9, for-8)
nmod:for(under-approximations-7, QBFs-9)
case(general-11, in-10)
nmod:in(obtain-6, general-11)

(ROOT
  (S
    (PP
      (ADVP (RB Together))
      (IN with)
      (NP (NNP Theorems) (CD 4.1)
        (CC and)
        (CD 4.3)))
    (, ,)
    (NP (PRP we))
    (VP (VBP obtain)
      (S
        (NP (DT all) (NNS ingredients))
        (VP (TO to)
          (VP (VB extend)
            (NP
              (NP (NNP SAT)
                (PRN (: -)
                  (NP (NNP TO))
                  (: -))
                (NNP SAT))
              (PP (IN for)
                (NP (JJ general) (NNS QBFs))))))))
    (. .)))

case(Theorems-3, Together-1)
mwe(Together-1, with-2)
nmod:together_with(obtain-9, Theorems-3)
nummod(Theorems-3, 4.1-4)
cc(Theorems-3, and-5)
conj:and(Theorems-3, 4.3-6)
nmod:together_with(obtain-9, 4.3-6)
nsubj(obtain-9, we-8)
root(ROOT-0, obtain-9)
det(ingredients-11, all-10)
dobj(obtain-9, ingredients-11)
nsubj:xsubj(extend-13, ingredients-11)
mark(extend-13, to-12)
xcomp(obtain-9, extend-13)
compound(SAT-18, SAT-14)
dep(SAT-18, TO-16)
dobj(extend-13, SAT-18)
case(QBFs-21, for-19)
amod(QBFs-21, general-20)
nmod:for(SAT-18, QBFs-21)

(ROOT
  (S
    (NP (DT The) (VBG resulting) (NN solver))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NNP SAT) (NN solver) (NN S1))
        (VP (VBN extended)
          (PP (IN with)
            (NP
              (NP (DT an) (JJ oracle) (NN S2))
              (, ,)
              (ADVP (RB also))
              (NP
                (NP (DT an) (NN instantiation))
                (PP (IN of)
                  (NP (NNP SAT)
                    (PRN (: -)
                      (NP (NNP TO))
                      (: -))
                    (NNP SAT)))))))))
    (. .)))

det(solver-3, The-1)
amod(solver-3, resulting-2)
nsubj(S1-8, solver-3)
cop(S1-8, is-4)
det(S1-8, a-5)
compound(S1-8, SAT-6)
compound(S1-8, solver-7)
root(ROOT-0, S1-8)
acl(S1-8, extended-9)
case(S2-13, with-10)
det(S2-13, an-11)
amod(S2-13, oracle-12)
nmod:with(extended-9, S2-13)
advmod(instantiation-17, also-15)
det(instantiation-17, an-16)
appos(S2-13, instantiation-17)
case(SAT-23, of-18)
compound(SAT-23, SAT-19)
dep(SAT-23, TO-21)
nmod:of(instantiation-17, SAT-23)

(ROOT
  (S
    (NP
      (NP (DT The) (NNS results))
      (PP (IN from)
        (NP
          (NP (NNS calls))
          (PP (TO to)
            (NP (NNP S2))))))
    (VP (VBP are)
      (VP (VBN used)
        (ADVP (RB either))
        (SBAR (IN as)
          (S
            (VP
              (VP (VBD learnt)
                (NP (NNS clauses))
                (PP (IN in)
                  (NP
                    (NP (DT the) (NN theory))
                    (PP (IN of)
                      (NP (NNP S1))))))
              (CC or)
              (VP (VBZ watches)
                (S
                  (NP (DT that))
                  (VP (VB avoid)
                    (NP (JJ unnecessary) (NNS calls))
                    (PP (TO to)
                      (NP (NNP S2)))))))))))
    (. .)))

det(results-2, The-1)
nsubjpass(used-8, results-2)
case(calls-4, from-3)
nmod:from(results-2, calls-4)
case(S2-6, to-5)
nmod:to(calls-4, S2-6)
auxpass(used-8, are-7)
root(ROOT-0, used-8)
advmod(used-8, either-9)
mark(learnt-11, as-10)
advcl(used-8, learnt-11)
dobj(learnt-11, clauses-12)
case(theory-15, in-13)
det(theory-15, the-14)
nmod:in(learnt-11, theory-15)
case(S1-17, of-16)
nmod:of(theory-15, S1-17)
cc(learnt-11, or-18)
advcl(used-8, watches-19)
conj:or(learnt-11, watches-19)
nsubj(avoid-21, that-20)
ccomp(watches-19, avoid-21)
amod(calls-23, unnecessary-22)
dobj(avoid-21, calls-23)
case(S2-25, to-24)
nmod:to(avoid-21, S2-25)

(ROOT
  (S
    (NP (DT The) (NN solver))
    (VP (VBZ works)
      (ADVP (RB exactly))
      (SBAR (IN as)
        (S
          (VP (VBD described)
            (PP (IN in)
              (NP (NNP Section) (CD 3)))
            (SBAR (IN except) (IN that)
              (S
                (NP (DT the) (`` ``) (JJ black) (NN box) ('' ''))
                (VP (VBD nested)
                  (SBAR
                    (S
                      (NP (NN solver))
                      (VP (VBZ is)
                        (ADVP (RB now))
                        (NP
                          (NP
                            (NP (DT another) (NN instance))
                            (PP (IN of)
                              (NP (NNP SAT)
                                (PRN (: -)
                                  (NP (NNP TO))
                                  (: -))
                                (NNP SAT))))
                          (CONJP (RB rather) (IN than))
                          (NP
                            (NP (DT an) (NN instance))
                            (PP (IN of)
                              (NP (DT a) (NNP SAT) (NN solver)))))))))))))))
    (. .)))

det(solver-2, The-1)
nsubj(works-3, solver-2)
root(ROOT-0, works-3)
advmod(works-3, exactly-4)
mark(described-6, as-5)
advcl(works-3, described-6)
case(Section-8, in-7)
nmod:in(described-6, Section-8)
nummod(Section-8, 3-9)
mark(nested-17, except-10)
mark(nested-17, that-11)
det(box-15, the-12)
amod(box-15, black-14)
nsubj(nested-17, box-15)
advcl(described-6, nested-17)
nsubj(instance-22, solver-18)
cop(instance-22, is-19)
advmod(instance-22, now-20)
det(instance-22, another-21)
ccomp(nested-17, instance-22)
case(SAT-28, of-23)
compound(SAT-28, SAT-24)
dep(SAT-28, TO-26)
nmod:of(instance-22, SAT-28)
cc(instance-22, rather-29)
mwe(rather-29, than-30)
det(instance-32, an-31)
ccomp(nested-17, instance-32)
conj:negcc(instance-22, instance-32)
case(solver-36, of-33)
det(solver-36, a-34)
compound(solver-36, SAT-35)
nmod:of(instance-32, solver-36)

(ROOT
  (S
    (NP
      (NP (CD 4))
      (VP (VBG Solving)
        (NP
          (NP
            (NP
              (NP (NNP QBF))
              (PP (IN With)
                (NP (NNP SAT))))
            (: -)
            (S
              (VP (TO TO))))
          (: -)
          (NP
            (NP (NNP SAT))
            (NP (DT The) (JJ previous) (NN section))))))
    (VP (VBD discussed)
      (SBAR
        (WHADVP (WRB how))
        (S
          (NP
            (NP (NNP SAT))
            (PRN (: -)
              (NP (NNP TO))
              (: -)))
          (ADVP (RB SAT))
          (VP (VBZ solves)
            (NP (NNP QBF) (NN validity) (NNS problems))))))
    (. .)))

nsubj(discussed-13, 4-1)
acl(4-1, Solving-2)
dobj(Solving-2, QBF-3)
case(SAT-5, With-4)
nmod:with(QBF-3, SAT-5)
acl(QBF-3, TO-7)
dep(QBF-3, SAT-9)
det(section-12, The-10)
amod(section-12, previous-11)
dep(SAT-9, section-12)
root(ROOT-0, discussed-13)
advmod(solves-20, how-14)
nsubj(solves-20, SAT-15)
dep(SAT-15, TO-17)
advmod(solves-20, SAT-19)
ccomp(discussed-13, solves-20)
compound(problems-23, QBF-21)
compound(problems-23, validity-22)
dobj(solves-20, problems-23)

(ROOT
  (S
    (S
      (NP (DT These) (NNS ideas))
      (ADVP (RB easily))
      (VP (VBP generalise)
        (S
          (VP (TO to)
            (VP (VB QBF)
              (NP (NN validity) (NNS problems)))))))
    (: :)
    (S
      (PP (RB instead) (IN of)
        (S
          (VP (VBG nesting)
            (NP
              (NP (DT a) (NNP SAT-solver))
              (PP (IN in)
                (NP (DT another) (NNP SAT-solver)))))))
      (, ,)
      (NP (PRP we))
      (VP (MD can)
        (VP (VB nest)
          (NP
            (NP (NNP SAT)
              (PRN (: -)
                (NP (NNP TO))
                (: -))
              (NNP SAT))
            (PP (IN inside)
              (NP (DT a) (JJ SAT-solver) (-LRB- -LRB-) (NN recursively) (-RRB- -RRB-)))))))
    (. .)))

det(ideas-2, These-1)
nsubj(generalise-4, ideas-2)
nsubj:xsubj(QBF-6, ideas-2)
advmod(generalise-4, easily-3)
root(ROOT-0, generalise-4)
mark(QBF-6, to-5)
xcomp(generalise-4, QBF-6)
compound(problems-8, validity-7)
dobj(QBF-6, problems-8)
mark(nesting-12, instead-10)
mwe(instead-10, of-11)
advcl(nest-21, nesting-12)
det(SAT-solver-14, a-13)
dobj(nesting-12, SAT-solver-14)
case(SAT-solver-17, in-15)
det(SAT-solver-17, another-16)
nmod:in(SAT-solver-14, SAT-solver-17)
nsubj(nest-21, we-19)
aux(nest-21, can-20)
parataxis(generalise-4, nest-21)
compound(SAT-26, SAT-22)
dep(SAT-26, TO-24)
dobj(nest-21, SAT-26)
case(recursively-31, inside-27)
det(recursively-31, a-28)
amod(recursively-31, SAT-solver-29)
nmod:inside(SAT-26, recursively-31)

(ROOT
  (S
    (SBAR (IN In) (NN order)
      (S
        (VP (TO to)
          (VP (VB do)
            (NP (DT this))))))
    (, ,)
    (NP (CD two) (NNS obstacles))
    (VP (VBP are)
      (S
        (VP (TO to)
          (VP (VB be)
            (VP (VBN overcome))))))
    (. .)))

mark(do-4, In-1)
mwe(In-1, order-2)
mark(do-4, to-3)
advcl(are-9, do-4)
dobj(do-4, this-5)
nummod(obstacles-8, two-7)
nsubj(are-9, obstacles-8)
nsubjpass:xsubj(overcome-12, obstacles-8)
root(ROOT-0, are-9)
mark(overcome-12, to-10)
auxpass(overcome-12, be-11)
xcomp(are-9, overcome-12)

(ROOT
  (S
    (ADVP (RB First))
    (, ,)
    (NP (PRP we))
    (VP (MD must)
      (VP (VB extend)
        (NP
          (NP (NNP SAT))
          (: -)
          (S
            (S
              (VP (TO TO)
                (VP (VB -)
                  (NP (NNP SAT))
                  (SBAR (RB so) (IN that)
                    (S
                      (NP (PRP it))
                      (VP
                        (CONJP (RB not) (JJ only))
                        (VP (VBZ outputs)
                          (NP (NNP SAT)
                            (CC or)
                            (NNP UNSAT)))
                        (, ,)
                        (CC but)
                        (VP
                          (ADVP (RB also))
                          (VBZ explains)
                          (NP (DT this) (NN result))
                          (PP (IN in)
                            (NP
                              (NP (NNS terms))
                              (PP (IN of)
                                (NP
                                  (NP (NNS assumptions))
                                  (PP (VBN given)
                                    (PP (TO to)
                                      (NP (PRP it)))))))))))))))
            (, ,) (FW i.e.) (, ,)
            (S
              (NP
                (NP (PRP it))
                (SBAR
                  (S
                    (VP (MD should)
                      (VP (VB respect)
                        (NP
                          (NP (DT the) (NN interface))
                          (SBAR
                            (S
                              (NP (PRP we))
                              (VP (VBN specified)
                                (PP (IN in)
                                  (NP (NNP Definition) (CD 3.3)))))))))))))))))
    (. .)))

advmod(extend-5, First-1)
nsubj(extend-5, we-3)
aux(extend-5, must-4)
root(ROOT-0, extend-5)
dobj(extend-5, SAT-6)
mark(--9, TO-8)
parataxis(SAT-6, --9)
dobj(--9, SAT-10)
mark(outputs-16, so-11)
mwe(so-11, that-12)
nsubj(outputs-16, it-13)
nsubj(explains-23, it-13)
neg(only-15, not-14)
cc:preconj(outputs-16, only-15)
advcl(--9, outputs-16)
dobj(outputs-16, SAT-17)
cc(SAT-17, or-18)
dobj(outputs-16, UNSAT-19)
conj:or(SAT-17, UNSAT-19)
cc(outputs-16, but-21)
advmod(explains-23, also-22)
advcl(--9, explains-23)
conj:and(outputs-16, explains-23)
det(result-25, this-24)
dobj(explains-23, result-25)
case(terms-27, in-26)
nmod:in(explains-23, terms-27)
case(assumptions-29, of-28)
nmod:of(terms-27, assumptions-29)
case(it-32, given-30)
case(it-32, to-31)
acl(assumptions-29, it-32)
dep(--9, i.e.-34)
parataxis(--9, it-36)
aux(respect-38, should-37)
acl:relcl(it-36, respect-38)
det(interface-40, the-39)
dobj(respect-38, interface-40)
nsubj(specified-42, we-41)
acl:relcl(interface-40, specified-42)
case(Definition-44, in-43)
nmod:in(specified-42, Definition-44)
nummod(Definition-44, 3.3-45)

(ROOT
  (S
    (ADVP (LS Second))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is)
      (NP
        (NP (JJ necessary))
        (S
          (S
            (VP (TO to)
              (VP (VB define)
                (SBAR
                  (WHADVP (WRB how))
                  (S
                    (NP
                      (NP (DT an) (NN approximation))
                      (PP (IN of)
                        (NP (DT a) (NNP QBF) (NN theory))))
                    (VP (MD can)
                      (VP (VB be)
                        (VP (VBN obtained)))))))))
          (, ,) (FW i.e.) (, ,)
          (S
            (VP (VB extend)
              (NP (NNP Lemma) (CD 3.8))
              (PP (TO to)
                (NP (JJ general) (NNS QBFs))))))))
    (. .)))

advmod(necessary-5, Second-1)
nsubj(necessary-5, it-3)
cop(necessary-5, is-4)
root(ROOT-0, necessary-5)
mark(define-7, to-6)
dep(necessary-5, define-7)
advmod(obtained-17, how-8)
det(approximation-10, an-9)
nsubjpass(obtained-17, approximation-10)
case(theory-14, of-11)
det(theory-14, a-12)
compound(theory-14, QBF-13)
nmod:of(approximation-10, theory-14)
aux(obtained-17, can-15)
auxpass(obtained-17, be-16)
ccomp(define-7, obtained-17)
dep(define-7, i.e.-19)
parataxis(define-7, extend-21)
dobj(extend-21, Lemma-22)
nummod(Lemma-22, 3.8-23)
case(QBFs-26, to-24)
amod(QBFs-26, general-25)
nmod:to(extend-21, QBFs-26)

(ROOT
  (S
    (PP (IN For)
      (NP (DT the) (JJ first)))
    (, ,)
    (NP (PRP we))
    (VP (VBP use)
      (NP (DT the) (JJ following) (NN theorem)))
    (. .)))

case(first-3, For-1)
det(first-3, the-2)
nmod:for(use-6, first-3)
nsubj(use-6, we-5)
root(ROOT-0, use-6)
det(theorem-9, the-7)
amod(theorem-9, following-8)
dobj(use-6, theorem-9)

(ROOT
  (S
    (VP (VB Theorem)
      (NP (CD 4.1)))
    (. .)))

root(ROOT-0, Theorem-1)
dobj(Theorem-1, 4.1-2)

(ROOT
  (S
    (VP (VB Let) (RB T)
      (VP (VB be)
        (NP
          (NP (DT a) (NNP QBF))
          (PP (IN of)
            (NP
              (NP (DT the) (NN form) (NN T))
              (-LRB- -LRB-)
              (NP (NNP -RRB-) (NNP =))
              (: :)))
          (PRN (-LRB- -LRB-)
            (NP (NNP :))
            (-RRB- -RRB-)))
        (, ,)
        (SBAR
          (WHADVP (WRB where))
          (S
            (VP
              (VP (VBZ is)
                (NP (DT a) (NNP CNF)))
              (CC and)
              (VP (VBZ is)
                (NP (DT an)
                  (ADJP (JJ arbitrary))
                  (NN QBF))))))))
    (. .)))

root(ROOT-0, Let-1)
advmod(Let-1, T-2)
cop(QBF-5, be-3)
det(QBF-5, a-4)
dep(Let-1, QBF-5)
case(T-9, of-6)
det(T-9, the-7)
compound(T-9, form-8)
nmod:of(QBF-5, T-9)
compound(=-12, -RRB--11)
dep(T-9, =-12)
appos(QBF-5, :-15)
advmod(CNF-21, where-18)
cop(CNF-21, is-19)
det(CNF-21, a-20)
advcl(QBF-5, CNF-21)
cc(CNF-21, and-22)
cop(QBF-26, is-23)
det(QBF-26, an-24)
amod(QBF-26, arbitrary-25)
advcl(QBF-5, QBF-26)
conj:and(CNF-21, QBF-26)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (PRP I))
        (VP (VB be)
          (NP (DT a) (JJ -) (NN interpretation)))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(interpretation-6, I-2)
cop(interpretation-6, be-3)
det(interpretation-6, a-4)
amod(interpretation-6, --5)
ccomp(Let-1, interpretation-6)

(ROOT
  (S
    (VP (VB Suppose)
      (NP (DT the) (VBG following) (NN hold))
      (: :)
      (S
        (SBAR
          (X (SYM *))
          (S
            (NP (NNP J1))
            (VP (VBP p)
              (SBAR
                (S
                  (NP (PRP I))
                  (VP (VBZ is)
                    (NP
                      (NP (DT a) (JJ partial))
                      (: -)
                      (NP (NN interpretation))
                      (, ,)
                      (CC and)
                      (NP
                        (NP (NNP M))
                        (SBAR
                          (S
                            (NP
                              (NP (DT a) (JJ 2-valued) (NN interpretation) (NN s.t.))
                              (PRN (-LRB- -LRB-)
                                (NP (NNP J1))
                                (, ,)
                                (NP (NNP M))
                                (-RRB- -RRB-)))
                            (VP (VBZ explains)
                              (SBAR
                                (SBAR
                                  (S
                                    (VP (VBZ 's)
                                      (ADJP (JJ satisfiability)))))
                                (, ,)
                                (CC and)
                                (SBAR
                                  (X (SYM *))
                                  (S
                                    (NP (NNP J2))
                                    (VP (VBZ is)
                                      (NP
                                        (NP (DT a) (JJ partial) (NN -LRB-) (-RRB- -RRB-))
                                        (: -)
                                        (NP (NN interpretation))))))))))))))))))
        (, ,)
        (NP (NNP J2))
        (VP
          (VP (VBP p)
            (S
              (NP (PRP I))
              (ADJP (JJ Mlu))))
          (CC and)
          (VP (VBZ is)
            (NP (NNP J2))
            (: -)
            (FRAG
              (ADJP (JJ unsatisfiable)))))))
    (. .)))

root(ROOT-0, Suppose-1)
det(hold-4, the-2)
amod(hold-4, following-3)
dobj(Suppose-1, hold-4)
dep(p-8, *-6)
nsubj(p-8, J1-7)
advcl(p-43, p-8)
nsubj(partial-12, I-9)
cop(partial-12, is-10)
det(partial-12, a-11)
ccomp(p-8, partial-12)
ccomp(p-8, interpretation-14)
conj:and(partial-12, interpretation-14)
cc(partial-12, and-16)
ccomp(p-8, M-17)
conj:and(partial-12, M-17)
det(s.t.-21, a-18)
amod(s.t.-21, 2-valued-19)
compound(s.t.-21, interpretation-20)
nsubj(explains-27, s.t.-21)
appos(s.t.-21, J1-23)
dep(J1-23, M-25)
acl:relcl(M-17, explains-27)
cop(satisfiability-29, 's-28)
dep(explains-27, satisfiability-29)
cc(satisfiability-29, and-31)
dep(-LRB--37, *-32)
nsubj(-LRB--37, J2-33)
cop(-LRB--37, is-34)
det(-LRB--37, a-35)
amod(-LRB--37, partial-36)
dep(explains-27, -LRB--37)
conj:and(satisfiability-29, -LRB--37)
dep(-LRB--37, interpretation-40)
nsubj(p-43, J2-42)
parataxis(Suppose-1, p-43)
nsubj(Mlu-45, I-44)
xcomp(p-43, Mlu-45)
cc(p-43, and-46)
cop(J2-48, is-47)
parataxis(Suppose-1, J2-48)
conj:and(p-43, J2-48)
dep(J2-48, unsatisfiable-50)

(ROOT
  (S
    (ADVP (RB Then))
    (, ,)
    (PP (IN with)
      (NP (NNP J) (NNP =) (NNP J1) (NNP J2) (NNP |)))
    (, ,)
    (NP (PRP it))
    (VP (VBZ holds)
      (SBAR (IN that)
        (S
          (NP (NNP J))
          (VP
            (VP (VBP p)
              (NP (PRP I)))
            (CC and)
            (PRN (-LRB- -LRB-)
              (NP (NNP J))
              (, ,)
              (NP (NNP M))
              (-RRB- -RRB-))
            (VP (VBZ explains)
              (NP (DT the) (NN satisfiability))
              (PP (IN of)
                (PRN (-LRB- -LRB-)
                  (NP (NNP :))
                  (-RRB- -RRB-))))))))
    (. .)))

advmod(holds-11, Then-1)
case(|-8, with-3)
compound(|-8, J-4)
compound(|-8, =-5)
compound(|-8, J1-6)
compound(|-8, J2-7)
nmod:with(holds-11, |-8)
nsubj(holds-11, it-10)
root(ROOT-0, holds-11)
mark(p-14, that-12)
nsubj(p-14, J-13)
nsubj(explains-22, J-13)
ccomp(holds-11, p-14)
dobj(p-14, I-15)
cc(p-14, and-16)
dep(p-14, J-18)
dep(J-18, M-20)
ccomp(holds-11, explains-22)
conj:and(p-14, explains-22)
det(satisfiability-24, the-23)
dobj(explains-22, satisfiability-24)
case(:-27, of-25)
advcl(explains-22, :-27)

(ROOT
  (S
    (NP (NNP Theorem) (NNP 4.1))
    (VP (VBZ shows)
      (SBAR
        (WHADVP (WRB how))
        (S
          (NP
            (NP (DT an) (NN explanation))
            (PP (IN of)
              (NP
                (NP (NN satisfiability))
                (PP (IN of)
                  (NP
                    (NP
                      (QP (CC and)
                        (CD one)))
                    (PP (IN of)
                      (NP
                        (NP (NN unsatisfiability))
                        (PP (IN of)))))))))
          (VP (MD can)
            (VP (VB be)
              (VP (VBN combined)
                (S
                  (VP (TO to)
                    (VP (VB provide)
                      (NP
                        (NP (DT an) (NN explanation))
                        (PP (IN of)
                          (NP
                            (NP (NN satisfiability))
                            (PP (IN of)
                              (NP (DT the) (VBN combined) (NN expression)))))))))))))))
    (. .)))

compound(4.1-2, Theorem-1)
nsubj(shows-3, 4.1-2)
root(ROOT-0, shows-3)
advmod(combined-17, how-4)
det(explanation-6, an-5)
nsubjpass(combined-17, explanation-6)
nsubj:xsubj(provide-19, explanation-6)
case(satisfiability-8, of-7)
nmod:of(explanation-6, satisfiability-8)
case(one-11, of-9)
cc(one-11, and-10)
nmod:of(satisfiability-8, one-11)
case(unsatisfiability-13, of-12)
nmod:of(one-11, unsatisfiability-13)
acl(unsatisfiability-13, of-14)
aux(combined-17, can-15)
auxpass(combined-17, be-16)
ccomp(shows-3, combined-17)
mark(provide-19, to-18)
xcomp(combined-17, provide-19)
det(explanation-21, an-20)
dobj(provide-19, explanation-21)
case(satisfiability-23, of-22)
nmod:of(explanation-21, satisfiability-23)
case(expression-27, of-24)
det(expression-27, the-25)
amod(expression-27, combined-26)
nmod:of(satisfiability-23, expression-27)

(ROOT
  (S
    (NP (DT This))
    (VP (MD can)
      (VP (VB be)
        (VP
          (ADVP (RB directly))
          (VBN used)
          (S
            (VP (TO to)
              (VP (VB extend)
                (NP (NNP SAT))
                (: -)
                (UCP
                  (ADJP (JJ TO))
                  (: -)
                  (NP
                    (NP
                      (NP (NNP SAT) (POS 's))
                      (NN output))
                    (PP (IN in)
                      (NP
                        (NP (NN case))
                        (PP (IN of)
                          (NP (NN satisfiability)))))))))))))
    (. .)))

nsubjpass(used-5, This-1)
nsubj:xsubj(extend-7, This-1)
aux(used-5, can-2)
auxpass(used-5, be-3)
advmod(used-5, directly-4)
root(ROOT-0, used-5)
mark(extend-7, to-6)
xcomp(used-5, extend-7)
dobj(extend-7, SAT-8)
nsubj:xsubj(TO-10, SAT-8)
xcomp(extend-7, TO-10)
nmod:poss(output-14, SAT-12)
case(SAT-12, 's-13)
dep(TO-10, output-14)
case(satisfiability-18, in-15)
mwe(in-15, case-16)
mwe(in-15, of-17)
nmod:in_case_of(output-14, satisfiability-18)

(ROOT
  (S
    (S
      (VP (VBG Translating)
        (NP
          (NP
            (NP
              (NP (NNS QDIMACS))
              (PP (IN into)
                (NP (NNP SAT))))
            (: -)
            (S
              (VP (TO TO))))
          (: -)
          (NP
            (NP (NNP SAT) (NNP Input) (NNP Minor))
            (NP (JJ syntactical) (NNS differences))))
        (ADVP (RB aside))))
    (, ,)
    (NP (DT a) (NNP QDIMACS) (NN specification))
    (VP (MD could)
      (VP (VB be)
        (VP (VBN fed)
          (ADVP (RB directly))
          (PP (TO to)
            (NP (NNP SAT)
              (PRN (: -)
                (NP (NNP TO))
                (: -))
              (NNP SAT))))))
    (. .)))

advcl(fed-20, Translating-1)
dobj(Translating-1, QDIMACS-2)
case(SAT-4, into-3)
nmod:into(QDIMACS-2, SAT-4)
acl(QDIMACS-2, TO-6)
compound(Minor-10, SAT-8)
compound(Minor-10, Input-9)
dep(QDIMACS-2, Minor-10)
amod(differences-12, syntactical-11)
dep(Minor-10, differences-12)
advmod(Translating-1, aside-13)
det(specification-17, a-15)
compound(specification-17, QDIMACS-16)
nsubjpass(fed-20, specification-17)
aux(fed-20, could-18)
auxpass(fed-20, be-19)
root(ROOT-0, fed-20)
advmod(fed-20, directly-21)
case(SAT-27, to-22)
compound(SAT-27, SAT-23)
dep(SAT-27, TO-25)
nmod:to(fed-20, SAT-27)

(ROOT
  (S
    (NP (DT The) (JJ only) (NN difference))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (NNS QDIMACS))
          (VP (VBZ supports)
            (NP (JJ universal) (NNS quantifications))
            (, ,)
            (SBAR (IN while)
              (S
                (NP
                  (NP (NNP SAT))
                  (PRN (: -)
                    (NP (NNP TO))
                    (: -)))
                (ADVP (RB SAT))
                (VP (VBZ supports)
                  (NP (JJ existential) (NNS quantifications))
                  (PP (IN under)
                    (NP
                      (NP (NN negation))
                      (, ,)
                      (NP
                        (NP (DT a) (NN difference))
                        (SBAR
                          (WHNP (WDT that))
                          (S
                            (VP (MD can)
                              (VP (VB be)
                                (VP
                                  (ADVP (RB trivially))
                                  (VBN eliminated))))))))))))))))
    (. .)))

det(difference-3, The-1)
amod(difference-3, only-2)
nsubj(is-4, difference-3)
root(ROOT-0, is-4)
mark(supports-7, that-5)
nsubj(supports-7, QDIMACS-6)
ccomp(is-4, supports-7)
amod(quantifications-9, universal-8)
dobj(supports-7, quantifications-9)
mark(supports-17, while-11)
nsubj(supports-17, SAT-12)
dep(SAT-12, TO-14)
advmod(supports-17, SAT-16)
advcl(supports-7, supports-17)
amod(quantifications-19, existential-18)
dobj(supports-17, quantifications-19)
case(negation-21, under-20)
nmod:under(supports-17, negation-21)
det(difference-24, a-23)
appos(negation-21, difference-24)
nsubjpass(eliminated-29, difference-24)
ref(difference-24, that-25)
aux(eliminated-29, can-26)
auxpass(eliminated-29, be-27)
advmod(eliminated-29, trivially-28)
acl:relcl(difference-24, eliminated-29)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP
      (ADJP (JJ contrary)
        (PP (TO to)
          (NP
            (NP (NNP QDIMACS) (, ,) (NNP SAT))
            (PRN (: -)
              (NP (NNP TO))
              (: -)))))
      (NNP SAT))
    (VP (VBZ does) (RB not)
      (VP (VB require)
        (S
          (NP (NNS theories))
          (VP (TO to)
            (VP (VB be)
              (PP (IN in)
                (NP (JJ prenex) (JJ normal) (NN form))))))))
    (. .)))

advmod(require-14, However-1)
case(SAT-7, contrary-3)
mwe(contrary-3, to-4)
compound(SAT-7, QDIMACS-5)
nmod:contrary_to(SAT-11, SAT-7)
dep(SAT-7, TO-9)
nsubj(require-14, SAT-11)
aux(require-14, does-12)
neg(require-14, not-13)
root(ROOT-0, require-14)
dobj(require-14, theories-15)
nsubj:xsubj(form-21, theories-15)
mark(form-21, to-16)
cop(form-21, be-17)
case(form-21, in-18)
amod(form-21, prenex-19)
amod(form-21, normal-20)
xcomp(require-14, form-21)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (NN feeding))
        (VP (VBZ QDIMACS)
          (NP (NN input))
          (PP (TO to)
            (NP (NNP SAT)
              (PRN (: -)
                (NP (NNP TO))
                (: -))
              (NNP SAT))))))
    (, ,)
    (NP (DT all) (NNS clauses))
    (VP (VBP are)
      (PP (IN in)
        (NP (DT the) (JJ innermost) (NN solver))))
    (. .)))

advmod(QDIMACS-3, When-1)
nsubj(QDIMACS-3, feeding-2)
advcl(solver-18, QDIMACS-3)
dobj(QDIMACS-3, input-4)
case(SAT-10, to-5)
compound(SAT-10, SAT-6)
dep(SAT-10, TO-8)
nmod:to(QDIMACS-3, SAT-10)
det(clauses-13, all-12)
nsubj(solver-18, clauses-13)
cop(solver-18, are-14)
case(solver-18, in-15)
det(solver-18, the-16)
amod(solver-18, innermost-17)
root(ROOT-0, solver-18)

(ROOT
  (S
    (PP (IN During)
      (NP (NN search)))
    (, ,)
    (NP (JJ other) (NN solver) (NNS instances))
    (VP (MD will)
      (ADVP (RB gradually))
      (VP (VB learn)
        (NP (NNS clauses))
        (ADVP (RB as) (RB well))))
    (. .)))

case(search-2, During-1)
nmod:during(learn-9, search-2)
amod(instances-6, other-4)
compound(instances-6, solver-5)
nsubj(learn-9, instances-6)
aux(learn-9, will-7)
advmod(learn-9, gradually-8)
root(ROOT-0, learn-9)
dobj(learn-9, clauses-10)
advmod(learn-9, as-11)
mwe(as-11, well-12)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP (DT some) (NNS clauses))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN pulled)
          (PRT (RP out))
          (PP
            (PP (TO to) (RB prior))
            (PP (TO to)
              (NP (DT any) (NN search)))))))
    (. .)))

advmod(pulled-7, However-1)
det(clauses-4, some-3)
nsubjpass(pulled-7, clauses-4)
aux(pulled-7, can-5)
auxpass(pulled-7, be-6)
root(ROOT-0, pulled-7)
compound:prt(pulled-7, out-8)
case(prior-10, to-9)
nmod:to(pulled-7, prior-10)
case(search-13, to-11)
det(search-13, any-12)
nmod:to(prior-10, search-13)

(ROOT
  (S
    (S
      (NP (DT This))
      (VP (MD will)
        (VP
          (VP (VB speed)
            (PRT (RP up))
            (NP (NN search)))
          (, ,)
          (FRAG
            (PP (IN since)
              (NP (NNP SAT)))
            (: -)
            (ADVP (RB TO))))))
    (: -)
    (S
      (NP (NNP SAT))
      (VP (MD will) (RB not)
        (VP (VB waste)
          (NP
            (NP (NN time) (VBG rediscovering) (NN information))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBD was)
                  (ADJP (JJ present)
                    (PP (IN in)
                      (NP (DT the) (JJ first) (NN place)))))))))))
    (. .)))

nsubj(speed-3, This-1)
aux(speed-3, will-2)
root(ROOT-0, speed-3)
compound:prt(speed-3, up-4)
dobj(speed-3, search-5)
case(SAT-8, since-7)
nmod:since(TO-10, SAT-8)
dep(speed-3, TO-10)
nsubj(waste-15, SAT-12)
aux(waste-15, will-13)
neg(waste-15, not-14)
parataxis(speed-3, waste-15)
compound(information-18, time-16)
amod(information-18, rediscovering-17)
dobj(waste-15, information-18)
nsubj(present-21, information-18)
ref(information-18, that-19)
cop(present-21, was-20)
acl:relcl(information-18, present-21)
case(place-25, in-22)
det(place-25, the-23)
amod(place-25, first-24)
nmod:in(present-21, place-25)

(ROOT
  (S
    (PP (VBG Starting)
      (PP (IN from)
        (NP (DT a) (NNP QDIMACS) (NN specification))))
    (, ,)
    (NP (PRP we))
    (VP (VBP perform)
      (NP (CD two) (VBG preprocessing) (NNS steps))
      (PP (IN before)
        (S
          (VP (VBG feeding)
            (NP (PRP it))
            (PP (TO to)
              (NP (NNP SAT)
                (PRN (: -)
                  (NP (NNP TO))
                  (: -))
                (NNP SAT)))))))
    (. .)))

case(specification-5, Starting-1)
case(specification-5, from-2)
det(specification-5, a-3)
compound(specification-5, QDIMACS-4)
advcl(perform-8, specification-5)
nsubj(perform-8, we-7)
root(ROOT-0, perform-8)
nummod(steps-11, two-9)
amod(steps-11, preprocessing-10)
dobj(perform-8, steps-11)
mark(feeding-13, before-12)
advcl(perform-8, feeding-13)
dobj(feeding-13, it-14)
case(SAT-20, to-15)
compound(SAT-20, SAT-16)
dep(SAT-20, TO-18)
nmod:to(feeding-13, SAT-20)

(ROOT
  (FRAG
    (NP (CD 1))
    (. .)))

root(ROOT-0, 1-1)

(ROOT
  (S
    (VP (VB Remove)
      (NP (JJ tautological) (NNS clauses)))
    (. .)))

root(ROOT-0, Remove-1)
amod(clauses-3, tautological-2)
dobj(Remove-1, clauses-3)

(ROOT
  (S
    (NP (PRP We))
    (VP (VB remove)
      (S
        (NP (DT all) (NNS clauses))
        (VP (VBG containing)
          (NP (PDT both)
            (NP (DT a) (NN literal))
            (CC and)
            (NP (PRP$ its) (NN negation)))
          (PP (IN from)
            (NP (DT the) (NN theory))))))
    (. .)))

nsubj(remove-2, We-1)
root(ROOT-0, remove-2)
det(clauses-4, all-3)
nsubj(containing-5, clauses-4)
dep(remove-2, containing-5)
cc:preconj(literal-8, both-6)
det(literal-8, a-7)
dobj(containing-5, literal-8)
cc(literal-8, and-9)
nmod:poss(negation-11, its-10)
dobj(containing-5, negation-11)
conj:and(literal-8, negation-11)
case(theory-14, from-12)
det(theory-14, the-13)
nmod:from(containing-5, theory-14)

(ROOT
  (FRAG
    (NP (CD 2))
    (. .)))

root(ROOT-0, 2-1)

(ROOT
  (S
    (NP (JJ Pull) (NNS clauses))
    (VP (VBZ outwards))
    (. .)))

amod(clauses-2, Pull-1)
nsubj(outwards-3, clauses-2)
root(ROOT-0, outwards-3)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (JJ certain) (NNS clauses))
        (ADVP (RB only))
        (VP (VBP use)
          (NP (JJ certain) (NNS variables)))))
    (, ,)
    (NP (PRP they))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN pulled)
          (PRT (RP out)))))
    (. .)))

advmod(use-5, When-1)
amod(clauses-3, certain-2)
nsubj(use-5, clauses-3)
advmod(use-5, only-4)
advcl(pulled-12, use-5)
amod(variables-7, certain-6)
dobj(use-5, variables-7)
nsubjpass(pulled-12, they-9)
aux(pulled-12, can-10)
auxpass(pulled-12, be-11)
root(ROOT-0, pulled-12)
compound:prt(pulled-12, out-13)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB iteratively))
    (VP (VBP apply)
      (NP (DT the) (JJ following) (NN lemma)
        (S
          (VP (TO to)
            (VP (VB obtain)
              (NP (DT an) (NN equivalent) (NN theory))
              (SBAR
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (ADVP (RB no) (RB longer))
                    (VP (VBZ is)
                      (PP (IN in)
                        (NP (JJ prenex) (JJ normal) (NN form))))))
                (CC and)
                (SBAR
                  (WHPP (IN in)
                    (WHNP (WDT which)))
                  (S
                    (NP (DT each) (NN clause))
                    (VP (VBZ is)
                      (VP (VBN located)
                        (PP (IN at)
                          (NP (DT the) (`` ``) (JJ right) ('' '') (NN level)))))))))))))
    (. .)))

nsubj(apply-3, We-1)
advmod(apply-3, iteratively-2)
root(ROOT-0, apply-3)
det(lemma-6, the-4)
amod(lemma-6, following-5)
dobj(apply-3, lemma-6)
mark(obtain-8, to-7)
acl(lemma-6, obtain-8)
det(theory-11, an-9)
compound(theory-11, equivalent-10)
dobj(obtain-8, theory-11)
nsubj(form-19, that-12)
neg(longer-14, no-13)
advmod(form-19, longer-14)
cop(form-19, is-15)
case(form-19, in-16)
amod(form-19, prenex-17)
amod(form-19, normal-18)
dep(obtain-8, form-19)
cc(form-19, and-20)
case(which-22, in-21)
nmod:in(located-26, which-22)
det(clause-24, each-23)
nsubjpass(located-26, clause-24)
auxpass(located-26, is-25)
dep(obtain-8, located-26)
conj:and(form-19, located-26)
case(level-32, at-27)
det(level-32, the-28)
amod(level-32, right-30)
nmod:at(located-26, level-32)

(ROOT
  (NP (NNS Lemma) (CD 4.5) (. .)))

root(ROOT-0, Lemma-1)
nummod(Lemma-1, 4.5-2)

(ROOT
  (S
    (VP
      (VP (VB Let)
        (VP (VB denote)
          (NP
            (NP (DT the) (NNP QBF))
            (PRN (-LRB- -LRB-)
              (NP (CD 0))
              (-RRB- -RRB-)))
          (S
            (VP (SYM =)
              (NP (CD 1))))))
      (: :)
      (NP
        (NP
          (NP
            (QP (CD 1) (CD 2)))
          (: :)
          (NP
            (NP (CD 3) (: :) (CD 3))
            (-LRB- -LRB-)
            (NP
              (NP
                (NP (CD 1))
                (PRN (-LRB- -LRB-)
                  (NP (CD 0))
                  (, ,)
                  (NP (CD 1))
                  (-RRB- -RRB-)))
              (NP
                (NP (CD 2))
                (PRN (-LRB- -LRB-)
                  (NP (CD 2))
                  (-RRB- -RRB-))
                (-RRB- -RRB-)))))
        (, ,)
        (SBAR
          (WHADVP (WRB where))
          (S
            (NP (DT the) (NNP i) (POS 's))
            (VP (VBP are)
              (ADJP (JJ arbitrary)
                (SBAR
                  (S
                    (NP
                      (NP (NNS formulas))
                      (CC and)
                      (NP (DT the) (FW i) (POS 's)))
                    (VP (VBP are)
                      (NP (NNS clauses)))))))))))
    (. .)))

root(ROOT-0, Let-1)
xcomp(Let-1, denote-2)
det(QBF-4, the-3)
dobj(denote-2, QBF-4)
appos(QBF-4, 0-6)
dep(1-9, =-8)
dep(denote-2, 1-9)
compound(2-12, 1-11)
dobj(Let-1, 2-12)
nummod(3-16, 3-14)
dep(2-12, 3-16)
dep(3-16, 1-18)
appos(1-18, 0-20)
dep(0-20, 1-22)
dep(1-18, 2-24)
appos(2-24, 2-26)
advmod(arbitrary-35, where-30)
det(i-32, the-31)
nsubj(arbitrary-35, i-32)
case(i-32, 's-33)
cop(arbitrary-35, are-34)
acl:relcl(2-12, arbitrary-35)
nsubj(clauses-42, formulas-36)
cc(formulas-36, and-37)
det(i-39, the-38)
conj:and(formulas-36, i-39)
nsubj(clauses-42, i-39)
case(i-39, 's-40)
cop(clauses-42, are-41)
ccomp(arbitrary-35, clauses-42)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (CD 2))
        (VP (VBZ is)
          (NP (DT no) (NN tautology)))))
    (, ,)
    (NP
      (NP (RB then))
      (PRN (-LRB- -LRB-)
        (NP (CD 0))
        (-RRB- -RRB-)))
    (VP (VBZ is)
      (ADJP (JJ equivalent)
        (PP (TO to)
          (NP
            (NP
              (NP
                (NP (CD 1) (: :) (CD 1))
                (PRN (-LRB- -LRB-)
                  (NP (CD 0))
                  (, ,)
                  (NP (CD 1))
                  (-RRB- -RRB-)))
              (QP (CD 1) (CD 2)))
            (: :)
            (NP (CD 3) (: :) (CD 3))))))
    (. .)))

mark(tautology-5, If-1)
nsubj(tautology-5, 2-2)
cop(tautology-5, is-3)
neg(tautology-5, no-4)
advcl(equivalent-12, tautology-5)
nsubj(equivalent-12, then-7)
appos(then-7, 0-9)
cop(equivalent-12, is-11)
root(ROOT-0, equivalent-12)
case(1-16, to-13)
nummod(1-16, 1-14)
nmod:to(equivalent-12, 1-16)
appos(1-16, 0-18)
dep(0-18, 1-20)
compound(2-23, 1-22)
nummod(1-16, 2-23)
nummod(3-27, 3-25)
dep(1-16, 3-27)

(ROOT
  (S
    (NP (CD 5))
    (VP
      (NP
        (NP (NNP Evaluation)
          (CC &)
          (NNP Future) (NNP Work))
        (SBAR
          (S
            (NP (PRP We))
            (VP (VBD implemented)
              (NP (DT the) (JJ aforementioned) (NNS techniques))
              (PP (IN on)
                (NP
                  (NP (NN top))
                  (PP (IN of)
                    (NP (DT the) (NNP Glucose) (NN solver)))))))))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (NNP Audemard))
          (CC and)
          (NP (NNP Simon) (CD 2009)))
        (-RRB- -RRB-)))
    (. .)))

nsubj(Work-5, 5-1)
compound(Work-5, Evaluation-2)
cc(Evaluation-2, &-3)
conj:&(Evaluation-2, Future-4)
compound(Work-5, Future-4)
root(ROOT-0, Work-5)
nsubj(implemented-7, We-6)
acl:relcl(Work-5, implemented-7)
det(techniques-10, the-8)
amod(techniques-10, aforementioned-9)
dobj(implemented-7, techniques-10)
case(solver-16, on-11)
mwe(on-11, top-12)
mwe(on-11, of-13)
det(solver-16, the-14)
compound(solver-16, Glucose-15)
nmod:on_top_of(implemented-7, solver-16)
dep(Work-5, Audemard-18)
cc(Audemard-18, and-19)
dep(Work-5, Simon-20)
conj:and(Audemard-18, Simon-20)
nummod(Simon-20, 2009-21)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBN evaluated)
      (NP
        (NP
          (NP (DT the) (VBG resulting) (NN solver))
          (PP (IN on)
            (NP
              (NP (CD 276) (NNS instances))
              (PP (IN from)
                (NP
                  (NP (DT the) (NNP QBFLIB) (NNS problems) (NN suite))
                  (PRN (-LRB- -LRB-)
                    (NP
                      (NP (NNP Giunchiglia))
                      (, ,)
                      (NP (NNP Narizzano))
                      (, ,)
                      (CC and)
                      (NP (NNP Tacchella) (CD 2001)))
                    (-RRB- -RRB-)))))))
        (, ,) (RB namely)
        (NP
          (NP (DT those))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBD were)
                (VP (VBN used)
                  (PP (IN in)
                    (NP
                      (NP (DT the) (JJS latest) (NN QBF) (NN competition))
                      (PRN (-LRB- -LRB-)
                        (NP (NNP QBFEVAL) (CD 2014))
                        (-RRB- -RRB-)))))))))))
    (. .)))

nsubj(evaluated-2, We-1)
root(ROOT-0, evaluated-2)
det(solver-5, the-3)
amod(solver-5, resulting-4)
dobj(evaluated-2, solver-5)
case(instances-8, on-6)
nummod(instances-8, 276-7)
nmod:on(solver-5, instances-8)
case(suite-13, from-9)
det(suite-13, the-10)
compound(suite-13, QBFLIB-11)
compound(suite-13, problems-12)
nmod:from(instances-8, suite-13)
dep(suite-13, Giunchiglia-15)
dep(suite-13, Narizzano-17)
conj:and(Giunchiglia-15, Narizzano-17)
cc(Giunchiglia-15, and-19)
dep(suite-13, Tacchella-20)
conj:and(Giunchiglia-15, Tacchella-20)
nummod(Tacchella-20, 2001-21)
advmod(solver-5, namely-24)
dep(solver-5, those-25)
nsubjpass(used-28, those-25)
ref(those-25, that-26)
auxpass(used-28, were-27)
acl:relcl(those-25, used-28)
case(competition-33, in-29)
det(competition-33, the-30)
amod(competition-33, latest-31)
compound(competition-33, QBF-32)
nmod:in(used-28, competition-33)
appos(competition-33, QBFEVAL-35)
nummod(QBFEVAL-35, 2014-36)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBD compared)
      (S
        (VP (VBG running)
          (NP
            (NP
              (NP
                (NP (NNS times))
                (PP (IN of)
                  (NP (NNP SAT))))
              (: -)
              (S
                (VP (TO TO))))
            (: -)
            (NP
              (NP (NNP SAT))
              (PP (IN with)
                (NP
                  (NP (NNP GhostQ))
                  (PRN (-LRB- -LRB-)
                    (NP
                      (NP (NNP Klieber))
                      (CC et)
                      (NP (NN al.) (CD 2010)))
                    (-RRB- -RRB-)))))
            (, ,)
            (NP
              (NP (DT the) (NN winner))
              (PP (IN of)
                (NP
                  (NP (DT the) (NN competition))
                  (PP (IN on)
                    (NP (DT the) (NNP QBFLIB) (NN track))))))))))
    (. .)))

nsubj(compared-2, We-1)
root(ROOT-0, compared-2)
xcomp(compared-2, running-3)
dobj(running-3, times-4)
case(SAT-6, of-5)
nmod:of(times-4, SAT-6)
acl(times-4, TO-8)
dep(times-4, SAT-10)
case(GhostQ-12, with-11)
nmod:with(SAT-10, GhostQ-12)
dep(GhostQ-12, Klieber-14)
cc(Klieber-14, et-15)
dep(GhostQ-12, al.-16)
conj:et(Klieber-14, al.-16)
nummod(al.-16, 2010-17)
det(winner-21, the-20)
appos(times-4, winner-21)
case(competition-24, of-22)
det(competition-24, the-23)
nmod:of(winner-21, competition-24)
case(track-28, on-25)
det(track-28, the-26)
compound(track-28, QBFLIB-27)
nmod:on(competition-24, track-28)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB only))
    (VP (VBD compared)
      (NP
        (NP (DT a) (JJ plain) (NN version))
        (PP (IN of)
          (NP (PRP$ our) (NN solver))))
      (PP (IN with)
        (NP
          (NP (DT the) (JJ plain) (NN version))
          (PP (IN of)
            (NP (NNP GhostQ))))))
    (. .)))

nsubj(compared-3, We-1)
advmod(compared-3, only-2)
root(ROOT-0, compared-3)
det(version-6, a-4)
amod(version-6, plain-5)
dobj(compared-3, version-6)
case(solver-9, of-7)
nmod:poss(solver-9, our-8)
nmod:of(version-6, solver-9)
case(version-13, with-10)
det(version-13, the-11)
amod(version-13, plain-12)
nmod:with(compared-3, version-13)
case(GhostQ-15, of-14)
nmod:of(version-13, GhostQ-15)

(ROOT
  (S
    (NP (DT All) (NNS tests))
    (VP (VBD were)
      (ADJP
        (ADJP (JJ ran)
          (PP (IN with)
            (NP
              (NP (DT a) (NN time) (NN limit))
              (PP (IN of)
                (NP
                  (NP (CD 900) (NNS seconds))
                  (PP (IN on)
                    (NP (DT an) (NNP Intel) (NNP c) (NNP Xeon))))))))
        (SBAR
          (X (SYM c))
          (S
            (NP (NNP E5-4652) (NNP CPU))
            (VP (VBD clocked)
              (PP (IN at)
                (NP (NNP 2.70) (NNP GHz)))
              (PP (IN with)
                (NP
                  (NP (NNS 260Gb))
                  (PP (IN of)
                    (NP (NNP RAM)))))
              (S
                (VP (VBG running)
                  (NP (NNP Ubuntu) (NNP 14.04) (NNP LTS)))))))))
    (. .)))

det(tests-2, All-1)
nsubj(ran-4, tests-2)
cop(ran-4, were-3)
root(ROOT-0, ran-4)
case(limit-8, with-5)
det(limit-8, a-6)
compound(limit-8, time-7)
nmod:with(ran-4, limit-8)
case(seconds-11, of-9)
nummod(seconds-11, 900-10)
nmod:of(limit-8, seconds-11)
case(Xeon-16, on-12)
det(Xeon-16, an-13)
compound(Xeon-16, Intel-14)
compound(Xeon-16, c-15)
nmod:on(seconds-11, Xeon-16)
dep(clocked-20, c-17)
compound(CPU-19, E5-4652-18)
nsubj(clocked-20, CPU-19)
ccomp(ran-4, clocked-20)
case(GHz-23, at-21)
compound(GHz-23, 2.70-22)
nmod:at(clocked-20, GHz-23)
case(260Gb-25, with-24)
nmod:with(clocked-20, 260Gb-25)
case(RAM-27, of-26)
nmod:of(260Gb-25, RAM-27)
xcomp(clocked-20, running-28)
compound(LTS-31, Ubuntu-29)
compound(LTS-31, 14.04-30)
dobj(running-28, LTS-31)

(ROOT
  (NP
    (NP (NNP Table) (CD 1))
    (: :)
    (NP
      (NP (DT The) (NNS numbers))
      (PP (IN of)
        (NP
          (ADJP (JJ satisfiable)
            (CC and)
            (JJ unsatisfiable))
          (NNS instances)))
      (UCP
        (VP (VBN solved)
          (PP (IN by)
            (NP (NNP SAT)
              (PRN (: -)
                (NP (NNP TO))
                (: -))
              (NNP SAT))))
        (CC and)
        (ADJP (JJ GhostQ))))
    (. .)))

root(ROOT-0, Table-1)
nummod(Table-1, 1-2)
det(numbers-5, The-4)
dep(Table-1, numbers-5)
case(instances-10, of-6)
amod(instances-10, satisfiable-7)
cc(satisfiable-7, and-8)
conj:and(satisfiable-7, unsatisfiable-9)
amod(instances-10, unsatisfiable-9)
nmod:of(numbers-5, instances-10)
dep(numbers-5, solved-11)
case(SAT-17, by-12)
compound(SAT-17, SAT-13)
dep(SAT-17, TO-15)
nmod:by(solved-11, SAT-17)
cc(solved-11, and-18)
dep(numbers-5, GhostQ-19)
conj:and(solved-11, GhostQ-19)

(ROOT
  (NP
    (NP (NNP GhostQ) (NNP SAT))
    (: -)
    (S
      (VP (TO TO)
        (PRN (: -)
          (S
            (NP (NNP SAT) (NNP SAT) (CD 66) (CD 28) (NNP UNSAT) (CD 57) (CD 43) (JJ Total) (NN 123))
            (VP (VBZ 71)
              (NP
                (NP (DT These) (NN kind))
                (PP (IN of)
                  (NP (NNS observations)))))))
        (VP (VB allow)
          (S
            (NP (PRP us))
            (VP
              (VP (TO to)
                (VP (VB reduce)
                  (NP (DT the) (JJ nesting) (NN depth))))
              (CC or)
              (VP (TO to)
                (VP (VB pull)
                  (NP (NNS variables)
                    (CC and)
                    (NNS clauses))
                  (ADVP (RBR higher))
                  (PP (IN in)
                    (NP (DT the) (JJ nesting) (NN hierarchy))))))))))
    (. .)))

compound(SAT-2, GhostQ-1)
root(ROOT-0, SAT-2)
mark(allow-20, TO-4)
compound(123-14, SAT-6)
compound(123-14, SAT-7)
nummod(123-14, 66-8)
nummod(123-14, 28-9)
compound(123-14, UNSAT-10)
nummod(123-14, 57-11)
nummod(123-14, 43-12)
amod(123-14, Total-13)
nsubj(71-15, 123-14)
parataxis(allow-20, 71-15)
det(kind-17, These-16)
dobj(71-15, kind-17)
case(observations-19, of-18)
nmod:of(kind-17, observations-19)
acl(SAT-2, allow-20)
nsubj(reduce-23, us-21)
nsubj(pull-29, us-21)
mark(reduce-23, to-22)
ccomp(allow-20, reduce-23)
det(depth-26, the-24)
amod(depth-26, nesting-25)
dobj(reduce-23, depth-26)
cc(reduce-23, or-27)
mark(pull-29, to-28)
ccomp(allow-20, pull-29)
conj:or(reduce-23, pull-29)
dobj(pull-29, variables-30)
cc(variables-30, and-31)
dobj(pull-29, clauses-32)
conj:and(variables-30, clauses-32)
advmod(pull-29, higher-33)
case(hierarchy-37, in-34)
det(hierarchy-37, the-35)
amod(hierarchy-37, nesting-36)
nmod:in(pull-29, hierarchy-37)

(ROOT
  (S
    (PP (IN Since)
      (NP
        (NP (NNP SAT)
          (PRN (: -)
            (NP (NNP TO))
            (: -))
          (NNP SAT))
        (SBAR
          (S
            (VP (VBZ is)
              (VP (VBN designed)
                (S
                  (VP (TO to)
                    (VP
                      (ADVP (RB gradually))
                      (VB pass)
                      (NP
                        (NP
                          (ADJP (JJR more)
                            (CC and)
                            (JJR more))
                          (NN information) (NNS upwards))
                        (PP (IN in)
                          (NP (DT the) (NN hierarchy)))))))))))))
    (, ,)
    (S
      (VP (VBG doing)
        (NP
          (NP (DT this))
          (PP (IN in)
            (NP (NN advance))))))
    (VP (MD could)
      (VP (VB save)
        (NP (JJ precious) (NN time))
        (: ;)
        (PP (IN in)
          (NP (DT this) (NN case)))
        (, ,)
        (PP (IN without)
          (NP (DT any) (NN memory) (NN overhead)))))
    (. .)))

case(SAT-6, Since-1)
compound(SAT-6, SAT-2)
dep(SAT-6, TO-4)
nmod:since(save-26, SAT-6)
auxpass(designed-8, is-7)
acl:relcl(SAT-6, designed-8)
mark(pass-11, to-9)
advmod(pass-11, gradually-10)
xcomp(designed-8, pass-11)
amod(upwards-16, more-12)
cc(more-12, and-13)
conj:and(more-12, more-14)
amod(upwards-16, more-14)
compound(upwards-16, information-15)
dobj(pass-11, upwards-16)
case(hierarchy-19, in-17)
det(hierarchy-19, the-18)
nmod:in(upwards-16, hierarchy-19)
csubj(save-26, doing-21)
dobj(doing-21, this-22)
case(advance-24, in-23)
nmod:in(this-22, advance-24)
aux(save-26, could-25)
root(ROOT-0, save-26)
amod(time-28, precious-27)
dobj(save-26, time-28)
case(case-32, in-30)
det(case-32, this-31)
nmod:in(save-26, case-32)
case(overhead-37, without-34)
det(overhead-37, any-35)
compound(overhead-37, memory-36)
nmod:without(save-26, overhead-37)

(ROOT
  (S
    (NP (NNP Reverse) (NNP Tseitin) (NN engineering))
    (VP (VBZ is)
      (VP (VBN used)
        (PP (IN for)
          (NP (NN example)))
        (PP (IN by)
          (NP
            (NP (NNP Goultiaeva)
              (CC and)
              (NNP Bacchus))
            (PRN (-LRB- -LRB-)
              (NP (CD 2013))
              (-RRB- -RRB-))))))
    (. .)))

compound(engineering-3, Reverse-1)
compound(engineering-3, Tseitin-2)
nsubjpass(used-5, engineering-3)
auxpass(used-5, is-4)
root(ROOT-0, used-5)
case(example-7, for-6)
nmod:for(used-5, example-7)
case(Goultiaeva-9, by-8)
nmod:agent(used-5, Goultiaeva-9)
cc(Goultiaeva-9, and-10)
nmod:agent(used-5, Bacchus-11)
conj:and(Goultiaeva-9, Bacchus-11)
appos(Goultiaeva-9, 2013-13)

(ROOT
  (S
    (NP (VBG Implementing) (JJ such) (NNS techniques))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN topic))
        (PP (IN for)
          (NP (JJ future) (NN work)))))
    (. .)))

amod(techniques-3, Implementing-1)
amod(techniques-3, such-2)
nsubj(topic-6, techniques-3)
cop(topic-6, is-4)
det(topic-6, a-5)
root(ROOT-0, topic-6)
case(work-9, for-7)
amod(work-9, future-8)
nmod:for(topic-6, work-9)

(ROOT
  (S
    (NP (-LRB- -LRB-) (NNP ii) (-RRB- -RRB-))
    (ADVP (RB Sometimes))
    (SBAR
      (WHADVP (WRB when))
      (S
        (NP
          (NP (DT the) (JJ internal) (NN solver))
          (PP (IN in)
            (NP (NNP SAT)
              (PRN (: -)
                (NP (NNP TO))
                (: -))
              (NNP SAT))))
        (VP (VBZ finds)
          (NP (DT a) (NN model)))))
    (, ,)
    (NP (EX there))
    (VP (VBP are)
      (NP
        (NP (JJ several) (NNS choices))
        (PP (IN on)
          (SBAR
            (WHADVP (WRB how))
            (S
              (VP (TO to)
                (VP (VB construct)
                  (NP (DT a) (NN conflict) (NN clause)))))))))
    (. .)))

nsubj(are-20, ii-2)
advmod(are-20, Sometimes-4)
advmod(finds-15, when-5)
det(solver-8, the-6)
amod(solver-8, internal-7)
nsubj(finds-15, solver-8)
case(SAT-14, in-9)
compound(SAT-14, SAT-10)
dep(SAT-14, TO-12)
nmod:in(solver-8, SAT-14)
advcl(are-20, finds-15)
det(model-17, a-16)
dobj(finds-15, model-17)
expl(are-20, there-19)
root(ROOT-0, are-20)
amod(choices-22, several-21)
nsubj(are-20, choices-22)
mark(construct-26, on-23)
advmod(construct-26, how-24)
mark(construct-26, to-25)
acl(choices-22, construct-26)
det(clause-29, a-27)
compound(clause-29, conflict-28)
dobj(construct-26, clause-29)

(ROOT
  (S
    (ADVP (RBR More) (RB formally))
    (, ,)
    (PP (IN for)
      (NP
        (NP (DT a) (VBN given) (NN model) (NN M))
        (PP (IN of)
          (NP (DT the) (JJ internal) (NN theory)))))
    (, ,)
    (NP (EX there))
    (VP (MD might)
      (VP (VB be)
        (NP
          (NP (JJ multiple) (NNP J) (POS 's))
          (JJ such))
        (SBAR (IN that)
          (S
            (NP
              (PRN (-LRB- -LRB-)
                (NP (NNP J))
                (, ,)
                (NP (NNP M))
                (-RRB- -RRB-)))
            (VP (VBZ explains)
              (NP
                (NP (NN satisfiability))
                (PP (IN of)
                  (NP (DT the) (JJ internal) (NN theory)))))))
        (, ,)
        (SBAR (IN as)
          (S
            (VP (VBN defined)
              (PP (IN in)
                (NP (NNP Definition) (CD 3.1))))))))
    (. .)))

advmod(formally-2, More-1)
advmod(J-18, formally-2)
case(M-8, for-4)
det(M-8, a-5)
amod(M-8, given-6)
compound(M-8, model-7)
nmod:for(J-18, M-8)
case(theory-12, of-9)
det(theory-12, the-10)
amod(theory-12, internal-11)
nmod:of(M-8, theory-12)
expl(J-18, there-14)
aux(J-18, might-15)
cop(J-18, be-16)
amod(J-18, multiple-17)
root(ROOT-0, J-18)
case(J-18, 's-19)
amod(J-18, such-20)
mark(explains-27, that-21)
nsubj(explains-27, J-23)
dep(J-23, M-25)
ccomp(J-18, explains-27)
dobj(explains-27, satisfiability-28)
case(theory-32, of-29)
det(theory-32, the-30)
amod(theory-32, internal-31)
nmod:of(satisfiability-28, theory-32)
mark(defined-35, as-34)
advcl(J-18, defined-35)
case(Definition-37, in-36)
nmod:in(defined-35, Definition-37)
nummod(Definition-37, 3.1-38)

(ROOT
  (S
    (NP
      (NP (DT Each))
      (PP (IN of)
        (NP
          (NP
            (NP (DT these) (NNP J) (POS 's))
            (JJ gives) (NN rise))
          (PP (TO to)
            (NP (DT a) (JJ different))))))
    (VP (VBD learned)
      (NP (NN clause))
      (PP (IN in)
        (NP (DT the) (JJ outermost) (NN solver))))
    (. .)))

nsubj(learned-11, Each-1)
case(rise-7, of-2)
det(J-4, these-3)
nmod:poss(rise-7, J-4)
case(J-4, 's-5)
amod(rise-7, gives-6)
nmod:of(Each-1, rise-7)
case(different-10, to-8)
det(different-10, a-9)
nmod:to(rise-7, different-10)
root(ROOT-0, learned-11)
dobj(learned-11, clause-12)
case(solver-16, in-13)
det(solver-16, the-14)
amod(solver-16, outermost-15)
nmod:in(learned-11, solver-16)

(ROOT
  (S
    (VP (VB Example)
      (NP (CD 5.1)))
    (. .)))

root(ROOT-0, Example-1)
dobj(Example-1, 5.1-2)

(ROOT
  (S
    (VP (VB Let)
      (NP (NNP T))
      (VP (VB be)
        (NP
          (NP
            (NP
              (NP
                (NP (DT the) (JJ following) (NN theory))
                (: :)
                (NP
                  (NP
                    (NP (NN o))
                    (, ,)
                    (NP (NN p))
                    (, ,)
                    (NP (NN q)))
                  (: :)
                  (NP
                    (NP
                      (PRN (-LRB- -LRB-)
                        (NP (NN p) (NN q))
                        (-RRB- -RRB-))
                      (NNP T) (NNP =))
                    (NP (SYM r))))
                (: :))
              (PRN (-LRB- -LRB-)
                (NP (JJ p) (NN q) (NN r))
                (-RRB- -RRB-)))
            (PRN (-LRB- -LRB-)
              (NP (NN r) (NN q))
              (-RRB- -RRB-)))
          (PRN (-LRB- -LRB-)
            (NP (JJ o) (NN q) (NN r))
            (-RRB- -RRB-)))
        (SBAR (IN If)
          (S
            (S
              (NP
                (NP (DT a) (NNP SAT-solver))
                (PP (IN for)
                  (NP (DT the) (JJ internal) (NN theory))))
              (VP (VBZ is)
                (VP (VBN called)
                  (PP (IN with)
                    (S
                      (VP (VBG assumptions)
                        (S
                          (NP (PRP I))
                          (VP (SYM =)
                            (NP (-LRB- -LCB-) (NN ot) (, ,) (NN pt) (, ,) (NN q) (NNS t) (-RRB- -RCB-))))))))))
            (, ,) (RB then)
            (S
              (NP (NNP M) (NNP =) (-LRB- -LCB-) (NNP rf) (-RRB- -RCB-))
              (VP (VBZ is)
                (NP (DT a) (NN model))))))))
    (. .)))

root(ROOT-0, Let-1)
dobj(Let-1, T-2)
cop(theory-6, be-3)
det(theory-6, the-4)
amod(theory-6, following-5)
dep(Let-1, theory-6)
dep(theory-6, o-8)
appos(o-8, p-10)
appos(o-8, q-12)
compound(q-16, p-15)
appos(=-19, q-16)
compound(=-19, T-18)
dep(o-8, =-19)
dep(=-19, r-20)
amod(r-25, p-23)
compound(r-25, q-24)
appos(theory-6, r-25)
compound(q-29, r-28)
appos(theory-6, q-29)
amod(r-34, o-32)
compound(r-34, q-33)
appos(theory-6, r-34)
mark(called-44, If-36)
det(SAT-solver-38, a-37)
nsubjpass(called-44, SAT-solver-38)
case(theory-42, for-39)
det(theory-42, the-40)
amod(theory-42, internal-41)
nmod:for(SAT-solver-38, theory-42)
auxpass(called-44, is-43)
advcl(theory-6, called-44)
mark(assumptions-46, with-45)
advcl(called-44, assumptions-46)
nsubj(t-55, I-47)
dep(t-55, =-48)
compound(t-55, ot-50)
dep(t-55, pt-52)
dep(t-55, q-54)
ccomp(assumptions-46, t-55)
advmod(model-66, then-58)
compound(rf-62, M-59)
compound(rf-62, =-60)
nsubj(model-66, rf-62)
cop(model-66, is-64)
det(model-66, a-65)
parataxis(called-44, model-66)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP
          (NP
            (NP (NNP J1) (NNP =))
            (PRN (-LRB- -LCB-)
              (NP
                (NP (NN ot))
                (, ,)
                (NP (NN pt)))
              (-RRB- -RCB-)))
          (CC and)
          (NP (NNP J2)))
        (VP (SYM =)
          (NP (-LRB- -LCB-) (NN ot) (, ,) (NN q) (NNS t) (-RRB- -RCB-)))))
    (, ,)
    (NP
      (NP
        (NP (RB then) (DT both))
        (PRN (-LRB- -LRB-)
          (NP (NNP J1))
          (, ,)
          (NP (NNP M))
          (-RRB- -RRB-)))
      (CC and)
      (NP
        (PRN (-LRB- -LRB-)
          (NP (NNP J2))
          (, ,)
          (NP (NNP M))
          (-RRB- -RRB-))
        (NNS explain)))
    (VP (VBP satisfiability)
      (PP (IN of)
        (NP
          (NP (-LRB- -LRB-) (NN p) (NNP q) (NNP r) (-RRB- -RRB-))
          (PRN (-LRB- -LRB-)
            (NP (NN r) (NN q))
            (-RRB- -RRB-)))))
    (. .)))

mark(t-16, If-1)
compound(=-3, J1-2)
nsubj(t-16, =-3)
dep(=-3, ot-5)
appos(ot-5, pt-7)
cc(=-3, and-9)
conj:and(=-3, J2-10)
nsubj(t-16, J2-10)
dep(t-16, =-11)
compound(t-16, ot-13)
dep(t-16, q-15)
advcl(satisfiability-33, t-16)
advmod(both-20, then-19)
nsubj(satisfiability-33, both-20)
appos(both-20, J1-22)
dep(J1-22, M-24)
cc(both-20, and-26)
appos(explain-32, J2-28)
dep(J2-28, M-30)
conj:and(both-20, explain-32)
nsubj(satisfiability-33, explain-32)
root(ROOT-0, satisfiability-33)
case(r-38, of-34)
compound(r-38, p-36)
compound(r-38, q-37)
nmod:of(satisfiability-33, r-38)
compound(q-42, r-41)
appos(r-38, q-42)

(ROOT
  (S
    (S
      (VP (VBG Returning)
        (NP
          (NP (DT the) (JJ first))
          (PP (IN of)
            (NP (DT these))))))
    (VP (MD would)
      (VP (VB result)
        (PP (IN in)
          (NP
            (NP (DT the) (NN addition))
            (PP (IN of)
              (NP (DT a) (NN clause) (NN o) (NN p)))))
        (PP (TO to)
          (NP (DT the) (JJ outermost) (NN theory)))
        (, ,)
        (SBAR (IN while)
          (S
            (NP (DT the) (NN second))
            (VP (MD would)
              (VP (VB result)
                (PP (IN in)
                  (NP
                    (NP (DT the) (NN addition))
                    (PP (IN of)
                      (NP (DT a) (NN clause) (NN o) (NN q)))))))))))
    (. .)))

csubj(result-7, Returning-1)
det(first-3, the-2)
dobj(Returning-1, first-3)
case(these-5, of-4)
nmod:of(first-3, these-5)
aux(result-7, would-6)
root(ROOT-0, result-7)
case(addition-10, in-8)
det(addition-10, the-9)
nmod:in(result-7, addition-10)
case(p-15, of-11)
det(p-15, a-12)
compound(p-15, clause-13)
compound(p-15, o-14)
nmod:of(addition-10, p-15)
case(theory-19, to-16)
det(theory-19, the-17)
amod(theory-19, outermost-18)
nmod:to(result-7, theory-19)
mark(result-25, while-21)
det(second-23, the-22)
nsubj(result-25, second-23)
aux(result-25, would-24)
advcl(result-7, result-25)
case(addition-28, in-26)
det(addition-28, the-27)
nmod:in(result-25, addition-28)
case(q-33, of-29)
det(q-33, a-30)
compound(q-33, clause-31)
compound(q-33, o-32)
nmod:of(addition-28, q-33)

(ROOT
  (S
    (PP (IN In)
      (NP (NN principle)))
    (, ,)
    (NP
      (NP (DT both) (NNS clauses))
      (VP (VBN found)
        (PP (IN in)
          (NP (NNP Example) (CD 5.1)))))
    (VP
      (VP (VBP are)
        (NP (JJ valid) (NNS consequences)))
      (CC and)
      (VP (MD could)
        (VP (VB be)
          (VP (VBN added)
            (PP (TO to)
              (NP (DT the) (JJ top) (NN theory)))))))
    (. .)))

case(principle-2, In-1)
nmod:in(consequences-12, principle-2)
det(clauses-5, both-4)
nsubj(consequences-12, clauses-5)
nsubjpass(added-16, clauses-5)
acl(clauses-5, found-6)
case(Example-8, in-7)
nmod:in(found-6, Example-8)
nummod(Example-8, 5.1-9)
cop(consequences-12, are-10)
amod(consequences-12, valid-11)
root(ROOT-0, consequences-12)
cc(consequences-12, and-13)
aux(added-16, could-14)
auxpass(added-16, be-15)
conj:and(consequences-12, added-16)
case(theory-20, to-17)
det(theory-20, the-18)
amod(theory-20, top-19)
nmod:to(added-16, theory-20)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP (EX there))
    (VP (MD could)
      (VP (VB be)
        (NP
          (ADJP (RB exponentially) (JJ many))
          (JJ such) (NNS clauses))))
    (. .)))

advmod(clauses-9, However-1)
expl(clauses-9, there-3)
aux(clauses-9, could-4)
cop(clauses-9, be-5)
advmod(many-7, exponentially-6)
amod(clauses-9, many-7)
amod(clauses-9, such-8)
root(ROOT-0, clauses-9)

(ROOT
  (S
    (S
      (VP (VBG Using)
        (NP (NNS ideas))
        (PP (IN from)
          (NP
            (NP (JJ extended) (NN resolution))
            (PRN (-LRB- -LRB-)
              (NP (NNP Tseitin) (CD 1968))
              (-RRB- -RRB-))))))
    (, ,)
    (NP (PRP we))
    (VP (MD can)
      (VP (VB summarise)
        (NP
          (NP (DT all))
          (PP (IN of)
            (NP
              (NP (DT these) (NNS clauses))
              (PP (IN in)
                (NP
                  (NP (JJ linear) (NN size))
                  (PP (IN in)
                    (NP
                      (NP (NNS terms))
                      (PP (IN of)
                        (NP (DT the) (JJ original) (NN theory))))))))))
        (PP (IN by)
          (S
            (VP (VBG introducing)
              (NP (JJ new) (NNS variables)))))))
    (. .)))

advcl(summarise-13, Using-1)
dobj(Using-1, ideas-2)
case(resolution-5, from-3)
amod(resolution-5, extended-4)
nmod:from(Using-1, resolution-5)
appos(resolution-5, Tseitin-7)
nummod(Tseitin-7, 1968-8)
nsubj(summarise-13, we-11)
aux(summarise-13, can-12)
root(ROOT-0, summarise-13)
dobj(summarise-13, all-14)
case(clauses-17, of-15)
det(clauses-17, these-16)
nmod:of(all-14, clauses-17)
case(size-20, in-18)
amod(size-20, linear-19)
nmod:in(clauses-17, size-20)
case(terms-22, in-21)
nmod:in(size-20, terms-22)
case(theory-26, of-23)
det(theory-26, the-24)
amod(theory-26, original-25)
nmod:of(terms-22, theory-26)
mark(introducing-28, by-27)
advcl(summarise-13, introducing-28)
amod(variables-30, new-29)
dobj(introducing-28, variables-30)

(ROOT
  (S
    (PP (IN In)
      (NP (DT the) (NN example)))
    (, ,)
    (NP (DT this))
    (VP (MD would)
      (VP (VB boil)
        (PRT (RP down))
        (PP (TO to)
          (S
            (VP
              (VP (VBG introducing)
                (NP (DT a) (JJ variable) (NN t)))
              (CC and)
              (VP (VBG adding)
                (NP
                  (NP (DT an) (NN encoding))
                  (PP (IN of)
                    (NP
                      (NP (DT the) (JJ following) (NN definition) (NN t) (NN p) (NN q))
                      (CC and)
                      (NP (DT the) (NN clause)))))
                (PP (TO to))
                (S
                  (VP (TO to)
                    (VP (VB invalidate)
                      (NP (DT the) (JJ current) (NN assignment)))))))))))
    (. .)))

case(example-3, In-1)
det(example-3, the-2)
nmod:in(boil-7, example-3)
nsubj(boil-7, this-5)
aux(boil-7, would-6)
root(ROOT-0, boil-7)
compound:prt(boil-7, down-8)
mark(introducing-10, to-9)
advcl(boil-7, introducing-10)
det(t-13, a-11)
amod(t-13, variable-12)
dobj(introducing-10, t-13)
cc(introducing-10, and-14)
advcl(boil-7, adding-15)
conj:and(introducing-10, adding-15)
det(encoding-17, an-16)
dobj(adding-15, encoding-17)
case(q-24, of-18)
det(q-24, the-19)
amod(q-24, following-20)
compound(q-24, definition-21)
compound(q-24, t-22)
compound(q-24, p-23)
nmod:of(encoding-17, q-24)
cc(q-24, and-25)
det(clause-27, the-26)
nmod:of(encoding-17, clause-27)
conj:and(q-24, clause-27)
nmod(adding-15, to-28)
mark(invalidate-30, to-29)
advcl(adding-15, invalidate-30)
det(assignment-33, the-31)
amod(assignment-33, current-32)
dobj(invalidate-30, assignment-33)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ generalises)
      (NP
        (NP (DT both))
        (PP (IN of)
          (NP
            (NP (DT the) (JJ above) (NNS clauses))
            (PP (IN with)
              (NP
                (NP (DT the) (NN cost))
                (PP (IN of)
                  (S
                    (VP (VBG introducing)
                      (NP (DT an) (JJ extra) (NN variable)))))))))))
    (. .)))

nsubj(generalises-2, This-1)
root(ROOT-0, generalises-2)
dobj(generalises-2, both-3)
case(clauses-7, of-4)
det(clauses-7, the-5)
amod(clauses-7, above-6)
nmod:of(both-3, clauses-7)
case(cost-10, with-8)
det(cost-10, the-9)
nmod:with(clauses-7, cost-10)
mark(introducing-12, of-11)
acl(cost-10, introducing-12)
det(variable-15, an-13)
amod(variable-15, extra-14)
dobj(introducing-12, variable-15)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP need)
      (S
        (VP (TO to)
          (VP (VB research)
            (NP
              (NP (DT the) (NN impact))
              (PP (IN of)
                (NP (JJ such) (JJ learned) (NNS clauses))))
            (PP (DT both) (IN on)
              (NP (NN time)
                (CC and)
                (NN memory) (NN consumption)))))))
    (. .)))

nsubj(need-2, We-1)
nsubj:xsubj(research-4, We-1)
root(ROOT-0, need-2)
mark(research-4, to-3)
xcomp(need-2, research-4)
det(impact-6, the-5)
dobj(research-4, impact-6)
case(clauses-10, of-7)
amod(clauses-10, such-8)
amod(clauses-10, learned-9)
nmod:of(impact-6, clauses-10)
dep(consumption-16, both-11)
case(consumption-16, on-12)
compound(consumption-16, time-13)
cc(time-13, and-14)
conj:and(time-13, memory-15)
compound(consumption-16, memory-15)
nmod:on(research-4, consumption-16)

(ROOT
  (S
    (NP
      (NP
        (PRN (-LRB- -LRB-)
          (NP (NN iii))
          (-RRB- -RRB-))
        (NNS Several))
      (PP (IN of)
        (NP
          (NP (DT the) (VBG preprocessing) (NNS techniques))
          (VP (VBN discussed)
            (ADVP (RB here))))))
    (VP (VBD involved)
      (S
        (VP (VBG transforming)
          (NP (DT a) (JJ prenex) (JJ normal) (NN form) (NN QBF))
          (PP (IN into)
            (NP (DT a) (JJ non-prenex) (JJ normal) (NN form) (NN sentence))))))
    (. .)))

appos(Several-4, iii-2)
nsubj(involved-11, Several-4)
case(techniques-8, of-5)
det(techniques-8, the-6)
amod(techniques-8, preprocessing-7)
nmod:of(Several-4, techniques-8)
acl(techniques-8, discussed-9)
advmod(discussed-9, here-10)
root(ROOT-0, involved-11)
xcomp(involved-11, transforming-12)
det(QBF-17, a-13)
amod(QBF-17, prenex-14)
amod(QBF-17, normal-15)
compound(QBF-17, form-16)
dobj(transforming-12, QBF-17)
case(sentence-23, into-18)
det(sentence-23, a-19)
amod(sentence-23, non-prenex-20)
amod(sentence-23, normal-21)
compound(sentence-23, form-22)
nmod:into(transforming-12, sentence-23)

(ROOT
  (S
    (ADVP (RB Sometimes))
    (S
      (NP (DT this))
      (ADVP (RB even))
      (VP (VBZ involves)
        (S
          (VP (`` ``) (VBG rediscovering) ('' '')
            (NP
              (NP (NN problem) (NN structure))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBD was)
                    (ADVP (RB probably))
                    (ADJP (JJ present)
                      (PP (IN at)
                        (NP
                          (NP (DT the) (NN time))
                          (PP (IN of)
                            (NP (DT the) (NN encoding))))))))))))))
    (, ,)
    (CC but)
    (S
      (NP (DT that))
      (VP (VBD was)
        (VP (VBN lost)
          (PP (RB because) (IN of)
            (NP
              (NP (DT the) (JJ low-level) (NN format))
              (VP (VBN used)))))))
    (. .)))

advmod(involves-4, Sometimes-1)
nsubj(involves-4, this-2)
advmod(involves-4, even-3)
root(ROOT-0, involves-4)
ccomp(involves-4, rediscovering-6)
compound(structure-9, problem-8)
dobj(rediscovering-6, structure-9)
nsubj(present-13, structure-9)
ref(structure-9, that-10)
cop(present-13, was-11)
advmod(present-13, probably-12)
acl:relcl(structure-9, present-13)
case(time-16, at-14)
det(time-16, the-15)
nmod:at(present-13, time-16)
case(encoding-19, of-17)
det(encoding-19, the-18)
nmod:of(time-16, encoding-19)
cc(involves-4, but-21)
nsubjpass(lost-24, that-22)
auxpass(lost-24, was-23)
conj:but(involves-4, lost-24)
case(format-29, because-25)
mwe(because-25, of-26)
det(format-29, the-27)
amod(format-29, low-level-28)
nmod:because_of(lost-24, format-29)
acl(format-29, used-30)

(ROOT
  (S
    (NP
      (NP (DT An) (NN example))
      (PP (IN of)
        (NP (DT this))))
    (VP (VBZ is)
      (ADVP
        (ADVP
          (NP
            (NP (DT the) (NN case))
            (PRN (-LRB- -LRB-)
              (NP (NNP i))
              (-RRB- -RRB-)))
          (IN above))
        (, ,)
        (SBAR
          (WHADVP (WRB where))
          (S
            (NP (PRP we))
            (VP (VBP need)
              (S
                (VP (TO to)
                  (VP (VB do)
                    (NP (JJ clever) (NN reasoning))
                    (S
                      (VP (TO to)
                        (VP (VB rediscover)
                          (SBAR (IN that)
                            (S
                              (NP (CD one) (NN variable))
                              (VP (VBZ is)
                                (VP (VBN defined)
                                  (ADVP (RB functionally))
                                  (PP (IN in)
                                    (NP
                                      (NP (NNS terms))
                                      (PP (IN of)
                                        (NP (JJ other) (NNS variables)))))))))))))))))))
      (, ,)
      (SBAR (IN since)
        (S
          (NP (NNP CNF) (POS 's))
          (VP (VBP have)
            (S
              (NP (DT no) (JJ native) (NN language))
              (VP (VB construct)
                (S
                  (VP (TO to)
                    (VP (VB express)
                      (NP (DT this) (NN definition)))))))))))
    (. .)))

det(example-2, An-1)
nsubj(is-5, example-2)
case(this-4, of-3)
nmod:of(example-2, this-4)
root(ROOT-0, is-5)
det(case-7, the-6)
advmod(is-5, case-7)
appos(case-7, i-9)
case(case-7, above-11)
advmod(need-15, where-13)
nsubj(need-15, we-14)
nsubj:xsubj(do-17, we-14)
advcl(case-7, need-15)
mark(do-17, to-16)
xcomp(need-15, do-17)
amod(reasoning-19, clever-18)
dobj(do-17, reasoning-19)
mark(rediscover-21, to-20)
advcl(do-17, rediscover-21)
mark(defined-26, that-22)
nummod(variable-24, one-23)
nsubjpass(defined-26, variable-24)
auxpass(defined-26, is-25)
ccomp(rediscover-21, defined-26)
advmod(defined-26, functionally-27)
case(terms-29, in-28)
nmod:in(defined-26, terms-29)
case(variables-32, of-30)
amod(variables-32, other-31)
nmod:of(terms-29, variables-32)
mark(have-37, since-34)
nsubj(have-37, CNF-35)
case(CNF-35, 's-36)
advcl(is-5, have-37)
neg(language-40, no-38)
amod(language-40, native-39)
nsubj(construct-41, language-40)
nsubj:xsubj(express-43, language-40)
ccomp(have-37, construct-41)
mark(express-43, to-42)
xcomp(construct-41, express-43)
det(definition-45, this-44)
dobj(express-43, definition-45)

(ROOT
  (S
    (NP (DT A) (JJR richer) (NN language))
    (VP (MD could)
      (ADVP (RB directly))
      (VP (VB present)
        (NP
          (NP (DT this) (NN information))
          (PP (IN in)
            (NP (DT the) (NN encoding))))))
    (. .)))

det(language-3, A-1)
amod(language-3, richer-2)
nsubj(present-6, language-3)
aux(present-6, could-4)
advmod(present-6, directly-5)
root(ROOT-0, present-6)
det(information-8, this-7)
dobj(present-6, information-8)
case(encoding-11, in-9)
det(encoding-11, the-10)
nmod:in(information-8, encoding-11)

(ROOT
  (S
    (ADVP (RB Hence))
    (, ,)
    (NP (PRP we))
    (VP (VBP intend)
      (PP (TO to)
        (NP (JJ generalise) (NNP SAT)
          (PRN (: -)
            (NP (NNP TO))
            (: -))
          (NNP SAT)))
      (S
        (VP (TO to)
          (VP (VB accept)
            (NP (JJ non-prenex)
              (CC and)
              (JJ non-CNF) (NN input) (NN format))
            (PP (JJ such)
              (PP (IN as)
                (NP
                  (NP (NNP QCIR))
                  (PRN (-LRB- -LRB-)
                    (NP (NNP QBF) (NNP Gallery) (NNP 2014))
                    (-RRB- -RRB-)))))))))
    (. .)))

advmod(intend-4, Hence-1)
nsubj(intend-4, we-3)
nsubj:xsubj(accept-13, we-3)
root(ROOT-0, intend-4)
case(SAT-11, to-5)
amod(SAT-11, generalise-6)
compound(SAT-11, SAT-7)
dep(SAT-11, TO-9)
nmod:to(intend-4, SAT-11)
mark(accept-13, to-12)
xcomp(intend-4, accept-13)
amod(format-18, non-prenex-14)
cc(non-prenex-14, and-15)
conj:and(non-prenex-14, non-CNF-16)
amod(format-18, non-CNF-16)
compound(format-18, input-17)
dobj(accept-13, format-18)
case(QCIR-21, such-19)
case(QCIR-21, as-20)
advcl(accept-13, QCIR-21)
compound(2014-25, QBF-23)
compound(2014-25, Gallery-24)
appos(QCIR-21, 2014-25)

(ROOT
  (S
    (NP (NNP Table) (CD 1))
    (VP
      (VP (VBZ depicts)
        (NP
          (NP (DT the) (NN number))
          (PP (IN of)
            (NP
              (NP (NNS instances))
              (VP (VBN solved)
                (PP (IN by)
                  (NP (NNP SAT)
                    (PRN (: -)
                      (NP (NNP TO))
                      (: -))
                    (NNP SAT))))))))
      (CC and)
      (VP (VBZ GhostQ)))
    (. .)))

nsubj(depicts-3, Table-1)
nsubj(GhostQ-16, Table-1)
nummod(Table-1, 1-2)
root(ROOT-0, depicts-3)
det(number-5, the-4)
dobj(depicts-3, number-5)
case(instances-7, of-6)
nmod:of(number-5, instances-7)
acl(instances-7, solved-8)
case(SAT-14, by-9)
compound(SAT-14, SAT-10)
dep(SAT-14, TO-12)
nmod:by(solved-8, SAT-14)
cc(depicts-3, and-15)
conj:and(depicts-3, GhostQ-16)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (VP (MD can)
          (VP (VB be)
            (VP (VBN seen))))))
    (, ,)
    (ADVP (RB SAT))
    (: -)
    (ADVP (RB TO))
    (: -)
    (S
      (NP
        (NP (NNP SAT) (POS 's))
        (NN performance))
      (ADVP (RB still))
      (VP (VBZ lags)
        (PP (IN behind)
          (NP (DT the)
            (ADJP (JJS best) (JJ available))
            (NN QBF) (NN solver)))))
    (. .)))

mark(seen-4, As-1)
aux(seen-4, can-2)
auxpass(seen-4, be-3)
advcl(lags-14, seen-4)
advmod(lags-14, SAT-6)
advmod(lags-14, TO-8)
nmod:poss(performance-12, SAT-10)
case(SAT-10, 's-11)
nsubj(lags-14, performance-12)
advmod(lags-14, still-13)
root(ROOT-0, lags-14)
case(solver-20, behind-15)
det(solver-20, the-16)
dep(available-18, best-17)
amod(solver-20, available-18)
compound(solver-20, QBF-19)
nmod:behind(lags-14, solver-20)

(ROOT
  (S
    (NP (DT The) (NN difference))
    (VP (VBZ seems)
      (ADJP (JJ big)))
    (. .)))

det(difference-2, The-1)
nsubj(seems-3, difference-2)
root(ROOT-0, seems-3)
xcomp(seems-3, big-4)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP
      (NP (DT some) (NNS remarks))
      (, ,)
      (SBAR
        (WHNP (WDT that))
        (S
          (ADVP (RB also))
          (VP (VB define)
            (NP (PRP$ our) (JJ future) (NN work) (NNS directions)))))
      (, ,))
    (VP (VBP need)
      (S
        (VP (TO to)
          (VP (VB be)
            (VP (VBN made))))))
    (. .)))

advmod(need-14, However-1)
det(remarks-4, some-3)
nsubj(define-8, remarks-4)
nsubj(need-14, remarks-4)
nsubjpass:xsubj(made-17, remarks-4)
ref(remarks-4, that-6)
advmod(define-8, also-7)
acl:relcl(remarks-4, define-8)
nmod:poss(directions-12, our-9)
amod(directions-12, future-10)
compound(directions-12, work-11)
dobj(define-8, directions-12)
root(ROOT-0, need-14)
mark(made-17, to-15)
auxpass(made-17, be-16)
xcomp(need-14, made-17)

(ROOT
  (S
    (ADVP (RB Firstly))
    (, ,)
    (VP (VBG combining)
      (NP (DT these) (NNS results))
      (PP (IN with)
        (NP
          (NP (DT the) (NNS results))
          (PP (IN from)
            (NP
              (NP (DT the) (JJS latest) (NN competition))
              (PRN (-LRB- -LRB-)
                (NP (NNP QBFEVAL) (CD 2014))
                (-RRB- -RRB-)))))))
    (VP (VBZ puts)
      (NP
        (NP (NNP SAT)
          (PRN (: -)
            (NP (NNP TO))
            (: -))
          (NNP SAT))
        (ADJP (RB approximately) (JJ on-par)))
      (PP (IN with)
        (NP
          (NP (DT the) (JJ plain) (NN version))
          (PP (IN of)
            (NP
              (NP (NNP RAReQS))
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (NNP Janota))
                  (CC et)
                  (NP (NN al.) (CD 2012)))
                (-RRB- -RRB-))))))
      (, ,)
      (SBAR (IN while)
        (S
          (NP
            (NP (DT a) (NN version))
            (PP (IN of)
              (NP
                (NP (NNP RAReQS))
                (PP (IN with)
                  (NP (NNP QBF) (NNS preprocessors))))))
          (VP (VBD ended)
            (PRT (RP up))
            (PP (IN in)
              (NP
                (NP (DT the) (JJ third) (NN place))
                (PP (IN of)
                  (NP (DT this) (NN competition)))))))))
    (. .)))

advmod(combining-3, Firstly-1)
root(ROOT-0, combining-3)
det(results-5, these-4)
dobj(combining-3, results-5)
case(results-8, with-6)
det(results-8, the-7)
nmod:with(combining-3, results-8)
case(competition-12, from-9)
det(competition-12, the-10)
amod(competition-12, latest-11)
nmod:from(results-8, competition-12)
appos(competition-12, QBFEVAL-14)
nummod(QBFEVAL-14, 2014-15)
dep(combining-3, puts-17)
compound(SAT-22, SAT-18)
dep(SAT-22, TO-20)
dobj(puts-17, SAT-22)
advmod(on-par-24, approximately-23)
amod(SAT-22, on-par-24)
case(version-28, with-25)
det(version-28, the-26)
amod(version-28, plain-27)
nmod:with(puts-17, version-28)
case(RAReQS-30, of-29)
nmod:of(version-28, RAReQS-30)
dep(RAReQS-30, Janota-32)
cc(Janota-32, et-33)
dep(RAReQS-30, al.-34)
conj:et(Janota-32, al.-34)
nummod(al.-34, 2012-35)
mark(ended-46, while-38)
det(version-40, a-39)
nsubj(ended-46, version-40)
case(RAReQS-42, of-41)
nmod:of(version-40, RAReQS-42)
case(preprocessors-45, with-43)
compound(preprocessors-45, QBF-44)
nmod:with(RAReQS-42, preprocessors-45)
advcl(puts-17, ended-46)
compound:prt(ended-46, up-47)
case(place-51, in-48)
det(place-51, the-49)
amod(place-51, third-50)
nmod:in(ended-46, place-51)
case(competition-54, of-52)
det(competition-54, this-53)
nmod:of(place-51, competition-54)

(ROOT
  (FRAG
    (S
      (VP (VBG Finding)
        (PRT (RP out))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBZ preprocessors)
              (VP (VB boost)
                (NP (NNP SAT))))))))
    (: -)
    (FRAG
      (NP (NNP TO))
      (: -)
      (S
        (NP
          (NP (NNP SAT) (POS 's))
          (NN performance))
        (VP (VBZ is)
          (NP
            (NP (DT a) (NN topic))
            (PP (IN for)
              (NP (JJ future) (NN work)))))))
    (. .)))

dep(TO-8, Finding-1)
compound:prt(Finding-1, out-2)
nsubj(preprocessors-4, which-3)
ccomp(Finding-1, preprocessors-4)
xcomp(preprocessors-4, boost-5)
dobj(boost-5, SAT-6)
root(ROOT-0, TO-8)
nmod:poss(performance-12, SAT-10)
case(SAT-10, 's-11)
nsubj(topic-15, performance-12)
cop(topic-15, is-13)
det(topic-15, a-14)
parataxis(TO-8, topic-15)
case(work-18, for-16)
amod(work-18, future-17)
nmod:for(topic-15, work-18)

(ROOT
  (S
    (ADVP (RB Secondly))
    (, ,)
    (NP (PRP$ our) (NN implementation))
    (VP (VBD was)
      (VP (VBN built)
        (PP (IN on)
          (NP
            (NP (NN top))
            (PP (IN of)
              (NP (NNP Glucose)))))))
    (. .)))

advmod(built-6, Secondly-1)
nmod:poss(implementation-4, our-3)
nsubjpass(built-6, implementation-4)
auxpass(built-6, was-5)
root(ROOT-0, built-6)
case(Glucose-10, on-7)
mwe(on-7, top-8)
mwe(on-7, of-9)
nmod:on_top_of(built-6, Glucose-10)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is) (RB not)
      (ADJP (JJ hard)
        (S
          (VP (TO to)
            (VP (VB replace)
              (NP
                (NP (NNP Glucose))
                (PP (IN with)
                  (NP (DT any) (NNP SAT) (NN solver)))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBZ implements)
                      (NP (DT the) (NN interface))
                      (PP (VBN given)
                        (PP (IN in)
                          (NP (NNP Definition) (CD 3.3)))))))))))))
    (. .)))

nsubj(hard-4, It-1)
nsubj:xsubj(replace-6, It-1)
cop(hard-4, is-2)
neg(hard-4, not-3)
root(ROOT-0, hard-4)
mark(replace-6, to-5)
xcomp(hard-4, replace-6)
dobj(replace-6, Glucose-7)
nsubj(implements-13, Glucose-7)
case(solver-11, with-8)
det(solver-11, any-9)
compound(solver-11, SAT-10)
nmod:with(Glucose-7, solver-11)
ref(Glucose-7, that-12)
acl:relcl(Glucose-7, implements-13)
det(interface-15, the-14)
dobj(implements-13, interface-15)
case(Definition-18, given-16)
case(Definition-18, in-17)
advcl(implements-13, Definition-18)
nummod(Definition-18, 3.3-19)

(ROOT
  (S
    (NP
      (NP (NNP Related))
      (, ,)
      (NP (NNP SAT)
        (PRN (: -)
          (NP (NNP TO))
          (: -))
        (NNP SAT)))
    (VP (VBZ allows)
      (S
        (NP (PRP us))
        (VP (TO to)
          (VP (VB lift)
            (NP (DT all) (JJ future) (NNS improvements))
            (PP (IN in)
              (NP
                (NP (NNP SAT))
                (VP (VBG solving)
                  (PP (TO to)
                    (NP (NNP QBF))))))))))
    (. .)))

nsubj(allows-8, Related-1)
compound(SAT-7, SAT-3)
dep(SAT-7, TO-5)
appos(Related-1, SAT-7)
root(ROOT-0, allows-8)
dobj(allows-8, us-9)
nsubj:xsubj(lift-11, us-9)
mark(lift-11, to-10)
xcomp(allows-8, lift-11)
det(improvements-14, all-12)
amod(improvements-14, future-13)
dobj(lift-11, improvements-14)
case(SAT-16, in-15)
nmod:in(lift-11, SAT-16)
acl(SAT-16, solving-17)
case(QBF-19, to-18)
nmod:to(solving-17, QBF-19)

(ROOT
  (S
    (ADVP (RB Thirdly))
    (, ,)
    (NP (PRP$ our) (NN solver))
    (VP (VBD was) (RB not)
      (VP (VBN optimised)
        (PP (IN for)
          (NP (NNP QBF) (NNP solving)))))
    (. .)))

advmod(optimised-7, Thirdly-1)
nmod:poss(solver-4, our-3)
nsubjpass(optimised-7, solver-4)
auxpass(optimised-7, was-5)
neg(optimised-7, not-6)
root(ROOT-0, optimised-7)
case(solving-10, for-8)
compound(solving-10, QBF-9)
nmod:for(optimised-7, solving-10)

(ROOT
  (S
    (NP (JJ Several) (NNS optimisations))
    (VP (VBP are)
      (ADJP (JJ possible)))
    (. .)))

amod(optimisations-2, Several-1)
nsubj(possible-4, optimisations-2)
cop(possible-4, are-3)
root(ROOT-0, possible-4)

(ROOT
  (S
    (NP (PRP We))
    (VP (VB discuss)
      (NP
        (NP (CD three))
        (PP (IN of)
          (NP (PRP them))))
      (PP (IN below)))
    (. .)))

nsubj(discuss-2, We-1)
root(ROOT-0, discuss-2)
dobj(discuss-2, three-3)
case(them-5, of-4)
nmod:of(three-3, them-5)
nmod(discuss-2, below-6)

(ROOT
  (S
    (NP
      (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
      (NP (CD One) (RB particularly) (JJ useful) (NN optimisation)))
    (VP (MD would)
      (VP (VB be)
        (S
          (VP (TO to)
            (VP (VB detect)
              (NP (JJ Tseitin) (NNS variables)))))))
    (. .)))

nsubj(be-9, i-2)
nsubj:xsubj(detect-11, i-2)
nummod(optimisation-7, One-4)
advmod(optimisation-7, particularly-5)
amod(optimisation-7, useful-6)
dep(i-2, optimisation-7)
aux(be-9, would-8)
root(ROOT-0, be-9)
mark(detect-11, to-10)
xcomp(be-9, detect-11)
amod(variables-13, Tseitin-12)
dobj(detect-11, variables-13)

(ROOT
  (S
    (S
      (NP
        (NP (NNP QBF) (NNS specifications))
        (PP (IN in)
          (NP (DT the) (NNP QBFLIB))))
      (ADVP (RB often))
      (VP (VBP contain)
        (NP
          (NP (NNS patterns))
          (PP (IN of)
            (NP (DT the) (NN form))))))
    (: :) (: :)
    (S
      (NP
        (NP
          (NP (NNP :))
          (-LRB- -LRB-)
          (NP (NN p))
          (PRN (-LRB- -LRB-)
            (NP (NNP ,))
            (-RRB- -RRB-))
          (-RRB- -RRB-))
        (, ,)
        (PP (IN with)
          (NP
            (NP (NN p))
            (, ,)
            (SBAR
              (WHNP (WDT which))
              (S
                (VP (VBZ is)
                  (ADJP (JJ equivalent)
                    (PP (TO to))))
                (: :)))))
        (, ,))
      (VP (VBP p)
        (NP
          (NP
            (NP (NNP :))
            (-LRB- -LRB-)
            (NP (NN p))
            (PRN (-LRB- -LRB-)
              (NP (NNP ,))
              (-RRB- -RRB-))
            (-RRB- -RRB-))
          (PRN (-LRB- -LRB-)
            (S
              (VP (VB \) (-LRB- -LCB-)
                (NP (NN p))
                (-RRB- -RCB-)))
            (-RRB- -RRB-)))))
    (: :) (. .)))

compound(specifications-2, QBF-1)
nsubj(contain-7, specifications-2)
case(QBFLIB-5, in-3)
det(QBFLIB-5, the-4)
nmod:in(specifications-2, QBFLIB-5)
advmod(contain-7, often-6)
root(ROOT-0, contain-7)
dobj(contain-7, patterns-8)
case(form-11, of-9)
det(form-11, the-10)
nmod:of(patterns-8, form-11)
nsubj(p-31, :-14)
dep(:-14, p-16)
appos(:-14, ,-18)
case(p-23, with-22)
nmod:with(:-14, p-23)
nsubj(equivalent-27, p-23)
ref(p-23, which-25)
cop(equivalent-27, is-26)
acl:relcl(p-23, equivalent-27)
nmod(equivalent-27, to-28)
parataxis(contain-7, p-31)
dobj(p-31, :-32)
dep(:-32, p-34)
appos(:-32, ,-36)
dep(:-32, \-40)
dobj(\-40, p-42)

(ROOT
  (S
    (NP (CD 6) (JJ Related) (NN Work))
    (ADVP (RB There))
    (VP (VBP exist)
      (S
        (NP (JJ many) (JJ CDCL-based) (NNS algorithms))
        (VP (TO to)
          (VP (VB solve)
            (NP (NNP QBF) (NNS instances))))))
    (. .)))

nummod(Work-3, 6-1)
amod(Work-3, Related-2)
nsubj(exist-5, Work-3)
advmod(exist-5, There-4)
root(ROOT-0, exist-5)
amod(algorithms-8, many-6)
amod(algorithms-8, CDCL-based-7)
dobj(exist-5, algorithms-8)
nsubj:xsubj(solve-10, algorithms-8)
mark(solve-10, to-9)
xcomp(exist-5, solve-10)
compound(instances-12, QBF-11)
dobj(solve-10, instances-12)

(ROOT
  (S
    (NP (PRP$ Our) (NN approach))
    (VP (VBZ differs)
      (PP (IN from)
        (NP
          (NP (JJS most))
          (PP (IN of)
            (NP (PRP them)))))
      (PP (IN in)
        (NP (CD three) (NNS aspects))))
    (. .)))

nmod:poss(approach-2, Our-1)
nsubj(differs-3, approach-2)
root(ROOT-0, differs-3)
case(most-5, from-4)
nmod:from(differs-3, most-5)
case(them-7, of-6)
nmod:of(most-5, them-7)
case(aspects-10, in-8)
nummod(aspects-10, three-9)
nmod:in(differs-3, aspects-10)

(ROOT
  (S
    (LST (-LRB- -LRB-) (LS 1) (-RRB- -RRB-))
    (PP (IN Using)
      (NP (NNS under-approximations)))
    (, ,)
    (NP (PRP we))
    (VP (VBD circumvent)
      (NP (DT a) (JJ common) (NN limitation))
      (PP (IN in)
        (NP (NNP QBF)))
      (S
        (VP (VBG solving)
          (SBAR (IN that)
            (S
              (NP (NNS variables))
              (VP (MD must)
                (VP (VB be)
                  (VP (VBN chosen)
                    (PP (IN in)
                      (NP (NN accordance)))
                    (PP (TO to)
                      (NP (DT the) (NN quantifier) (NN prefix)))))))))))
    (. .)))

dep(circumvent-8, 1-2)
case(under-approximations-5, Using-4)
nmod:using(circumvent-8, under-approximations-5)
nsubj(circumvent-8, we-7)
root(ROOT-0, circumvent-8)
det(limitation-11, a-9)
amod(limitation-11, common-10)
dobj(circumvent-8, limitation-11)
case(QBF-13, in-12)
nmod:in(circumvent-8, QBF-13)
xcomp(circumvent-8, solving-14)
mark(chosen-19, that-15)
nsubjpass(chosen-19, variables-16)
aux(chosen-19, must-17)
auxpass(chosen-19, be-18)
ccomp(solving-14, chosen-19)
case(accordance-21, in-20)
nmod:in(chosen-19, accordance-21)
case(prefix-25, to-22)
det(prefix-25, the-23)
compound(prefix-25, quantifier-24)
nmod:to(chosen-19, prefix-25)

(ROOT
  (S
    (ADVP (RB Thus))
    (, ,)
    (NP (JJ nested) (NNS solvers))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN called)
          (ADVP (RBR earlier))
          (, ,)
          (PP (IN during)
            (NP
              (NP (DT the) (NN search) (NN process))
              (PP (IN of)
                (NP
                  (NP (DT a) (NN solver))
                  (, ,)
                  (SBAR (IN before)
                    (S
                      (NP (DT a) (NN solver))
                      (VP (VBZ has)
                        (VP (VBN found)
                          (NP (DT a) (JJ complete) (NN assignment)))))))))))))
    (. .)))

advmod(called-7, Thus-1)
amod(solvers-4, nested-3)
nsubjpass(called-7, solvers-4)
aux(called-7, can-5)
auxpass(called-7, be-6)
root(ROOT-0, called-7)
advmod(called-7, earlier-8)
case(process-13, during-10)
det(process-13, the-11)
compound(process-13, search-12)
nmod:during(called-7, process-13)
case(solver-16, of-14)
det(solver-16, a-15)
nmod:of(process-13, solver-16)
mark(found-22, before-18)
det(solver-20, a-19)
nsubj(found-22, solver-20)
aux(found-22, has-21)
acl(solver-16, found-22)
det(assignment-25, a-23)
amod(assignment-25, complete-24)
dobj(found-22, assignment-25)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ leads)
      (PP (TO to)
        (NP (JJR faster) (NN propagation))))
    (. .)))

nsubj(leads-2, This-1)
root(ROOT-0, leads-2)
case(propagation-5, to-3)
amod(propagation-5, faster-4)
nmod:to(leads-2, propagation-5)

(ROOT
  (S
    (LST (-LRB- -LRB-) (LS 2) (-RRB- -RRB-))
    (NP (PRP We))
    (VP (VBP treat)
      (NP (JJ existential)
        (CC and)
        (JJ universal) (NNS quantifiers))
      (ADVP (RB symmetrically)))
    (. .)))

dep(treat-5, 2-2)
nsubj(treat-5, We-4)
root(ROOT-0, treat-5)
amod(quantifiers-9, existential-6)
cc(existential-6, and-7)
conj:and(existential-6, universal-8)
amod(quantifiers-9, universal-8)
dobj(treat-5, quantifiers-9)
advmod(treat-5, symmetrically-10)

(ROOT
  (S
    (INTJ (DT That) (VBZ is))
    (, ,)
    (S
      (NP (PDT all) (PRP$ our) (NNS algorithms))
      (VP (VBP are)
        (VP (VBN defined)
          (PRN
            (PP (IN for)
              (NP
                (NP (NNS theories))
                (PP (IN of)
                  (NP (DT the) (NN form))
                  (: :)))
              (: :))
            (, ,))
          (SBAR
            (WHADVP (WRB where))
            (S
              (NP (CC neither)
                (NP
                  (NP (DT the) (NN structure))
                  (PP (IN of)))
                (, ,)
                (CC nor)
                (NP
                  (NP (DT the) (NN context))
                  (SBAR
                    (WHPP (IN in)
                      (WHNP (WDT which)))
                    (S
                      (NP (DT this) (NN formula))
                      (VP (VBZ occurs))))))
              (VP (VBZ matters)))))))
    (. .)))

discourse(defined-8, That-1)
mwe(That-1, is-2)
det:predet(algorithms-6, all-4)
nmod:poss(algorithms-6, our-5)
nsubjpass(defined-8, algorithms-6)
auxpass(defined-8, are-7)
root(ROOT-0, defined-8)
case(theories-10, for-9)
dep(defined-8, theories-10)
case(form-13, of-11)
det(form-13, the-12)
nmod:of(theories-10, form-13)
advmod(matters-31, where-17)
cc:preconj(structure-20, neither-18)
det(structure-20, the-19)
nsubj(matters-31, structure-20)
acl(structure-20, of-21)
cc(structure-20, nor-23)
det(context-25, the-24)
conj:nor(structure-20, context-25)
nmod:in(occurs-30, context-25)
nsubj(matters-31, context-25)
case(which-27, in-26)
ref(context-25, which-27)
det(formula-29, this-28)
nsubj(occurs-30, formula-29)
acl:relcl(context-25, occurs-30)
advcl(defined-8, matters-31)

(ROOT
  (S
    (LST (-LRB- -LRB-) (LS 3) (-RRB- -RRB-))
    (PP (VBN Given)
      (SBAR (IN that)
        (S
          (NP (PRP$ our) (NN approach))
          (VP (VBZ is)
            (ADJP (JJ applicable)
              (PP (TO to)
                (NP (DT any) (NNP SAT) (NN solver))))))))
    (, ,)
    (NP (PRP we))
    (VP (VBP gain)
      (NP (DT an) (NN engineering) (NN advantage))
      (PP (IN over)
        (NP
          (NP (JJ many) (VBG existing) (NN QBF))
          (VP (VBG solving)
            (NP (NNS techniques))))))
    (. .)))

dep(gain-16, 3-2)
mark(applicable-9, Given-4)
mark(applicable-9, that-5)
nmod:poss(approach-7, our-6)
nsubj(applicable-9, approach-7)
cop(applicable-9, is-8)
advcl(gain-16, applicable-9)
case(solver-13, to-10)
det(solver-13, any-11)
compound(solver-13, SAT-12)
nmod:to(applicable-9, solver-13)
nsubj(gain-16, we-15)
root(ROOT-0, gain-16)
det(advantage-19, an-17)
compound(advantage-19, engineering-18)
dobj(gain-16, advantage-19)
case(QBF-23, over-20)
amod(QBF-23, many-21)
amod(QBF-23, existing-22)
nmod:over(gain-16, QBF-23)
acl(QBF-23, solving-24)
dobj(solving-24, techniques-25)

(ROOT
  (S
    (NP
      (NP (DT The) (NN idea))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBG using)
            (NP (DT an) (NNP NP) (NN oracle))
            (PP (IN inside)
              (NP
                (NP (DT an) (JJ NP-solver) (NNS results))
                (PP (IN in)
                  (NP
                    (NP (DT a) (NN solver))
                    (PP (IN for)
                      (NP (NNP P) (CD 2)))))))))))
    (PRN (-LRB- -LRB-)
      (VP (VB and) (, ,)
        (ADVP (RB similarly))
        (, ,)
        (PP (IN for)
          (NP
            (NP (DT the) (NN rest))
            (PP (IN of)
              (NP (JJ polynomial) (NN hierarchy))))))
      (-RRB- -RRB-))
    (VP
      (VP (VBZ is) (RB not)
        (ADJP (JJ new)))
      (CC and)
      (VP
        (ADVP (RB directly))
        (VBZ follows)
        (NP
          (NP (DT the) (NN definition))
          (PP (IN of)
            (NP (DT these) (NN complexity) (NNS classes))))))
    (. .)))

det(idea-2, The-1)
nsubj(using-4, idea-2)
nsubj(new-32, idea-2)
nsubj(follows-35, idea-2)
ref(idea-2, that-3)
acl:relcl(idea-2, using-4)
det(oracle-7, an-5)
compound(oracle-7, NP-6)
dobj(using-4, oracle-7)
case(results-11, inside-8)
det(results-11, an-9)
amod(results-11, NP-solver-10)
nmod:inside(using-4, results-11)
case(solver-14, in-12)
det(solver-14, a-13)
nmod:in(results-11, solver-14)
case(P-16, for-15)
nmod:for(solver-14, P-16)
nummod(P-16, 2-17)
dep(new-32, and-19)
advmod(and-19, similarly-21)
case(rest-25, for-23)
det(rest-25, the-24)
nmod:for(and-19, rest-25)
case(hierarchy-28, of-26)
amod(hierarchy-28, polynomial-27)
nmod:of(rest-25, hierarchy-28)
cop(new-32, is-30)
neg(new-32, not-31)
root(ROOT-0, new-32)
cc(new-32, and-33)
advmod(follows-35, directly-34)
conj:and(new-32, follows-35)
det(definition-37, the-36)
dobj(follows-35, definition-37)
case(classes-41, of-38)
det(classes-41, these-39)
compound(classes-41, complexity-40)
nmod:of(definition-37, classes-41)

(ROOT
  (S
    (NP (DT This) (NN idea))
    (VP (VBZ has)
      (ADVP (RB also))
      (VP (VBN been)
        (VP (VBN applied)
          (ADVP (RB before))
          (S
            (VP (TO to)
              (VP (VB obtain)
                (NP
                  (NP (DT a) (NNP QBF) (NN solver))
                  (PRN (-LRB- -LRB-)
                    (NP
                      (NP (NNP Ranjan))
                      (, ,)
                      (NP (NNP Tang))
                      (, ,)
                      (CC and)
                      (NP (NNP Malik) (CD 2004)))
                    (-RRB- -RRB-)))))))))
    (. .)))

det(idea-2, This-1)
nsubjpass(applied-6, idea-2)
nsubj:xsubj(obtain-9, idea-2)
aux(applied-6, has-3)
advmod(applied-6, also-4)
auxpass(applied-6, been-5)
root(ROOT-0, applied-6)
advmod(applied-6, before-7)
mark(obtain-9, to-8)
xcomp(applied-6, obtain-9)
det(solver-12, a-10)
compound(solver-12, QBF-11)
dobj(obtain-9, solver-12)
dep(solver-12, Ranjan-14)
dep(solver-12, Tang-16)
conj:and(Ranjan-14, Tang-16)
cc(Ranjan-14, and-18)
dep(solver-12, Malik-19)
conj:and(Ranjan-14, Malik-19)
nummod(Malik-19, 2004-20)

(ROOT
  (S
    (S
      (NP (PRP$ Our) (NN approach))
      (VP (VBZ is)
        (ADJP (JJ different)
          (PP (IN in)
            (NP
              (NP (CD two) (JJ main) (NNS ways))
              (PP (IN from)
                (NP (NNP Ranjan) (, ,) (NNP Tang) (, ,)
                  (CC and)
                  (NNP Malik))))))
        (PRN (-LRB- -LRB-)
          (NP (CD 2004))
          (-RRB- -RRB-))))
    (: :)
    (S
      (S
        (LST (-LRB- -LRB-) (LS 1) (-RRB- -RRB-))
        (NP (PRP we))
        (VP (VBP use)
          (PP (IN of)
            (NP (NNS underapproximations)))))
      (, ,)
      (CC and)
      (S
        (LST (-LRB- -LRB-) (LS 2) (-RRB- -RRB-))
        (NP (PRP we))
        (VP (VBP are) (RB not)
          (VP (VBN limited)
            (PP (TO to)
              (NP (CD 2QBF)))))))
    (. .)))

nmod:poss(approach-2, Our-1)
nsubj(different-4, approach-2)
cop(different-4, is-3)
root(ROOT-0, different-4)
case(ways-8, in-5)
nummod(ways-8, two-6)
amod(ways-8, main-7)
nmod:in(different-4, ways-8)
case(Ranjan-10, from-9)
nmod:from(ways-8, Ranjan-10)
nmod:from(ways-8, Tang-12)
conj:and(Ranjan-10, Tang-12)
cc(Ranjan-10, and-14)
nmod:from(ways-8, Malik-15)
conj:and(Ranjan-10, Malik-15)
dep(different-4, 2004-17)
dep(use-24, 1-21)
nsubj(use-24, we-23)
parataxis(different-4, use-24)
case(underapproximations-26, of-25)
nmod:of(use-24, underapproximations-26)
cc(use-24, and-28)
dep(limited-35, 2-30)
nsubjpass(limited-35, we-32)
auxpass(limited-35, are-33)
neg(limited-35, not-34)
parataxis(different-4, limited-35)
conj:and(use-24, limited-35)
case(2QBF-37, to-36)
nmod:to(limited-35, 2QBF-37)

(ROOT
  (S
    (NP (DT These) (NNS ideas))
    (VP (VBP have)
      (VP (VBN been)
        (VP (VBN integrated)
          (PP (IN with)
            (NP
              (NP (DT a) (JJ new) (NN learning) (NN technique))
              (VP (VBN known)
                (PP (IN as)
                  (NP
                    (NP
                      (NP (NNP Counterexample) (NNP Guided) (NNP Abstraction) (NNP Refinement))
                      (PRN (-LRB- -LRB-)
                        (NP (NNP CEGAR))
                        (-RRB- -RRB-)))
                    (PRN (-LRB- -LRB-)
                      (NP
                        (NP (NNP Janota))
                        (CC et)
                        (NP (NN al.) (CD 2012)))
                      (-RRB- -RRB-))))))))))
    (. .)))

det(ideas-2, These-1)
nsubjpass(integrated-5, ideas-2)
aux(integrated-5, have-3)
auxpass(integrated-5, been-4)
root(ROOT-0, integrated-5)
case(technique-10, with-6)
det(technique-10, a-7)
amod(technique-10, new-8)
compound(technique-10, learning-9)
nmod:with(integrated-5, technique-10)
acl(technique-10, known-11)
case(Refinement-16, as-12)
compound(Refinement-16, Counterexample-13)
compound(Refinement-16, Guided-14)
compound(Refinement-16, Abstraction-15)
nmod:as(known-11, Refinement-16)
appos(Refinement-16, CEGAR-18)
dep(Refinement-16, Janota-21)
cc(Janota-21, et-22)
dep(Refinement-16, al.-23)
conj:et(Janota-21, al.-23)
nummod(al.-23, 2012-24)

(ROOT
  (S
    (S
      (NP (NNP CEGAR))
      (VP (VBZ enables)
        (NP
          (NP (JJ gradual) (NN expansion))
          (PP (IN of)
            (NP (DT a) (NNP QBF) (NN instance))))))
    (CC and)
    (, ,)
    (S
      (PP (IN in)
        (NP (DT that) (NN sense)))
      (, ,)
      (NP (PRP$ our) (NN approach))
      (VP (VBZ is)
        (ADJP (JJ similar)
          (PP (TO to)
            (NP (NNP CEGAR))))))
    (. .)))

nsubj(enables-2, CEGAR-1)
root(ROOT-0, enables-2)
amod(expansion-4, gradual-3)
dobj(enables-2, expansion-4)
case(instance-8, of-5)
det(instance-8, a-6)
compound(instance-8, QBF-7)
nmod:of(expansion-4, instance-8)
cc(enables-2, and-9)
case(sense-13, in-11)
det(sense-13, that-12)
nmod:in(similar-18, sense-13)
nmod:poss(approach-16, our-15)
nsubj(similar-18, approach-16)
cop(similar-18, is-17)
conj:and(enables-2, similar-18)
case(CEGAR-20, to-19)
nmod:to(similar-18, CEGAR-20)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (PP (IN unlike)
      (NP (NNP CEGAR)))
    (, ,)
    (NP (PRP$ our) (NN approach))
    (VP
      (VP (VBZ generates)
        (NP
          (NP (RB only) (CD one) (NN solver))
          (PP (IN per)
            (NP (NN quantification) (NN level)))))
      (CC and)
      (VP (VBZ maintains)
        (NP
          (NP (DT the) (NNS states))
          (PP (IN of)
            (NP
              (NP (DT those) (NNS solvers))
              (PP (IN for)
                (NP (JJR faster) (NN search))))))))
    (. .)))

advmod(generates-8, However-1)
case(CEGAR-4, unlike-3)
nmod:unlike(generates-8, CEGAR-4)
nmod:poss(approach-7, our-6)
nsubj(generates-8, approach-7)
nsubj(maintains-16, approach-7)
root(ROOT-0, generates-8)
advmod(solver-11, only-9)
nummod(solver-11, one-10)
dobj(generates-8, solver-11)
case(level-14, per-12)
compound(level-14, quantification-13)
nmod:per(solver-11, level-14)
cc(generates-8, and-15)
conj:and(generates-8, maintains-16)
det(states-18, the-17)
dobj(maintains-16, states-18)
case(solvers-21, of-19)
det(solvers-21, those-20)
nmod:of(states-18, solvers-21)
case(search-24, for-22)
amod(search-24, faster-23)
nmod:for(solvers-21, search-24)

(ROOT
  (S
    (ADVP (RB Recently))
    (, ,)
    (NP
      (NP (NNP Rabe)
        (CC and)
        (NNP Tentrup))
      (PRN (-LRB- -LRB-)
        (NP (CD 2015))
        (-RRB- -RRB-)))
    (VP (VBD introduced)
      (NP
        (NP (DT a) (JJ new) (NN extension))
        (PP (IN of)
          (NP
            (NP (DT the) (JJ CEGAR) (NN approach))
            (SBAR
              (WHNP (WDT that))
              (S
                (ADVP (RB also))
                (VP (VBZ uses)
                  (NP
                    (NP
                      (NP (CD one) (NN solver))
                      (PP (IN per)
                        (NP (NN quantifier) (NN level))))
                    (CONJP (RB as) (RB well) (IN as))
                    (NP
                      (NP (DT a) (NN form))
                      (PP (IN of)
                        (NP (NN clause) (NN selection))))))))))))
    (. .)))

advmod(introduced-9, Recently-1)
nsubj(introduced-9, Rabe-3)
cc(Rabe-3, and-4)
conj:and(Rabe-3, Tentrup-5)
nsubj(introduced-9, Tentrup-5)
appos(Rabe-3, 2015-7)
root(ROOT-0, introduced-9)
det(extension-12, a-10)
amod(extension-12, new-11)
dobj(introduced-9, extension-12)
case(approach-16, of-13)
det(approach-16, the-14)
amod(approach-16, CEGAR-15)
nmod:of(extension-12, approach-16)
nsubj(uses-19, approach-16)
ref(approach-16, that-17)
advmod(uses-19, also-18)
acl:relcl(approach-16, uses-19)
nummod(solver-21, one-20)
dobj(uses-19, solver-21)
case(level-24, per-22)
compound(level-24, quantifier-23)
nmod:per(solver-21, level-24)
cc(solver-21, as-25)
mwe(as-25, well-26)
mwe(as-25, as-27)
det(form-29, a-28)
dobj(uses-19, form-29)
conj:and(solver-21, form-29)
case(selection-32, of-30)
compound(selection-32, clause-31)
nmod:of(form-29, selection-32)

(ROOT
  (S
    (NP (PRP$ Our) (NN work))
    (VP (VBZ is)
      (ADJP (JJ different)
        (PP (IN from)
          (NP
            (NP
              (NP (PRP theirs))
              (PP (RB because) (IN of)
                (NP (PRP$ our) (NN underapproximation) (NN technique))))
            (CC and)
            (NP
              (NP (PRP$ our) (JJ uniform) (NN treatment))
              (PP (IN of)
                (NP (JJ existential)
                  (CC and)
                  (JJ universal) (NNS quantifiers))))))))
    (. .)))

nmod:poss(work-2, Our-1)
nsubj(different-4, work-2)
cop(different-4, is-3)
root(ROOT-0, different-4)
case(theirs-6, from-5)
nmod:from(different-4, theirs-6)
case(technique-11, because-7)
mwe(because-7, of-8)
nmod:poss(technique-11, our-9)
compound(technique-11, underapproximation-10)
nmod:because_of(theirs-6, technique-11)
cc(theirs-6, and-12)
nmod:poss(treatment-15, our-13)
amod(treatment-15, uniform-14)
nmod:from(different-4, treatment-15)
conj:and(theirs-6, treatment-15)
case(quantifiers-20, of-16)
amod(quantifiers-20, existential-17)
cc(existential-17, and-18)
conj:and(existential-17, universal-19)
amod(quantifiers-20, universal-19)
nmod:of(treatment-15, quantifiers-20)

(ROOT
  (S
    (ADVP (RB Also))
    (, ,)
    (ADVP (RB recently))
    (, ,)
    (NP
      (NP (NNP Janota)
        (CC and)
        (NNP Marques-Silva))
      (PRN (-LRB- -LRB-)
        (NP (CD 2015))
        (-RRB- -RRB-)))
    (VP (VBD presented)
      (NP (DT a) (NNP QBF) (NN solver))
      (PP (VBN based)
        (PP (IN on)
          (NP
            (NP (NN clause) (NN selection))
            (SBAR
              (WHNP (WDT which))
              (S (, ,)
                (ADVP (RB again))
                (, ,)
                (VP (VBZ is)
                  (ADJP (JJ different)
                    (PP (IN from)
                      (NP
                        (NP
                          (NP (PRP$ our) (NN algorithm))
                          (ADJP (JJ due)
                            (PP (TO to)
                              (NP (PRP$ our) (NN underapproximation) (NN technique)))))
                        (CC and)
                        (NP
                          (NP (PRP$ our) (JJ uniform) (NN treatment))
                          (PP (IN of)
                            (NP (NNS quantifiers))))))))))))))
    (. .)))

advmod(presented-11, Also-1)
advmod(presented-11, recently-3)
nsubj(presented-11, Janota-5)
cc(Janota-5, and-6)
conj:and(Janota-5, Marques-Silva-7)
nsubj(presented-11, Marques-Silva-7)
appos(Janota-5, 2015-9)
root(ROOT-0, presented-11)
det(solver-14, a-12)
compound(solver-14, QBF-13)
dobj(presented-11, solver-14)
case(selection-18, based-15)
mwe(based-15, on-16)
compound(selection-18, clause-17)
advcl(presented-11, selection-18)
nsubj(different-24, selection-18)
ref(selection-18, which-19)
advmod(different-24, again-21)
cop(different-24, is-23)
acl:relcl(selection-18, different-24)
case(algorithm-27, from-25)
nmod:poss(algorithm-27, our-26)
nmod:from(different-24, algorithm-27)
amod(algorithm-27, due-28)
case(technique-32, to-29)
nmod:poss(technique-32, our-30)
compound(technique-32, underapproximation-31)
nmod:to(due-28, technique-32)
cc(algorithm-27, and-33)
nmod:poss(treatment-36, our-34)
amod(treatment-36, uniform-35)
nmod:from(different-24, treatment-36)
conj:and(algorithm-27, treatment-36)
case(quantifiers-38, of-37)
nmod:of(treatment-36, quantifiers-38)

(ROOT
  (S
    (NP
      (NP (DT Another) (NN point))
      (SBAR
        (WHADVP (WRB where))
        (S
          (NP (PRP$ our) (NN approach))
          (VP (VBZ differs)
            (PP (IN from)
              (NP (PRP theirs)))))))
    (VP (VBZ relates)
      (PP (TO to)
        (NP (DT the) (JJ learnt) (NNS clauses))))
    (. .)))

det(point-2, Another-1)
nsubj(relates-9, point-2)
advmod(differs-6, where-3)
nmod:poss(approach-5, our-4)
nsubj(differs-6, approach-5)
acl:relcl(point-2, differs-6)
case(theirs-8, from-7)
nmod:from(differs-6, theirs-8)
root(ROOT-0, relates-9)
case(clauses-13, to-10)
det(clauses-13, the-11)
amod(clauses-13, learnt-12)
nmod:to(relates-9, clauses-13)

(ROOT
  (S
    (NP (PRP$ Their) (NN approach))
    (VP (VBZ uses)
      (NP
        (NP (DT an) (JJ extended) (NN language))
        (PP (IN of)
          (S
            (VP (VBG learning)
              (SBAR
                (WHADVP (WRB where))
                (S
                  (NP (DT each) (NN clause))
                  (VP (VBZ is)
                    (VP (VBN associated)
                      (PP (IN with)
                        (NP
                          (NP (NNS variables))
                          (SBAR
                            (WHNP (WDT that))
                            (S
                              (VP (VBP express)
                                (SBAR (IN whether)
                                  (S
                                    (NP (DT that) (NN clause))
                                    (VP (VBZ is)
                                      (VP
                                        (VP (VBN selected))
                                        (PRN (-LRB- -LRB-)
                                          (S
                                            (NP (NNP i.e.) (, ,))
                                            (VP (MD should)
                                              (VP (VB be)
                                                (VP (VBN satisfied)
                                                  (PP (IN in)
                                                    (NP (JJR lower) (NNS levels)))))))
                                          (-RRB- -RRB-))
                                        (CC or)
                                        (VP (VBN deselected)
                                          (PRN (-LRB- -LRB-)
                                            (S
                                              (NP (NNP i.e.) (, ,))
                                              (VP (VBZ is)
                                                (ADJP (RB already) (VBN satisfied))))
                                            (-RRB- -RRB-))
                                          (PP (IN at)
                                            (NP (DT a) (JJ certain) (NN level))))))))))))))))))))))
    (. .)))

nmod:poss(approach-2, Their-1)
nsubj(uses-3, approach-2)
root(ROOT-0, uses-3)
det(language-6, an-4)
amod(language-6, extended-5)
dobj(uses-3, language-6)
mark(learning-8, of-7)
acl(language-6, learning-8)
advmod(associated-13, where-9)
det(clause-11, each-10)
nsubjpass(associated-13, clause-11)
auxpass(associated-13, is-12)
advcl(learning-8, associated-13)
case(variables-15, with-14)
nmod:with(associated-13, variables-15)
nsubj(express-17, variables-15)
ref(variables-15, that-16)
acl:relcl(variables-15, express-17)
mark(selected-22, whether-18)
det(clause-20, that-19)
nsubjpass(selected-22, clause-20)
nsubjpass(deselected-34, clause-20)
auxpass(selected-22, is-21)
ccomp(express-17, selected-22)
nsubjpass(satisfied-28, i.e.-24)
aux(satisfied-28, should-26)
auxpass(satisfied-28, be-27)
parataxis(selected-22, satisfied-28)
case(levels-31, in-29)
amod(levels-31, lower-30)
nmod:in(satisfied-28, levels-31)
cc(selected-22, or-33)
ccomp(express-17, deselected-34)
conj:or(selected-22, deselected-34)
nsubjpass(satisfied-40, i.e.-36)
auxpass(satisfied-40, is-38)
advmod(satisfied-40, already-39)
parataxis(deselected-34, satisfied-40)
case(level-45, at-42)
det(level-45, a-43)
amod(level-45, certain-44)
nmod:at(deselected-34, level-45)

(ROOT
  (S
    (NP (JJ Learnt) (NNS clauses))
    (VP (VBP are)
      (ADVP (RB always))
      (PP (IN over)
        (NP (DT these) (JJ new) (, ,) (JJ so-called) (NN clause) (NN selection) (NNS variables))))
    (. .)))

amod(clauses-2, Learnt-1)
nsubj(variables-12, clauses-2)
cop(variables-12, are-3)
advmod(variables-12, always-4)
case(variables-12, over-5)
det(variables-12, these-6)
amod(variables-12, new-7)
amod(variables-12, so-called-9)
compound(variables-12, clause-10)
compound(variables-12, selection-11)
root(ROOT-0, variables-12)

(ROOT
  (S
    (NP (PRP$ Their) (NN method))
    (VP (VBZ allows)
      (S
        (VP (TO to)
          (VP
            (ADVP (RB succinctly))
            (VB represent)
            (NP
              (NP (JJ many) (NNS clauses))
              (VP (VBG invalidating)
                (NP
                  (NP
                    (NP (JJ different) (NNP J) (POS 's))
                    (ADJP (RB that) (JJ explain))
                    (NN satisfiability))
                  (ADVP (IN at) (RB once)))
                (PRN (-LRB- -LRB-)
                  (ADJP (JJ similar)
                    (PP (TO to)
                      (NP
                        (NP (DT the) (NN technique))
                        (VP (VBN presented)
                          (PP (IN in)
                            (NP (NNP Example) (CD 5.1)))))))
                  (-RRB- -RRB-))))))))
    (. .)))

nmod:poss(method-2, Their-1)
nsubj(allows-3, method-2)
nsubj:xsubj(represent-6, method-2)
root(ROOT-0, allows-3)
mark(represent-6, to-4)
advmod(represent-6, succinctly-5)
xcomp(allows-3, represent-6)
amod(clauses-8, many-7)
dobj(represent-6, clauses-8)
acl(clauses-8, invalidating-9)
amod(J-11, different-10)
nmod:poss(satisfiability-15, J-11)
case(J-11, 's-12)
advmod(explain-14, that-13)
amod(satisfiability-15, explain-14)
dobj(invalidating-9, satisfiability-15)
case(once-17, at-16)
advmod(satisfiability-15, once-17)
dep(invalidating-9, similar-19)
case(technique-22, to-20)
det(technique-22, the-21)
nmod:to(similar-19, technique-22)
acl(technique-22, presented-23)
case(Example-25, in-24)
nmod:in(presented-23, Example-25)
nummod(Example-25, 5.1-26)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP are)
      (ADJP (VBN convinced)
        (SBAR (IN that)
          (S
            (NP
              (NP (DT the) (JJ extended) (NN language))
              (PP (IN of)
                (NP (NN learning))))
            (VP (VBZ is)
              (ADJP (JJ beneficial)
                (S
                  (VP (TO to)
                    (VP (VB QBF)
                      (S
                        (VP (VBG solving))))))))))))
    (. .)))

nsubjpass(convinced-3, We-1)
auxpass(convinced-3, are-2)
root(ROOT-0, convinced-3)
mark(beneficial-11, that-4)
det(language-7, the-5)
amod(language-7, extended-6)
nsubj(beneficial-11, language-7)
nsubj:xsubj(QBF-13, language-7)
case(learning-9, of-8)
nmod:of(language-7, learning-9)
cop(beneficial-11, is-10)
ccomp(convinced-3, beneficial-11)
mark(QBF-13, to-12)
xcomp(beneficial-11, QBF-13)
xcomp(QBF-13, solving-14)

(ROOT
  (S
    (S
      (VP (VBG Investigating)
        (NP
          (NP (DT the) (JJ exact) (NN effect))
          (PP (IN of)
            (NP
              (NP (DT this) (NN aspect))
              (PP (IN on)
                (NP (NN solver) (NN performance))))))))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN topic))
        (PP (IN for)
          (NP (JJ future) (NN work)))))
    (. .)))

csubj(topic-13, Investigating-1)
det(effect-4, the-2)
amod(effect-4, exact-3)
dobj(Investigating-1, effect-4)
case(aspect-7, of-5)
det(aspect-7, this-6)
nmod:of(effect-4, aspect-7)
case(performance-10, on-8)
compound(performance-10, solver-9)
nmod:on(aspect-7, performance-10)
cop(topic-13, is-11)
det(topic-13, a-12)
root(ROOT-0, topic-13)
case(work-16, for-14)
amod(work-16, future-15)
nmod:for(topic-13, work-16)

(ROOT
  (S
    (NP (JJ Several) (NNP QBF) (NNS solvers))
    (VP (VBP combine)
      (NP
        (NP (NNP CDCL))
        (PP (IN with)
          (NP
            (NP (JJ solution-driven) (NN cube) (NN learning))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NNP Zhang)
                  (CC and)
                  (NNP Malik) (NNP 2002))
                (: ;)
                (NP (NNP Goultiaeva) (, ,) (NNP Seidl) (, ,)
                  (CC and)
                  (NNP Biere) (NNP 2013)))
              (-RRB- -RRB-))))))
    (. .)))

amod(solvers-3, Several-1)
compound(solvers-3, QBF-2)
nsubj(combine-4, solvers-3)
root(ROOT-0, combine-4)
dobj(combine-4, CDCL-5)
case(learning-9, with-6)
amod(learning-9, solution-driven-7)
compound(learning-9, cube-8)
nmod:with(CDCL-5, learning-9)
compound(2002-14, Zhang-11)
cc(Zhang-11, and-12)
conj:and(Zhang-11, Malik-13)
compound(2002-14, Malik-13)
dep(learning-9, 2002-14)
compound(Seidl-18, Goultiaeva-16)
dep(2002-14, Seidl-18)
cc(Seidl-18, and-20)
compound(2013-22, Biere-21)
dep(2002-14, 2013-22)
conj:and(Seidl-18, 2013-22)

(ROOT
  (S
    (S
      (NP (DT A) (NN cube))
      (VP (VBZ is)
        (NP
          (NP (DT a) (NN conjunction))
          (PP (IN of)
            (NP (NNS literals))))))
    (: ;)
    (S
      (NP (DT a) (NN formula))
      (VP (VBZ is)
        (PP (IN in)
          (NP
            (NP (NNP Disjunctive) (NNP Normal) (NNP Form))
            (PRN (-LRB- -LRB-)
              (NP (NNP DNF))
              (-RRB- -RRB-))))
        (SBAR (IN if)
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (NP
                (NP (DT a) (NN disjunction))
                (PP (IN of)
                  (NP (NNS cubes)))))))))
    (. .)))

det(cube-2, A-1)
nsubj(conjunction-5, cube-2)
cop(conjunction-5, is-3)
det(conjunction-5, a-4)
root(ROOT-0, conjunction-5)
case(literals-7, of-6)
nmod:of(conjunction-5, literals-7)
det(formula-10, a-9)
nsubj(Form-15, formula-10)
cop(Form-15, is-11)
case(Form-15, in-12)
compound(Form-15, Disjunctive-13)
compound(Form-15, Normal-14)
parataxis(conjunction-5, Form-15)
appos(Form-15, DNF-17)
mark(disjunction-23, if-19)
nsubj(disjunction-23, it-20)
cop(disjunction-23, is-21)
det(disjunction-23, a-22)
advcl(Form-15, disjunction-23)
case(cubes-25, of-24)
nmod:of(disjunction-23, cubes-25)

(ROOT
  (S
    (S
      (NP
        (NP (NNP Zhang)
          (CC and)
          (NNP Malik))
        (PRN (-LRB- -LRB-)
          (NP (CD 2002))
          (-RRB- -RRB-)))
      (VP (VBD introduced)
        (NP
          (NP (NNP Augmented) (NNP CNF))
          (PRN (-LRB- -LRB-)
            (NP (NNP ACNF))
            (-RRB- -RRB-)))))
    (: :)
    (S
      (NP (DT a) (NN formula))
      (VP (VBZ is)
        (NP (DT an) (NN ACNF))
        (SBAR (IN if)
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (PP (IN of)
                (NP (DT the) (NN form)))
              (SBAR
                (WHADVP (WRB where))
                (S
                  (VP (VBZ is)
                    (NP
                      (NP (DT a) (NNP CNF))
                      (CC and)
                      (NP (DT a) (NNP DNF)))))))))))
    (. .)))

nsubj(introduced-7, Zhang-1)
cc(Zhang-1, and-2)
conj:and(Zhang-1, Malik-3)
nsubj(introduced-7, Malik-3)
appos(Zhang-1, 2002-5)
root(ROOT-0, introduced-7)
compound(CNF-9, Augmented-8)
dobj(introduced-7, CNF-9)
appos(CNF-9, ACNF-11)
det(formula-15, a-14)
nsubj(ACNF-18, formula-15)
cop(ACNF-18, is-16)
det(ACNF-18, an-17)
parataxis(introduced-7, ACNF-18)
mark(form-24, if-19)
nsubj(form-24, it-20)
cop(form-24, is-21)
case(form-24, of-22)
det(form-24, the-23)
advcl(ACNF-18, form-24)
advmod(CNF-28, where-25)
cop(CNF-28, is-26)
det(CNF-28, a-27)
advcl(form-24, CNF-28)
cc(CNF-28, and-29)
det(DNF-31, a-30)
advcl(form-24, DNF-31)
conj:and(CNF-28, DNF-31)

(ROOT
  (S
    (NP (PRP They))
    (ADVP (RB also))
    (VP (VBD introduced)
      (NP
        (NP (JJ solution-driven) (NN cube) (NN learning))
        (: :)
        (NP
          (NP (DT a) (NN technique))
          (SBAR
            (WHADVP (WRB where))
            (S
              (NP (DT a) (NNP QBF) (NN solver))
              (VP
                (VP (VBZ reasons)
                  (PP (IN on)
                    (NP (DT an) (NNP ACNF))))
                (CC and)
                (VP
                  (ADVP (RB gradually))
                  (VBZ adds)
                  (NP (NNS cubes))
                  (PP (TO to)
                    (NP (CD 2))))))))))
    (. .)))

nsubj(introduced-3, They-1)
advmod(introduced-3, also-2)
root(ROOT-0, introduced-3)
amod(learning-6, solution-driven-4)
compound(learning-6, cube-5)
dobj(introduced-3, learning-6)
det(technique-9, a-8)
dep(learning-6, technique-9)
advmod(reasons-14, where-10)
det(solver-13, a-11)
compound(solver-13, QBF-12)
nsubj(reasons-14, solver-13)
nsubj(adds-20, solver-13)
acl:relcl(technique-9, reasons-14)
case(ACNF-17, on-15)
det(ACNF-17, an-16)
nmod:on(reasons-14, ACNF-17)
cc(reasons-14, and-18)
advmod(adds-20, gradually-19)
acl:relcl(technique-9, adds-20)
conj:and(reasons-14, adds-20)
dobj(adds-20, cubes-21)
case(2-23, to-22)
nmod:to(adds-20, 2-23)

(ROOT
  (S
    (ADVP (RB Currently))
    (, ,)
    (NP (JJ many) (NNP QBF) (NNS solvers))
    (VP (VB implement)
      (NP
        (NP (NN solution))
        (: -)
        (VP (VBN driven)
          (NP
            (NP (NN cube))
            (VP (VBG learning)
              (PP (IN in)
                (NP (NN addition)))
              (PP (TO to)
                (NP (JJ conflict-driven) (NN clause) (NN learning))))))))
    (. .)))

advmod(implement-6, Currently-1)
amod(solvers-5, many-3)
compound(solvers-5, QBF-4)
nsubj(implement-6, solvers-5)
root(ROOT-0, implement-6)
dobj(implement-6, solution-7)
acl(solution-7, driven-9)
dobj(driven-9, cube-10)
acl(cube-10, learning-11)
case(addition-13, in-12)
nmod:in(learning-11, addition-13)
case(learning-17, to-14)
amod(learning-17, conflict-driven-15)
compound(learning-17, clause-16)
nmod:to(learning-11, learning-17)

(ROOT
  (S
    (NP (NNP Goultiaeva) (, ,) (NNP Seidl) (, ,)
      (CC and)
      (NNP Biere))
    (PRN (-LRB- -LRB-)
      (NP (CD 2013))
      (-RRB- -RRB-))
    (VP (VBP show)
      (SBAR (IN that)
        (S
          (NP
            (NP (JJ dual) (NN propagation))
            (PP (IN for)
              (NP (NNP QBF))))
          (VP (MD can)
            (VP (VB be)
              (VP (VBN represented)
                (S
                  (VP (VBG using)
                    (NP (DT the) (VBG existing) (NN clause-learning)
                      (CC and)
                      (NN cube-learning) (NNS methods))
                    (PP (IN in)
                      (NP (NNP QBF) (NNS solvers)))))))))))
    (. .)))

nsubj(show-10, Goultiaeva-1)
conj:and(Goultiaeva-1, Seidl-3)
nsubj(show-10, Seidl-3)
cc(Goultiaeva-1, and-5)
conj:and(Goultiaeva-1, Biere-6)
nsubj(show-10, Biere-6)
dep(show-10, 2013-8)
root(ROOT-0, show-10)
mark(represented-18, that-11)
amod(propagation-13, dual-12)
nsubjpass(represented-18, propagation-13)
case(QBF-15, for-14)
nmod:for(propagation-13, QBF-15)
aux(represented-18, can-16)
auxpass(represented-18, be-17)
ccomp(show-10, represented-18)
xcomp(represented-18, using-19)
det(clause-learning-22, the-20)
amod(clause-learning-22, existing-21)
dobj(using-19, clause-learning-22)
cc(clause-learning-22, and-23)
compound(methods-25, cube-learning-24)
dobj(using-19, methods-25)
conj:and(clause-learning-22, methods-25)
case(solvers-28, in-26)
compound(solvers-28, QBF-27)
nmod:in(using-19, solvers-28)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (PRP us))
        (VP (VB give)
          (NP
            (NP
              (NP
                (NP
                  (NP (DT the) (JJ outermost) (NN solver))
                  (PP (IN in)
                    (NP (NNP SAT))))
                (: -)
                (S
                  (VP (TO TO))))
              (: -)
              (NP
                (NP (NNP SAT) (NN level) (CD one))
                (CC and)
                (NP (DT each) (JJ nested) (NN solver) (NN level) (NN one))))
            (CC plus)
            (NP
              (NP (PRP$ its) (NN parent) (POS 's))
              (NN level))))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(give-3, us-2)
ccomp(Let-1, give-3)
det(solver-6, the-4)
amod(solver-6, outermost-5)
dobj(give-3, solver-6)
case(SAT-8, in-7)
nmod:in(solver-6, SAT-8)
acl(solver-6, TO-10)
compound(level-13, SAT-12)
dep(solver-6, level-13)
nummod(level-13, one-14)
cc(level-13, and-15)
det(one-20, each-16)
amod(one-20, nested-17)
compound(one-20, solver-18)
compound(one-20, level-19)
dep(solver-6, one-20)
conj:and(level-13, one-20)
cc(solver-6, plus-21)
nmod:poss(parent-23, its-22)
nmod:poss(level-25, parent-23)
case(parent-23, 's-24)
dobj(give-3, level-25)
conj:plus(solver-6, level-25)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP show)
      (NP
        (NP (DT that) (NN cube) (NN learning)
          (CC and)
          (NN clause) (NN learning))
        (PP (IN in)
          (NP (NNP QBF))))
      (PP
        (ADVP
          (NP (DT both) (NN boil))
          (RB down))
        (TO to)
        (NP
          (NP (NN clause))
          (VP (VBG learning)
            (PP (IN in)
              (NP (NNP SAT)
                (PRN (: -)
                  (NP (NNP TO))
                  (: -))
                (NNP SAT)))))))
    (. .)))

nsubj(show-2, We-1)
root(ROOT-0, show-2)
det(learning-5, that-3)
compound(learning-5, cube-4)
dobj(show-2, learning-5)
cc(learning-5, and-6)
compound(learning-8, clause-7)
dobj(show-2, learning-8)
conj:and(learning-5, learning-8)
case(QBF-10, in-9)
nmod:in(learning-5, QBF-10)
det(boil-12, both-11)
nmod:npmod(down-13, boil-12)
advmod(clause-15, down-13)
case(clause-15, to-14)
nmod:to(show-2, clause-15)
acl(clause-15, learning-16)
case(SAT-22, in-17)
compound(SAT-22, SAT-18)
dep(SAT-22, TO-20)
nmod:in(learning-16, SAT-22)

(ROOT
  (S
    (INTJ (DT That) (VBZ is))
    (, ,)
    (S
      (NP (NNS clauses))
      (VP (VBD learnt)
        (PP (IN in)
          (NP (DT a) (NNP QDPLL) (NN algorithm) (NN correspond)))
        (PP (TO to)
          (NP
            (NP (JJ learnt) (NNS clauses))
            (PP (IN in)
              (NP
                (NP (JJ odd) (NNS levels))
                (PP (IN of)
                  (NP (NNP SAT)))))))
        (PRN (: -)
          (S
            (VP (TO TO)
              (PRN (: -)
                (S
                  (NP (NNP SAT)
                    (CC and)
                    (NNS cubes))
                  (VP (VBD learnt)
                    (PP (IN in)
                      (NP (DT a) (NNP QDPLL) (NN algorithm))))))
              (VP (VB correspond)
                (PP (TO to)
                  (NP (NNP SAT))))))
          (: -))
        (S
          (VP (TO TO)
            (VP (VB -)
              (NP (NNP SAT) (NNS clauses))
              (PP (IN in)
                (NP (JJ even) (NNS levels))))))))
    (. .)))

discourse(learnt-5, That-1)
mwe(That-1, is-2)
nsubj(learnt-5, clauses-4)
nsubj:xsubj(--35, clauses-4)
root(ROOT-0, learnt-5)
case(correspond-10, in-6)
det(correspond-10, a-7)
compound(correspond-10, QDPLL-8)
compound(correspond-10, algorithm-9)
nmod:in(learnt-5, correspond-10)
case(clauses-13, to-11)
amod(clauses-13, learnt-12)
nmod:to(learnt-5, clauses-13)
case(levels-16, in-14)
amod(levels-16, odd-15)
nmod:in(clauses-13, levels-16)
case(SAT-18, of-17)
nmod:of(levels-16, SAT-18)
mark(correspond-30, TO-20)
nsubj(learnt-25, SAT-22)
cc(SAT-22, and-23)
conj:and(SAT-22, cubes-24)
nsubj(learnt-25, cubes-24)
parataxis(correspond-30, learnt-25)
case(algorithm-29, in-26)
det(algorithm-29, a-27)
compound(algorithm-29, QDPLL-28)
nmod:in(learnt-25, algorithm-29)
parataxis(learnt-5, correspond-30)
case(SAT-32, to-31)
nmod:to(correspond-30, SAT-32)
mark(--35, TO-34)
xcomp(learnt-5, --35)
compound(clauses-37, SAT-36)
dobj(--35, clauses-37)
case(levels-40, in-38)
amod(levels-40, even-39)
nmod:in(--35, levels-40)

(ROOT
  (S
    (ADVP (RB Informally))
    (, ,)
    (NP (DT this))
    (VP (VBZ follows)
      (ADVP (RB easily))
      (PP (IN from)
        (NP
          (NP (DT the) (NN fact))
          (SBAR (IN that)
            (S
              (NP (DT a) (NN cube))
              (VP (VBZ is)
                (NP
                  (NP (DT the) (NN negation))
                  (PP (IN of)
                    (NP (DT a) (NN clause)
                      (CC and)
                      (NN vice) (NN versa))))))))))
    (. .)))

advmod(follows-4, Informally-1)
nsubj(follows-4, this-3)
root(ROOT-0, follows-4)
advmod(follows-4, easily-5)
case(fact-8, from-6)
det(fact-8, the-7)
nmod:from(follows-4, fact-8)
mark(negation-14, that-9)
det(cube-11, a-10)
nsubj(negation-14, cube-11)
cop(negation-14, is-12)
det(negation-14, the-13)
dep(fact-8, negation-14)
case(versa-20, of-15)
det(versa-20, a-16)
compound(versa-20, clause-17)
cc(clause-17, and-18)
conj:and(clause-17, vice-19)
compound(versa-20, vice-19)
nmod:of(negation-14, versa-20)

(ROOT
  (S
    (SBAR (IN Since)
      (S
        (NP
          (NP (DT the) (NNS clauses))
          (PP (IN in)
            (NP
              (NP (RB even) (NNS levels))
              (PP (IN of)
                (NP (NNP SAT)
                  (PRN (: -)
                    (NP (NNP TO))
                    (: -))
                  (NNP SAT))))))
        (VP (VBP have)
          (NP
            (NP (DT an) (JJ odd) (NN number))
            (PP (IN of)
              (NP
                (NP (NNS negations))
                (VP (VBG preceding)
                  (NP (PRP them)))))))))
    (, ,)
    (NP (PRP they))
    (ADVP (RB indeed))
    (VP (VBP represent)
      (NP
        (NP (DT a) (JJ negated) (NN clause))
        (, ,)
        (NP
          (NP (NNP i.e.))
          (, ,)
          (NP (DT a) (NN cube)))))
    (. .)))

mark(have-13, Since-1)
det(clauses-3, the-2)
nsubj(have-13, clauses-3)
case(levels-6, in-4)
advmod(levels-6, even-5)
nmod:in(clauses-3, levels-6)
case(SAT-12, of-7)
compound(SAT-12, SAT-8)
dep(SAT-12, TO-10)
nmod:of(levels-6, SAT-12)
advcl(represent-24, have-13)
det(number-16, an-14)
amod(number-16, odd-15)
dobj(have-13, number-16)
case(negations-18, of-17)
nmod:of(number-16, negations-18)
acl(negations-18, preceding-19)
dobj(preceding-19, them-20)
nsubj(represent-24, they-22)
advmod(represent-24, indeed-23)
root(ROOT-0, represent-24)
det(clause-27, a-25)
amod(clause-27, negated-26)
dobj(represent-24, clause-27)
appos(clause-27, i.e.-29)
det(cube-32, a-31)
appos(i.e.-29, cube-32)

(ROOT
  (S
    (ADVP (RB Similarly))
    (, ,)
    (NP
      (NP (DT the) (JJ even) (NN number))
      (PP (IN of)
        (NP
          (NP (NNS negations))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VB precede)
                (NP (DT a) (NN clause))
                (PP (IN in)
                  (NP
                    (NP (DT an) (JJ odd) (NN level))
                    (PP (IN of)
                      (NP (NNP SAT)
                        (PRN (: -)
                          (NP (NNP TO))
                          (: -))
                        (NNP SAT)))))))))))
    (VP (VB cancel)
      (NP (DT each) (JJ other) (NN out)
        (S
          (VP (TO to)
            (VP (VB represent)
              (NP (DT a) (JJ normal) (NNP QBF) (NN clause)))))))
    (. .)))

advmod(cancel-22, Similarly-1)
det(number-5, the-3)
amod(number-5, even-4)
nsubj(cancel-22, number-5)
case(negations-7, of-6)
nmod:of(number-5, negations-7)
nsubj(precede-9, negations-7)
ref(negations-7, that-8)
acl:relcl(negations-7, precede-9)
det(clause-11, a-10)
dobj(precede-9, clause-11)
case(level-15, in-12)
det(level-15, an-13)
amod(level-15, odd-14)
nmod:in(precede-9, level-15)
case(SAT-21, of-16)
compound(SAT-21, SAT-17)
dep(SAT-21, TO-19)
nmod:of(level-15, SAT-21)
root(ROOT-0, cancel-22)
det(out-25, each-23)
amod(out-25, other-24)
dobj(cancel-22, out-25)
mark(represent-27, to-26)
acl(out-25, represent-27)
det(clause-31, a-28)
amod(clause-31, normal-29)
compound(clause-31, QBF-30)
dobj(represent-27, clause-31)

(ROOT
  (S
    (ADVP (RB Formally))
    (, ,)
    (S
      (SBAR (IN If)
        (S
          (NP
            (NP
              (NP (NNP T))
              (SBAR
                (S
                  (VP (SYM =)
                    (NP (CD 1))))))
            (: :)
            (NP (CD 2) (: :) (CD 3))
            (: :))
          (: ...)
          (S
            (VP (VB n-1) (: :)
              (ADVP (RB n))))
          (: :)
          (VP (VBZ is)
            (NP
              (NP (DT a) (NNP QBF))
              (PP (IN with)
                (PP (IN in)
                  (NP (NNP ACNF))))))))
      (, ,)
      (ADVP (RB then))
      (NP (DT all))
      (VP (VBD learned)
        (SBAR
          (S
            (NP (NNP cubes) (NNP C))
            (VP (VBP have)
              (NP
                (NP
                  (NP (DT the) (NN property))
                  (SBAR (IN that)
                    (S
                      (NP (NNP T))
                      (VP (VBZ is)
                        (ADJP (JJ equivalent)
                          (PP (TO to)
                            (NP (CD 1))))))))
                (: :)
                (NP
                  (NP (CD 2))
                  (: :)
                  (NP (CD 3)))
                (: :)))))))
    (: ...)
    (S
      (NP
        (NP (JJ n-1))
        (: :)
        (NP (NN n))
        (: :))
      (NP (NNP C)))
    (. .)))

advmod(learned-26, Formally-1)
mark(QBF-19, If-3)
nsubj(QBF-19, T-4)
dep(1-6, =-5)
acl:relcl(T-4, 1-6)
nummod(3-10, 2-8)
dep(T-4, 3-10)
parataxis(QBF-19, n-1-13)
advmod(n-1-13, n-15)
cop(QBF-19, is-17)
det(QBF-19, a-18)
advcl(learned-26, QBF-19)
case(ACNF-22, with-20)
case(ACNF-22, in-21)
nmod:in(QBF-19, ACNF-22)
advmod(all-25, then-24)
nsubj(learned-26, all-25)
root(ROOT-0, learned-26)
compound(C-28, cubes-27)
nsubj(have-29, C-28)
ccomp(learned-26, have-29)
det(property-31, the-30)
dobj(have-29, property-31)
mark(equivalent-35, that-32)
nsubj(equivalent-35, T-33)
cop(equivalent-35, is-34)
dep(property-31, equivalent-35)
case(1-37, to-36)
nmod:to(equivalent-35, 1-37)
dep(property-31, 2-39)
dep(2-39, 3-41)
dep(C-48, n-1-44)
dep(n-1-44, n-46)
parataxis(learned-26, C-48)

(ROOT
  (S
    (LST (-LRB- -LRB-) (LS 1) (-RRB- -RRB-))
    (NP (NNP Lemma))
    (VP (VBZ 6.1))
    (. .)))

dep(6.1-5, 1-2)
nsubj(6.1-5, Lemma-4)
root(ROOT-0, 6.1-5)

(ROOT
  (S
    (S
      (VP (VB Suppose)
        (NP
          (NP
            (NP (NNP T))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 1))))))
          (: :)
          (NP (CD 2) (: :) (CD 3)))))
    (: :) (: ...)
    (S
      (NP
        (NP (JJ n-1))
        (: :)
        (NP (NN n))
        (: :))
      (VP (VBZ is)
        (NP
          (NP (DT a) (NNP QBF))
          (PP (IN with)
            (NP
              (SBAR (IN in)
                (S
                  (NP (NNP ACNF)
                    (CC and)
                    (NNP C) (NNP =) (NNP C) (NNP Cn))
                  (VP (VBZ is)
                    (NP
                      (NP
                        (NP (DT a) (NN cube))
                        (PP (IN with)
                          (NP (NNP C) (FW a) (FW i) (NNP <) (NN n) (NNP i))))
                      (: -)
                      (NP
                        (NP (NN cube)
                          (CC and)
                          (NN Cn))
                        (NP (DT a) (NN n)))))))
              (: -)
              (NP (NN cube)))))))
    (. .)))

root(ROOT-0, Suppose-1)
dobj(Suppose-1, T-2)
dep(1-4, =-3)
acl:relcl(T-2, 1-4)
nummod(3-8, 2-6)
dep(T-2, 3-8)
nsubj(QBF-17, n-1-11)
dep(n-1-11, n-13)
cop(QBF-17, is-15)
det(QBF-17, a-16)
parataxis(Suppose-1, QBF-17)
case(cube-43, with-18)
mark(cube-28, in-19)
compound(Cn-25, ACNF-20)
cc(ACNF-20, and-21)
conj:and(ACNF-20, C-22)
compound(Cn-25, C-22)
compound(Cn-25, =-23)
compound(Cn-25, C-24)
nsubj(cube-28, Cn-25)
cop(cube-28, is-26)
det(cube-28, a-27)
dep(cube-43, cube-28)
case(i-35, with-29)
compound(i-35, C-30)
compound(i-35, a-31)
compound(i-35, i-32)
compound(i-35, <-33)
compound(i-35, n-34)
nmod:with(cube-28, i-35)
dep(cube-28, cube-37)
cc(cube-37, and-38)
dep(cube-28, Cn-39)
conj:and(cube-37, Cn-39)
det(n-41, a-40)
dep(cube-37, n-41)
nmod:with(QBF-17, cube-43)

(ROOT
  (S
    (VP (VB Suppose)
      (ADVP (RB also))
      (SBAR (IN that)
        (S
          (NP (NNP T))
          (VP (VBZ is)
            (ADJP (JJ equivalent)
              (PP (TO to)))
            (PRN (-LRB- -LRB-)
              (NP (CD 1))
              (-RRB- -RRB-))))))
    (. .)))

root(ROOT-0, Suppose-1)
advmod(Suppose-1, also-2)
mark(equivalent-6, that-3)
nsubj(equivalent-6, T-4)
cop(equivalent-6, is-5)
ccomp(Suppose-1, equivalent-6)
nmod(equivalent-6, to-7)
dep(equivalent-6, 1-9)

(ROOT
  (S
    (S
      (ADVP (RB Then))
      (NP (NNP T))
      (VP (VBZ is)
        (ADVP (RB also))
        (ADJP
          (ADJP (JJ equivalent)
            (PP (TO to)
              (NP
                (NP (CD 1))
                (: :)
                (NP (CD 2) (: :) (CD 3))
                (: :))))
          (: ...)
          (ADJP (JJ n-1)))))
    (: :)
    (S
      (NP (NNP C))
      (VP (VBP n)))
    (: :)
    (CC and)
    (S
      (FRAG
        (FRAG
          (PP (TO to)
            (NP
              (NP (CD 1))
              (: :)
              (NP (CD 2))
              (: :)))
          (NP (CD 3))
          (: :))
        (: ...)
        (FRAG
          (ADJP (JJ n-1))
          (: :)))
      (NP (NNP C))
      (VP (VBP n)))
    (: :) (. .)))

advmod(equivalent-5, Then-1)
nsubj(equivalent-5, T-2)
cop(equivalent-5, is-3)
advmod(equivalent-5, also-4)
root(ROOT-0, equivalent-5)
case(1-7, to-6)
nmod:to(equivalent-5, 1-7)
nummod(3-11, 2-9)
dep(1-7, 3-11)
dep(equivalent-5, n-1-14)
nsubj(n-17, C-16)
conj:and(equivalent-5, n-17)
cc(equivalent-5, and-19)
case(1-21, to-20)
nmod:to(3-25, 1-21)
dep(1-21, 2-23)
dep(n-31, 3-25)
parataxis(3-25, n-1-28)
nsubj(n-31, C-30)
conj:and(equivalent-5, n-31)

(ROOT
  (S
    (PP (IN From)
      (NP (NNP Lemma) (CD 6.1)))
    (, ,)
    (NP (PRP we))
    (ADVP (RB indeed))
    (VP (VBP see)
      (SBAR
        (S
          (NP
            (NP (DT that))
            (PRN (-LRB- -LRB-)
              (SBAR (IN since)
                (S
                  (NP (NNP C))
                  (VP (VBZ is)
                    (NP (DT a) (NN clause)))))
              (-RRB- -RRB-)))
          (VP (VBD learned)
            (NP (NNS cubes))
            (PP (IN in)
              (NP (NNP QBF) (NNP correspond)))
            (PP (TO to)
              (NP
                (NP
                  (NP
                    (NP (JJ learned) (NNS clauses))
                    (PP (IN in)
                      (NP (DT the) (JJ corresponding) (NN SAT))))
                  (: -)
                  (S
                    (VP (TO TO))))
                (: -)
                (NP (NNP SAT) (NNP specification))))))))
    (. .)))

case(Lemma-2, From-1)
nmod:from(see-7, Lemma-2)
nummod(Lemma-2, 6.1-3)
nsubj(see-7, we-5)
advmod(see-7, indeed-6)
root(ROOT-0, see-7)
nsubj(learned-16, that-8)
mark(clause-14, since-10)
nsubj(clause-14, C-11)
cop(clause-14, is-12)
det(clause-14, a-13)
dep(that-8, clause-14)
ccomp(see-7, learned-16)
dobj(learned-16, cubes-17)
case(correspond-20, in-18)
compound(correspond-20, QBF-19)
nmod:in(learned-16, correspond-20)
case(clauses-23, to-21)
amod(clauses-23, learned-22)
nmod:to(learned-16, clauses-23)
case(SAT-27, in-24)
det(SAT-27, the-25)
amod(SAT-27, corresponding-26)
nmod:in(clauses-23, SAT-27)
acl(clauses-23, TO-29)
compound(specification-32, SAT-31)
dep(clauses-23, specification-32)

(ROOT
  (S
    (NP (CD 7) (NNP Conclusion) (NNP This) (NN paper))
    (VP
      (VP (VBD introduced)
        (NP
          (NP
            (NP
              (NP (DT an) (NN extension))
              (PP (IN of)
                (NP (NNP SAT))))
            (: -)
            (S
              (VP (TO TO))))
          (: -)
          (NP
            (NP (NNP SAT))
            (PP (IN with)
              (NP (DT an)
                (ADJP (JJ arbitrary))
                (JJ nesting) (NN depth))))))
      (CC and)
      (VP (VBD showed)
        (SBAR
          (WHADVP (WRB how))
          (S
            (NP (PRP it))
            (VP (MD can)
              (VP (VB be)
                (VP (VBN used)
                  (S
                    (VP (TO to)
                      (VP (VB solve)
                        (NP
                          (NP (DT the) (NN validity) (NN problem))
                          (PP (IN of)
                            (NP (NNP Quantified) (NNP Boolean) (NNP Formulas))))))))))))))
    (. .)))

nummod(paper-4, 7-1)
compound(paper-4, Conclusion-2)
compound(paper-4, This-3)
nsubj(introduced-5, paper-4)
nsubj(showed-20, paper-4)
root(ROOT-0, introduced-5)
det(extension-7, an-6)
dobj(introduced-5, extension-7)
case(SAT-9, of-8)
nmod:of(extension-7, SAT-9)
acl(extension-7, TO-11)
dep(extension-7, SAT-13)
case(depth-18, with-14)
det(depth-18, an-15)
amod(depth-18, arbitrary-16)
amod(depth-18, nesting-17)
nmod:with(SAT-13, depth-18)
cc(introduced-5, and-19)
conj:and(introduced-5, showed-20)
advmod(used-25, how-21)
nsubjpass(used-25, it-22)
nsubj:xsubj(solve-27, it-22)
aux(used-25, can-23)
auxpass(used-25, be-24)
ccomp(showed-20, used-25)
mark(solve-27, to-26)
xcomp(used-25, solve-27)
det(problem-30, the-28)
compound(problem-30, validity-29)
dobj(solve-27, problem-30)
case(Formulas-34, of-31)
compound(Formulas-34, Quantified-32)
compound(Formulas-34, Boolean-33)
nmod:of(problem-30, Formulas-34)

(ROOT
  (S
    (NP (PRP$ Our) (NNS experiments))
    (VP (VBP show)
      (SBAR (IN that)
        (S (, ,)
          (PP (RB even) (IN without)
            (NP (DT any) (NNP QBF-specific) (NNS optimizations)))
          (, ,)
          (NP
            (NP (NNP SAT))
            (: -)
            (NP (NNP TO)))
          (: -)
          (NP (NNP SAT))
          (VP (VBZ performs)
            (ADVP
              (ADVP (RB relatively) (RB well))
              (PP (IN on)
                (NP (NNP QBF) (NNS instances))))
            (PP (IN from)
              (NP (DT the) (JJS latest) (NN QBF) (NN competition)))))))
    (. .)))

nmod:poss(experiments-2, Our-1)
nsubj(show-3, experiments-2)
root(ROOT-0, show-3)
mark(performs-17, that-4)
advmod(optimizations-10, even-6)
case(optimizations-10, without-7)
det(optimizations-10, any-8)
compound(optimizations-10, QBF-specific-9)
nmod:without(performs-17, optimizations-10)
nsubj(performs-17, SAT-12)
dep(SAT-12, TO-14)
nsubj(performs-17, SAT-16)
ccomp(show-3, performs-17)
advmod(well-19, relatively-18)
advmod(performs-17, well-19)
case(instances-22, on-20)
compound(instances-22, QBF-21)
nmod:on(well-19, instances-22)
case(competition-27, from-23)
det(competition-27, the-24)
amod(competition-27, latest-25)
compound(competition-27, QBF-26)
nmod:from(performs-17, competition-27)

(ROOT
  (S
    (ADVP (RB Moreover))
    (, ,)
    (NP
      (NP (DT the) (JJ generic) (NN architecture))
      (PP (IN of)
        (NP
          (NP (NNP SAT)
            (PRN (: -)
              (NP (NNP TO))
              (: -))
            (NNP SAT))
          (PP (IN with)
            (NP
              (NP (NN respect))
              (PP (TO to)
                (NP (PRP$ its) (JJ underlying) (NNP SAT) (NNS solvers))))))))
    (VP (VBZ allows)
      (S
        (NP (PRP us))
        (VP (TO to)
          (VP
            (ADVP (RB uniformly))
            (VB lift)
            (NP (JJ SAT-related) (NNS optimizations))
            (PP (TO to)
              (NP (NNP QBF)))))))
    (. .)))

advmod(allows-19, Moreover-1)
det(architecture-5, the-3)
amod(architecture-5, generic-4)
nsubj(allows-19, architecture-5)
case(SAT-11, of-6)
compound(SAT-11, SAT-7)
dep(SAT-11, TO-9)
nmod:of(architecture-5, SAT-11)
case(solvers-18, with-12)
mwe(with-12, respect-13)
mwe(with-12, to-14)
nmod:poss(solvers-18, its-15)
amod(solvers-18, underlying-16)
compound(solvers-18, SAT-17)
nmod:with_respect_to(SAT-11, solvers-18)
root(ROOT-0, allows-19)
dobj(allows-19, us-20)
nsubj:xsubj(lift-23, us-20)
mark(lift-23, to-21)
advmod(lift-23, uniformly-22)
xcomp(allows-19, lift-23)
amod(optimizations-25, SAT-related-24)
dobj(lift-23, optimizations-25)
case(QBF-27, to-26)
nmod:to(lift-23, QBF-27)

(ROOT
  (S
    (PP (IN In)
      (ADJP (JJ particular)))
    (, ,)
    (NP
      (NP (NNP G) (NNP LUCOSE))
      (, ,)
      (NP
        (NP (DT the) (NNP SAT-solver) (NNP SAT))
        (PRN (: -)
          (NP (NNP TO))
          (: -))
        (SBAR
          (S
            (NP (NNP SAT))
            (VP (VBZ is)
              (ADVP (RB currently))
              (VP (VBN based)
                (PRT (RP on)))))))
      (, ,))
    (VP (MD can)
      (VP (VB be)
        (VP
          (ADVP (RB easily))
          (VBN replaced)
          (PP (IN with)
            (NP (JJ other) (NNP SAT) (NNS solvers))))))
    (. .)))

case(particular-2, In-1)
advcl(replaced-22, particular-2)
compound(LUCOSE-5, G-4)
nsubjpass(replaced-22, LUCOSE-5)
det(SAT-9, the-7)
compound(SAT-9, SAT-solver-8)
appos(LUCOSE-5, SAT-9)
dep(SAT-9, TO-11)
nsubjpass(based-16, SAT-13)
auxpass(based-16, is-14)
advmod(based-16, currently-15)
acl:relcl(SAT-9, based-16)
compound:prt(based-16, on-17)
aux(replaced-22, can-19)
auxpass(replaced-22, be-20)
advmod(replaced-22, easily-21)
root(ROOT-0, replaced-22)
case(solvers-26, with-23)
amod(solvers-26, other-24)
compound(solvers-26, SAT-25)
nmod:with(replaced-22, solvers-26)

(ROOT
  (S
    (PP (IN In)
      (NP (NN addition)))
    (, ,)
    (PP (IN in)
      (NP (NNP Section) (CD 5)))
    (, ,)
    (NP (PRP we))
    (VP (VBP have)
      (VP (VBN identified)
        (NP
          (NP
            (NP (JJ several) (NNS topics))
            (PP (IN for)
              (NP (JJ future) (NN work))))
          (: :)
          (NP
            (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
            (VP (VBG detecting)
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP (NNS variables))
                  (VP (VBP are)
                    (ADVP (RB completely))
                    (VP (VBN defined)
                      (PP (IN in)
                        (NP
                          (NP (NNS terms))
                          (PP (IN of)
                            (NP (NNS variables)))))
                      (S
                        (VP (VB form)
                          (NP (JJR higher) (NNS levels))
                          (SBAR (IN in) (NN order)
                            (S
                              (VP (TO to)
                                (VP (VB pull)
                                  (NP
                                    (NP (JJR larger) (NNS parts))
                                    (PP (IN of)
                                      (NP (DT the) (NN theory))))
                                  (PP (TO to)
                                    (NP
                                      (NP
                                        (NP (JJR higher) (NNS levels))
                                        (PRN (-LRB- -LRB-)
                                          (NP (NN ii))
                                          (-RRB- -RRB-)))
                                      (VP (VBG learning)
                                        (NP (JJR stronger) (NNS clauses))
                                        (PP (VBN based)
                                          (PP (IN on)
                                            (NP (JJ extended) (NN resolution)))))))))))))))))
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP (NNS conflicts))
                  (VP (VBP arise)
                    (SBAR (IN because)
                      (S
                        (NP (DT the) (JJ internal) (NN solver))
                        (VP (VBZ finds)
                          (NP (DT a) (NN model))))))))))
          (, ,)
          (CC and)
          (NP
            (NP (-LRB- -LRB-) (NN iii) (-RRB- -RRB-))
            (VP (VBG moving)
              (PP (IN towards)
                (NP (DT a) (JJR richer) (NN input) (NN language))))))))
    (. .)))

case(addition-2, In-1)
nmod:in(identified-10, addition-2)
case(Section-5, in-4)
nmod:in(identified-10, Section-5)
nummod(Section-5, 5-6)
nsubj(identified-10, we-8)
aux(identified-10, have-9)
root(ROOT-0, identified-10)
amod(topics-12, several-11)
dobj(identified-10, topics-12)
case(work-15, for-13)
amod(work-15, future-14)
nmod:for(topics-12, work-15)
dobj(identified-10, i-18)
conj:and(topics-12, i-18)
acl(i-18, detecting-20)
advmod(defined-25, when-21)
nsubjpass(defined-25, variables-22)
auxpass(defined-25, are-23)
advmod(defined-25, completely-24)
advcl(detecting-20, defined-25)
case(terms-27, in-26)
nmod:in(defined-25, terms-27)
case(variables-29, of-28)
nmod:of(terms-27, variables-29)
ccomp(defined-25, form-30)
amod(levels-32, higher-31)
dobj(form-30, levels-32)
mark(pull-36, in-33)
mwe(in-33, order-34)
mark(pull-36, to-35)
advcl(form-30, pull-36)
amod(parts-38, larger-37)
dobj(pull-36, parts-38)
case(theory-41, of-39)
det(theory-41, the-40)
nmod:of(parts-38, theory-41)
case(levels-44, to-42)
amod(levels-44, higher-43)
nmod:to(pull-36, levels-44)
appos(levels-44, ii-46)
acl(levels-44, learning-48)
amod(clauses-50, stronger-49)
dobj(learning-48, clauses-50)
case(resolution-54, based-51)
mwe(based-51, on-52)
amod(resolution-54, extended-53)
advcl(learning-48, resolution-54)
advmod(arise-57, when-55)
nsubj(arise-57, conflicts-56)
advcl(detecting-20, arise-57)
mark(finds-62, because-58)
det(solver-61, the-59)
amod(solver-61, internal-60)
nsubj(finds-62, solver-61)
advcl(arise-57, finds-62)
det(model-64, a-63)
dobj(finds-62, model-64)
cc(topics-12, and-66)
dobj(identified-10, iii-68)
conj:and(topics-12, iii-68)
acl(iii-68, moving-70)
case(language-75, towards-71)
det(language-75, a-72)
amod(language-75, richer-73)
compound(language-75, input-74)
nmod:towards(moving-70, language-75)

(ROOT
  (S
    (NP
      (NP (NNS Acknowledgments))
      (SBAR
        (S
          (NP (DT This) (NN work))
          (VP (VBZ is)
            (VP (VBN supported)
              (PP (IN by)
                (NP
                  (NP (DT the) (JJ Finnish) (NN Center))
                  (PP (IN of)
                    (NP (NNP Excellence)))))
              (PP (IN in)
                (NP (NNP Computational) (NNP Inference) (NNP Research)))))))
      (PRN (-LRB- -LRB-)
        (NP (NNP COIN))
        (-RRB- -RRB-)))
    (VP (VBN funded)
      (PP (IN by)
        (NP
          (NP (DT the) (NN Academy))
          (PP (IN of)
            (NP (NNP Finland)))))
      (PRN (-LRB- -LRB-)
        (PP (IN under)
          (NP
            (NP (NN grant))
            (NP (# #) (CD 251170))))
        (-RRB- -RRB-)))
    (. .)))

nsubj(funded-19, Acknowledgments-1)
det(work-3, This-2)
nsubjpass(supported-5, work-3)
auxpass(supported-5, is-4)
acl:relcl(Acknowledgments-1, supported-5)
case(Center-9, by-6)
det(Center-9, the-7)
amod(Center-9, Finnish-8)
nmod:agent(supported-5, Center-9)
case(Excellence-11, of-10)
nmod:of(Center-9, Excellence-11)
case(Research-15, in-12)
compound(Research-15, Computational-13)
compound(Research-15, Inference-14)
nmod:in(supported-5, Research-15)
appos(Acknowledgments-1, COIN-17)
root(ROOT-0, funded-19)
case(Academy-22, by-20)
det(Academy-22, the-21)
nmod:by(funded-19, Academy-22)
case(Finland-24, of-23)
nmod:of(Academy-22, Finland-24)
case(grant-27, under-26)
dep(funded-19, grant-27)
dep(251170-29, #-28)
dep(grant-27, 251170-29)

(ROOT
  (FRAG
    (NP
      (NP (NNP References) (NNP Alviano))
      (, ,)
      (NP (NNP M.))
      (: ;)
      (NP (NNP Dodaro) (, ,) (NNP C.)))
    (: ;)
    (NP
      (NP (NNP Leone))
      (, ,)
      (NP (NNP N.))
      (: ;)
      (CC and)
      (NP (NNP Ricca) (, ,) (NNP F.) (CD 2015)))
    (. .)))

compound(Alviano-2, References-1)
root(ROOT-0, Alviano-2)
appos(Alviano-2, M.-4)
compound(C.-8, Dodaro-6)
dep(Alviano-2, C.-8)
dep(Alviano-2, Leone-10)
dep(Alviano-2, N.-12)
conj:and(Leone-10, N.-12)
cc(Leone-10, and-14)
compound(F.-17, Ricca-15)
dep(Alviano-2, F.-17)
conj:and(Leone-10, F.-17)
nummod(F.-17, 2015-18)

(ROOT
  (NP
    (NP (NNS Advances))
    (PP (IN in)
      (NP (NNP WASP)))
    (. .)))

root(ROOT-0, Advances-1)
case(WASP-3, in-2)
nmod:in(Advances-1, WASP-3)

(ROOT
  (S
    (PP (IN In)
      (NP
        (NP (NNP Logic) (NNP Programming))
        (CC and)
        (NP (NNP Nonmonotonic) (NNP Reasoning) (NNP 13th) (NNP International) (NNP Conference))))
    (, ,)
    (NP (NNP LPNMR))
    (VP (VBZ 2015))
    (. .)))

case(Programming-3, In-1)
compound(Programming-3, Logic-2)
nmod:in(2015-12, Programming-3)
cc(Programming-3, and-4)
compound(Conference-9, Nonmonotonic-5)
compound(Conference-9, Reasoning-6)
compound(Conference-9, 13th-7)
compound(Conference-9, International-8)
conj:and(Programming-3, Conference-9)
nmod:in(2015-12, Conference-9)
nsubj(2015-12, LPNMR-11)
root(ROOT-0, 2015-12)

(ROOT
  (NP
    (NP (NNP Proceedings))
    (, ,)
    (NP (CD 40-54))
    (. .)))

root(ROOT-0, Proceedings-1)
amod(Proceedings-1, 40-54-3)

(ROOT
  (S
    (S
      (ADJP (JJ Apt)))
    (, ,)
    (NP (NNP K.) (NNP R.))
    (VP (VBZ 2003))
    (. .)))

ccomp(2003-5, Apt-1)
compound(R.-4, K.-3)
nsubj(2003-5, R.-4)
root(ROOT-0, 2003-5)

(ROOT
  (NP
    (NP (NNS Principles))
    (PP (IN of)
      (NP (NNP Constraint) (NNP Programming)))
    (. .)))

root(ROOT-0, Principles-1)
case(Programming-4, of-2)
compound(Programming-4, Constraint-3)
nmod:of(Principles-1, Programming-4)

(ROOT
  (NP (NNP Cambridge) (NNP University) (NNP Press) (. .)))

compound(Press-3, Cambridge-1)
compound(Press-3, University-2)
root(ROOT-0, Press-3)

(ROOT
  (NP
    (NP (NNP Audemard))
    (, ,)
    (NP (NNP G.))
    (, ,)
    (CC and)
    (NP
      (NP (NNP Simon))
      (, ,)
      (NP (NNP L.) (CD 2009)))
    (. .)))

root(ROOT-0, Audemard-1)
conj:and(Audemard-1, G.-3)
cc(Audemard-1, and-5)
conj:and(Audemard-1, Simon-6)
appos(Simon-6, L.-8)
nummod(L.-8, 2009-9)

(ROOT
  (S
    (NP (NNP Predicting))
    (VP (VBD learnt)
      (NP
        (NP (NNS clauses) (NN quality))
        (PP (IN in)
          (NP (JJ modern) (NNP SAT) (NNS solvers)))))
    (. .)))

nsubj(learnt-2, Predicting-1)
root(ROOT-0, learnt-2)
compound(quality-4, clauses-3)
dobj(learnt-2, quality-4)
case(solvers-8, in-5)
amod(solvers-8, modern-6)
compound(solvers-8, SAT-7)
nmod:in(quality-4, solvers-8)

(ROOT
  (S
    (PP (IN In)
      (NP (NNP Boutilier) (, ,) (NNP C.)))
    (, ,)
    (NP
      (NP (NN ed.))
      (, ,)
      (NP (NNP IJCAI))
      (, ,))
    (VP (VBZ 399-404))
    (. .)))

case(C.-4, In-1)
compound(C.-4, Boutilier-2)
nmod:in(399-404-10, C.-4)
nsubj(399-404-10, ed.-6)
appos(ed.-6, IJCAI-8)
root(ROOT-0, 399-404-10)

(ROOT
  (FRAG
    (NP
      (NP (NNP Barrett))
      (, ,)
      (NP (NNP C.) (NNP W.))
      (: ;)
      (NP (NNP Sebastiani) (, ,) (NNP R.)))
    (: ;)
    (NP
      (NP (NNP Seshia))
      (, ,)
      (NP (NNP S.) (NNP A.))
      (: ;)
      (CC and)
      (NP (NNP Tinelli) (, ,) (NNP C.) (CD 2009)))
    (. .)))

root(ROOT-0, Barrett-1)
compound(W.-4, C.-3)
appos(Barrett-1, W.-4)
compound(R.-8, Sebastiani-6)
dep(Barrett-1, R.-8)
dep(Barrett-1, Seshia-10)
compound(A.-13, S.-12)
dep(Barrett-1, A.-13)
conj:and(Seshia-10, A.-13)
cc(Seshia-10, and-15)
compound(C.-18, Tinelli-16)
dep(Barrett-1, C.-18)
conj:and(Seshia-10, C.-18)
nummod(C.-18, 2009-19)

(ROOT
  (FRAG
    (ADVP (RB Satisfiability))
    (NP (NN modulo) (NNS theories))
    (. .)))

dep(theories-3, Satisfiability-1)
compound(theories-3, modulo-2)
root(ROOT-0, theories-3)

(ROOT
  (S
    (PP (IN In)
      (NP
        (NP
          (NP (NNP Biere))
          (, ,)
          (NP (NNP A.)))
        (: ;)
        (NP
          (NP (NNP Heule))
          (, ,)
          (NP (NNP M.)))
        (: ;)
        (NP
          (NP (NNP van) (NNP Maaren))
          (, ,)
          (NP (NNP H.)))
        (: ;)
        (CC and)
        (NP
          (NP (NNP Walsh) (, ,) (NNP T.) (, ,) (NNP eds.) (, ,) (NNP Handbook))
          (PP (IN of)
            (NP (NNP Satisfiability))))))
    (, ,)
    (NP (NN volume))
    (VP (VBD 185)
      (PP (IN of)
        (NP (NNP Frontiers)))
      (PP (IN in)
        (NP
          (NP (NNP Artificial) (NNP Intelligence))
          (CC and)
          (NP (NNS Applications)))))
    (. .)))

case(Biere-2, In-1)
nmod:in(185-27, Biere-2)
appos(Biere-2, A.-4)
conj:and(Biere-2, Heule-6)
nmod:in(185-27, Heule-6)
appos(Heule-6, M.-8)
compound(Maaren-11, van-10)
conj:and(Biere-2, Maaren-11)
nmod:in(185-27, Maaren-11)
appos(Maaren-11, H.-13)
cc(Biere-2, and-15)
compound(Handbook-22, Walsh-16)
appos(Handbook-22, T.-18)
appos(Handbook-22, eds.-20)
conj:and(Biere-2, Handbook-22)
nmod:in(185-27, Handbook-22)
case(Satisfiability-24, of-23)
nmod:of(Handbook-22, Satisfiability-24)
nsubj(185-27, volume-26)
root(ROOT-0, 185-27)
case(Frontiers-29, of-28)
nmod:of(185-27, Frontiers-29)
case(Intelligence-32, in-30)
compound(Intelligence-32, Artificial-31)
nmod:in(185-27, Intelligence-32)
cc(Intelligence-32, and-33)
nmod:in(185-27, Applications-34)
conj:and(Intelligence-32, Applications-34)

(ROOT
  (NP (NNP IOS) (NNP Press) (. .)))

compound(Press-2, IOS-1)
root(ROOT-0, Press-2)

(ROOT
  (FRAG
    (NP (CD 825-885))
    (. .)))

root(ROOT-0, 825-885-1)

(ROOT
  (FRAG
    (NP
      (NP (NNS Bayless))
      (, ,)
      (NP (NNP S.))
      (: ;)
      (NP (NNP Bayless) (, ,) (NNP N.)))
    (: ;)
    (NP
      (NP (NNP Hoos))
      (, ,)
      (NP (NNP H.) (NNP H.))
      (: ;)
      (CC and)
      (NP (NNP Hu) (, ,) (NNP A.) (NNP J.) (CD 2015)))
    (. .)))

root(ROOT-0, Bayless-1)
appos(Bayless-1, S.-3)
compound(N.-7, Bayless-5)
dep(Bayless-1, N.-7)
dep(Bayless-1, Hoos-9)
compound(H.-12, H.-11)
dep(Bayless-1, H.-12)
conj:and(Hoos-9, H.-12)
cc(Hoos-9, and-14)
compound(J.-18, Hu-15)
appos(J.-18, A.-17)
dep(Bayless-1, J.-18)
conj:and(Hoos-9, J.-18)
nummod(J.-18, 2015-19)

(ROOT
  (S
    (NP (NNP SAT))
    (VP (VBZ modulo)
      (NP (JJ monotonic) (NNS theories)))
    (. .)))

nsubj(modulo-2, SAT-1)
root(ROOT-0, modulo-2)
amod(theories-4, monotonic-3)
dobj(modulo-2, theories-4)

(ROOT
  (S
    (PP (IN In)
      (NP (NNP Bonet) (, ,) (NNP B.) (, ,)
        (CC and)
        (NNP Koenig)))
    (, ,)
    (NP
      (NP (NNP S.))
      (, ,)
      (NP (NN eds.))
      (, ,)
      (NP
        (NP (NNP Proceedings))
        (PP (IN of)
          (NP
            (NP (DT the) (NNP Twenty-Ninth) (NNP AAAI) (NNP Conference))
            (PP (IN on)
              (NP (NNP Artificial) (NNP Intelligence))))))
      (, ,)
      (NP (CD 2015.))
      (, ,))
    (VP (VBZ 3702-3709))
    (. .)))

case(Bonet-2, In-1)
nmod:in(3702-3709-25, Bonet-2)
conj:and(Bonet-2, B.-4)
nmod:in(3702-3709-25, B.-4)
cc(Bonet-2, and-6)
conj:and(Bonet-2, Koenig-7)
nmod:in(3702-3709-25, Koenig-7)
nsubj(3702-3709-25, S.-9)
appos(S.-9, eds.-11)
appos(S.-9, Proceedings-13)
case(Conference-18, of-14)
det(Conference-18, the-15)
compound(Conference-18, Twenty-Ninth-16)
compound(Conference-18, AAAI-17)
nmod:of(Proceedings-13, Conference-18)
case(Intelligence-21, on-19)
compound(Intelligence-21, Artificial-20)
nmod:on(Conference-18, Intelligence-21)
amod(S.-9, 2015.-23)
root(ROOT-0, 3702-3709-25)

(ROOT
  (NP (NNP AAAI) (NNP Press) (. .)))

compound(Press-2, AAAI-1)
root(ROOT-0, Press-2)

(ROOT
  (S
    (NP (NNP Chu) (, ,) (NNP G.) (, ,)
      (CC and)
      (NNP Stuckey))
    (, ,)
    (NP (NNP P.) (NNP J.))
    (VP (VBZ 2014))
    (. .)))

nsubj(2014-10, Chu-1)
conj:and(Chu-1, G.-3)
nsubj(2014-10, G.-3)
cc(Chu-1, and-5)
conj:and(Chu-1, Stuckey-6)
nsubj(2014-10, Stuckey-6)
compound(J.-9, P.-8)
nsubj(2014-10, J.-9)
root(ROOT-0, 2014-10)

(ROOT
  (S
    (VP (VB Nested)
      (NP (NN constraint) (NNS programs)))
    (. .)))

root(ROOT-0, Nested-1)
compound(programs-3, constraint-2)
dobj(Nested-1, programs-3)

(ROOT
  (S
    (PP (IN In)
      (NP
        (NP (NNP O'Sullivan) (, ,) (NNP B.) (, ,) (NNP ed.) (, ,) (NNP Principles)
          (CC and)
          (NNP Practice))
        (PP (IN of)
          (NP (NNP Constraint) (NNP Programming)))))
    (: -)
    (VP (VB CP)
      (NP (CD 2014)))
    (. .)))

case(O'Sullivan-2, In-1)
nmod:in(CP-15, O'Sullivan-2)
conj:and(O'Sullivan-2, B.-4)
nmod:in(CP-15, B.-4)
conj:and(O'Sullivan-2, ed.-6)
nmod:in(CP-15, ed.-6)
conj:and(O'Sullivan-2, Principles-8)
nmod:in(CP-15, Principles-8)
cc(O'Sullivan-2, and-9)
conj:and(O'Sullivan-2, Practice-10)
nmod:in(CP-15, Practice-10)
case(Programming-13, of-11)
compound(Programming-13, Constraint-12)
nmod:of(O'Sullivan-2, Programming-13)
root(ROOT-0, CP-15)
dobj(CP-15, 2014-16)

(ROOT
  (S
    (NP
      (NP (NNP Proceedings))
      (, ,)
      (NP
        (NP (NN volume) (CD 8656))
        (PP (IN of)
          (NP
            (NP (NNP Lecture) (NNP Notes))
            (PP (IN in)
              (NP (NNP Computer) (NNP Science))))))
      (, ,))
    (VP (VBZ 240-255))
    (. .)))

nsubj(240-255-12, Proceedings-1)
appos(Proceedings-1, volume-3)
nummod(volume-3, 8656-4)
case(Notes-7, of-5)
compound(Notes-7, Lecture-6)
nmod:of(volume-3, Notes-7)
case(Science-10, in-8)
compound(Science-10, Computer-9)
nmod:in(Notes-7, Science-10)
root(ROOT-0, 240-255-12)

(ROOT
  (S
    (VP (VB Springer))
    (. .)))

root(ROOT-0, Springer-1)

(ROOT
  (FRAG
    (NP
      (NP (NNP De) (NNP Cat))
      (, ,)
      (NP (NNP B.))
      (: ;)
      (NP (NNP Bogaerts) (, ,) (NNP B.)))
    (: ;)
    (NP
      (NP (NNP Devriendt))
      (, ,)
      (NP (NNP J.))
      (: ;)
      (CC and)
      (NP (NNP Denecker) (, ,) (NNP M.) (CD 2013)))
    (. .)))

compound(Cat-2, De-1)
root(ROOT-0, Cat-2)
appos(Cat-2, B.-4)
compound(B.-8, Bogaerts-6)
dep(Cat-2, B.-8)
dep(Cat-2, Devriendt-10)
dep(Cat-2, J.-12)
conj:and(Devriendt-10, J.-12)
cc(Devriendt-10, and-14)
compound(M.-17, Denecker-15)
dep(Cat-2, M.-17)
conj:and(Devriendt-10, M.-17)
nummod(M.-17, 2013-18)

(ROOT
  (NP
    (NP
      (NP (NNP Model) (NN expansion))
      (PP (IN in)
        (NP
          (NP (DT the) (NN presence))
          (PP (IN of)
            (NP (NN function) (NNS symbols))))))
    (VP (VBG using)
      (NP (NN constraint) (NN programming)))
    (. .)))

compound(expansion-2, Model-1)
root(ROOT-0, expansion-2)
case(presence-5, in-3)
det(presence-5, the-4)
nmod:in(expansion-2, presence-5)
case(symbols-8, of-6)
compound(symbols-8, function-7)
nmod:of(presence-5, symbols-8)
acl(expansion-2, using-9)
compound(programming-11, constraint-10)
dobj(using-9, programming-11)

(ROOT
  (S
    (PP (IN In)
      (NP (CD 2013)))
    (NP (NNP IEEE))
    (VP (VBD 25th)
      (NP
        (NP (NNP International) (NNP Conference))
        (PP (IN on)
          (NP (NNP Tools))))
      (PP (IN with)
        (NP (NNP Artificial) (CD Intelligence) (, ,) (CD 2013) (, ,) (CD 1068-1075))))
    (. .)))

case(2013-2, In-1)
nmod:in(25th-4, 2013-2)
nsubj(25th-4, IEEE-3)
root(ROOT-0, 25th-4)
compound(Conference-6, International-5)
dobj(25th-4, Conference-6)
case(Tools-8, on-7)
nmod:on(Conference-6, Tools-8)
case(Artificial-10, with-9)
nmod:with(25th-4, Artificial-10)
nummod(Artificial-10, Intelligence-11)
nummod(Artificial-10, 2013-13)
nummod(Artificial-10, 1068-1075-15)

(ROOT
  (NP (NNP IEEE) (NNP Computer) (NNP Society) (. .)))

compound(Society-3, IEEE-1)
compound(Society-3, Computer-2)
root(ROOT-0, Society-3)

(ROOT
  (NP
    (NP (NNP E) (NNP en) (, ,) (NNP N.) (, ,)
      (CC and)
      (NNP S) (NNP orensson))
    (, ,)
    (NP (NNP N.) (CD 2003))
    (. .)))

compound(N.-4, E-1)
compound(N.-4, en-2)
root(ROOT-0, N.-4)
cc(N.-4, and-6)
compound(orensson-8, S-7)
conj:and(N.-4, orensson-8)
appos(N.-4, N.-10)
nummod(N.-10, 2003-11)

(ROOT
  (S
    (NP (DT An) (NN extensible))
    (VP (VBZ SAT-solver))
    (. .)))

det(extensible-2, An-1)
nsubj(SAT-solver-3, extensible-2)
root(ROOT-0, SAT-solver-3)

(ROOT
  (S
    (PP (IN In)
      (NP (NNP Giunchiglia) (, ,) (NNP E.) (, ,)
        (CC and)
        (NNP Tacchella)))
    (, ,)
    (NP
      (NP (NNP A.) (, ,) (NNP eds.) (, ,) (NNP SAT))
      (, ,)
      (NP
        (NP (NN volume) (CD 2919))
        (PP (IN of)
          (NP (NNP LNCS))))
      (, ,))
    (VP (VBZ 502-518))
    (. .)))

case(Giunchiglia-2, In-1)
nmod:in(502-518-20, Giunchiglia-2)
conj:and(Giunchiglia-2, E.-4)
nmod:in(502-518-20, E.-4)
cc(Giunchiglia-2, and-6)
conj:and(Giunchiglia-2, Tacchella-7)
nmod:in(502-518-20, Tacchella-7)
compound(SAT-13, A.-9)
appos(SAT-13, eds.-11)
nsubj(502-518-20, SAT-13)
appos(SAT-13, volume-15)
nummod(volume-15, 2919-16)
case(LNCS-18, of-17)
nmod:of(volume-15, LNCS-18)
root(ROOT-0, 502-518-20)

(ROOT
  (S
    (VP (VB Springer))
    (. .)))

root(ROOT-0, Springer-1)

(ROOT
  (NP
    (NP (NNP Ganzinger) (, ,) (NNP H.))
    (: ;)
    (NP
      (NP
        (NP (NNP Hagen))
        (, ,)
        (NP (NNP G.)))
      (: ;)
      (NP
        (NP (NNP Nieuwenhuis))
        (, ,)
        (NP (NNP R.)))
      (: ;)
      (NP
        (NP (NNP Oliveras))
        (, ,)
        (NP (NNP A.)))
      (: ;)
      (CC and)
      (NP (NNP Tinelli) (, ,) (NNP C.) (CD 2004)))
    (. .)))

compound(H.-3, Ganzinger-1)
root(ROOT-0, H.-3)
dep(H.-3, Hagen-5)
appos(Hagen-5, G.-7)
dep(H.-3, Nieuwenhuis-9)
conj:and(Hagen-5, Nieuwenhuis-9)
appos(Nieuwenhuis-9, R.-11)
dep(H.-3, Oliveras-13)
conj:and(Hagen-5, Oliveras-13)
appos(Oliveras-13, A.-15)
cc(Hagen-5, and-17)
compound(C.-20, Tinelli-18)
dep(H.-3, C.-20)
conj:and(Hagen-5, C.-20)
nummod(C.-20, 2004-21)

(ROOT
  (NP
    (NP (NNP DPLL))
    (PRN (-LRB- -LRB-)
      (NP (NNP T))
      (-RRB- -RRB-))
    (: :)
    (NP
      (NP (NNP Fast))
      (NP (NN decision) (NNS procedures)))
    (. .)))

root(ROOT-0, DPLL-1)
appos(DPLL-1, T-3)
dep(DPLL-1, Fast-6)
compound(procedures-8, decision-7)
dep(Fast-6, procedures-8)

(ROOT
  (S
    (PP (IN In)
      (NP (NNP Alur) (, ,) (NNP R.) (, ,)
        (CC and)
        (NNP Peled)))
    (, ,)
    (NP
      (NP (NNP D.) (, ,) (NNP eds.) (, ,) (NNP CAV))
      (, ,)
      (NP
        (NP (NN volume) (CD 3114))
        (PP (IN of)
          (NP (NNP LNCS))))
      (, ,))
    (VP (VBZ 175-188))
    (. .)))

case(Alur-2, In-1)
nmod:in(175-188-20, Alur-2)
conj:and(Alur-2, R.-4)
nmod:in(175-188-20, R.-4)
cc(Alur-2, and-6)
conj:and(Alur-2, Peled-7)
nmod:in(175-188-20, Peled-7)
compound(CAV-13, D.-9)
appos(CAV-13, eds.-11)
nsubj(175-188-20, CAV-13)
appos(CAV-13, volume-15)
nummod(volume-15, 3114-16)
case(LNCS-18, of-17)
nmod:of(volume-15, LNCS-18)
root(ROOT-0, 175-188-20)

(ROOT
  (S
    (VP (VB Springer))
    (. .)))

root(ROOT-0, Springer-1)

(ROOT
  (FRAG
    (NP
      (NP (NNP Gebser) (, ,) (NNP M.))
      (: ;)
      (NP
        (NP (NNP Janhunen))
        (, ,)
        (NP (NNP T.)))
      (: ;)
      (CC and)
      (NP (NNP Rintanen) (, ,) (NNP J.) (CD 2014)))
    (. .)))

compound(M.-3, Gebser-1)
root(ROOT-0, M.-3)
conj:and(M.-3, Janhunen-5)
appos(Janhunen-5, T.-7)
cc(M.-3, and-9)
compound(J.-12, Rintanen-10)
conj:and(M.-3, J.-12)
nummod(J.-12, 2014-13)

(ROOT
  (NP
    (NP (NNP SAT) (NN modulo) (NNS graphs))
    (: :)
    (NP (NNP Acyclicity))
    (. .)))

compound(graphs-3, SAT-1)
compound(graphs-3, modulo-2)
root(ROOT-0, graphs-3)
dep(graphs-3, Acyclicity-5)

(ROOT
  (S
    (PP (IN In)
      (NP
        (NP
          (NP (NNP Logics))
          (PP (IN in)
            (NP (NNP Artificial) (NNP Intelligence))))
        (: -) (JJ 14th)
        (NP (NNP European) (NNP Conference))))
    (, ,)
    (NP (NNP JELIA))
    (VP (VBZ 2014))
    (. .)))

case(Logics-2, In-1)
nmod:in(2014-12, Logics-2)
case(Intelligence-5, in-3)
compound(Intelligence-5, Artificial-4)
nmod:in(Logics-2, Intelligence-5)
amod(Logics-2, 14th-7)
compound(Conference-9, European-8)
dep(Logics-2, Conference-9)
nsubj(2014-12, JELIA-11)
root(ROOT-0, 2014-12)

(ROOT
  (NP
    (NP (NNP Proceedings))
    (, ,)
    (NP (CD 137-151))
    (. .)))

root(ROOT-0, Proceedings-1)
amod(Proceedings-1, 137-151-3)

(ROOT
  (FRAG
    (NP
      (NP (NNP Gebser) (, ,) (NNP M.))
      (: ;)
      (NP
        (NP (NNP Kaufmann))
        (, ,)
        (NP (NNP B.)))
      (: ;)
      (CC and)
      (NP (NNP Schaub) (, ,) (NNP T.) (CD 2012)))
    (. .)))

compound(M.-3, Gebser-1)
root(ROOT-0, M.-3)
conj:and(M.-3, Kaufmann-5)
appos(Kaufmann-5, B.-7)
cc(M.-3, and-9)
compound(T.-12, Schaub-10)
conj:and(M.-3, T.-12)
nummod(T.-12, 2012-13)

(ROOT
  (S
    (NP (JJ Conflict-driven) (NN answer))
    (VP (VBD set)
      (S
        (VP (VBG solving) (: :)
          (PP (IN From)
            (NP (NN theory)
              (S
                (VP (TO to)
                  (VP (VB practice)))))))))
    (. .)))

amod(answer-2, Conflict-driven-1)
nsubj(set-3, answer-2)
root(ROOT-0, set-3)
xcomp(set-3, solving-4)
case(theory-7, From-6)
nmod:from(solving-4, theory-7)
mark(practice-9, to-8)
acl(theory-7, practice-9)

(ROOT
  (NP (NN Artif) (. .)))

root(ROOT-0, Artif-1)

(ROOT
  (S
    (VP (VB Intell))
    (. .)))

root(ROOT-0, Intell-1)

(ROOT
  (NP
    (NP (CD 187:52))
    (: -)
    (NP (CD 89))
    (. .)))

root(ROOT-0, 187:52-1)
dep(187:52-1, 89-3)

(ROOT
  (FRAG
    (NP
      (NP (NNP Gebser) (, ,) (NNP M.))
      (: ;)
      (NP
        (NP (NNP Kaufmann))
        (, ,)
        (NP (NNP B.)))
      (: ;)
      (CC and)
      (NP (NNP Schaub) (, ,) (NNP T.) (CD 2013)))
    (. .)))

compound(M.-3, Gebser-1)
root(ROOT-0, M.-3)
conj:and(M.-3, Kaufmann-5)
appos(Kaufmann-5, B.-7)
cc(M.-3, and-9)
compound(T.-12, Schaub-10)
conj:and(M.-3, T.-12)
nummod(T.-12, 2013-13)

(ROOT
  (S
    (NP (NNP Advanced) (NN conflict-driven) (NN disjunctive) (NN answer))
    (VP (VBD set)
      (S
        (VP (VBG solving))))
    (. .)))

compound(answer-4, Advanced-1)
compound(answer-4, conflict-driven-2)
compound(answer-4, disjunctive-3)
nsubj(set-5, answer-4)
root(ROOT-0, set-5)
xcomp(set-5, solving-6)

(ROOT
  (S
    (PP (IN In)
      (NP (NNP IJCAI) (CD 2013)))
    (, ,)
    (NP
      (NP (NNP Proceedings))
      (PP (IN of)
        (NP (DT the) (JJ 23rd) (NNP International) (NNP Joint))))
    (VP (VBZ Conference)
      (PP (IN on)
        (NP (NNP Artificial) (NNP Intelligence))))
    (. .)))

case(IJCAI-2, In-1)
nmod:in(Conference-11, IJCAI-2)
nummod(IJCAI-2, 2013-3)
nsubj(Conference-11, Proceedings-5)
case(Joint-10, of-6)
det(Joint-10, the-7)
amod(Joint-10, 23rd-8)
compound(Joint-10, International-9)
nmod:of(Proceedings-5, Joint-10)
root(ROOT-0, Conference-11)
case(Intelligence-14, on-12)
compound(Intelligence-14, Artificial-13)
nmod:on(Conference-11, Intelligence-14)

(ROOT
  (FRAG
    (NP
      (NP (NNP Giunchiglia) (, ,) (NNP E.))
      (: ;)
      (NP
        (NP (NNP Narizzano))
        (, ,)
        (NP (NNP M.)))
      (: ;)
      (CC and)
      (NP (NNP Tacchella) (, ,) (NNP A.) (CD 2001)))
    (. .)))

compound(E.-3, Giunchiglia-1)
root(ROOT-0, E.-3)
conj:and(E.-3, Narizzano-5)
appos(Narizzano-5, M.-7)
cc(E.-3, and-9)
compound(A.-12, Tacchella-10)
conj:and(E.-3, A.-12)
nummod(A.-12, 2001-13)

(ROOT
  (NP
    (NP (NNP Quantified) (NNP Boolean) (NNP formulas) (NN satisfiability) (NN library))
    (PRN (-LRB- -LRB-)
      (NP (NNP QBFLIB))
      (-RRB- -RRB-))
    (. .)))

compound(library-5, Quantified-1)
compound(library-5, Boolean-2)
compound(library-5, formulas-3)
compound(library-5, satisfiability-4)
root(ROOT-0, library-5)
appos(library-5, QBFLIB-7)

(ROOT
  (S
    (VP (VB http://www))
    (. .)))

root(ROOT-0, http://www-1)

(ROOT
  (S
    (VP (VBG qbflib.org))
    (. .)))

root(ROOT-0, qbflib.org-1)

(ROOT
  (FRAG
    (NP
      (NP (NNP Giunchiglia) (, ,) (NNP E.))
      (: ;)
      (NP
        (NP (NNP Narizzano))
        (, ,)
        (NP (NNP M.)))
      (: ;)
      (CC and)
      (NP (NNP Tacchella) (, ,) (NNP A.) (CD 2002)))
    (. .)))

compound(E.-3, Giunchiglia-1)
root(ROOT-0, E.-3)
conj:and(E.-3, Narizzano-5)
appos(Narizzano-5, M.-7)
cc(E.-3, and-9)
compound(A.-12, Tacchella-10)
conj:and(E.-3, A.-12)
nummod(A.-12, 2002-13)

(ROOT
  (NP
    (NP (NNP Learning))
    (PP (IN for)
      (NP (JJ quantified) (NN boolean) (NN logic)))
    (ADVP (RB satisfiability))
    (. .)))

root(ROOT-0, Learning-1)
case(logic-5, for-2)
amod(logic-5, quantified-3)
compound(logic-5, boolean-4)
nmod:for(Learning-1, logic-5)
advmod(Learning-1, satisfiability-6)

(ROOT
  (FRAG
    (PP (IN In)
      (NP
        (NP (NNP Proceedings))
        (PP (IN of)
          (NP
            (NP
              (NP (DT the) (NNP Eighteenth) (NNP National) (NNP Conference))
              (PP (IN on)
                (NP (NNP Artificial) (NNP Intelligence))))
            (CC and)
            (NP
              (NP (JJ Fourteenth) (NN Conference))
              (PP (IN on)
                (NP
                  (NP (JJ Innovative) (NNS Applications))
                  (PP (IN of)
                    (NP (NNP Artificial) (NNP Intelligence.))))))))))
    (, ,)
    (NP (CD 649-654))
    (. .)))

case(Proceedings-2, In-1)
nmod:in(649-654-21, Proceedings-2)
case(Conference-7, of-3)
det(Conference-7, the-4)
compound(Conference-7, Eighteenth-5)
compound(Conference-7, National-6)
nmod:of(Proceedings-2, Conference-7)
case(Intelligence-10, on-8)
compound(Intelligence-10, Artificial-9)
nmod:on(Conference-7, Intelligence-10)
cc(Conference-7, and-11)
amod(Conference-13, Fourteenth-12)
nmod:of(Proceedings-2, Conference-13)
conj:and(Conference-7, Conference-13)
case(Applications-16, on-14)
amod(Applications-16, Innovative-15)
nmod:on(Conference-13, Applications-16)
case(Intelligence.-19, of-17)
compound(Intelligence.-19, Artificial-18)
nmod:of(Applications-16, Intelligence.-19)
root(ROOT-0, 649-654-21)

(ROOT
  (NP
    (NP (NNP Goultiaeva))
    (, ,)
    (NP (NNP A.))
    (, ,)
    (CC and)
    (NP
      (NP (NNP Bacchus))
      (, ,)
      (NP (NNP F.) (CD 2013)))
    (. .)))

root(ROOT-0, Goultiaeva-1)
conj:and(Goultiaeva-1, A.-3)
cc(Goultiaeva-1, and-5)
conj:and(Goultiaeva-1, Bacchus-6)
appos(Bacchus-6, F.-8)
nummod(F.-8, 2013-9)

(ROOT
  (S
    (VP (VBG Recovering)
      (CC and)
      (VBG utilizing)
      (NP (JJ partial) (NN duality))
      (PP (IN in)
        (NP (NNP QBF))))
    (. .)))

root(ROOT-0, Recovering-1)
cc(Recovering-1, and-2)
conj:and(Recovering-1, utilizing-3)
amod(duality-5, partial-4)
dobj(Recovering-1, duality-5)
case(QBF-7, in-6)
nmod:in(Recovering-1, QBF-7)

(ROOT
  (FRAG
    (PP (IN In)
      (NP
        (NP (NNP Theory))
        (CC and)
        (NP
          (NP (NNS Applications))
          (PP (IN of)
            (NP (NNP Satisfiability) (NNP Testing))))))
    (: -)
    (NP
      (NP (NNP SAT) (CD 2013))
      (: -)
      (NP (JJ 16th) (NNP International) (NNP Conference))
      (, ,)
      (NP
        (NP (NNP Helsinki))
        (, ,)
        (NP (NNP Finland) (, ,) (NNP July) (CD 8-12) (, ,) (CD 2013))))
    (. .)))

case(Theory-2, In-1)
nmod:in(SAT-9, Theory-2)
cc(Theory-2, and-3)
conj:and(Theory-2, Applications-4)
nmod:in(SAT-9, Applications-4)
case(Testing-7, of-5)
compound(Testing-7, Satisfiability-6)
nmod:of(Applications-4, Testing-7)
root(ROOT-0, SAT-9)
nummod(SAT-9, 2013-10)
amod(Conference-14, 16th-12)
compound(Conference-14, International-13)
dep(SAT-9, Conference-14)
appos(SAT-9, Helsinki-16)
compound(July-20, Finland-18)
appos(Helsinki-16, July-20)
nummod(July-20, 8-12-21)
nummod(July-20, 2013-23)

(ROOT
  (NP
    (NP (NNP Proceedings))
    (, ,)
    (NP (CD 83-99))
    (. .)))

root(ROOT-0, Proceedings-1)
amod(Proceedings-1, 83-99-3)

(ROOT
  (FRAG
    (NP
      (NP (NNP Goultiaeva) (, ,) (NNP A.))
      (: ;)
      (NP
        (NP (NNP Seidl))
        (, ,)
        (NP (NNP M.)))
      (: ;)
      (CC and)
      (NP (NNP Biere) (, ,) (NNP A.) (CD 2013)))
    (. .)))

compound(A.-3, Goultiaeva-1)
root(ROOT-0, A.-3)
conj:and(A.-3, Seidl-5)
appos(Seidl-5, M.-7)
cc(A.-3, and-9)
compound(A.-12, Biere-10)
conj:and(A.-3, A.-12)
nummod(A.-12, 2013-13)

(ROOT
  (S
    (S
      (VP (VBG Bridging)
        (NP
          (NP (DT the) (NN gap))
          (PP (IN between)
            (NP (JJ dual) (NN propagation))))))
    (CC and)
    (S
      (NP (JJ cnf-based) (NN qbf))
      (VP (VBG solving)))
    (. .)))

root(ROOT-0, Bridging-1)
det(gap-3, the-2)
dobj(Bridging-1, gap-3)
case(propagation-6, between-4)
amod(propagation-6, dual-5)
nmod:between(gap-3, propagation-6)
cc(Bridging-1, and-7)
amod(qbf-9, cnf-based-8)
nsubj(solving-10, qbf-9)
conj:and(Bridging-1, solving-10)

(ROOT
  (S
    (PP (IN In)
      (NP (NNP Design)))
    (, ,)
    (NP (NNP Automation))
    (VP (VB Test)
      (PP (IN in)
        (NP
          (NP
            (NP (NNP Europe) (NNP Conference) (NNP Exhibition))
            (PRN (-LRB- -LRB-)
              (NP (NNP DATE))
              (-RRB- -RRB-)))
          (, ,)
          (NP
            (NP (CD 2013))
            (, ,)
            (NP (CD 811-814))))))
    (. .)))

case(Design-2, In-1)
nmod:in(Test-5, Design-2)
nsubj(Test-5, Automation-4)
root(ROOT-0, Test-5)
case(Exhibition-9, in-6)
compound(Exhibition-9, Europe-7)
compound(Exhibition-9, Conference-8)
nmod:in(Test-5, Exhibition-9)
appos(Exhibition-9, DATE-11)
appos(Exhibition-9, 2013-14)
amod(2013-14, 811-814-16)

(ROOT
  (FRAG
    (NP (CD Janhunen))
    (, ,)
    (NP
      (NP (NNP T.))
      (: ;)
      (NP
        (NP (NNP Tasharrofi))
        (, ,)
        (NP (NNP S.)))
      (: ;)
      (CC and)
      (NP (NNP Ternovska) (, ,) (NNP E.) (CD 2016)))
    (. .)))

root(ROOT-0, Janhunen-1)
appos(Janhunen-1, T.-3)
appos(Janhunen-1, Tasharrofi-5)
conj:and(T.-3, Tasharrofi-5)
appos(Tasharrofi-5, S.-7)
cc(T.-3, and-9)
compound(E.-12, Ternovska-10)
appos(Janhunen-1, E.-12)
conj:and(T.-3, E.-12)
nummod(E.-12, 2016-13)

(ROOT
  (NP
    (NP (NNP SAT)
      (PRN (: -)
        (NP (NNP TO))
        (: -))
      (NNP SAT))
    (: :)
    (NP
      (NP (JJ Declarative) (NN extension))
      (PP (IN of)
        (NP
          (NP (NNP SAT) (NNS solvers))
          (PP (IN with)
            (NP (JJ new) (NNS propagators))))))
    (. .)))

compound(SAT-5, SAT-1)
dep(SAT-5, TO-3)
root(ROOT-0, SAT-5)
amod(extension-8, Declarative-7)
dep(SAT-5, extension-8)
case(solvers-11, of-9)
compound(solvers-11, SAT-10)
nmod:of(extension-8, solvers-11)
case(propagators-14, with-12)
amod(propagators-14, new-13)
nmod:with(solvers-11, propagators-14)

(ROOT
  (FRAG
    (PP (IN In)
      (PP (TO To)
        (NP
          (NP (NNP Appear))
          (PP (IN in)
            (NP
              (NP (DT the) (NNP Proceedings))
              (PP (IN of)
                (NP
                  (NP (NNP 30th) (NNP AAAI) (NNP Conference))
                  (PP (IN on)
                    (NP
                      (NP (NNP Artificial) (NNP Intelligence))
                      (PRN (-LRB- -LRB-)
                        (NP (NNP AAAI-16))
                        (-RRB- -RRB-)))))))))))
    (. .)))

case(Appear-3, In-1)
case(Appear-3, To-2)
root(ROOT-0, Appear-3)
case(Proceedings-6, in-4)
det(Proceedings-6, the-5)
nmod:in(Appear-3, Proceedings-6)
case(Conference-10, of-7)
compound(Conference-10, 30th-8)
compound(Conference-10, AAAI-9)
nmod:of(Proceedings-6, Conference-10)
case(Intelligence-13, on-11)
compound(Intelligence-13, Artificial-12)
nmod:on(Conference-10, Intelligence-13)
appos(Intelligence-13, AAAI-16-15)

(ROOT
  (S
    (VP (VB Preprint)
      (ADJP (JJ available)
        (PP (IN on)
          (NP (JJ https://www.cs.sfu.ca/sta44/personal/) (NN files/jtt-aaai-2016.pdf)))))
    (. .)))

root(ROOT-0, Preprint-1)
xcomp(Preprint-1, available-2)
case(files/jtt-aaai-2016.pdf-5, on-3)
amod(files/jtt-aaai-2016.pdf-5, https://www.cs.sfu.ca/sta44/personal/-4)
nmod:on(available-2, files/jtt-aaai-2016.pdf-5)

(ROOT
  (NP
    (NP (NNP Janota))
    (, ,)
    (NP (NNP M.))
    (, ,)
    (CC and)
    (NP
      (NP (NNP Marques-Silva))
      (, ,)
      (NP (NNP J.) (CD 2015)))
    (. .)))

root(ROOT-0, Janota-1)
conj:and(Janota-1, M.-3)
cc(Janota-1, and-5)
conj:and(Janota-1, Marques-Silva-6)
appos(Marques-Silva-6, J.-8)
nummod(J.-8, 2015-9)

(ROOT
  (S
    (VP (VBG Solving)
      (NP (NNP QBF))
      (PP (IN by)
        (NP (NN clause) (NN selection))))
    (. .)))

root(ROOT-0, Solving-1)
dobj(Solving-1, QBF-2)
case(selection-5, by-3)
compound(selection-5, clause-4)
nmod:by(Solving-1, selection-5)

(ROOT
  (FRAG
    (PP (IN In)
      (NP
        (NP (NNP Proceedings))
        (PP (IN of)
          (NP (DT the) (NNP Twenty-Fourth) (NNP International) (NNP Joint) (NNP Conference)))
        (PP (IN on)
          (NP
            (NP (NNP Artificial) (NNP Intelligence))
            (, ,)
            (NP (NNP IJCAI) (CD 2015.) (, ,) (CD 325-331))))))
    (. .)))

case(Proceedings-2, In-1)
root(ROOT-0, Proceedings-2)
case(Conference-8, of-3)
det(Conference-8, the-4)
compound(Conference-8, Twenty-Fourth-5)
compound(Conference-8, International-6)
compound(Conference-8, Joint-7)
nmod:of(Proceedings-2, Conference-8)
case(Intelligence-11, on-9)
compound(Intelligence-11, Artificial-10)
nmod:on(Proceedings-2, Intelligence-11)
appos(Intelligence-11, IJCAI-13)
nummod(IJCAI-13, 2015.-14)
nummod(IJCAI-13, 325-331-16)

(ROOT
  (NP
    (NP (NNP Janota) (, ,) (NNP M.))
    (: ;)
    (NP
      (NP
        (NP (NNP Klieber))
        (, ,)
        (NP (NNP W.)))
      (: ;)
      (NP
        (NP (NNP Marques-Silva))
        (, ,)
        (NP (NNP J.)))
      (: ;)
      (CC and)
      (NP (NNP Clarke) (, ,) (NNP E.) (NNP M.) (CD 2012)))
    (. .)))

compound(M.-3, Janota-1)
root(ROOT-0, M.-3)
dep(M.-3, Klieber-5)
appos(Klieber-5, W.-7)
dep(M.-3, Marques-Silva-9)
conj:and(Klieber-5, Marques-Silva-9)
appos(Marques-Silva-9, J.-11)
cc(Klieber-5, and-13)
compound(M.-17, Clarke-14)
appos(M.-17, E.-16)
dep(M.-3, M.-17)
conj:and(Klieber-5, M.-17)
nummod(M.-17, 2012-18)

(ROOT
  (S
    (NP
      (NP (NNP Solving) (NNP QBF))
      (PP (IN with)
        (NP (NN counterexample))))
    (VP (VBN guided)
      (S
        (ADJP (JJ refinement))))
    (. .)))

compound(QBF-2, Solving-1)
nsubj(guided-5, QBF-2)
case(counterexample-4, with-3)
nmod:with(QBF-2, counterexample-4)
root(ROOT-0, guided-5)
xcomp(guided-5, refinement-6)

(ROOT
  (FRAG
    (PP (IN In)
      (NP
        (NP (NNP Theory))
        (CC and)
        (NP
          (NP (NNS Applications))
          (PP (IN of)
            (NP (NNP Satisfiability) (NNP Testing))))))
    (: -)
    (NP
      (NP (NNP SAT) (CD 2012))
      (: -)
      (NP
        (NP (NNP 15th) (NNP International) (NNP Conference))
        (, ,)
        (NP (CD 2012))))
    (. .)))

case(Theory-2, In-1)
nmod:in(SAT-9, Theory-2)
cc(Theory-2, and-3)
conj:and(Theory-2, Applications-4)
nmod:in(SAT-9, Applications-4)
case(Testing-7, of-5)
compound(Testing-7, Satisfiability-6)
nmod:of(Applications-4, Testing-7)
root(ROOT-0, SAT-9)
nummod(SAT-9, 2012-10)
compound(Conference-14, 15th-12)
compound(Conference-14, International-13)
dep(SAT-9, Conference-14)
amod(Conference-14, 2012-16)

(ROOT
  (NP
    (NP (NNP Proceedings))
    (, ,)
    (NP (CD 114-128))
    (. .)))

root(ROOT-0, Proceedings-1)
amod(Proceedings-1, 114-128-3)

(ROOT
  (NP
    (NP (NNP Klieber) (, ,) (NNP W.))
    (: ;)
    (NP
      (NP
        (NP (NNP Sapra))
        (, ,)
        (NP (NNP S.)))
      (: ;)
      (NP
        (NP (NNP Gao))
        (, ,)
        (NP (NNP S.)))
      (: ;)
      (CC and)
      (NP (NNP Clarke) (, ,) (NNP E.) (NNP M.) (CD 2010)))
    (. .)))

compound(W.-3, Klieber-1)
root(ROOT-0, W.-3)
dep(W.-3, Sapra-5)
appos(Sapra-5, S.-7)
dep(W.-3, Gao-9)
conj:and(Sapra-5, Gao-9)
appos(Gao-9, S.-11)
cc(Sapra-5, and-13)
compound(M.-17, Clarke-14)
appos(M.-17, E.-16)
dep(W.-3, M.-17)
conj:and(Sapra-5, M.-17)
nummod(M.-17, 2010-18)

(ROOT
  (NP
    (NP (DT A) (NN nonprenex))
    (, ,)
    (NP
      (NP (JJ non-clausal) (NN QBF) (NN solver))
      (PP (IN with)
        (NP (JJ game-state) (NN learning))))
    (. .)))

det(nonprenex-2, A-1)
root(ROOT-0, nonprenex-2)
amod(solver-6, non-clausal-4)
compound(solver-6, QBF-5)
appos(nonprenex-2, solver-6)
case(learning-9, with-7)
amod(learning-9, game-state-8)
nmod:with(solver-6, learning-9)

(ROOT
  (FRAG
    (PP (IN In)
      (NP
        (NP (NNP Theory))
        (CC and)
        (NP
          (NP (NNS Applications))
          (PP (IN of)
            (NP (NNP Satisfiability) (NNP Testing))))))
    (: -)
    (NP
      (NP (NNP SAT) (CD 2010))
      (, ,)
      (NP (NNP 13th) (NNP International) (NNP Conference))
      (, ,)
      (NP (NNP Proceedings))
      (, ,)
      (NP (CD 128-142)))
    (. .)))

case(Theory-2, In-1)
nmod:in(SAT-9, Theory-2)
cc(Theory-2, and-3)
conj:and(Theory-2, Applications-4)
nmod:in(SAT-9, Applications-4)
case(Testing-7, of-5)
compound(Testing-7, Satisfiability-6)
nmod:of(Applications-4, Testing-7)
root(ROOT-0, SAT-9)
nummod(SAT-9, 2010-10)
compound(Conference-14, 13th-12)
compound(Conference-14, International-13)
appos(SAT-9, Conference-14)
appos(SAT-9, Proceedings-16)
amod(SAT-9, 128-142-18)

(ROOT
  (NP
    (NP (NNP Letz))
    (, ,)
    (NP (NNP R.) (CD 2002))
    (. .)))

root(ROOT-0, Letz-1)
appos(Letz-1, R.-3)
nummod(R.-3, 2002-4)

(ROOT
  (NP
    (NP (NN Lemma)
      (CC and)
      (NN model))
    (VP (VBG caching)
      (PP (IN in)
        (NP
          (NP (NN decision) (NNS procedures))
          (PP (IN for)
            (NP (JJ quantified) (NN boolean) (NNS formulas))))))
    (. .)))

root(ROOT-0, Lemma-1)
cc(Lemma-1, and-2)
conj:and(Lemma-1, model-3)
acl(Lemma-1, caching-4)
case(procedures-7, in-5)
compound(procedures-7, decision-6)
nmod:in(caching-4, procedures-7)
case(formulas-11, for-8)
amod(formulas-11, quantified-9)
compound(formulas-11, boolean-10)
nmod:for(procedures-7, formulas-11)

(ROOT
  (S
    (PP (IN In)
      (NP
        (NP (VBN Automated) (NN Reasoning))
        (PP (IN with)
          (NP
            (NP (NNP Analytic) (NNP Tableaux))
            (CC and)
            (NP (NNP Related) (NNP Methods))))))
    (, ,)
    (NP
      (NP (NNP International) (NNP Conference))
      (, ,)
      (NP (NNP TABLEAUX) (CD 2002) (, ,) (CD Proceedings))
      (, ,))
    (VP (VBZ 160-175))
    (. .)))

case(Reasoning-3, In-1)
amod(Reasoning-3, Automated-2)
nmod:in(160-175-19, Reasoning-3)
case(Tableaux-6, with-4)
compound(Tableaux-6, Analytic-5)
nmod:with(Reasoning-3, Tableaux-6)
cc(Tableaux-6, and-7)
compound(Methods-9, Related-8)
nmod:with(Reasoning-3, Methods-9)
conj:and(Tableaux-6, Methods-9)
compound(Conference-12, International-11)
nsubj(160-175-19, Conference-12)
appos(Conference-12, TABLEAUX-14)
nummod(TABLEAUX-14, 2002-15)
nummod(TABLEAUX-14, Proceedings-17)
root(ROOT-0, 160-175-19)

(ROOT
  (NP
    (NP (NNP Marek) (, ,) (NNP V.) (, ,)
      (CC and)
      (NNP Truszczy) (NNP nski))
    (, ,)
    (NP (NNP M.) (CD 1999))
    (. .)))

compound(V.-3, Marek-1)
root(ROOT-0, V.-3)
cc(V.-3, and-5)
compound(nski-7, Truszczy-6)
conj:and(V.-3, nski-7)
appos(V.-3, M.-9)
nummod(M.-9, 1999-10)

(ROOT
  (S
    (NP
      (NP (JJ Stable) (NNS models))
      (CC and)
      (NP (DT an) (JJ alternative) (NN logic) (NN programming)))
    (VP (VBP paradigm))
    (. .)))

amod(models-2, Stable-1)
nsubj(paradigm-8, models-2)
cc(models-2, and-3)
det(programming-7, an-4)
amod(programming-7, alternative-5)
compound(programming-7, logic-6)
conj:and(models-2, programming-7)
nsubj(paradigm-8, programming-7)
root(ROOT-0, paradigm-8)

(ROOT
  (FRAG
    (PP (IN In)
      (NP (NNP Apt)))
    (, ,)
    (NP
      (NP (NNP K.) (NNP R.))
      (: ;)
      (NP
        (NP
          (NP (NNP Marek))
          (, ,)
          (NP (NNP V.)))
        (: ;)
        (NP
          (NP (NNP Truszczy) (NNP nski))
          (, ,)
          (NP (NNP M.)))
        (: ;)
        (CC and)
        (NP
          (NP (NNP Warren))
          (, ,)
          (NP (NNP D.) (NNP S.))
          (, ,)
          (NP (NN eds.))
          (, ,)
          (NP (DT The) (NNP Logic) (NNP Programming) (NNP Paradigm))))
      (: :)
      (NP (DT A) (JJ 25-Year) (NNP Perspective)))
    (. .)))

case(Apt-2, In-1)
nmod:in(R.-5, Apt-2)
compound(R.-5, K.-4)
root(ROOT-0, R.-5)
dep(R.-5, Marek-7)
appos(Marek-7, V.-9)
compound(nski-12, Truszczy-11)
dep(R.-5, nski-12)
conj:and(Marek-7, nski-12)
appos(nski-12, M.-14)
cc(Marek-7, and-16)
dep(R.-5, Warren-17)
conj:and(Marek-7, Warren-17)
compound(S.-20, D.-19)
appos(Warren-17, S.-20)
appos(Warren-17, eds.-22)
det(Paradigm-27, The-24)
compound(Paradigm-27, Logic-25)
compound(Paradigm-27, Programming-26)
appos(Warren-17, Paradigm-27)
det(Perspective-31, A-29)
amod(Perspective-31, 25-Year-30)
dep(R.-5, Perspective-31)

(ROOT
  (NP (NN Springer-Verlag) (. .)))

root(ROOT-0, Springer-Verlag-1)

(ROOT
  (FRAG
    (NP (CD 375-398))
    (. .)))

root(ROOT-0, 375-398-1)

(ROOT
  (NP
    (NP (NNP Marques-Silva))
    (, ,)
    (NP
      (NP (NNP J.) (NNP P.))
      (, ,)
      (CC and)
      (NP (NNP Sakallah) (, ,) (NNP K.) (NNP A.) (CD 1999)))
    (. .)))

root(ROOT-0, Marques-Silva-1)
compound(P.-4, J.-3)
appos(Marques-Silva-1, P.-4)
cc(P.-4, and-6)
compound(A.-10, Sakallah-7)
appos(A.-10, K.-9)
appos(Marques-Silva-1, A.-10)
conj:and(P.-4, A.-10)
nummod(A.-10, 1999-11)

(ROOT
  (NP
    (NP (NNP GRASP))
    (: :)
    (NP
      (NP (DT A) (NN search) (NN algorithm))
      (PP (IN for)
        (NP (JJ propositional) (NN satisfiability))))
    (. .)))

root(ROOT-0, GRASP-1)
det(algorithm-5, A-3)
compound(algorithm-5, search-4)
dep(GRASP-1, algorithm-5)
case(satisfiability-8, for-6)
amod(satisfiability-8, propositional-7)
nmod:for(algorithm-5, satisfiability-8)

(ROOT
  (S
    (NP
      (NP (JJ IEEE) (NNS Transactions))
      (PP (IN on)
        (NP (NNPS Computers))))
    (VP (VBZ 48)
      (PRN (-LRB- -LRB-)
        (NP (CD 5))
        (-RRB- -RRB-))
      (NP (CD :506) (CD -521)))
    (. .)))

amod(Transactions-2, IEEE-1)
nsubj(48-5, Transactions-2)
case(Computers-4, on-3)
nmod:on(Transactions-2, Computers-4)
root(ROOT-0, 48-5)
dep(48-5, 5-7)
nummod(-521-10, :506-9)
dobj(48-5, -521-10)

(ROOT
  (NP
    (NP (NNP Nadel))
    (, ,)
    (NP (NNP A.))
    (, ,)
    (CC and)
    (NP
      (NP (NNP Ryvchin))
      (, ,)
      (NP (NNP V.) (CD 2012)))
    (. .)))

root(ROOT-0, Nadel-1)
conj:and(Nadel-1, A.-3)
cc(Nadel-1, and-5)
conj:and(Nadel-1, Ryvchin-6)
appos(Ryvchin-6, V.-8)
nummod(V.-8, 2012-9)

(ROOT
  (NP
    (NP (NNP Efficient) (NNP SAT))
    (VP (VBG solving)
      (PP (IN under)
        (NP (NNS assumptions))))
    (. .)))

compound(SAT-2, Efficient-1)
root(ROOT-0, SAT-2)
acl(SAT-2, solving-3)
case(assumptions-5, under-4)
nmod:under(solving-3, assumptions-5)

(ROOT
  (FRAG
    (PP (IN In)
      (NP
        (NP (NNP Theory))
        (CC and)
        (NP
          (NP (NNS Applications))
          (PP (IN of)
            (NP (NNP Satisfiability) (NNP Testing))))))
    (: -)
    (NP
      (NP (NNP SAT) (CD 2012))
      (: -)
      (NP
        (NP (NNP 15th) (NNP International) (NNP Conference))
        (, ,)
        (NP (CD 2012))))
    (. .)))

case(Theory-2, In-1)
nmod:in(SAT-9, Theory-2)
cc(Theory-2, and-3)
conj:and(Theory-2, Applications-4)
nmod:in(SAT-9, Applications-4)
case(Testing-7, of-5)
compound(Testing-7, Satisfiability-6)
nmod:of(Applications-4, Testing-7)
root(ROOT-0, SAT-9)
nummod(SAT-9, 2012-10)
compound(Conference-14, 15th-12)
compound(Conference-14, International-13)
dep(SAT-9, Conference-14)
amod(Conference-14, 2012-16)

(ROOT
  (NP
    (NP (NNP Proceedings))
    (, ,)
    (NP (CD 242-255))
    (. .)))

root(ROOT-0, Proceedings-1)
amod(Proceedings-1, 242-255-3)

(ROOT
  (FRAG
    (NP
      (NP (NNP Ohrimenko) (, ,) (NNP O.))
      (: ;)
      (NP
        (NP (NNP Stuckey))
        (, ,)
        (NP (NNP P.) (NNP J.)))
      (: ;)
      (CC and)
      (NP (NNP Codish) (, ,) (NNP M.) (CD 2009)))
    (. .)))

compound(O.-3, Ohrimenko-1)
root(ROOT-0, O.-3)
conj:and(O.-3, Stuckey-5)
compound(J.-8, P.-7)
appos(Stuckey-5, J.-8)
cc(O.-3, and-10)
compound(M.-13, Codish-11)
conj:and(O.-3, M.-13)
nummod(M.-13, 2009-14)

(ROOT
  (NP
    (NP (NNP Propagation))
    (PP (IN via)
      (NP (JJ lazy) (NN clause) (NN generation)))
    (. .)))

root(ROOT-0, Propagation-1)
case(generation-5, via-2)
amod(generation-5, lazy-3)
compound(generation-5, clause-4)
nmod:via(Propagation-1, generation-5)

(ROOT
  (NP
    (NP (NNS Constraints))
    (NP
      (NP (CD 14))
      (PRN (-LRB- -LRB-)
        (NP (CD 3))
        (-RRB- -RRB-))
      (NP (CD :357) (CD -391)))
    (. .)))

root(ROOT-0, Constraints-1)
dep(Constraints-1, 14-2)
appos(14-2, 3-4)
nummod(-391-7, :357-6)
dep(14-2, -391-7)

(ROOT
  (NP (NNP QBF) (NNP Gallery) (. .)))

compound(Gallery-2, QBF-1)
root(ROOT-0, Gallery-2)

(ROOT
  (NP (FW 2014) (. .)))

root(ROOT-0, 2014-1)

(ROOT
  (NP
    (NP (NN QCIR-G14))
    (: :)
    (NP
      (NP (DT A) (JJ non-prenex) (JJ non-CNF) (NN format))
      (PP (IN for)
        (NP (JJ quantified) (NN boolean) (NNS formulas))))
    (. .)))

root(ROOT-0, QCIR-G14-1)
det(format-6, A-3)
amod(format-6, non-prenex-4)
amod(format-6, non-CNF-5)
dep(QCIR-G14-1, format-6)
case(formulas-10, for-7)
amod(formulas-10, quantified-8)
compound(formulas-10, boolean-9)
nmod:for(format-6, formulas-10)

(ROOT
  (S
    (NP (NNP Technical))
    (VP (VBP report))
    (. .)))

nsubj(report-2, Technical-1)
root(ROOT-0, report-2)

(ROOT
  (NP (FW 2014) (. .)))

root(ROOT-0, 2014-1)

(ROOT
  (NP
    (NP (NNP QBF) (NN gallery) (CD 2014))
    (PRN (-LRB- -LRB-)
      (NP (NN competition))
      (-RRB- -RRB-))
    (. .)))

compound(gallery-2, QBF-1)
root(ROOT-0, gallery-2)
nummod(gallery-2, 2014-3)
appos(gallery-2, competition-5)

(ROOT
  (S
    (VP (VB http://qbf))
    (. .)))

root(ROOT-0, http://qbf-1)

(ROOT
  (S
    (VP (VB satisfiability.org/gallery/index.html))
    (. .)))

root(ROOT-0, satisfiability.org/gallery/index.html-1)

(ROOT
  (NP
    (NP (NNP Rabe))
    (, ,)
    (NP (NNP M.) (NNP N.))
    (, ,)
    (CC and)
    (NP
      (NP (NNP Tentrup))
      (, ,)
      (NP (NNP L.) (CD 2015)))
    (. .)))

root(ROOT-0, Rabe-1)
compound(N.-4, M.-3)
conj:and(Rabe-1, N.-4)
cc(Rabe-1, and-6)
conj:and(Rabe-1, Tentrup-7)
appos(Tentrup-7, L.-9)
nummod(L.-9, 2015-10)

(ROOT
  (NP
    (NP (NNP Caqe))
    (: :)
    (NP (DT A) (JJ certifying) (NN qbf) (NN solver))
    (. .)))

root(ROOT-0, Caqe-1)
det(solver-6, A-3)
amod(solver-6, certifying-4)
compound(solver-6, qbf-5)
dep(Caqe-1, solver-6)

(ROOT
  (S
    (PP (IN In)
      (NP
        (NP (NNP Proceedings))
        (PP (IN of)
          (NP
            (NP (DT the) (JJ 15th) (NN Conference))
            (PP (IN on)
              (NP
                (NP (NNP Formal) (NNP Methods))
                (PP (IN in)
                  (NP (JJ Computer-aided) (NN Design)))))))
        (PRN (-LRB- -LRB-)
          (VP (VBN FMCAD) ('' ')
            (NP (CD 15)))
          (-RRB- -RRB-))))
    (, ,)
    (VP (VB 136-143))
    (. .)))

case(Proceedings-2, In-1)
nmod:in(136-143-19, Proceedings-2)
case(Conference-6, of-3)
det(Conference-6, the-4)
amod(Conference-6, 15th-5)
nmod:of(Proceedings-2, Conference-6)
case(Methods-9, on-7)
compound(Methods-9, Formal-8)
nmod:on(Conference-6, Methods-9)
case(Design-12, in-10)
amod(Design-12, Computer-aided-11)
nmod:in(Methods-9, Design-12)
dep(Proceedings-2, FMCAD-14)
dobj(FMCAD-14, 15-16)
root(ROOT-0, 136-143-19)

(ROOT
  (FRAG
    (NP (CD Ranjan))
    (, ,)
    (NP
      (NP (NNP D.) (NNP P.))
      (: ;)
      (NP
        (NP (NNP Tang))
        (, ,)
        (NP (NNP D.)))
      (: ;)
      (CC and)
      (NP (NNP Malik) (, ,) (NNP S.) (CD 2004)))
    (. .)))

root(ROOT-0, Ranjan-1)
compound(P.-4, D.-3)
appos(Ranjan-1, P.-4)
appos(Ranjan-1, Tang-6)
conj:and(P.-4, Tang-6)
appos(Tang-6, D.-8)
cc(P.-4, and-10)
compound(S.-13, Malik-11)
appos(Ranjan-1, S.-13)
conj:and(P.-4, S.-13)
nummod(S.-13, 2004-14)

(ROOT
  (NP
    (NP (DT A) (JJ comparative) (NN study))
    (PP (IN of)
      (NP (JJ 2qbf) (NNS algorithms)))
    (. .)))

det(study-3, A-1)
amod(study-3, comparative-2)
root(ROOT-0, study-3)
case(algorithms-6, of-4)
amod(algorithms-6, 2qbf-5)
nmod:of(study-3, algorithms-6)

(ROOT
  (FRAG
    (PP (IN In)
      (NP (NNP SAT) (CD 2004)))
    (: -)
    (NP
      (NP
        (NP (DT The) (NNP Seventh) (NNP International) (NNP Conference))
        (PP (IN on)
          (NP (NNP Theory))))
      (CC and)
      (NP
        (NP (NNS Applications))
        (PP (IN of)
          (NP
            (NP (NNP Satisfiability) (NNP Testing))
            (, ,)
            (NP (NNP Online) (NNP Proceedings))))))
    (. .)))

case(SAT-2, In-1)
nmod:in(Conference-8, SAT-2)
nummod(SAT-2, 2004-3)
det(Conference-8, The-5)
compound(Conference-8, Seventh-6)
compound(Conference-8, International-7)
root(ROOT-0, Conference-8)
case(Theory-10, on-9)
nmod:on(Conference-8, Theory-10)
cc(Conference-8, and-11)
conj:and(Conference-8, Applications-12)
case(Testing-15, of-13)
compound(Testing-15, Satisfiability-14)
nmod:of(Applications-12, Testing-15)
compound(Proceedings-18, Online-17)
appos(Testing-15, Proceedings-18)

(ROOT
  (FRAG
    (INTJ (UH Silva))
    (, ,)
    (NP
      (NP (NNP J.) (NNP P.) (NNP M.))
      (: ;)
      (NP
        (NP (NNP Lynce))
        (, ,)
        (NP (NNP I.)))
      (: ;)
      (CC and)
      (NP (NNP Malik) (, ,) (NNP S.) (CD 2009)))
    (. .)))

discourse(M.-5, Silva-1)
compound(M.-5, J.-3)
compound(M.-5, P.-4)
root(ROOT-0, M.-5)
conj:and(M.-5, Lynce-7)
appos(Lynce-7, I.-9)
cc(M.-5, and-11)
compound(S.-14, Malik-12)
conj:and(M.-5, S.-14)
nummod(S.-14, 2009-15)

(ROOT
  (NP
    (NP (JJ Conflict-driven) (NN clause))
    (VP (VBG learning)
      (NP (NNP SAT) (NNS solvers)))
    (. .)))

amod(clause-2, Conflict-driven-1)
root(ROOT-0, clause-2)
acl(clause-2, learning-3)
compound(solvers-5, SAT-4)
dobj(learning-3, solvers-5)

(ROOT
  (S
    (PP (IN In)
      (NP
        (NP
          (NP (NNP Biere))
          (, ,)
          (NP (NNP A.)))
        (: ;)
        (NP
          (NP (NNP Heule))
          (, ,)
          (NP (NNP M.)))
        (: ;)
        (NP
          (NP (NNP van) (NNP Maaren))
          (, ,)
          (NP (NNP H.)))
        (: ;)
        (CC and)
        (NP
          (NP (NNP Walsh) (, ,) (NNP T.) (, ,) (NNP eds.) (, ,) (NNP Handbook))
          (PP (IN of)
            (NP (NNP Satisfiability))))))
    (, ,)
    (NP (NN volume))
    (VP (VBD 185)
      (PP (IN of)
        (NP (NNP Frontiers)))
      (PP (IN in)
        (NP
          (NP (NNP Artificial) (NNP Intelligence))
          (CC and)
          (NP (NNS Applications)))))
    (. .)))

case(Biere-2, In-1)
nmod:in(185-27, Biere-2)
appos(Biere-2, A.-4)
conj:and(Biere-2, Heule-6)
nmod:in(185-27, Heule-6)
appos(Heule-6, M.-8)
compound(Maaren-11, van-10)
conj:and(Biere-2, Maaren-11)
nmod:in(185-27, Maaren-11)
appos(Maaren-11, H.-13)
cc(Biere-2, and-15)
compound(Handbook-22, Walsh-16)
appos(Handbook-22, T.-18)
appos(Handbook-22, eds.-20)
conj:and(Biere-2, Handbook-22)
nmod:in(185-27, Handbook-22)
case(Satisfiability-24, of-23)
nmod:of(Handbook-22, Satisfiability-24)
nsubj(185-27, volume-26)
root(ROOT-0, 185-27)
case(Frontiers-29, of-28)
nmod:of(185-27, Frontiers-29)
case(Intelligence-32, in-30)
compound(Intelligence-32, Artificial-31)
nmod:in(185-27, Intelligence-32)
cc(Intelligence-32, and-33)
nmod:in(185-27, Applications-34)
conj:and(Intelligence-32, Applications-34)

(ROOT
  (NP (NNP IOS) (NNP Press) (. .)))

compound(Press-2, IOS-1)
root(ROOT-0, Press-2)

(ROOT
  (FRAG
    (NP (CD 131-153))
    (. .)))

root(ROOT-0, 131-153-1)

(ROOT
  (NP
    (NP (NNP Tseitin))
    (, ,)
    (NP (NNP G.) (NNP S.) (NNP 1968))
    (. .)))

root(ROOT-0, Tseitin-1)
compound(1968-5, G.-3)
compound(1968-5, S.-4)
appos(Tseitin-1, 1968-5)

(ROOT
  (S
    (PP (IN On)
      (NP
        (NP (DT the) (NN complexity))
        (PP (IN of)
          (NP
            (NP (NN derivation))
            (PP (IN in)
              (NP (DT the) (JJ propositional) (NNS calculus)))))))
    (, ,)
    (NP (NNP Zapiski))
    (VP (VBP nauchnykh)
      (NP (NNS seminarov)))
    (. .)))

case(complexity-3, On-1)
det(complexity-3, the-2)
nmod:on(nauchnykh-12, complexity-3)
case(derivation-5, of-4)
nmod:of(complexity-3, derivation-5)
case(calculus-9, in-6)
det(calculus-9, the-7)
amod(calculus-9, propositional-8)
nmod:in(derivation-5, calculus-9)
nsubj(nauchnykh-12, Zapiski-11)
root(ROOT-0, nauchnykh-12)
dobj(nauchnykh-12, seminarov-13)

(ROOT
  (NP (NNS LOMI) (CD 8:234) (CD -259) (. .)))

root(ROOT-0, LOMI-1)
nummod(LOMI-1, 8:234-2)
nummod(LOMI-1, -259-3)

(ROOT
  (NP
    (NP
      (NP (JJ English) (NN translation))
      (PP (IN of)
        (NP (DT this) (NN volume))))
    (: :)
    (NP
      (NP (NNS Studies))
      (PP (IN in)
        (NP
          (NP (NNP Constructive) (NNPS Mathematics)
            (CC and)
            (NNP Mathematical) (NNP Logic))
          (, ,)
          (NP (NNP Part) (CD 2))
          (, ,)
          (NP (NNP A.) (NNP O.) (NNP Slisenko))
          (, ,)
          (NP (NN eds)))))
    (. .)))

amod(translation-2, English-1)
root(ROOT-0, translation-2)
case(volume-5, of-3)
det(volume-5, this-4)
nmod:of(translation-2, volume-5)
dep(translation-2, Studies-7)
case(Mathematics-10, in-8)
compound(Mathematics-10, Constructive-9)
nmod:in(Studies-7, Mathematics-10)
cc(Mathematics-10, and-11)
compound(Logic-13, Mathematical-12)
nmod:in(Studies-7, Logic-13)
conj:and(Mathematics-10, Logic-13)
appos(Mathematics-10, Part-15)
nummod(Part-15, 2-16)
compound(Slisenko-20, A.-18)
compound(Slisenko-20, O.-19)
appos(Mathematics-10, Slisenko-20)
appos(Mathematics-10, eds-22)

(ROOT
  (S
    (NP
      (NP (NNP Consultants) (NNP Bureau))
      (, ,)
      (NP
        (NP (NNP N.Y.))
        (, ,)
        (NP (CD 1970)))
      (, ,))
    (VP (VBP pp.)
      (NP (CD 115-125)))
    (. .)))

compound(Bureau-2, Consultants-1)
nsubj(pp.-8, Bureau-2)
appos(Bureau-2, N.Y.-4)
amod(N.Y.-4, 1970-6)
root(ROOT-0, pp.-8)
dobj(pp.-8, 115-125-9)

(ROOT
  (NP
    (NP (NN Zhang))
    (, ,)
    (NP (NNP L.))
    (, ,)
    (CC and)
    (NP
      (NP (NNP Malik))
      (, ,)
      (NP (NNP S.) (CD 2002)))
    (. .)))

root(ROOT-0, Zhang-1)
conj:and(Zhang-1, L.-3)
cc(Zhang-1, and-5)
conj:and(Zhang-1, Malik-6)
appos(Malik-6, S.-8)
nummod(S.-8, 2002-9)

(ROOT
  (NP
    (NP (NNS Towards))
    (NP
      (NP (DT a) (JJ symmetric) (NN treatment))
      (PP (IN of)
        (NP (NN satisfaction)
          (CC and)
          (NNS conflicts))))
    (PP (IN in)
      (NP (JJ quantified) (NN boolean) (NN formula) (NN evaluation)))
    (. .)))

root(ROOT-0, Towards-1)
det(treatment-4, a-2)
amod(treatment-4, symmetric-3)
dep(Towards-1, treatment-4)
case(satisfaction-6, of-5)
nmod:of(treatment-4, satisfaction-6)
cc(satisfaction-6, and-7)
nmod:of(treatment-4, conflicts-8)
conj:and(satisfaction-6, conflicts-8)
case(evaluation-13, in-9)
amod(evaluation-13, quantified-10)
compound(evaluation-13, boolean-11)
compound(evaluation-13, formula-12)
nmod:in(Towards-1, evaluation-13)

(ROOT
  (FRAG
    (PP (IN In)
      (NP
        (NP (NNS Principles))
        (CC and)
        (NP
          (NP (NNP Practice))
          (PP (IN of)
            (NP (NNP Constraint) (NNP Programming))))))
    (: -)
    (NP
      (NP (NNP CP) (CD 2002))
      (, ,)
      (NP (NNP 8th) (NNP International) (NNP Conference))
      (, ,)
      (NP (NNP CP) (CD 2002) (, ,) (CD Proceedings))
      (, ,)
      (NP (CD 200-215)))
    (. .)))

case(Principles-2, In-1)
nmod:in(CP-9, Principles-2)
cc(Principles-2, and-3)
conj:and(Principles-2, Practice-4)
nmod:in(CP-9, Practice-4)
case(Programming-7, of-5)
compound(Programming-7, Constraint-6)
nmod:of(Practice-4, Programming-7)
root(ROOT-0, CP-9)
nummod(CP-9, 2002-10)
compound(Conference-14, 8th-12)
compound(Conference-14, International-13)
appos(CP-9, Conference-14)
appos(CP-9, CP-16)
nummod(CP-16, 2002-17)
nummod(CP-16, Proceedings-19)
amod(CP-9, 200-215-21)

(ROOT
  (S
    (S
      (NP
        (NP (JJ Multi-Agent) (NN Path))
        (VP (VBG Finding)
          (PP (IN with)
            (NP
              (NP (NNP Delay) (NNP Probabilities) (NNP Hang) (NNP Ma) (NNP Department))
              (PP (IN of)
                (NP
                  (NP (NNP Computer) (NNP Science) (NNP University))
                  (PP (IN of)
                    (NP
                      (NP (NNP Southern) (NNP California) (NNP hangma@usc.edu) (NNP T.) (NNP K.) (NNP Satish) (NNP Kumar) (NNP Department))
                      (PP (IN of)
                        (NP
                          (NP (NNP Computer) (NNP Science) (NNP University))
                          (PP (IN of)
                            (NP
                              (NP (NNP Southern) (NNP California) (NNP tkskwork@gmail.com) (NNP Sven) (NNP Koenig) (NNP Department))
                              (PP (IN of)
                                (NP
                                  (NP (NNP Computer) (NNP Science) (NNP University))
                                  (PP (IN of)
                                    (NP (NNP Southern) (NNP California) (NNP skoenig@usc.edu) (NNP Abstract) (NNP Several)))))))))))))))))
      (ADVP (RB recently))
      (VP (VBD developed)
        (NP (JJ Multi-Agent) (NN Path))
        (S
          (VP (VBG Finding)
            (NP
              (NP
                (PRN (-LRB- -LRB-)
                  (NP (NNP MAPF))
                  (-RRB- -RRB-))
                (JJ solvers) (NN scale))
              (PP (TO to)
                (NP (JJ large) (NNP MAPF) (NNS instances))))
            (PP (IN by)
              (S
                (VP (VBG searching)
                  (PP (IN for)
                    (NP
                      (NP (JJ MAPF) (NNS plans))
                      (PP (IN on)
                        (NP (CD 2) (NNS levels))))))))))))
    (: :)
    (S
      (S
        (NP (DT The) (JJ high-level) (NN search))
        (VP (VBZ resolves)
          (NP
            (NP (NNS collisions))
            (PP (IN between)
              (NP (NNS agents))))))
      (, ,)
      (CC and)
      (S
        (NP (DT the) (JJ low-level) (NN search))
        (VP (VBZ plans)
          (NP
            (NP (NNS paths))
            (PP (IN for)
              (NP (JJ single) (NNS agents))))
          (PP (IN under)
            (NP
              (NP (DT the) (NNS constraints))
              (VP (VBN imposed)
                (PP (IN by)
                  (NP (DT the) (JJ high-level) (NN search)))))))))
    (. .)))

amod(Path-2, Multi-Agent-1)
nsubj(developed-45, Path-2)
acl(Path-2, Finding-3)
case(Department-9, with-4)
compound(Department-9, Delay-5)
compound(Department-9, Probabilities-6)
compound(Department-9, Hang-7)
compound(Department-9, Ma-8)
nmod:with(Finding-3, Department-9)
case(University-13, of-10)
compound(University-13, Computer-11)
compound(University-13, Science-12)
nmod:of(Department-9, University-13)
case(Department-22, of-14)
compound(Department-22, Southern-15)
compound(Department-22, California-16)
compound(Department-22, hangma@usc.edu-17)
compound(Department-22, T.-18)
compound(Department-22, K.-19)
compound(Department-22, Satish-20)
compound(Department-22, Kumar-21)
nmod:of(University-13, Department-22)
case(University-26, of-23)
compound(University-26, Computer-24)
compound(University-26, Science-25)
nmod:of(Department-22, University-26)
case(Department-33, of-27)
compound(Department-33, Southern-28)
compound(Department-33, California-29)
compound(Department-33, tkskwork@gmail.com-30)
compound(Department-33, Sven-31)
compound(Department-33, Koenig-32)
nmod:of(University-26, Department-33)
case(University-37, of-34)
compound(University-37, Computer-35)
compound(University-37, Science-36)
nmod:of(Department-33, University-37)
case(Several-43, of-38)
compound(Several-43, Southern-39)
compound(Several-43, California-40)
compound(Several-43, skoenig@usc.edu-41)
compound(Several-43, Abstract-42)
nmod:of(University-37, Several-43)
advmod(developed-45, recently-44)
root(ROOT-0, developed-45)
amod(Path-47, Multi-Agent-46)
dobj(developed-45, Path-47)
xcomp(developed-45, Finding-48)
appos(scale-53, MAPF-50)
amod(scale-53, solvers-52)
dobj(Finding-48, scale-53)
case(instances-57, to-54)
amod(instances-57, large-55)
compound(instances-57, MAPF-56)
nmod:to(scale-53, instances-57)
mark(searching-59, by-58)
advcl(Finding-48, searching-59)
case(plans-62, for-60)
amod(plans-62, MAPF-61)
nmod:for(searching-59, plans-62)
case(levels-65, on-63)
nummod(levels-65, 2-64)
nmod:on(plans-62, levels-65)
det(search-69, The-67)
amod(search-69, high-level-68)
nsubj(resolves-70, search-69)
parataxis(developed-45, resolves-70)
dobj(resolves-70, collisions-71)
case(agents-73, between-72)
nmod:between(collisions-71, agents-73)
cc(resolves-70, and-75)
det(search-78, the-76)
amod(search-78, low-level-77)
nsubj(plans-79, search-78)
parataxis(developed-45, plans-79)
conj:and(resolves-70, plans-79)
dobj(plans-79, paths-80)
case(agents-83, for-81)
amod(agents-83, single-82)
nmod:for(paths-80, agents-83)
case(constraints-86, under-84)
det(constraints-86, the-85)
nmod:under(plans-79, constraints-86)
acl(constraints-86, imposed-87)
case(search-91, by-88)
det(search-91, the-89)
amod(search-91, high-level-90)
nmod:by(imposed-87, search-91)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP make)
        (S
          (NP (DT the) (JJ following) (NNS contributions))
          (VP (TO to)
            (VP (VB solve)
              (NP (DT the) (NNP MAPF) (NN problem))
              (PP (IN with)
                (NP
                  (NP (JJ imperfect) (NN plan) (NN execution))
                  (PP (IN with)
                    (NP (JJ small) (JJ average) (NNS makespans))))))))))
    (: :)
    (S
      (ADVP (RB First))
      (, ,)
      (NP (PRP we))
      (VP
        (VP (VB formalize)
          (NP (DT the) (NNP MAPF) (NNP Problem))
          (PP (IN with)
            (NP
              (NP (NNP Delay) (NNP Probabilities))
              (PRN (-LRB- -LRB-)
                (NP (NNP MAPF-DP))
                (-RRB- -RRB-)))))
        (, ,)
        (VP (VB define)
          (NP (JJ valid) (JJ MAPF-DP) (NNS plans)))
        (CC and)
        (VP (VB propose)
          (NP
            (NP (DT the) (NN use))
            (PP (IN of)
              (NP
                (NP (JJ robust) (JJ plan-execution) (NNS policies))
                (PP (IN for)
                  (NP (JJ valid) (JJ MAPF-DP) (NNS plans))))))
          (S
            (VP (TO to)
              (VP (VB control)
                (SBAR
                  (WHADVP (WRB how))
                  (S
                    (NP (DT each) (NN agent))
                    (VP (VBZ proceeds)
                      (PP (IN along)
                        (NP (PRP$ its) (NN path))))))))))))
    (. .)))

nsubj(make-2, We-1)
root(ROOT-0, make-2)
det(contributions-5, the-3)
amod(contributions-5, following-4)
dobj(make-2, contributions-5)
nsubj:xsubj(solve-7, contributions-5)
mark(solve-7, to-6)
xcomp(make-2, solve-7)
det(problem-10, the-8)
compound(problem-10, MAPF-9)
dobj(solve-7, problem-10)
case(execution-14, with-11)
amod(execution-14, imperfect-12)
compound(execution-14, plan-13)
nmod:with(solve-7, execution-14)
case(makespans-18, with-15)
amod(makespans-18, small-16)
amod(makespans-18, average-17)
nmod:with(execution-14, makespans-18)
advmod(formalize-23, First-20)
nsubj(formalize-23, we-22)
nsubj(define-34, we-22)
nsubj(propose-39, we-22)
parataxis(make-2, formalize-23)
det(Problem-26, the-24)
compound(Problem-26, MAPF-25)
dobj(formalize-23, Problem-26)
case(Probabilities-29, with-27)
compound(Probabilities-29, Delay-28)
nmod:with(formalize-23, Probabilities-29)
appos(Probabilities-29, MAPF-DP-31)
parataxis(make-2, define-34)
conj:and(formalize-23, define-34)
amod(plans-37, valid-35)
amod(plans-37, MAPF-DP-36)
dobj(define-34, plans-37)
cc(formalize-23, and-38)
parataxis(make-2, propose-39)
conj:and(formalize-23, propose-39)
det(use-41, the-40)
dobj(propose-39, use-41)
case(policies-45, of-42)
amod(policies-45, robust-43)
amod(policies-45, plan-execution-44)
nmod:of(use-41, policies-45)
case(plans-49, for-46)
amod(plans-49, valid-47)
amod(plans-49, MAPF-DP-48)
nmod:for(policies-45, plans-49)
mark(control-51, to-50)
advcl(propose-39, control-51)
advmod(proceeds-55, how-52)
det(agent-54, each-53)
nsubj(proceeds-55, agent-54)
ccomp(control-51, proceeds-55)
case(path-58, along-56)
nmod:poss(path-58, its-57)
nmod:along(proceeds-55, path-58)

(ROOT
  (S
    (ADVP (LS Second))
    (, ,)
    (NP (PRP we))
    (VP (VB discuss)
      (NP
        (NP (CD 2) (NNS classes))
        (PP (IN of)
          (NP
            (NP (JJ decentralized) (JJ robust) (JJ plan-execution) (NNS policies))
            (PRN (-LRB- -LRB-)
              (VP (VBN called)
                (NP (CD Fully) (NNP Synchronized) (NNP Policies)
                  (CC and)
                  (NNP Minimal) (NNP Communication) (NNS Policies)))
              (-RRB- -RRB-))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBP prevent)
                  (NP (NNS collisions))
                  (PP (IN during)
                    (NP
                      (NP (NN plan) (NN execution))
                      (PP (IN for)
                        (NP (JJ valid) (JJ MAPF-DP) (NNS plans))))))))))))
    (. .)))

advmod(discuss-4, Second-1)
nsubj(discuss-4, we-3)
root(ROOT-0, discuss-4)
nummod(classes-6, 2-5)
dobj(discuss-4, classes-6)
case(policies-11, of-7)
amod(policies-11, decentralized-8)
amod(policies-11, robust-9)
amod(policies-11, plan-execution-10)
nmod:of(classes-6, policies-11)
nsubj(prevent-23, policies-11)
dep(policies-11, called-13)
nummod(Policies-16, Fully-14)
compound(Policies-16, Synchronized-15)
dobj(called-13, Policies-16)
cc(Policies-16, and-17)
compound(Policies-20, Minimal-18)
compound(Policies-20, Communication-19)
dobj(called-13, Policies-20)
conj:and(Policies-16, Policies-20)
ref(policies-11, that-22)
acl:relcl(policies-11, prevent-23)
dobj(prevent-23, collisions-24)
case(execution-27, during-25)
compound(execution-27, plan-26)
nmod:during(prevent-23, execution-27)
case(plans-31, for-28)
amod(plans-31, valid-29)
amod(plans-31, MAPF-DP-30)
nmod:for(execution-27, plans-31)

(ROOT
  (S
    (ADVP (LS Third))
    (, ,)
    (NP (PRP we))
    (VP (VBP present)
      (NP
        (NP (DT a) (JJ 2-level) (NNP MAPF-DP) (NN solver))
        (PRN (-LRB- -LRB-)
          (VP (VBN called)
            (NP
              (NP (NNP Approximate) (NNP Minimization))
              (PP (IN in)
                (NP (NNP Expectation)))))
          (-RRB- -RRB-))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ generates)
              (NP (JJ valid) (JJ MAPF-DP) (NNS plans)))))))
    (. .)))

advmod(present-4, Third-1)
nsubj(present-4, we-3)
root(ROOT-0, present-4)
det(solver-8, a-5)
amod(solver-8, 2-level-6)
compound(solver-8, MAPF-DP-7)
dobj(present-4, solver-8)
nsubj(generates-17, solver-8)
dep(solver-8, called-10)
compound(Minimization-12, Approximate-11)
dobj(called-10, Minimization-12)
case(Expectation-14, in-13)
nmod:in(Minimization-12, Expectation-14)
ref(solver-8, that-16)
acl:relcl(solver-8, generates-17)
amod(plans-20, valid-18)
amod(plans-20, MAPF-DP-19)
dobj(generates-17, plans-20)

(ROOT
  (FRAG
    (X
      (NP
        (NP (NNP Start) (NNP State) (NNP Goal) (NNP State))
        (NP (JJ v1) (JJ v2) (NNS s2)))
      (NP (CD s1) (NNS v3))
      (NP
        (NP (JJ g1) (JJ v4) (JJ g2) (NNS v5))
        (NP (NNP Figure) (CD 1))))
    (: :)
    (NP (DT A) (VBG MAPF-DP) (NN instance))
    (. .)))

compound(State-4, Start-1)
compound(State-4, State-2)
compound(State-4, Goal-3)
dep(v5-13, State-4)
amod(s2-7, v1-5)
amod(s2-7, v2-6)
dep(State-4, s2-7)
nummod(v3-9, s1-8)
dep(v5-13, v3-9)
amod(v5-13, g1-10)
amod(v5-13, v4-11)
amod(v5-13, g2-12)
dep(instance-19, v5-13)
dep(v5-13, Figure-14)
nummod(Figure-14, 1-15)
det(instance-19, A-17)
amod(instance-19, MAPF-DP-18)
root(ROOT-0, instance-19)

(ROOT
  (S
    (NP (DT an) (NN undirected))
    (VP (VBZ graph)
      (PRN (-LRB- -LRB-)
        (NP
          (NP (DT that) (NNS models))
          (NP (DT the) (NN environment)))
        (-RRB- -RRB-))
      (S
        (VP (TO to)
          (VP (VB move)
            (PP (IN from)
              (NP (PRP$ its) (NN start) (NN vertex)))
            (PP (TO to)
              (NP (PRP$ its) (NN goal) (NN vertex)))))))
    (. .)))

det(undirected-2, an-1)
nsubj(graph-3, undirected-2)
nsubj:xsubj(move-11, undirected-2)
root(ROOT-0, graph-3)
det(models-6, that-5)
dep(graph-3, models-6)
det(environment-8, the-7)
dep(models-6, environment-8)
mark(move-11, to-10)
xcomp(graph-3, move-11)
case(vertex-15, from-12)
nmod:poss(vertex-15, its-13)
compound(vertex-15, start-14)
nmod:from(move-11, vertex-15)
case(vertex-19, to-16)
nmod:poss(vertex-19, its-17)
compound(vertex-19, goal-18)
nmod:to(move-11, vertex-19)

(ROOT
  (S
    (PP (IN At)
      (NP (DT any) (JJ discrete) (NN time) (NN step)))
    (, ,)
    (NP (DT the) (NN agent))
    (VP (MD can) (RB either)
      (VP (VB execute)
        (NP
          (NP
            (NP
              (LST (LS 1) (-RRB- -RRB-))
              (DT a)
              (ADJP (JJ wait))
              (NN action) (, ,))
            (VP (VBG resulting)
              (PP (IN in)
                (S
                  (NP (PRP it))
                  (VP (VBG staying)
                    (PP (IN in)
                      (NP (PRP$ its) (JJ current) (NN vertex))))))))
          (, ,)
          (CC or)
          (NP
            (LST (LS 2) (-RRB- -RRB-))
            (NP (DT a) (NN move) (NN action))
            (PP (IN with)
              (NP
                (NP (DT the) (NN intent))
                (PP (IN of)
                  (S
                    (VP
                      (VP (VBG traversing)
                        (NP
                          (NP (DT an) (JJ outgoing) (NN edge))
                          (PP (IN of)
                            (NP (PRP$ its) (JJ current) (NN vertex)))))
                      (, ,)
                      (VP (VBG resulting)
                        (PP (IN in)
                          (S
                            (NP (PRP it))
                            (VP (VBG staying)
                              (PP (IN in)
                                (NP
                                  (NP (PRP$ its) (JJ current) (NN vertex))
                                  (PP (IN with)
                                    (NP (DT the) (NN delay) (NN probability)))))))))
                      (CC and)
                      (VP (VBG traversing)
                        (NP (DT the) (NN edge))
                        (ADVP (RB otherwise))))))))))))
    (. .)))

case(step-5, At-1)
det(step-5, any-2)
amod(step-5, discrete-3)
compound(step-5, time-4)
nmod:at(execute-11, step-5)
det(agent-8, the-7)
nsubj(execute-11, agent-8)
aux(execute-11, can-9)
advmod(execute-11, either-10)
root(ROOT-0, execute-11)
dep(action-16, 1-12)
det(action-16, a-14)
amod(action-16, wait-15)
dobj(execute-11, action-16)
acl(action-16, resulting-18)
mark(staying-21, in-19)
nsubj(staying-21, it-20)
advcl(resulting-18, staying-21)
case(vertex-25, in-22)
nmod:poss(vertex-25, its-23)
amod(vertex-25, current-24)
nmod:in(staying-21, vertex-25)
cc(action-16, or-27)
dep(action-32, 2-28)
det(action-32, a-30)
compound(action-32, move-31)
dobj(execute-11, action-32)
conj:or(action-16, action-32)
case(intent-35, with-33)
det(intent-35, the-34)
nmod:with(action-32, intent-35)
mark(traversing-37, of-36)
acl(intent-35, traversing-37)
det(edge-40, an-38)
amod(edge-40, outgoing-39)
dobj(traversing-37, edge-40)
case(vertex-44, of-41)
nmod:poss(vertex-44, its-42)
amod(vertex-44, current-43)
nmod:of(edge-40, vertex-44)
acl(intent-35, resulting-46)
conj:and(traversing-37, resulting-46)
mark(staying-49, in-47)
nsubj(staying-49, it-48)
advcl(resulting-46, staying-49)
case(vertex-53, in-50)
nmod:poss(vertex-53, its-51)
amod(vertex-53, current-52)
nmod:in(staying-49, vertex-53)
case(probability-57, with-54)
det(probability-57, the-55)
compound(probability-57, delay-56)
nmod:with(vertex-53, probability-57)
cc(traversing-37, and-58)
acl(intent-35, traversing-59)
conj:and(traversing-37, traversing-59)
det(edge-61, the-60)
dobj(traversing-59, edge-61)
advmod(traversing-59, otherwise-62)

(ROOT
  (S
    (NP (DT The) (NNP MAPFDP) (NN problem))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN problem))
        (PP (IN of)
          (S
            (VP (VBG finding)
              (S
                (S
                  (LST (LS 1) (-RRB- -RRB-))
                  (NP (DT a) (NNP MAPF-DP))
                  (VP (VBP plan)
                    (SBAR (IN that)
                      (S
                        (VP (VBZ consists)
                          (PP (IN of)
                            (NP
                              (NP (DT a) (NN path))
                              (PP (IN for)
                                (NP (DT each) (NN agent)))
                              (PP (IN from)
                                (NP (PRP$ its) (NN start) (NN vertex)))
                              (PP (TO to)
                                (NP (PRP$ its) (NN goal) (NN vertex)))
                              (PRN (-LRB- -LRB-)
                                (VP (VBN given)
                                  (PP (IN by)
                                    (NP
                                      (NP (DT a) (NN sequence))
                                      (PP (IN of)
                                        (NP (NN wait)
                                          (CC and)
                                          (NN move) (NNS actions))))))
                                (-RRB- -RRB-)))))))))
                (CC and)
                (S
                  (LST (LS 2) (-RRB- -RRB-))
                  (NP (DT a) (JJ plan-execution) (NN policy))
                  (VP
                    (ADVP (IN that))
                    (VBZ controls)
                    (PP (IN with)
                      (NP (NNP GO)
                        (CC or)
                        (NNP STOP) (NNS commands)))
                    (SBAR
                      (WHADVP (WRB how))
                      (S
                        (NP (DT each) (NN agent))
                        (VP (VBZ proceeds)
                          (PP (IN along)
                            (NP
                              (NP (PRP$ its) (NN path) (JJ such))
                              (SBAR (IN that)
                                (S
                                  (NP (DT no) (NNS collisions))
                                  (VP (VBP occur)
                                    (PP (IN during)
                                      (NP (NN plan) (NN execution)))))))))))))))))))
    (. .)))

det(problem-3, The-1)
compound(problem-3, MAPFDP-2)
nsubj(problem-6, problem-3)
cop(problem-6, is-4)
det(problem-6, the-5)
root(ROOT-0, problem-6)
mark(finding-8, of-7)
acl(problem-6, finding-8)
dep(plan-13, 1-9)
det(MAPF-DP-12, a-11)
nsubj(plan-13, MAPF-DP-12)
xcomp(finding-8, plan-13)
mark(consists-15, that-14)
ccomp(plan-13, consists-15)
case(path-18, of-16)
det(path-18, a-17)
nmod:of(consists-15, path-18)
case(agent-21, for-19)
det(agent-21, each-20)
nmod:for(path-18, agent-21)
case(vertex-25, from-22)
nmod:poss(vertex-25, its-23)
compound(vertex-25, start-24)
nmod:from(path-18, vertex-25)
case(vertex-29, to-26)
nmod:poss(vertex-29, its-27)
compound(vertex-29, goal-28)
nmod:to(path-18, vertex-29)
dep(path-18, given-31)
case(sequence-34, by-32)
det(sequence-34, a-33)
nmod:by(given-31, sequence-34)
case(actions-39, of-35)
compound(actions-39, wait-36)
cc(wait-36, and-37)
conj:and(wait-36, move-38)
compound(actions-39, move-38)
nmod:of(sequence-34, actions-39)
cc(plan-13, and-41)
dep(controls-48, 2-42)
det(policy-46, a-44)
amod(policy-46, plan-execution-45)
nsubj(controls-48, policy-46)
advmod(controls-48, that-47)
xcomp(finding-8, controls-48)
conj:and(plan-13, controls-48)
case(commands-53, with-49)
compound(commands-53, GO-50)
cc(GO-50, or-51)
conj:or(GO-50, STOP-52)
compound(commands-53, STOP-52)
nmod:with(controls-48, commands-53)
advmod(proceeds-57, how-54)
det(agent-56, each-55)
nsubj(proceeds-57, agent-56)
ccomp(controls-48, proceeds-57)
case(path-60, along-58)
nmod:poss(path-60, its-59)
nmod:along(proceeds-57, path-60)
amod(path-60, such-61)
mark(occur-65, that-62)
neg(collisions-64, no-63)
nsubj(occur-65, collisions-64)
dep(path-60, occur-65)
case(execution-68, during-66)
compound(execution-68, plan-67)
nmod:during(occur-65, execution-68)

(ROOT
  (S
    (NP (EX There))
    (VP (VBP are)
      (NP
        (NP (CD 2) (NNS kinds))
        (PP (IN of)
          (NP
            (NP
              (NP (NNS collisions))
              (, ,)
              (NP (RB namely) (JJ vertex) (NNS collisions))
              (PRN (-LRB- -LRB-)
                (SBAR
                  (WHADVP (WRB where))
                  (S
                    (NP (CD 2) (NNS agents))
                    (VP (VB occupy)
                      (NP (DT the) (JJ same) (NN vertex))
                      (PP (IN at)
                        (NP (DT the) (JJ same) (NN time) (NN step))))))
                (-RRB- -RRB-)))
            (CC and)
            (NP
              (NP (NN edge) (NNS collisions))
              (PRN (-LRB- -LRB-)
                (SBAR
                  (WHADVP (WRB where))
                  (S
                    (NP (CD 2) (NNS agents))
                    (VP (VBD traverse)
                      (NP (DT the) (JJ same) (NN edge))
                      (PP (IN in)
                        (NP (JJ opposite) (NNS directions)))
                      (PP (IN at)
                        (NP (DT the) (JJ same) (NN time) (NN step))))))
                (-RRB- -RRB-)))))))
    (. .)))

expl(are-2, There-1)
root(ROOT-0, are-2)
nummod(kinds-4, 2-3)
nsubj(are-2, kinds-4)
case(collisions-6, of-5)
nmod:of(kinds-4, collisions-6)
advmod(collisions-10, namely-8)
amod(collisions-10, vertex-9)
appos(collisions-6, collisions-10)
advmod(occupy-15, where-12)
nummod(agents-14, 2-13)
nsubj(occupy-15, agents-14)
dep(collisions-6, occupy-15)
det(vertex-18, the-16)
amod(vertex-18, same-17)
dobj(occupy-15, vertex-18)
case(step-23, at-19)
det(step-23, the-20)
amod(step-23, same-21)
compound(step-23, time-22)
nmod:at(occupy-15, step-23)
cc(collisions-6, and-25)
compound(collisions-27, edge-26)
nmod:of(kinds-4, collisions-27)
conj:and(collisions-6, collisions-27)
advmod(traverse-32, where-29)
nummod(agents-31, 2-30)
nsubj(traverse-32, agents-31)
dep(collisions-27, traverse-32)
det(edge-35, the-33)
amod(edge-35, same-34)
dobj(traverse-32, edge-35)
case(directions-38, in-36)
amod(directions-38, opposite-37)
nmod:in(traverse-32, directions-38)
case(step-43, at-39)
det(step-43, the-40)
amod(step-43, same-41)
compound(step-43, time-42)
nmod:at(traverse-32, step-43)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP make)
        (S
          (NP (DT the) (JJ following) (NNS contributions))
          (VP (TO to)
            (VP (VB solve)
              (NP (DT the) (NNP MAPFDP) (NN problem))
              (PP (IN with)
                (NP (JJ small) (JJ average) (NNS makespans))))))))
    (: :)
    (S
      (ADVP (RB First))
      (, ,)
      (NP (PRP we))
      (VP
        (VP (VB formalize)
          (NP (DT the) (JJ MAPF-DP) (NN problem)))
        (, ,)
        (VP (VB define)
          (NP (JJ valid) (JJ MAPF-DP) (NNS plans)))
        (CC and)
        (VP (VB propose)
          (NP
            (NP (DT the) (NN use))
            (PP (IN of)
              (NP
                (NP (JJ robust) (JJ plan-execution) (NNS policies))
                (PP (IN for)
                  (NP (JJ valid) (JJ MAPF-DP) (NNS plans))))))
          (S
            (VP (TO to)
              (VP (VB control)
                (SBAR
                  (WHADVP (WRB how))
                  (S
                    (NP (DT each) (NN agent))
                    (VP (VBZ proceeds)
                      (PP (IN along)
                        (NP (PRP$ its) (NN path))))))))))))
    (. .)))

nsubj(make-2, We-1)
root(ROOT-0, make-2)
det(contributions-5, the-3)
amod(contributions-5, following-4)
dobj(make-2, contributions-5)
nsubj:xsubj(solve-7, contributions-5)
mark(solve-7, to-6)
xcomp(make-2, solve-7)
det(problem-10, the-8)
compound(problem-10, MAPFDP-9)
dobj(solve-7, problem-10)
case(makespans-14, with-11)
amod(makespans-14, small-12)
amod(makespans-14, average-13)
nmod:with(solve-7, makespans-14)
advmod(formalize-19, First-16)
nsubj(formalize-19, we-18)
nsubj(define-24, we-18)
nsubj(propose-29, we-18)
parataxis(make-2, formalize-19)
det(problem-22, the-20)
amod(problem-22, MAPF-DP-21)
dobj(formalize-19, problem-22)
parataxis(make-2, define-24)
conj:and(formalize-19, define-24)
amod(plans-27, valid-25)
amod(plans-27, MAPF-DP-26)
dobj(define-24, plans-27)
cc(formalize-19, and-28)
parataxis(make-2, propose-29)
conj:and(formalize-19, propose-29)
det(use-31, the-30)
dobj(propose-29, use-31)
case(policies-35, of-32)
amod(policies-35, robust-33)
amod(policies-35, plan-execution-34)
nmod:of(use-31, policies-35)
case(plans-39, for-36)
amod(plans-39, valid-37)
amod(plans-39, MAPF-DP-38)
nmod:for(policies-35, plans-39)
mark(control-41, to-40)
advcl(propose-29, control-41)
advmod(proceeds-45, how-42)
det(agent-44, each-43)
nsubj(proceeds-45, agent-44)
ccomp(control-41, proceeds-45)
case(path-48, along-46)
nmod:poss(path-48, its-47)
nmod:along(proceeds-45, path-48)

(ROOT
  (S
    (ADVP (LS Second))
    (, ,)
    (NP (PRP we))
    (VP (VB discuss)
      (NP
        (NP (CD 2) (NNS classes))
        (PP (IN of)
          (NP
            (NP (JJ decentralized) (JJ robust) (JJ plan-execution) (NNS policies))
            (PRN (-LRB- -LRB-)
              (VP (VBN called)
                (NP (CD Fully) (NNP Synchronized) (NNP Policies)
                  (CC and)
                  (NNP Minimal) (NNP Communication) (NNS Policies)))
              (-RRB- -RRB-))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBP prevent)
                  (NP (NNS collisions))
                  (PP (IN during)
                    (NP
                      (NP (NN plan) (NN execution))
                      (PP (IN for)
                        (NP (JJ valid) (JJ MAPF-DP) (NNS plans))))))))))))
    (. .)))

advmod(discuss-4, Second-1)
nsubj(discuss-4, we-3)
root(ROOT-0, discuss-4)
nummod(classes-6, 2-5)
dobj(discuss-4, classes-6)
case(policies-11, of-7)
amod(policies-11, decentralized-8)
amod(policies-11, robust-9)
amod(policies-11, plan-execution-10)
nmod:of(classes-6, policies-11)
nsubj(prevent-23, policies-11)
dep(policies-11, called-13)
nummod(Policies-16, Fully-14)
compound(Policies-16, Synchronized-15)
dobj(called-13, Policies-16)
cc(Policies-16, and-17)
compound(Policies-20, Minimal-18)
compound(Policies-20, Communication-19)
dobj(called-13, Policies-20)
conj:and(Policies-16, Policies-20)
ref(policies-11, that-22)
acl:relcl(policies-11, prevent-23)
dobj(prevent-23, collisions-24)
case(execution-27, during-25)
compound(execution-27, plan-26)
nmod:during(prevent-23, execution-27)
case(plans-31, for-28)
amod(plans-31, valid-29)
amod(plans-31, MAPF-DP-30)
nmod:for(execution-27, plans-31)

(ROOT
  (S
    (ADVP (LS Third))
    (, ,)
    (NP (PRP we))
    (VP (VBP present)
      (NP
        (NP (DT a) (JJ 2-level) (NNP MAPF-DP) (NN solver))
        (PRN (-LRB- -LRB-)
          (VP (VBN called)
            (NP
              (NP (NNP Approximate) (NNP Minimization))
              (PP (IN in)
                (NP (NNP Expectation)))))
          (-RRB- -RRB-))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ generates)
              (NP (JJ valid) (JJ MAPF-DP) (NNS plans)))))))
    (. .)))

advmod(present-4, Third-1)
nsubj(present-4, we-3)
root(ROOT-0, present-4)
det(solver-8, a-5)
amod(solver-8, 2-level-6)
compound(solver-8, MAPF-DP-7)
dobj(present-4, solver-8)
nsubj(generates-17, solver-8)
dep(solver-8, called-10)
compound(Minimization-12, Approximate-11)
dobj(called-10, Minimization-12)
case(Expectation-14, in-13)
nmod:in(Minimization-12, Expectation-14)
ref(solver-8, that-16)
acl:relcl(solver-8, generates-17)
amod(plans-20, valid-18)
amod(plans-20, MAPF-DP-19)
dobj(generates-17, plans-20)

(ROOT
  (S
    (NP
      (NP (NNP Introduction) (NNP Multi-Agent) (NNP Path) (NNP Finding))
      (PRN (-LRB- -LRB-)
        (NP (NNP MAPF))
        (-RRB- -RRB-)))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN problem))
        (PP (IN of)
          (S
            (VP (VBG finding)
              (NP (JJ collision-free) (NNS paths))
              (PP (IN for)
                (NP
                  (NP (DT a) (VBN given) (NN number))
                  (PP (IN of)
                    (NP
                      (NP (NNS agents))
                      (PP (IN from)
                        (NP
                          (NP (PRP$ their) (VBN given) (NN start) (NNS locations))
                          (PP (TO to)
                            (NP
                              (NP (PRP$ their) (VBN given) (NN goal) (NNS locations))
                              (PP (IN in)
                                (NP (DT a) (VBN given) (NN environment))))))))))))))))
    (. .)))

compound(Finding-4, Introduction-1)
compound(Finding-4, Multi-Agent-2)
compound(Finding-4, Path-3)
nsubj(problem-10, Finding-4)
appos(Finding-4, MAPF-6)
cop(problem-10, is-8)
det(problem-10, the-9)
root(ROOT-0, problem-10)
mark(finding-12, of-11)
acl(problem-10, finding-12)
amod(paths-14, collision-free-13)
dobj(finding-12, paths-14)
case(number-18, for-15)
det(number-18, a-16)
amod(number-18, given-17)
nmod:for(finding-12, number-18)
case(agents-20, of-19)
nmod:of(number-18, agents-20)
case(locations-25, from-21)
nmod:poss(locations-25, their-22)
amod(locations-25, given-23)
compound(locations-25, start-24)
nmod:from(agents-20, locations-25)
case(locations-30, to-26)
nmod:poss(locations-30, their-27)
amod(locations-30, given-28)
compound(locations-30, goal-29)
nmod:to(locations-25, locations-30)
case(environment-34, in-31)
det(environment-34, a-32)
amod(environment-34, given-33)
nmod:in(locations-30, environment-34)

(ROOT
  (S
    (NP (NNP MAPF) (NNS problems))
    (VP (VBP arise)
      (PP (IN for)
        (NP
          (NP
            (NP (NN aircraft) (NN towing) (NNS vehicles))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NNP Morris))
                (CC et)
                (NP (NN al.) (CD 2016)))
              (-RRB- -RRB-)))
          (, ,)
          (NP
            (NP (NN office) (NNS robots))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NNP Veloso))
                (CC et)
                (NP (NN al.) (CD 2015)))
              (-RRB- -RRB-)))
          (, ,)
          (NP
            (NP (JJ video) (NN game) (NNS characters))
            (PRN (-LRB- -LRB-)
              (NP (NN Silver) (CD 2005))
              (-RRB- -RRB-)))
          (CC and)
          (NP
            (NP (NN warehouse) (NNS robots))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NNP Wurman))
                (, ,)
                (NP (NNP D'Andrea))
                (, ,)
                (CC and)
                (NP (NNP Mountz) (CD 2008)))
              (-RRB- -RRB-)))))
      (, ,)
      (PP (IN among)
        (NP (NNS others))))
    (. .)))

compound(problems-2, MAPF-1)
nsubj(arise-3, problems-2)
root(ROOT-0, arise-3)
case(vehicles-7, for-4)
compound(vehicles-7, aircraft-5)
compound(vehicles-7, towing-6)
nmod:for(arise-3, vehicles-7)
dep(vehicles-7, Morris-9)
cc(Morris-9, et-10)
dep(vehicles-7, al.-11)
conj:et(Morris-9, al.-11)
nummod(al.-11, 2016-12)
compound(robots-16, office-15)
nmod:for(arise-3, robots-16)
conj:and(vehicles-7, robots-16)
dep(robots-16, Veloso-18)
cc(Veloso-18, et-19)
dep(robots-16, al.-20)
conj:et(Veloso-18, al.-20)
nummod(al.-20, 2015-21)
amod(characters-26, video-24)
compound(characters-26, game-25)
nmod:for(arise-3, characters-26)
conj:and(vehicles-7, characters-26)
appos(characters-26, Silver-28)
nummod(Silver-28, 2005-29)
cc(vehicles-7, and-31)
compound(robots-33, warehouse-32)
nmod:for(arise-3, robots-33)
conj:and(vehicles-7, robots-33)
dep(robots-33, Wurman-35)
dep(robots-33, D'Andrea-37)
conj:and(Wurman-35, D'Andrea-37)
cc(Wurman-35, and-39)
dep(robots-33, Mountz-40)
conj:and(Wurman-35, Mountz-40)
nummod(Mountz-40, 2008-41)
case(others-45, among-44)
nmod:among(arise-3, others-45)

(ROOT
  (S
    (NP (JJ Several))
    (ADVP (RB recently))
    (VP (VBD developed)
      (SBAR
        (S
          (NP (NNP MAPF))
          (VP (VBZ solvers)
            (NP (NN scale))
            (PP (TO to)
              (NP (JJ large) (NNP MAPF) (NNS instances)))))))
    (. .)))

nsubj(developed-3, Several-1)
advmod(developed-3, recently-2)
root(ROOT-0, developed-3)
nsubj(solvers-5, MAPF-4)
ccomp(developed-3, solvers-5)
dobj(solvers-5, scale-6)
case(instances-10, to-7)
amod(instances-10, large-8)
compound(instances-10, MAPF-9)
nmod:to(solvers-5, instances-10)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP (NNS agents))
    (ADVP (RB typically))
    (VP (MD can) (RB not)
      (VP (VB execute)
        (NP (PRP$ their) (NNP MAPF) (NNS plans))
        (ADVP (RB perfectly))
        (SBAR (IN since)
          (S
            (NP (PRP they))
            (ADVP (RB often))
            (VP (VBP traverse)
              (NP (PRP$ their) (NNS paths))
              (ADVP
                (ADVP (RBR more) (RB slowly))
                (PP (IN than)
                  (ADJP (JJ intended)))))))))
    (. .)))

advmod(execute-7, However-1)
nsubj(execute-7, agents-3)
advmod(execute-7, typically-4)
aux(execute-7, can-5)
neg(execute-7, not-6)
root(ROOT-0, execute-7)
nmod:poss(plans-10, their-8)
compound(plans-10, MAPF-9)
dobj(execute-7, plans-10)
advmod(execute-7, perfectly-11)
mark(traverse-15, since-12)
nsubj(traverse-15, they-13)
advmod(traverse-15, often-14)
advcl(execute-7, traverse-15)
nmod:poss(paths-17, their-16)
dobj(traverse-15, paths-17)
advmod(slowly-19, more-18)
advmod(traverse-15, slowly-19)
case(intended-21, than-20)
advcl(slowly-19, intended-21)

(ROOT
  (S
    (S
      (NP (PRP$ Their) (NN delay) (NNS probabilities))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN estimated)))))
    (CC but)
    (S
      (NP (JJ current) (NNP MAPF) (NNS solvers))
      (VP (VBP do) (RB not)
        (VP (VB use)
          (NP
            (NP (DT this) (NN information))
            (, ,)
            (SBAR
              (WHNP (WDT which))
              (S
                (ADVP (RB often))
                (VP (VBZ leads)
                  (PP (TO to)
                    (NP (JJ frequent)
                      (CC and)
                      (JJ runtimeintensive) (NN replanning)
                      (CC or)
                      (NN plan-execution) (NNS failures))))))))))
    (. .)))

nmod:poss(probabilities-3, Their-1)
compound(probabilities-3, delay-2)
nsubjpass(estimated-6, probabilities-3)
aux(estimated-6, can-4)
auxpass(estimated-6, be-5)
root(ROOT-0, estimated-6)
cc(estimated-6, but-7)
amod(solvers-10, current-8)
compound(solvers-10, MAPF-9)
nsubj(use-13, solvers-10)
aux(use-13, do-11)
neg(use-13, not-12)
conj:but(estimated-6, use-13)
det(information-15, this-14)
dobj(use-13, information-15)
nsubj(leads-19, information-15)
ref(information-15, which-17)
advmod(leads-19, often-18)
acl:relcl(information-15, leads-19)
case(replanning-24, to-20)
amod(replanning-24, frequent-21)
cc(frequent-21, and-22)
conj:and(frequent-21, runtimeintensive-23)
amod(replanning-24, runtimeintensive-23)
nmod:to(leads-19, replanning-24)
cc(replanning-24, or-25)
compound(failures-27, plan-execution-26)
nmod:to(leads-19, failures-27)
conj:or(replanning-24, failures-27)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB thus))
    (VP (VBP formalize)
      (NP (DT the) (NNP MAPF) (NNP Problem))
      (PP (IN with)
        (NP
          (NP
            (NP (NNP Delay) (NNP Probabilities))
            (PRN (-LRB- -LRB-)
              (NP (NNP MAPF-DP))
              (-RRB- -RRB-)))
          (, ,)
          (SBAR
            (WHADVP (WRB where))
            (S
              (NP (DT each) (NN agent))
              (VP (VBZ traverses)
                (SBAR
                  (S
                    (NP
                      (NP (NNS edges))
                      (PP (IN on)
                        (NP (PRP$ Our) (NN research))))
                    (VP (VBD was)
                      (VP (VBN supported)
                        (PP (IN by)
                          (NP (NNP NSF)))
                        (PP (IN under)
                          (NP
                            (NP (NN grant) (NNS numbers))
                            (NP
                              (QP (CD 1409987)
                                (CC and)
                                (CD 1319966)))))))))))))))
    (. .)))

nsubj(formalize-3, We-1)
advmod(formalize-3, thus-2)
root(ROOT-0, formalize-3)
det(Problem-6, the-4)
compound(Problem-6, MAPF-5)
dobj(formalize-3, Problem-6)
case(Probabilities-9, with-7)
compound(Probabilities-9, Delay-8)
nmod:with(formalize-3, Probabilities-9)
appos(Probabilities-9, MAPF-DP-11)
advmod(traverses-17, where-14)
det(agent-16, each-15)
nsubj(traverses-17, agent-16)
acl:relcl(Probabilities-9, traverses-17)
nsubjpass(supported-23, edges-18)
case(research-21, on-19)
nmod:poss(research-21, Our-20)
nmod:on(edges-18, research-21)
auxpass(supported-23, was-22)
ccomp(traverses-17, supported-23)
case(NSF-25, by-24)
nmod:agent(supported-23, NSF-25)
case(numbers-28, under-26)
compound(numbers-28, grant-27)
nmod:under(supported-23, numbers-28)
dep(numbers-28, 1409987-29)
cc(1409987-29, and-30)
dep(numbers-28, 1319966-31)
conj:and(1409987-29, 1319966-31)

(ROOT
  (S
    (NP
      (NP (DT The) (NNS views)
        (CC and)
        (NNS conclusions))
      (VP (VBN contained)
        (PP (IN in)
          (NP (DT this) (NN document)))))
    (VP
      (VP (VBP are)
        (NP
          (NP (DT those))
          (PP (IN of)
            (NP (DT the) (NNS authors)))))
      (CC and)
      (VP (MD should) (RB not)
        (VP (VB be)
          (VP
            (VP (VBN interpreted)
              (PP (IN as)
                (S
                  (VP (VBG representing)
                    (NP (DT the) (JJ official) (NNS policies))))))
            (, ,)
            (CC either)
            (VP (VBN expressed)
              (CC or)
              (VBN implied) (, ,)
              (PP (IN of)
                (NP
                  (NP (DT the) (JJ sponsoring) (NNS organizations))
                  (, ,)
                  (NP (NNS agencies))
                  (CC or)
                  (NP (DT the) (NNP U.S.) (NN government)))))))))
    (. .)))

det(views-2, The-1)
nsubj(those-10, views-2)
nsubjpass(interpreted-18, views-2)
cc(views-2, and-3)
conj:and(views-2, conclusions-4)
nsubj(those-10, conclusions-4)
acl(views-2, contained-5)
case(document-8, in-6)
det(document-8, this-7)
nmod:in(contained-5, document-8)
cop(those-10, are-9)
root(ROOT-0, those-10)
case(authors-13, of-11)
det(authors-13, the-12)
nmod:of(those-10, authors-13)
cc(those-10, and-14)
aux(interpreted-18, should-15)
neg(interpreted-18, not-16)
auxpass(interpreted-18, be-17)
conj:and(those-10, interpreted-18)
mark(representing-20, as-19)
advcl(interpreted-18, representing-20)
det(policies-23, the-21)
amod(policies-23, official-22)
dobj(representing-20, policies-23)
dep(interpreted-18, either-25)
conj(interpreted-18, expressed-26)
cc(expressed-26, or-27)
conj(interpreted-18, implied-28)
conj:or(expressed-26, implied-28)
case(organizations-33, of-30)
det(organizations-33, the-31)
amod(organizations-33, sponsoring-32)
nmod:of(expressed-26, organizations-33)
nmod:of(expressed-26, agencies-35)
conj:or(organizations-33, agencies-35)
cc(organizations-33, or-36)
det(government-39, the-37)
compound(government-39, U.S.-38)
nmod:of(expressed-26, government-39)
conj:or(organizations-33, government-39)

(ROOT
  (NP
    (NP (NNP Copyright) (NNP c) (NNP 2017))
    (, ,)
    (NP
      (NP (NNP Association))
      (PP (IN for)
        (NP
          (NP (DT the) (NNP Advancement))
          (PP (IN of)
            (NP
              (NP (NNP Artificial) (NNP Intelligence))
              (PRN (-LRB- -LRB-)
                (NP (NN www.aaai.org))
                (-RRB- -RRB-)))))))
    (. .)))

compound(2017-3, Copyright-1)
compound(2017-3, c-2)
root(ROOT-0, 2017-3)
appos(2017-3, Association-5)
case(Advancement-8, for-6)
det(Advancement-8, the-7)
nmod:for(Association-5, Advancement-8)
case(Intelligence-11, of-9)
compound(Intelligence-11, Artificial-10)
nmod:of(Advancement-8, Intelligence-11)
appos(Intelligence-11, www.aaai.org-13)

(ROOT
  (S
    (NP (DT All) (NNS rights))
    (VP (VBD reserved))
    (. .)))

det(rights-2, All-1)
nsubj(reserved-3, rights-2)
root(ROOT-0, reserved-3)

(ROOT
  (S
    (NP (NNP Background)
      (CC and)
      (NNP Related))
    (VP (VBZ Work)
      (NP
        (NP
          (NP (DT The) (JJ MAPF) (NN problem))
          (SBAR
            (S
              (VP (VBZ is)
                (ADJP (JJ NP-hard)
                  (S
                    (VP (TO to)
                      (VP (VB solve)
                        (ADVP (RB optimally))
                        (PP (IN for)
                          (NP (JJ flowtime) (NN minimization)))))))))))
        (CC and)
        (SBAR
          (S
            (VP (TO to)
              (VP (JJ approximate)
                (PP (IN within)
                  (NP (DT any) (JJ constant) (NN factor))))))))
      (NP
        (NP
          (QP (JJR less) (IN than) (CD 4/3)))
        (PP (IN for)
          (NP (NN makespan) (NN minimization)))
        (PRN (-LRB- -LRB-)
          (S
            (NP (NNP Ma) (NNP et))
            (VP (VBP al.)
              (NP (CD 2016))))
          (-RRB- -RRB-))))
    (. .)))

nsubj(Work-4, Background-1)
cc(Background-1, and-2)
conj:and(Background-1, Related-3)
nsubj(Work-4, Related-3)
root(ROOT-0, Work-4)
det(problem-7, The-5)
amod(problem-7, MAPF-6)
iobj(Work-4, problem-7)
cop(NP-hard-9, is-8)
acl:relcl(problem-7, NP-hard-9)
mark(solve-11, to-10)
xcomp(NP-hard-9, solve-11)
advmod(solve-11, optimally-12)
case(minimization-15, for-13)
amod(minimization-15, flowtime-14)
nmod:for(solve-11, minimization-15)
cc(problem-7, and-16)
mark(approximate-18, to-17)
acl(problem-7, approximate-18)
case(factor-22, within-19)
det(factor-22, any-20)
amod(factor-22, constant-21)
nmod:within(approximate-18, factor-22)
advmod(4/3-25, less-23)
mwe(less-23, than-24)
dobj(Work-4, 4/3-25)
case(minimization-28, for-26)
compound(minimization-28, makespan-27)
nmod:for(4/3-25, minimization-28)
compound(et-31, Ma-30)
nsubj(al.-32, et-31)
dep(4/3-25, al.-32)
dobj(al.-32, 2016-33)

(ROOT
  (S
    (NP (JJ Search-based) (NNP MAPF) (NNS solvers))
    (VP (MD can)
      (VP (VB be)
        (ADJP
          (ADJP (JJ optimal))
          (, ,)
          (ADJP (RB bounded) (JJ suboptimal))
          (CC or)
          (ADJP (JJ suboptimal)))
        (PRN (-LRB- -LRB-)
          (NP
            (NP (NNP Standley) (CD 2010))
            (: ;)
            (NP
              (NP
                (NP (NNP Luna))
                (CC and)
                (NP (NNP Bekris) (CD 2011)))
              (: ;)
              (NP
                (NP (NNP Wang))
                (CC and)
                (NP (NNP Botea) (CD 2011)))
              (: ;)
              (NP (NNP Goldenberg)
                (CC et)
                (NP (NN al.) (CD 2014)))
              (: ;)
              (NP
                (NP (NNP Sharon)
                  (CC et)
                  (NNP al.))
                (NP (CD 2013) (: ;) (CD 2015)))
              (: ;)
              (NP (NNP Boyarski)
                (CC et)
                (NP (NN al.) (CD 2015)))
              (: ;)
              (NP
                (NP (NNP Wagner))
                (CC and)
                (NP (NNP Choset) (CD 2015)))
              (: ;)
              (NP
                (NP (NNP Ma))
                (CC and)
                (NP (NNP Koenig) (CD 2016)))
              (: ;)
              (NP (NNP Cohen)
                (CC et)
                (NP (NN al.) (CD 2016)))))
          (-RRB- -RRB-))))
    (. .)))

amod(solvers-3, Search-based-1)
compound(solvers-3, MAPF-2)
nsubj(optimal-6, solvers-3)
nsubj(suboptimal-9, solvers-3)
nsubj(suboptimal-11, solvers-3)
aux(optimal-6, can-4)
cop(optimal-6, be-5)
root(ROOT-0, optimal-6)
advmod(suboptimal-9, bounded-8)
conj:or(optimal-6, suboptimal-9)
cc(optimal-6, or-10)
conj:or(optimal-6, suboptimal-11)
dep(optimal-6, Standley-13)
nummod(Standley-13, 2010-14)
dep(Standley-13, Luna-16)
cc(Luna-16, and-17)
dep(Standley-13, Bekris-18)
conj:and(Luna-16, Bekris-18)
nummod(Bekris-18, 2011-19)
dep(Luna-16, Wang-21)
cc(Wang-21, and-22)
dep(Luna-16, Botea-23)
conj:and(Wang-21, Botea-23)
nummod(Botea-23, 2011-24)
dep(Luna-16, Goldenberg-26)
cc(Goldenberg-26, et-27)
dep(Luna-16, al.-28)
conj:et(Goldenberg-26, al.-28)
nummod(al.-28, 2014-29)
dep(Luna-16, Sharon-31)
cc(Sharon-31, et-32)
dep(Luna-16, al.-33)
conj:et(Sharon-31, al.-33)
nummod(2015-36, 2013-34)
dep(Sharon-31, 2015-36)
dep(Luna-16, Boyarski-38)
cc(Boyarski-38, et-39)
dep(Luna-16, al.-40)
conj:et(Boyarski-38, al.-40)
nummod(al.-40, 2015-41)
dep(Luna-16, Wagner-43)
cc(Wagner-43, and-44)
dep(Luna-16, Choset-45)
conj:and(Wagner-43, Choset-45)
nummod(Choset-45, 2015-46)
dep(Luna-16, Ma-48)
cc(Ma-48, and-49)
dep(Luna-16, Koenig-50)
conj:and(Ma-48, Koenig-50)
nummod(Koenig-50, 2016-51)
dep(Luna-16, Cohen-53)
cc(Cohen-53, et-54)
dep(Luna-16, al.-55)
conj:et(Cohen-53, al.-55)
nummod(al.-55, 2016-56)

(ROOT
  (S
    (NP (JJ Current) (NNP MAPF) (NNS solvers))
    (ADVP (RB typically))
    (VP (VBP assume)
      (NP (JJ perfect) (NN plan) (NN execution)))
    (. .)))

amod(solvers-3, Current-1)
compound(solvers-3, MAPF-2)
nsubj(assume-5, solvers-3)
advmod(assume-5, typically-4)
root(ROOT-0, assume-5)
amod(execution-8, perfect-6)
compound(execution-8, plan-7)
dobj(assume-5, execution-8)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP
      (NP (VBG utilizing) (JJ probabilistic) (NN information))
      (PP (IN about)
        (NP (JJ imperfect) (NN plan) (NN execution))))
    (VP (MD can)
      (VP (VB reduce)
        (NP
          (ADJP (JJ frequent)
            (CC and)
            (JJ time-intensive))
          (NN replanning)
          (CC and)
          (JJ plan-execution) (NNS failures))))
    (. .)))

advmod(reduce-11, However-1)
amod(information-5, utilizing-3)
amod(information-5, probabilistic-4)
nsubj(reduce-11, information-5)
case(execution-9, about-6)
amod(execution-9, imperfect-7)
compound(execution-9, plan-8)
nmod:about(information-5, execution-9)
aux(reduce-11, can-10)
root(ROOT-0, reduce-11)
amod(replanning-15, frequent-12)
cc(frequent-12, and-13)
conj:and(frequent-12, time-intensive-14)
amod(replanning-15, time-intensive-14)
dobj(reduce-11, replanning-15)
cc(replanning-15, and-16)
amod(failures-18, plan-execution-17)
dobj(reduce-11, failures-18)
conj:and(replanning-15, failures-18)

(ROOT
  (S
    (NP
      (NP (NNP Partially) (NNP Observable) (NNP Markov) (NNP Decision) (NNP Processes))
      (PRN (-LRB- -LRB-)
        (NP (NNP POMDPs))
        (-RRB- -RRB-)))
    (VP (VBP are)
      (NP (DT a) (JJ general) (JJ probabilistic) (NN planning) (NN framework)))
    (. .)))

compound(Processes-5, Partially-1)
compound(Processes-5, Observable-2)
compound(Processes-5, Markov-3)
compound(Processes-5, Decision-4)
nsubj(framework-14, Processes-5)
appos(Processes-5, POMDPs-7)
cop(framework-14, are-9)
det(framework-14, a-10)
amod(framework-14, general-11)
amod(framework-14, probabilistic-12)
compound(framework-14, planning-13)
root(ROOT-0, framework-14)

(ROOT
  (S
    (S
      (NP (DT The) (NNP MAPF-DP) (NN problem))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN solved)
            (PP (IN with)
              (NP (NNP POMDPs)))))))
    (CC but)
    (S
      (NP (DT this))
      (VP (VBZ is)
        (ADJP (JJ tractable))
        (SBAR (RB only) (IN for)
          (S
            (NP
              (NP
                (ADJP (RB very) (JJ few))
                (NNS agents))
              (PP (IN in)
                (NP
                  (NP
                    (ADJP (RB very) (JJ small))
                    (NNS environments))
                  (PP (IN since)
                    (NP
                      (NP (DT the) (NN size))
                      (PP (IN of)
                        (NP (DT the) (NN state) (NN space))))))))
            (VP (VBZ is)
              (ADJP (JJ proportional)
                (PP (TO to)
                  (NP
                    (NP (DT the) (NN size))
                    (PP (IN of)
                      (NP (DT the) (NN environment))))))
              (PP (TO to)
                (NP
                  (NP (DT the) (NN power))
                  (PP (IN of)
                    (NP
                      (NP (DT the) (NN number))
                      (PP (IN of)
                        (NP (NNS agents))))))))))))
    (CC and)
    (S
      (NP
        (NP (DT the) (NN size))
        (PP (IN of)
          (NP (DT the) (NN belief) (NN space))))
      (VP (VBZ is)
        (ADJP (JJ proportional)
          (PP (TO to)
            (NP
              (NP (DT the) (NN size))
              (PP (IN of)
                (NP (DT the) (NN state) (NN space))))))
        (PP (TO to)
          (NP
            (NP (DT the) (NN power))
            (PP (IN of)
              (NP
                (NP (DT the) (NN length))
                (PP (IN of)
                  (NP
                    (NP (DT the) (VBG planning) (NN horizon))
                    (PRN (-LRB- -LRB-)
                      (NP
                        (NP (NNP Kurniawati))
                        (, ,)
                        (NP (NNP Hsu))
                        (, ,)
                        (CC and)
                        (NP
                          (NP (NNP Lee) (CD 2008))
                          (: ;)
                          (NP
                            (NP (NNP Ma))
                            (CC and)
                            (NP (NNP Pineau) (CD 2015)))))
                      (-RRB- -RRB-))))))))))
    (. .)))

det(problem-3, The-1)
compound(problem-3, MAPF-DP-2)
nsubjpass(solved-6, problem-3)
aux(solved-6, can-4)
auxpass(solved-6, be-5)
root(ROOT-0, solved-6)
case(POMDPs-8, with-7)
nmod:with(solved-6, POMDPs-8)
cc(solved-6, but-9)
nsubj(tractable-12, this-10)
cop(tractable-12, is-11)
conj:but(solved-6, tractable-12)
advmod(proportional-30, only-13)
mark(proportional-30, for-14)
advmod(few-16, very-15)
amod(agents-17, few-16)
nsubj(proportional-30, agents-17)
case(environments-21, in-18)
advmod(small-20, very-19)
amod(environments-21, small-20)
nmod:in(agents-17, environments-21)
case(size-24, since-22)
det(size-24, the-23)
nmod:since(environments-21, size-24)
case(space-28, of-25)
det(space-28, the-26)
compound(space-28, state-27)
nmod:of(size-24, space-28)
cop(proportional-30, is-29)
advcl(tractable-12, proportional-30)
case(size-33, to-31)
det(size-33, the-32)
nmod:to(proportional-30, size-33)
case(environment-36, of-34)
det(environment-36, the-35)
nmod:of(size-33, environment-36)
case(power-39, to-37)
det(power-39, the-38)
nmod:to(proportional-30, power-39)
case(number-42, of-40)
det(number-42, the-41)
nmod:of(power-39, number-42)
case(agents-44, of-43)
nmod:of(number-42, agents-44)
cc(solved-6, and-45)
det(size-47, the-46)
nsubj(proportional-53, size-47)
case(space-51, of-48)
det(space-51, the-49)
compound(space-51, belief-50)
nmod:of(size-47, space-51)
cop(proportional-53, is-52)
conj:and(solved-6, proportional-53)
case(size-56, to-54)
det(size-56, the-55)
nmod:to(proportional-53, size-56)
case(space-60, of-57)
det(space-60, the-58)
compound(space-60, state-59)
nmod:of(size-56, space-60)
case(power-63, to-61)
det(power-63, the-62)
nmod:to(proportional-53, power-63)
case(length-66, of-64)
det(length-66, the-65)
nmod:of(power-63, length-66)
case(horizon-70, of-67)
det(horizon-70, the-68)
amod(horizon-70, planning-69)
nmod:of(length-66, horizon-70)
dep(horizon-70, Kurniawati-72)
dep(horizon-70, Hsu-74)
conj:and(Kurniawati-72, Hsu-74)
cc(Kurniawati-72, and-76)
dep(horizon-70, Lee-77)
conj:and(Kurniawati-72, Lee-77)
nummod(Lee-77, 2008-78)
dep(Lee-77, Ma-80)
cc(Ma-80, and-81)
dep(Lee-77, Pineau-82)
conj:and(Ma-80, Pineau-82)
nummod(Pineau-82, 2015-83)

(ROOT
  (S
    (NP
      (NP (JJ Several) (JJ specialized) (JJ probabilistic) (NN planning) (NNS frameworks))
      (, ,)
      (PP (JJ such) (IN as)
        (NP
          (NP
            (NP
              (NP (JJ transition-independent) (JJ decentralized) (NNP Markov) (NNP Decision) (NNP Processes))
              (PRN (-LRB- -LRB-)
                (NP (NNP DecMDPs))
                (-RRB- -RRB-)))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NNP Becker))
                (CC et)
                (NP (NN al.) (CD 2004)))
              (-RRB- -RRB-)))
          (CC and)
          (NP
            (NP
              (NP (NNP Multi-Agent) (NNP Markov) (NNP Decision) (NNP Processes))
              (PRN (-LRB- -LRB-)
                (NP (NNP MMDPs))
                (-RRB- -RRB-)))
            (PRN (-LRB- -LRB-)
              (NP (NNP Boutilier) (CD 1996))
              (-RRB- -RRB-))))))
    (VP (MD can)
      (VP (VB solve)
        (NP (JJR larger) (JJ probabilistic) (NN planning) (NNS problems))
        (PP (IN than)
          (NP (NNP POMDPs)))))
    (. .)))

amod(frameworks-5, Several-1)
amod(frameworks-5, specialized-2)
amod(frameworks-5, probabilistic-3)
compound(frameworks-5, planning-4)
nsubj(solve-36, frameworks-5)
case(Processes-13, such-7)
mwe(such-7, as-8)
amod(Processes-13, transition-independent-9)
amod(Processes-13, decentralized-10)
compound(Processes-13, Markov-11)
compound(Processes-13, Decision-12)
nmod:such_as(frameworks-5, Processes-13)
appos(Processes-13, DecMDPs-15)
dep(Processes-13, Becker-18)
cc(Becker-18, et-19)
dep(Processes-13, al.-20)
conj:et(Becker-18, al.-20)
nummod(al.-20, 2004-21)
cc(Processes-13, and-23)
compound(Processes-27, Multi-Agent-24)
compound(Processes-27, Markov-25)
compound(Processes-27, Decision-26)
nmod:such_as(frameworks-5, Processes-27)
conj:and(Processes-13, Processes-27)
appos(Processes-27, MMDPs-29)
appos(Processes-27, Boutilier-32)
nummod(Boutilier-32, 1996-33)
aux(solve-36, can-35)
root(ROOT-0, solve-36)
amod(problems-40, larger-37)
amod(problems-40, probabilistic-38)
compound(problems-40, planning-39)
dobj(solve-36, problems-40)
case(POMDPs-42, than-41)
nmod:than(solve-36, POMDPs-42)

(ROOT
  (S
    (PP (IN In)
      (NP (JJ transition-independent) (NNS Dec-MDPs)))
    (, ,)
    (NP
      (NP (DT the) (JJ local) (NN state))
      (PP (IN of)
        (NP (DT each) (NN agent))))
    (VP (VBZ depends)
      (ADVP (RB only))
      (PP (IN on)
        (NP
          (NP (PRP$ its) (JJ previous) (JJ local) (NN state))
          (CC and)
          (NP
            (NP (DT the) (NN action))
            (VP (VBN taken)
              (PP (IN by)
                (NP
                  (NP (PRP it))
                  (PRN (-LRB- -LRB-)
                    (NP
                      (NP (NNP Goldman))
                      (CC and)
                      (NP (NNP Zilberstein) (CD 2004)))
                    (-RRB- -RRB-)))))))))
    (. .)))

case(Dec-MDPs-3, In-1)
amod(Dec-MDPs-3, transition-independent-2)
nmod:in(depends-11, Dec-MDPs-3)
det(state-7, the-5)
amod(state-7, local-6)
nsubj(depends-11, state-7)
case(agent-10, of-8)
det(agent-10, each-9)
nmod:of(state-7, agent-10)
root(ROOT-0, depends-11)
advmod(depends-11, only-12)
case(state-17, on-13)
nmod:poss(state-17, its-14)
amod(state-17, previous-15)
amod(state-17, local-16)
nmod:on(depends-11, state-17)
cc(state-17, and-18)
det(action-20, the-19)
nmod:on(depends-11, action-20)
conj:and(state-17, action-20)
acl(action-20, taken-21)
case(it-23, by-22)
nmod:by(taken-21, it-23)
dep(it-23, Goldman-25)
cc(Goldman-25, and-26)
dep(it-23, Zilberstein-27)
conj:and(Goldman-25, Zilberstein-27)
nummod(Zilberstein-27, 2004-28)

(ROOT
  (S
    (NP (NNP MAPF-DP))
    (VP (VBZ is)
      (ADVP (RB indeed))
      (ADJP (RB transition) (JJ independent)))
    (. .)))

nsubj(independent-5, MAPF-DP-1)
cop(independent-5, is-2)
advmod(independent-5, indeed-3)
advmod(independent-5, transition-4)
root(ROOT-0, independent-5)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP (EX there))
    (VP (VBP are)
      (VP (VBG interactions)
        (PP (IN among)
          (NP (NNS agents)))
        (SBAR (IN since)
          (S
            (NP
              (NP (DT the) (NN reward))
              (PP (IN of)
                (NP (DT each) (NN agent))))
            (VP (VBZ depends)
              (PRT (RP on))
              (SBAR (IN whether)
                (S
                  (NP (PRP it))
                  (VP (VBZ is)
                    (VP
                      (VP (VBN involved)
                        (PP (IN in)
                          (NP (DT a) (NN collision))))
                      (CC and)
                      (VP
                        (ADVP (RB thus)
                          (PP (IN on)
                            (NP
                              (NP (DT the) (JJ local) (NNS states))
                              (PP (IN of)
                                (NP
                                  (NP (JJ other) (NNS agents))
                                  (CC and)
                                  (NP (DT the) (NNS actions)))))))
                        (VBN taken)
                        (PP (IN by)
                          (NP (PRP them)))))))))))))
    (. .)))

advmod(interactions-5, However-1)
expl(interactions-5, there-3)
aux(interactions-5, are-4)
root(ROOT-0, interactions-5)
case(agents-7, among-6)
nmod:among(interactions-5, agents-7)
mark(depends-14, since-8)
det(reward-10, the-9)
nsubj(depends-14, reward-10)
case(agent-13, of-11)
det(agent-13, each-12)
nmod:of(reward-10, agent-13)
advcl(interactions-5, depends-14)
compound:prt(depends-14, on-15)
mark(involved-19, whether-16)
nsubjpass(involved-19, it-17)
nsubjpass(taken-35, it-17)
auxpass(involved-19, is-18)
ccomp(depends-14, involved-19)
case(collision-22, in-20)
det(collision-22, a-21)
nmod:in(involved-19, collision-22)
cc(involved-19, and-23)
advmod(taken-35, thus-24)
case(states-28, on-25)
det(states-28, the-26)
amod(states-28, local-27)
nmod:on(thus-24, states-28)
case(agents-31, of-29)
amod(agents-31, other-30)
nmod:of(states-28, agents-31)
cc(agents-31, and-32)
det(actions-34, the-33)
nmod:of(states-28, actions-34)
conj:and(agents-31, actions-34)
ccomp(depends-14, taken-35)
conj:and(involved-19, taken-35)
case(them-37, by-36)
nmod:by(taken-35, them-37)

(ROOT
  (S
    (NP
      (QP (RB Fully) (CD decentralized))
      (JJ probabilistic) (NN planning) (NNS frameworks))
    (ADVP (RB thus))
    (VP (MD can) (RB not)
      (VP (VB prevent)
        (NP (NNS collisions))))
    (. .)))

advmod(decentralized-2, Fully-1)
nummod(frameworks-5, decentralized-2)
amod(frameworks-5, probabilistic-3)
compound(frameworks-5, planning-4)
nsubj(prevent-9, frameworks-5)
advmod(prevent-9, thus-6)
aux(prevent-9, can-7)
neg(prevent-9, not-8)
root(ROOT-0, prevent-9)
dobj(prevent-9, collisions-10)

(ROOT
  (S
    (NP
      (QP (RB Fully) (CD centralized))
      (JJ probabilistic) (NN planning) (NNS frameworks))
    (VP
      (VP (MD can)
        (VP (VB prevent)
          (NP (NNS collisions))))
      (CC but)
      (VP (VBP are)
        (ADJP (RBR more) (JJ runtime-intensive)))
      (CC and)
      (VP (MD can)
        (ADVP (RB thus))
        (VP (VB scale)
          (ADVP (RB poorly)))))
    (. .)))

advmod(centralized-2, Fully-1)
nummod(frameworks-5, centralized-2)
amod(frameworks-5, probabilistic-3)
compound(frameworks-5, planning-4)
nsubj(prevent-7, frameworks-5)
nsubj(runtime-intensive-12, frameworks-5)
nsubj(scale-16, frameworks-5)
aux(prevent-7, can-6)
root(ROOT-0, prevent-7)
dobj(prevent-7, collisions-8)
cc(prevent-7, but-9)
cop(runtime-intensive-12, are-10)
advmod(runtime-intensive-12, more-11)
conj:but(prevent-7, runtime-intensive-12)
cc(prevent-7, and-13)
aux(scale-16, can-14)
advmod(scale-16, thus-15)
conj:and(prevent-7, scale-16)
advmod(scale-16, poorly-17)

(ROOT
  (S
    (PP (IN For)
      (NP (NN example)))
    (, ,)
    (NP (DT the) (NNP MAPF-DP) (NN problem))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN solved)
          (PP (IN with)
            (NP
              (NP (JJ transition-independent) (NNS MMDPs))
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (NNP Scharpff))
                  (CC et)
                  (NP (NN al.) (CD 2016)))
                (-RRB- -RRB-)))))))
    (. .)))

case(example-2, For-1)
nmod:for(solved-9, example-2)
det(problem-6, the-4)
compound(problem-6, MAPF-DP-5)
nsubjpass(solved-9, problem-6)
aux(solved-9, can-7)
auxpass(solved-9, be-8)
root(ROOT-0, solved-9)
case(MMDPs-12, with-10)
amod(MMDPs-12, transition-independent-11)
nmod:with(solved-9, MMDPs-12)
dep(MMDPs-12, Scharpff-14)
cc(Scharpff-14, et-15)
dep(MMDPs-12, al.-16)
conj:et(Scharpff-14, al.-16)
nummod(al.-16, 2016-17)

(ROOT
  (S
    (PP (IN In)
      (NP (NN fact)))
    (, ,)
    (NP
      (NP (DT the)
        (ADJP (RBS most) (RB closely) (VBN related))
        (NN research))
      (PP (TO to)
        (NP (PRP ours))))
    (VP (VBZ is)
      (NP
        (NP (DT that))
        (PP (IN on)
          (S
            (VP (VBG approximating)
              (NP
                (NP (NNP MMDPs))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (NNP Liu))
                    (CC and)
                    (NP (NNP Michael) (CD 2016)))
                  (-RRB- -RRB-)))
              (SBAR (IN although)
                (S
                  (NP (PRP it))
                  (VP (VBZ handles)
                    (NP
                      (NP (JJ different) (NNS types))
                      (PP (IN of)
                        (NP (NNS dynamics))))
                    (SBAR (IN than)
                      (S
                        (NP (PRP we))
                        (VP (VBP do))))))))))))
    (. .)))

case(fact-2, In-1)
nmod:in(that-12, fact-2)
det(research-8, the-4)
advmod(related-7, most-5)
advmod(related-7, closely-6)
amod(research-8, related-7)
nsubj(that-12, research-8)
case(ours-10, to-9)
nmod:to(research-8, ours-10)
cop(that-12, is-11)
root(ROOT-0, that-12)
mark(approximating-14, on-13)
acl(that-12, approximating-14)
dobj(approximating-14, MMDPs-15)
dep(MMDPs-15, Liu-17)
cc(Liu-17, and-18)
dep(MMDPs-15, Michael-19)
conj:and(Liu-17, Michael-19)
nummod(Michael-19, 2016-20)
mark(handles-24, although-22)
nsubj(handles-24, it-23)
advcl(approximating-14, handles-24)
amod(types-26, different-25)
dobj(handles-24, types-26)
case(dynamics-28, of-27)
nmod:of(types-26, dynamics-28)
mark(do-31, than-29)
nsubj(do-31, we-30)
advcl(handles-24, do-31)

(ROOT
  (S
    (NP
      (NP (DT The) (NN runtime))
      (PP (IN of)
        (NP (JJ probabilistic) (NN planning) (NNS frameworks))))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN reduced)
          (PP (IN by)
            (S
              (VP (VBG exploiting)
                (NP
                  (NP (DT the) (NN problem) (NN structure))
                  (, ,)
                  (PP (VBG including)
                    (SBAR
                      (WHADVP (WRB when))
                      (S
                        (NP
                          (NP (NNS interactions))
                          (PP (IN among)
                            (NP (NNS agents))))
                        (VP (VBP are)
                          (ADJP (JJ sparse)))))))))))))
    (. .)))

det(runtime-2, The-1)
nsubjpass(reduced-9, runtime-2)
case(frameworks-6, of-3)
amod(frameworks-6, probabilistic-4)
compound(frameworks-6, planning-5)
nmod:of(runtime-2, frameworks-6)
aux(reduced-9, can-7)
auxpass(reduced-9, be-8)
root(ROOT-0, reduced-9)
mark(exploiting-11, by-10)
advcl(reduced-9, exploiting-11)
det(structure-14, the-12)
compound(structure-14, problem-13)
dobj(exploiting-11, structure-14)
case(sparse-22, including-16)
advmod(sparse-22, when-17)
nsubj(sparse-22, interactions-18)
case(agents-20, among-19)
nmod:among(interactions-18, agents-20)
cop(sparse-22, are-21)
acl(structure-14, sparse-22)

(ROOT
  (S
    (PP (IN For)
      (NP (NN example)))
    (, ,)
    (NP
      (NP
        (NP (JJ decentralized) (NN sparse-interaction) (NNP Markov) (NNP Decision) (NNP Processes))
        (PRN (-LRB- -LRB-)
          (NP (NNP Dec-SIMDPs))
          (-RRB- -RRB-)))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (NNP Melo))
          (CC and)
          (NP (NNP Veloso) (CD 2011)))
        (-RRB- -RRB-)))
    (VP (VBP assume)
      (SBAR (IN that)
        (S
          (NP
            (NP (NNS interactions))
            (PP (IN among)
              (NP (NNS agents))))
          (VP
            (VP (VBP occur)
              (ADVP (RB only))
              (PP (IN in)
                (NP
                  (NP (JJ well-defined) (NN interaction) (NNS areas))
                  (PP (IN in)
                    (NP
                      (NP (DT the) (NN environment))
                      (PRN (-LRB- -LRB-)
                        (SBAR
                          (WHNP (WDT which))
                          (S
                            (VP (VBZ is) (RB not)
                              (NP
                                (NP (DT the) (NN case))
                                (PP (IN for)
                                  (NP
                                    (NP (NNP MAPF-DP))
                                    (PP (IN in)
                                      (NP (NN general)))))))))
                        (-RRB- -RRB-)))))))
            (, ,)
            (CC but)
            (ADVP (RB typically))
            (VP
              (ADVP (RB still))
              (VBP do) (RB not)
              (VP (VB scale)
                (PP (TO to)
                  (NP
                    (QP (JJR more) (IN than) (CD 10))
                    (NNS agents)))))))))
    (. .)))

case(example-2, For-1)
nmod:for(assume-18, example-2)
amod(Processes-8, decentralized-4)
compound(Processes-8, sparse-interaction-5)
compound(Processes-8, Markov-6)
compound(Processes-8, Decision-7)
nsubj(assume-18, Processes-8)
appos(Processes-8, Dec-SIMDPs-10)
dep(Processes-8, Melo-13)
cc(Melo-13, and-14)
dep(Processes-8, Veloso-15)
conj:and(Melo-13, Veloso-15)
nummod(Veloso-15, 2011-16)
root(ROOT-0, assume-18)
mark(occur-23, that-19)
nsubj(occur-23, interactions-20)
nsubj(scale-49, interactions-20)
case(agents-22, among-21)
nmod:among(interactions-20, agents-22)
ccomp(assume-18, occur-23)
advmod(occur-23, only-24)
case(areas-28, in-25)
amod(areas-28, well-defined-26)
compound(areas-28, interaction-27)
nmod:in(occur-23, areas-28)
case(environment-31, in-29)
det(environment-31, the-30)
nmod:in(areas-28, environment-31)
nsubj(case-37, which-33)
cop(case-37, is-34)
neg(case-37, not-35)
det(case-37, the-36)
dep(environment-31, case-37)
case(MAPF-DP-39, for-38)
nmod:for(case-37, MAPF-DP-39)
case(general-41, in-40)
nmod:in(MAPF-DP-39, general-41)
cc(occur-23, but-44)
advmod(scale-49, typically-45)
advmod(scale-49, still-46)
aux(scale-49, do-47)
neg(scale-49, not-48)
ccomp(assume-18, scale-49)
conj:but(occur-23, scale-49)
case(agents-54, to-50)
advmod(10-53, more-51)
mwe(more-51, than-52)
nummod(agents-54, 10-53)
nmod:to(scale-49, agents-54)

(ROOT
  (S
    (S
      (NP
        (NP (DT The) (NN model))
        (VP (VBG shaping)
          (NP
            (NP (NN technique))
            (PP (IN for)
              (NP
                (NP (JJ decentralized) (NNS POMDPs))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (NNP Velagapudi))
                    (CC et)
                    (NP (NN al.) (CD 2011)))
                  (-RRB- -RRB-)))))))
      (VP (MD can)
        (VP
          (VP (VB compute)
            (NP
              (NP (NNS policies))
              (PP (IN for)
                (NP
                  (NP (NNS hundreds))
                  (PP (IN of)
                    (NP (NNS agents))))))
            (ADVP (RB greedily)))
          (CC and)
          (VP (VB UM)
            (NP (JJ *)
              (PRN (-LRB- -LRB-)
                (NP (NNP Wagner) (CD 2015))
                (-RRB- -RRB-))
              (NNS scales))
            (PP (TO to)
              (NP
                (NP (JJR larger) (NNS numbers))
                (PP (IN of)
                  (NP
                    (NP (NNS agents))
                    (PRN (-LRB- -LRB-)
                      (PP (IN with)
                        (NP (JJ identical) (NN delay) (NNS probabilities)))
                      (-RRB- -RRB-))))))))))
    (, ,)
    (CC but)
    (S
      (NP
        (NP (DT the) (NN plan) (NN execution))
        (PP (IN for)
          (NP (DT both) (NNS approaches))))
      (VP
        (VP (VBZ is)
          (ADJP (RB completely) (JJ decentralized)))
        (CC and)
        (VP
          (ADVP (RB thus))
          (MD can) (RB not)
          (VP (VB prevent)
            (NP (NNS collisions))))))
    (. .)))

det(model-2, The-1)
nsubj(compute-15, model-2)
nsubj(UM-23, model-2)
acl(model-2, shaping-3)
dobj(shaping-3, technique-4)
case(POMDPs-7, for-5)
amod(POMDPs-7, decentralized-6)
nmod:for(technique-4, POMDPs-7)
dep(POMDPs-7, Velagapudi-9)
cc(Velagapudi-9, et-10)
dep(POMDPs-7, al.-11)
conj:et(Velagapudi-9, al.-11)
nummod(al.-11, 2011-12)
aux(compute-15, can-14)
root(ROOT-0, compute-15)
dobj(compute-15, policies-16)
case(hundreds-18, for-17)
nmod:for(policies-16, hundreds-18)
case(agents-20, of-19)
nmod:of(hundreds-18, agents-20)
advmod(compute-15, greedily-21)
cc(compute-15, and-22)
conj:and(compute-15, UM-23)
amod(scales-29, *-24)
appos(scales-29, Wagner-26)
nummod(Wagner-26, 2015-27)
dobj(UM-23, scales-29)
case(numbers-32, to-30)
amod(numbers-32, larger-31)
nmod:to(UM-23, numbers-32)
case(agents-34, of-33)
nmod:of(numbers-32, agents-34)
case(probabilities-39, with-36)
amod(probabilities-39, identical-37)
compound(probabilities-39, delay-38)
nmod:with(agents-34, probabilities-39)
cc(compute-15, but-42)
det(execution-45, the-43)
compound(execution-45, plan-44)
nsubj(decentralized-51, execution-45)
nsubj(prevent-56, execution-45)
case(approaches-48, for-46)
det(approaches-48, both-47)
nmod:for(execution-45, approaches-48)
cop(decentralized-51, is-49)
advmod(decentralized-51, completely-50)
conj:but(compute-15, decentralized-51)
cc(decentralized-51, and-52)
advmod(prevent-56, thus-53)
aux(prevent-56, can-54)
neg(prevent-56, not-55)
conj:but(compute-15, prevent-56)
conj:and(decentralized-51, prevent-56)
dobj(prevent-56, collisions-57)

(ROOT
  (S
    (NP (NNP ai))
    (VP (VBZ has)
      (NP
        (NP (DT a)
          (ADJP (JJ unique)
            (NP
              (NP (NN start) (NN vertex) (NNP si) (NNP V))
              (, ,)
              (NP (DT a) (JJ unique) (NN goal) (NN vertex) (NNP gi) (NNP V))
              (CC and)
              (NP (DT a) (NN delay))))
          (NN probability) (NN pi))
        (PRN (-LRB- -LRB-)
          (NP (CD 0))
          (, ,)
          (NP (CD 1))
          (-RRB- -RRB-))))
    (. .)))

nsubj(has-2, ai-1)
root(ROOT-0, has-2)
det(pi-20, a-3)
amod(pi-20, unique-4)
compound(V-8, start-5)
compound(V-8, vertex-6)
compound(V-8, si-7)
dep(unique-4, V-8)
det(V-15, a-10)
amod(V-15, unique-11)
compound(V-15, goal-12)
compound(V-15, vertex-13)
compound(V-15, gi-14)
dep(unique-4, V-15)
conj:and(V-8, V-15)
cc(V-8, and-16)
det(delay-18, a-17)
dep(unique-4, delay-18)
conj:and(V-8, delay-18)
compound(pi-20, probability-19)
dobj(has-2, pi-20)
appos(pi-20, 0-22)
dep(0-22, 1-24)

(ROOT
  (S
    (NP
      (NP (DT A) (NN path))
      (PP (IN for)
        (NP (NN agent) (NNS ai))))
    (VP (VBZ is)
      (VP (VBN expressed)
        (PP (IN by)
          (NP (DT a) (NN function) (NN li)))
        (SBAR (IN that)
          (S
            (SBAR
              (X
                (NP
                  (NP (NNS maps))
                  (NP (DT each) (NN time) (NN index)))
                (NP (SYM x))
                (NP
                  (NP
                    (NP (NNP =) (CD 0) (, ,) (CD 1))
                    (: ...)
                    (NP (NNP Xi)))
                  (PP (TO to)
                    (NP (DT a) (NN vertex) (NN li)))))
              (S (-LRB- -LRB-)
                (NP (SYM x))
                (-RRB- -RRB-)
                (VP (VBD V)
                  (SBAR
                    (S
                      (NP (PDT such) (DT that))
                      (VP (VBP li)
                        (S
                          (NP
                            (PRN (-LRB- -LRB-)
                              (NP (CD 0))
                              (-RRB- -RRB-)))
                          (VP (SYM =)
                            (NP (NN si))))))))))
            (, ,)
            (NP
              (NP
                (NP (JJ consecutive) (NNS vertices) (NN li))
                (-LRB- -LRB-)
                (NP (SYM x))
                (-RRB- -RRB-))
              (CC and)
              (NP
                (NP (NN li))
                (PRN (-LRB- -LRB-)
                  (NP
                    (QP ($ x) (CD +) (CD 1)))
                  (-RRB- -RRB-))))
            (VP
              (VP (VBP are) (RB either)
                (ADJP
                  (ADJP (JJ identical))
                  (PRN (-LRB- -LRB-)
                    (SBAR
                      (WHADVP (WRB when))
                      (S
                        (NP (NN agent) (NNS ai))
                        (VP (VBZ is)
                          (VP (VBN scheduled)
                            (S
                              (VP (TO to)
                                (VP (VB execute)
                                  (NP (DT a) (NN wait) (NN action)))))))))
                    (-RRB- -RRB-))
                  (CC or)
                  (ADJP (VBN connected)
                    (PP (IN by)
                      (NP (DT an) (NN edge))))
                  (PRN (-LRB- -LRB-)
                    (SBAR
                      (WHADVP (WRB when))
                      (S
                        (NP (NN agent) (NNS ai))
                        (VP (VBZ is)
                          (VP (VBN scheduled)
                            (S
                              (VP (TO to)
                                (VP (VB execute)
                                  (NP (DT a) (NN move) (NN action))
                                  (PP (IN from)
                                    (NP
                                      (NP
                                        (NP (NN vertex) (NN li))
                                        (-LRB- -LRB-)
                                        (NP (SYM x))
                                        (-RRB- -RRB-))
                                      (PP (TO to)
                                        (NP
                                          (NP (NN vertex) (NN li))
                                          (PRN (-LRB- -LRB-)
                                            (NP
                                              (QP ($ x) (CD +) (CD 1)))
                                            (-RRB- -RRB-)))))))))))))
                    (-RRB- -RRB-))))
              (CC and)
              (VP (VBP li)
                (S
                  (NP
                    (PRN (-LRB- -LRB-)
                      (NP (NNP Xi))
                      (-RRB- -RRB-)))
                  (VP (SYM =)
                    (NP (NN gi))))))))))
    (. .)))

det(path-2, A-1)
nsubjpass(expressed-7, path-2)
case(ai-5, for-3)
compound(ai-5, agent-4)
nmod:for(path-2, ai-5)
auxpass(expressed-7, is-6)
root(ROOT-0, expressed-7)
case(li-11, by-8)
det(li-11, a-9)
compound(li-11, function-10)
nmod:agent(expressed-7, li-11)
mark(identical-56, that-12)
dep(=-18, maps-13)
det(index-16, each-14)
compound(index-16, time-15)
dep(maps-13, index-16)
dep(=-18, x-17)
dep(V-31, =-18)
nummod(=-18, 0-19)
nummod(=-18, 1-21)
dep(=-18, Xi-23)
case(li-27, to-24)
det(li-27, a-25)
compound(li-27, vertex-26)
nmod:to(=-18, li-27)
nsubj(V-31, x-29)
advcl(identical-56, V-31)
det:predet(that-33, such-32)
nsubj(li-34, that-33)
ccomp(V-31, li-34)
nsubj(si-39, 0-36)
dep(si-39, =-38)
ccomp(li-34, si-39)
amod(li-43, consecutive-41)
compound(li-43, vertices-42)
nsubjpass(identical-56, li-43)
nsubjpass(connected-70, li-43)
nsubj(li-101, li-43)
dep(li-43, x-45)
cc(li-43, and-47)
conj:and(li-43, li-48)
nsubjpass(identical-56, li-48)
dep(li-48, x-50)
compound(1-52, +-51)
nummod(x-50, 1-52)
auxpass(identical-56, are-54)
advmod(identical-56, either-55)
ccomp(expressed-7, identical-56)
advmod(scheduled-62, when-58)
compound(ai-60, agent-59)
nsubjpass(scheduled-62, ai-60)
nsubj:xsubj(execute-64, ai-60)
auxpass(scheduled-62, is-61)
dep(identical-56, scheduled-62)
mark(execute-64, to-63)
xcomp(scheduled-62, execute-64)
det(action-67, a-65)
compound(action-67, wait-66)
dobj(execute-64, action-67)
cc(identical-56, or-69)
ccomp(expressed-7, connected-70)
conj:or(identical-56, connected-70)
case(edge-73, by-71)
det(edge-73, an-72)
nmod:by(connected-70, edge-73)
advmod(scheduled-79, when-75)
compound(ai-77, agent-76)
nsubjpass(scheduled-79, ai-77)
nsubj:xsubj(execute-81, ai-77)
auxpass(scheduled-79, is-78)
dep(identical-56, scheduled-79)
mark(execute-81, to-80)
xcomp(scheduled-79, execute-81)
det(action-84, a-82)
compound(action-84, move-83)
dobj(execute-81, action-84)
case(li-87, from-85)
compound(li-87, vertex-86)
nmod:from(execute-81, li-87)
dep(li-87, x-89)
case(li-93, to-91)
compound(li-93, vertex-92)
nmod:to(li-87, li-93)
dep(li-93, x-95)
compound(1-97, +-96)
nummod(x-95, 1-97)
cc(identical-56, and-100)
ccomp(expressed-7, li-101)
conj:or(identical-56, li-101)
nsubj(gi-106, Xi-103)
dep(gi-106, =-105)
ccomp(li-101, gi-106)

(ROOT
  (S
    (NP (DT A) (NNP MAPF) (NN plan))
    (VP (VBZ consists)
      (PP (IN of)
        (NP
          (NP (DT a) (NN path))
          (PP (IN for)
            (NP (DT each) (NN agent))))))
    (. .)))

det(plan-3, A-1)
compound(plan-3, MAPF-2)
nsubj(consists-4, plan-3)
root(ROOT-0, consists-4)
case(path-7, of-5)
det(path-7, a-6)
nmod:of(consists-4, path-7)
case(agent-10, for-8)
det(agent-10, each-9)
nmod:for(path-7, agent-10)

(ROOT
  (NP
    (NP (NNP Problem) (NNP Definition))
    (: :)
    (NP
      (NP (NNP Plan) (NNP Execution))
      (SBAR
        (S
          (NP
            (NP (DT The) (JJ local) (NN state) (NN xt))
            (PP
              (PP
                (NP
                  (NP (FW i))
                  (PP (IN of)
                    (NP (NN agent) (NNS i))))
                (IN at)
                (NP
                  (NP (NN time) (NN step))
                  (ADJP (JJ t)
                    (NP (NNP =) (CD 0) (, ,) (CD 1)))))
              (: ...)
              (PP (IN during)
                (NP (NN plan) (NN execution)))))
          (VP (VBZ is)
            (NP (DT a) (NN time) (NN index))))))
    (. .)))

compound(Definition-2, Problem-1)
root(ROOT-0, Definition-2)
compound(Execution-5, Plan-4)
dep(Definition-2, Execution-5)
det(xt-9, The-6)
amod(xt-9, local-7)
compound(xt-9, state-8)
nsubj(index-29, xt-9)
nmod:at(xt-9, i-10)
case(i-13, of-11)
compound(i-13, agent-12)
nmod:of(i-10, i-13)
case(i-10, at-14)
compound(step-16, time-15)
dep(i-10, step-16)
amod(step-16, t-17)
dep(t-17, =-18)
nummod(=-18, 0-19)
nummod(=-18, 1-21)
case(execution-25, during-23)
compound(execution-25, plan-24)
nmod:during(i-10, execution-25)
cop(index-29, is-26)
det(index-29, a-27)
compound(index-29, time-28)
acl:relcl(Execution-5, index-29)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBD set)
      (NP
        (NP (JJ x0) (NNS i))
        (: :)
        (S
          (S
            (VP (VBG =)
              (NP (CD 0))))
          (CC and)
          (ADVP (RB always))
          (S
            (VP (VB update)
              (NP (PRP$ its) (JJ local) (NN state))
              (PP (JJ such))))))
      (SBAR (IN that)
        (S
          (NP (PRP it))
          (VP (VBZ is)
            (PP (IN in)
              (NP
                (NP
                  (NP (NN vertex) (NN li))
                  (PRN (-LRB- -LRB-)
                    (NP (NNP xt) (NNP i))
                    (-RRB- -RRB-)))
                (PP (IN at)
                  (NP (NN time) (NN step) (NN t)))))))))
    (. .)))

nsubj(set-2, We-1)
root(ROOT-0, set-2)
amod(i-4, x0-3)
dobj(set-2, i-4)
dep(i-4, =-6)
dobj(=-6, 0-7)
cc(=-6, and-8)
advmod(update-10, always-9)
dep(i-4, update-10)
conj:and(=-6, update-10)
nmod:poss(state-13, its-11)
amod(state-13, local-12)
dobj(update-10, state-13)
advcl(update-10, such-14)
mark(li-20, that-15)
nsubj(li-20, it-16)
cop(li-20, is-17)
case(li-20, in-18)
compound(li-20, vertex-19)
ccomp(set-2, li-20)
compound(i-23, xt-22)
appos(li-20, i-23)
case(t-28, at-25)
compound(t-28, time-26)
compound(t-28, step-27)
nmod:at(li-20, t-28)

(ROOT
  (S
    (NP (DT The) (NN agent))
    (VP
      (VP (VBZ knows)
        (NP (PRP$ its) (JJ current) (JJ local) (NN state)))
      (CC and)
      (VP (VBZ receives)
        (NP (NNS messages))
        (PP (IN from)
          (NP
            (NP (DT some))
            (PP (IN of)
              (NP
                (NP (DT the) (JJ other) (NNS agents))
                (PP (IN about)
                  (NP (PRP$ their) (JJ local) (NNS states)))))))))
    (. .)))

det(agent-2, The-1)
nsubj(knows-3, agent-2)
nsubj(receives-9, agent-2)
root(ROOT-0, knows-3)
nmod:poss(state-7, its-4)
amod(state-7, current-5)
amod(state-7, local-6)
dobj(knows-3, state-7)
cc(knows-3, and-8)
conj:and(knows-3, receives-9)
dobj(receives-9, messages-10)
case(some-12, from-11)
nmod:from(receives-9, some-12)
case(agents-16, of-13)
det(agents-16, the-14)
amod(agents-16, other-15)
nmod:of(some-12, agents-16)
case(states-20, about-17)
nmod:poss(states-20, their-18)
amod(states-20, local-19)
nmod:about(agents-16, states-20)

(ROOT
  (S
    (PP (IN At)
      (NP (DT each) (NN time) (NN step)))
    (, ,)
    (NP (PRP$ its) (JJ plan-execution) (NN policy))
    (VP (VBZ maps)
      (NP (DT this) (NN knowledge))
      (PP (TO to)
        (NP
          (NP (CD one))
          (PP (IN of)
            (NP (DT the) (NNS commands) (NNP GO)
              (CC or)
              (NNP ST) (NNP OP)))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBP control)
                (SBAR
                  (WHADVP (WRB how))
                  (S
                    (NP (PRP it))
                    (VP (VBZ proceeds)
                      (PP (IN along)
                        (NP (PRP$ its) (NN path))))))))))))
    (. .)))

case(step-4, At-1)
det(step-4, each-2)
compound(step-4, time-3)
nmod:at(maps-9, step-4)
nmod:poss(policy-8, its-6)
amod(policy-8, plan-execution-7)
nsubj(maps-9, policy-8)
root(ROOT-0, maps-9)
det(knowledge-11, this-10)
dobj(maps-9, knowledge-11)
case(one-13, to-12)
nmod:to(maps-9, one-13)
nsubj(control-22, one-13)
case(GO-17, of-14)
det(GO-17, the-15)
compound(GO-17, commands-16)
nmod:of(one-13, GO-17)
cc(GO-17, or-18)
compound(OP-20, ST-19)
nmod:of(one-13, OP-20)
conj:or(GO-17, OP-20)
ref(one-13, that-21)
acl:relcl(one-13, control-22)
advmod(proceeds-25, how-23)
nsubj(proceeds-25, it-24)
ccomp(control-22, proceeds-25)
case(path-28, along-26)
nmod:poss(path-28, its-27)
nmod:along(proceeds-25, path-28)

(ROOT
  (FRAG
    (NP (CD 1))
    (. .)))

root(ROOT-0, 1-1)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT the) (NN command))
        (VP (VBZ is)
          (NP
            (NP (NNP GO))
            (PP (IN at)
              (NP (NN time) (NN step) (NN t)))))))
    (: :)
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (SBAR (IN If)
        (S
          (VP (VBP xt)
            (S
              (NP (FW i))
              (VP (SYM =)
                (NP (NNP Xi)))))))
      (, ,)
      (NP (RB then) (NN agent))
      (VP
        (VP (VBP ai)
          (VP (VBG executes)
            (NP (DT no) (NN action))))
        (CC and)
        (VP (VBZ remains)
          (PP (IN in)
            (NP (PRP$ its) (JJ current) (NN vertex) (NN li))))
        (PRN (-LRB- -LRB-)
          (S
            (VP (VB xt)
              (NP (FW i))))
          (-RRB- -RRB-))
        (SBAR (IN since)
          (S
            (NP (PRP it))
            (VP (VBZ has)
              (VP (VBN entered)
                (NP
                  (NP (PRP$ its) (JJ last) (JJ local) (NN state))
                  (PRN (-LRB- -LRB-)
                    (CC and)
                    (ADVP (RB thus))
                    (NP
                      (NP (DT the) (NN end))
                      (PP (IN of)
                        (NP (PRP$ its) (NN path))))
                    (-RRB- -RRB-)))))))))
    (. .)))

mark(GO-5, If-1)
det(command-3, the-2)
nsubj(GO-5, command-3)
cop(GO-5, is-4)
advcl(executes-23, GO-5)
case(t-9, at-6)
compound(t-9, time-7)
compound(t-9, step-8)
nmod:at(GO-5, t-9)
dep(executes-23, a-12)
mark(xt-15, If-14)
advcl(executes-23, xt-15)
nsubj(Xi-18, i-16)
dep(Xi-18, =-17)
ccomp(xt-15, Xi-18)
advmod(agent-21, then-20)
nsubj(executes-23, agent-21)
nsubj(remains-27, agent-21)
aux(executes-23, ai-22)
root(ROOT-0, executes-23)
neg(action-25, no-24)
dobj(executes-23, action-25)
cc(executes-23, and-26)
conj:and(executes-23, remains-27)
case(li-32, in-28)
nmod:poss(li-32, its-29)
amod(li-32, current-30)
compound(li-32, vertex-31)
nmod:in(remains-27, li-32)
parataxis(executes-23, xt-34)
dobj(xt-34, i-35)
mark(entered-40, since-37)
nsubj(entered-40, it-38)
aux(entered-40, has-39)
advcl(executes-23, entered-40)
nmod:poss(state-44, its-41)
amod(state-44, last-42)
amod(state-44, local-43)
dobj(entered-40, state-44)
cc(end-49, and-46)
dep(end-49, thus-47)
det(end-49, the-48)
dep(state-44, end-49)
case(path-52, of-50)
nmod:poss(path-52, its-51)
nmod:of(end-49, path-52)

(ROOT
  (S
    (S
      (NP (PRP We))
      (ADVP (RB thus)
        (NP (CD +1)))
      (VP (VB update)
        (NP (PRP$ its) (JJ local) (NN state))
        (PP (TO to)
          (NP (NN xt)))))
    (: :)
    (S
      (S
        (VP (SYM =)
          (NP (NN xt) (NN i.))))
      (NP (FW i))
      (ADVP (RB t))
      (VP (VBP t)
        (SBAR
          (S
            (S
              (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
              (SBAR (IN If)
                (S
                  (NP
                    (NP (NNP xt) (NNP =) (NNP X))
                    (CC and)
                    (NP
                      (NP (NN l))
                      (-LRB- -LRB-)
                      (NP (SYM x))
                      (-RRB- -RRB-)))
                  (VP (VBZ =)
                    (NP
                      (NP (FW l) (FW i) (FW i) (FW i) (FW i))
                      (PRN (-LRB- -LRB-)
                        (NP (NNP xi)
                          (QP (CD +) (CD 1)))
                        (-RRB- -RRB-))))))
              (, ,)
              (NP (RB then) (NN agent))
              (VP (VBP ai)
                (NP (FW i))))
            (VP (VBZ executes)
              (NP (DT a) (NN wait) (NN action))
              (S
                (VP (TO to)
                  (VP (VB remain)
                    (PP (IN in)
                      (NP (PRP$ its) (JJ current) (NN vertex) (NN li))))))
              (PRN (-LRB- -LRB-)
                (S
                  (VP (VB xt)
                    (NP (FW i))))
                (-RRB- -RRB-)))))))
    (. .)))

nsubj(update-4, We-1)
advmod(update-4, thus-2)
nmod:npmod(thus-2, +1-3)
root(ROOT-0, update-4)
nmod:poss(state-7, its-5)
amod(state-7, local-6)
dobj(update-4, state-7)
case(xt-9, to-8)
nmod:to(update-4, xt-9)
dep(i.-13, =-11)
compound(i.-13, xt-12)
dep(t-16, i.-13)
nsubj(t-16, i-14)
advmod(t-16, t-15)
parataxis(update-4, t-16)
dep(i-44, b-18)
mark(=-29, If-20)
compound(X-23, xt-21)
compound(X-23, =-22)
nsubj(=-29, X-23)
cc(X-23, and-24)
conj:and(X-23, l-25)
nsubj(=-29, l-25)
dep(l-25, x-27)
advcl(i-44, =-29)
compound(i-34, l-30)
compound(i-34, i-31)
compound(i-34, i-32)
compound(i-34, i-33)
dobj(=-29, i-34)
appos(i-34, xi-36)
compound(1-38, +-37)
nummod(xi-36, 1-38)
advmod(agent-42, then-41)
nsubj(i-44, agent-42)
cop(i-44, ai-43)
csubj(executes-45, i-44)
ccomp(t-16, executes-45)
det(action-48, a-46)
compound(action-48, wait-47)
dobj(executes-45, action-48)
mark(remain-50, to-49)
advcl(executes-45, remain-50)
case(li-55, in-51)
nmod:poss(li-55, its-52)
amod(li-55, current-53)
compound(li-55, vertex-54)
nmod:in(remain-50, li-55)
parataxis(executes-45, xt-57)
dobj(xt-57, i-58)

(ROOT
  (S
    (NP
      (NP (DT The) (NN execution))
      (PP (IN of)
        (NP (NN wait) (NNS actions))))
    (ADVP (RB never))
    (VP (VBZ fails))
    (. .)))

det(execution-2, The-1)
nsubj(fails-7, execution-2)
case(actions-5, of-3)
compound(actions-5, wait-4)
nmod:of(execution-2, actions-5)
neg(fails-7, never-6)
root(ROOT-0, fails-7)

(ROOT
  (S
    (NP (PRP We))
    (ADVP
      (NP (CD +1))
      (RB thus))
    (VP (VB update)
      (NP
        (NP
          (NP
            (NP
              (NP (PRP$ its) (JJ local) (NN state))
              (PP (TO to)
                (NP (NN xt))))
            (: :)
            (S
              (VP (SYM =)
                (NP (NNP xt) (FW i) (NNP +)))))
          (NP (CD 1)))
        (PRN (-LRB- -LRB-)
          (NP (NN success))
          (-RRB- -RRB-))))
    (. .)))

nsubj(update-4, We-1)
nmod:npmod(thus-3, +1-2)
advmod(update-4, thus-3)
root(ROOT-0, update-4)
nmod:poss(state-7, its-5)
amod(state-7, local-6)
dobj(update-4, state-7)
case(xt-9, to-8)
nmod:to(state-7, xt-9)
dep(+-14, =-11)
compound(+-14, xt-12)
compound(+-14, i-13)
dep(state-7, +-14)
dep(state-7, 1-15)
appos(state-7, success-17)

(ROOT
  (S
    (NP
      (NP
        (NP
          (NP (JJ i) (NN t) (NN t) (NN t))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (SBAR (IN If)
          (S
            (NP
              (NP (NNP xi) (NNP =) (NNP Xi))
              (CC and)
              (NP
                (NP (NN li))
                (PRN (-LRB- -LRB-)
                  (NP (NN xi))
                  (-RRB- -RRB-))))
            (VP (SYM =)
              (NP (NN li))))))
      (PRN (-LRB- -LRB-)
        (NP (NNP xi)
          (QP (CD +) (CD 1)))
        (-RRB- -RRB-)))
    (, ,)
    (ADVP (RB then))
    (NP (NN agent) (NNS ai))
    (VP (VBZ executes)
      (NP
        (NP (DT a) (NN move) (NN action))
        (PP (IN from)
          (NP (PRP$ its) (JJ current) (NN vertex) (NN li))))
      (PRN (-LRB- -LRB-)
        (S
          (VP (VB xt)
            (NP (FW i))))
        (-RRB- -RRB-))
      (PP (TO to)
        (NP
          (NP (NN vertex) (NN li))
          (PRN (-LRB- -LRB-)
            (NP (NNP xt)
              (QP (CD +) (CD 1)))
            (-RRB- -RRB-)))))
    (. .)))

amod(t-4, i-1)
compound(t-4, t-2)
compound(t-4, t-3)
nsubj(executes-28, t-4)
dep(t-4, c-6)
mark(li-18, If-8)
compound(Xi-11, xi-9)
compound(Xi-11, =-10)
nsubj(li-18, Xi-11)
cc(Xi-11, and-12)
conj:and(Xi-11, li-13)
nsubj(li-18, li-13)
appos(li-13, xi-15)
dep(li-18, =-17)
dep(t-4, li-18)
appos(t-4, xi-20)
compound(1-22, +-21)
nummod(xi-20, 1-22)
advmod(ai-27, then-25)
compound(ai-27, agent-26)
nsubj(executes-28, ai-27)
root(ROOT-0, executes-28)
det(action-31, a-29)
compound(action-31, move-30)
dobj(executes-28, action-31)
case(li-36, from-32)
nmod:poss(li-36, its-33)
amod(li-36, current-34)
compound(li-36, vertex-35)
nmod:from(action-31, li-36)
parataxis(executes-28, xt-38)
dobj(xt-38, i-39)
case(li-43, to-41)
compound(li-43, vertex-42)
nmod:to(executes-28, li-43)
appos(li-43, xt-45)
compound(1-47, +-46)
nummod(xt-45, 1-47)

(ROOT
  (S
    (NP
      (NP (DT The) (NN execution))
      (PP (IN of)
        (NP (NN move) (NNS actions))))
    (VP (VBZ fails)
      (NP (FW i))
      (PP (IN with)
        (NP
          (NP (NN delay) (NN probability) (NN pi))
          (PP (IN with)
            (NP (DT the) (NN effect)))))
      (SBAR (IN that)
        (S
          (NP (DT the) (NN agent))
          (VP
            (VP (VBZ executes)
              (NP (DT no) (NN action)))
            (CC and)
            (VP (VBZ remains)
              (VP (VBN delayed)
                (PP (IN in)
                  (NP
                    (NP (PRP$ its) (JJ current) (NN t) (CD +1) (NN vertex) (NN li))
                    (PRN (-LRB- -LRB-)
                      (NP
                        (NP (NN xt))
                        (: :)
                        (NP (FW =) (FW i)))
                      (-RRB- -RRB-))))))))))
    (. .)))

det(execution-2, The-1)
nsubj(fails-6, execution-2)
case(actions-5, of-3)
compound(actions-5, move-4)
nmod:of(execution-2, actions-5)
root(ROOT-0, fails-6)
dobj(fails-6, i-7)
case(pi-11, with-8)
compound(pi-11, delay-9)
compound(pi-11, probability-10)
nmod:with(fails-6, pi-11)
case(effect-14, with-12)
det(effect-14, the-13)
nmod:with(pi-11, effect-14)
mark(executes-18, that-15)
det(agent-17, the-16)
nsubj(executes-18, agent-17)
nsubj(remains-22, agent-17)
ccomp(fails-6, executes-18)
neg(action-20, no-19)
dobj(executes-18, action-20)
cc(executes-18, and-21)
ccomp(fails-6, remains-22)
conj:and(executes-18, remains-22)
xcomp(remains-22, delayed-23)
case(li-30, in-24)
nmod:poss(li-30, its-25)
amod(li-30, current-26)
compound(li-30, t-27)
nummod(li-30, +1-28)
compound(li-30, vertex-29)
nmod:in(delayed-23, li-30)
dep(li-30, xt-32)
compound(i-35, =-34)
dep(xt-32, i-35)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB thus))
    (VP (VB update)
      (NP (PRP$ its) (JJ local) (NN state))
      (S
        (VP (TO to)
          (VP (VB xi)
            (NP
              (NP
                (QP (CD t) (CD +1))
                (JJ t) (NN t) (NN xi))
              (PP (IN with)
                (NP
                  (NP (NN probability) (NN pi))
                  (PRN (-LRB- -LRB-)
                    (NP (NN failure))
                    (-RRB- -RRB-))
                  (CC and)
                  (NP (NN xi))
                  (: :)))
              (SBAR
                (S
                  (VP (SYM =)
                    (NP (NN xi) (NN +) (CD 1))))))
            (PP (IN with)
              (NP
                (NP (NN probability) (CD 1))
                (: -)
                (NP (NN pi))
                (PRN (-LRB- -LRB-)
                  (NP (NN success))
                  (-RRB- -RRB-))))))))
    (. .)))

nsubj(update-3, We-1)
advmod(update-3, thus-2)
root(ROOT-0, update-3)
nmod:poss(state-6, its-4)
amod(state-6, local-5)
dobj(update-3, state-6)
mark(xi-8, to-7)
advcl(update-3, xi-8)
compound(+1-10, t-9)
nummod(xi-13, +1-10)
amod(xi-13, t-11)
compound(xi-13, t-12)
dobj(xi-8, xi-13)
case(pi-16, with-14)
compound(pi-16, probability-15)
nmod:with(xi-13, pi-16)
appos(pi-16, failure-18)
cc(pi-16, and-20)
nmod:with(xi-13, xi-21)
conj:and(pi-16, xi-21)
dep(+-25, =-23)
compound(+-25, xi-24)
acl:relcl(xi-13, +-25)
nummod(+-25, 1-26)
case(probability-28, with-27)
nmod:with(xi-8, probability-28)
nummod(probability-28, 1-29)
dep(probability-28, pi-31)
appos(probability-28, success-33)

(ROOT
  (FRAG
    (NP (CD 2))
    (. .)))

root(ROOT-0, 2-1)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT the) (NN command))
        (VP (VBZ is)
          (NP
            (NP (NNP ST) (NNP OP))
            (PP (IN at)
              (NP (NN time) (NN step) (NN t)))))))
    (, ,)
    (NP (RB then) (NN agent))
    (VP
      (VP (VBP ai)
        (VP (VBG executes)
          (NP (DT no) (NN action))))
      (CC and)
      (VP (VBZ remains)
        (PP (IN in)
          (NP
            (NP (PRP$ its) (JJ current) (NN vertex) (NN li))
            (PRN (-LRB- -LRB-)
              (NP (NNP xt) (NNP i))
              (-RRB- -RRB-))))))
    (. .)))

mark(OP-6, If-1)
det(command-3, the-2)
nsubj(OP-6, command-3)
cop(OP-6, is-4)
compound(OP-6, ST-5)
advcl(executes-15, OP-6)
case(t-10, at-7)
compound(t-10, time-8)
compound(t-10, step-9)
nmod:at(OP-6, t-10)
advmod(agent-13, then-12)
nsubj(executes-15, agent-13)
nsubj(remains-19, agent-13)
aux(executes-15, ai-14)
root(ROOT-0, executes-15)
neg(action-17, no-16)
dobj(executes-15, action-17)
cc(executes-15, and-18)
conj:and(executes-15, remains-19)
case(li-24, in-20)
nmod:poss(li-24, its-21)
amod(li-24, current-22)
compound(li-24, vertex-23)
nmod:in(remains-19, li-24)
compound(i-27, xt-26)
appos(li-24, i-27)

(ROOT
  (NP
    (NP
      (NP (CD +1) (NN t))
      (SBAR
        (S
          (NP (PRP We))
          (ADVP (RB thus))
          (VP (VB update)
            (NP (PRP$ its) (JJ local) (NN state))
            (PP (TO to)
              (NP (NN xt)))))))
    (: :)
    (NP
      (NP (NNP =))
      (NP (SYM x)))
    (. .)))

nummod(t-2, +1-1)
root(ROOT-0, t-2)
nsubj(update-5, We-3)
advmod(update-5, thus-4)
acl:relcl(t-2, update-5)
nmod:poss(state-8, its-6)
amod(state-8, local-7)
dobj(update-5, state-8)
case(xt-10, to-9)
nmod:to(update-5, xt-10)
dep(t-2, =-12)
dep(=-12, x-13)

(ROOT
  (S
    (NP
      (NP (FW i) (FW i))
      (NP (PRP$ Our) (NN objective)))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP (VB find)
            (NP
              (NP (DT a) (NN combination))
              (PP (IN of)
                (NP
                  (NP (DT a) (JJ MAPF) (NN plan))
                  (CC and)
                  (NP (DT a) (JJ plan-execution) (NN policy)))))
            (PP (IN with)
              (NP
                (NP (JJ small) (JJ average) (NN makespan))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (VP (VBZ is)
                      (NP
                        (NP (DT the) (JJ average) (JJS earliest) (NN time) (NN step))
                        (PP (IN during)
                          (NP (NN plan) (NN execution)))
                        (SBAR
                          (WHADVP (WRB when))
                          (S
                            (NP (DT all) (NNS agents))
                            (VP (VBP have)
                              (VP (VBN entered)
                                (NP (PRP$ their) (JJ last) (JJ local) (NNS states))))))))))))))))
    (. .)))

compound(i-2, i-1)
nsubj(is-5, i-2)
nsubj:xsubj(find-7, i-2)
nmod:poss(objective-4, Our-3)
dep(i-2, objective-4)
root(ROOT-0, is-5)
mark(find-7, to-6)
xcomp(is-5, find-7)
det(combination-9, a-8)
dobj(find-7, combination-9)
case(plan-13, of-10)
det(plan-13, a-11)
amod(plan-13, MAPF-12)
nmod:of(combination-9, plan-13)
cc(plan-13, and-14)
det(policy-17, a-15)
amod(policy-17, plan-execution-16)
nmod:of(combination-9, policy-17)
conj:and(plan-13, policy-17)
case(makespan-21, with-18)
amod(makespan-21, small-19)
amod(makespan-21, average-20)
nmod:with(find-7, makespan-21)
nsubj(step-29, makespan-21)
ref(makespan-21, which-23)
cop(step-29, is-24)
det(step-29, the-25)
amod(step-29, average-26)
amod(step-29, earliest-27)
compound(step-29, time-28)
acl:relcl(makespan-21, step-29)
case(execution-32, during-30)
compound(execution-32, plan-31)
nmod:during(step-29, execution-32)
advmod(entered-37, when-33)
det(agents-35, all-34)
nsubj(entered-37, agents-35)
aux(entered-37, have-36)
acl:relcl(step-29, entered-37)
nmod:poss(states-41, their-38)
amod(states-41, last-39)
amod(states-41, local-40)
dobj(entered-37, states-41)

(ROOT
  (S
    (NP (DT The) (NNP MAPF) (NN problem))
    (VP (VBZ is)
      (NP
        (NP (DT a) (JJ special) (NN case))
        (SBAR
          (WHADVP (WRB where))
          (S
            (S
              (NP
                (NP (DT the) (NN delay) (NNS probabilities))
                (PP (IN of)
                  (NP (DT all) (NNS agents))))
              (VP (VBP are)
                (NP (CD zero))))
            (CC and)
            (S
              (NP (DT the) (JJ plan-execution) (NNS policies))
              (ADVP (RB always))
              (VP (VB provide)
                (NP (NNP GO) (NNS commands))))))))
    (. .)))

det(problem-3, The-1)
compound(problem-3, MAPF-2)
nsubj(case-7, problem-3)
cop(case-7, is-4)
det(case-7, a-5)
amod(case-7, special-6)
root(ROOT-0, case-7)
advmod(zero-16, where-8)
det(probabilities-11, the-9)
compound(probabilities-11, delay-10)
nsubj(zero-16, probabilities-11)
case(agents-14, of-12)
det(agents-14, all-13)
nmod:of(probabilities-11, agents-14)
cop(zero-16, are-15)
acl:relcl(case-7, zero-16)
cc(zero-16, and-17)
det(policies-20, the-18)
amod(policies-20, plan-execution-19)
nsubj(provide-22, policies-20)
advmod(provide-22, always-21)
acl:relcl(case-7, provide-22)
conj:and(zero-16, provide-22)
compound(commands-24, GO-23)
dobj(provide-22, commands-24)

(ROOT
  (S
    (NP (NNP Valid) (NNP MAPF-DP))
    (VP (VBZ Plans)
      (NP (NNP Definition) (CD 1)))
    (. .)))

compound(MAPF-DP-2, Valid-1)
nsubj(Plans-3, MAPF-DP-2)
root(ROOT-0, Plans-3)
dobj(Plans-3, Definition-4)
nummod(Definition-4, 1-5)

(ROOT
  (S
    (NP (DT A) (JJ valid) (NNP MAPF-DP) (NN plan))
    (VP (VBZ is)
      (NP
        (NP
          (NP (DT a) (NN plan))
          (PP (IN with)
            (NP (CD 2) (NNS properties))))
        (: :)
        (NP (CD 1))))
    (. .)))

det(plan-4, A-1)
amod(plan-4, valid-2)
compound(plan-4, MAPF-DP-3)
nsubj(plan-7, plan-4)
cop(plan-7, is-5)
det(plan-7, a-6)
root(ROOT-0, plan-7)
case(properties-10, with-8)
nummod(properties-10, 2-9)
nmod:with(plan-7, properties-10)
dep(plan-7, 1-12)

(ROOT
  (S
    (NP
      (NP
        (NP
          (NP (FW i))
          (, ,)
          (NP (NN j))
          (, ,)
          (NP
            (NP (SYM x))
            (PP (IN with)
              (NP
                (NP (FW i) (FW =) (NN j))
                (: :)
                (NP
                  (NP (NN li))
                  (NP
                    (LST (-LRB- -LRB-) (LS x) (-RRB- -RRB-))
                    (VBN =) (NN lj)))))))
        (-LRB- -LRB-)
        (NP (SYM x))
        (-RRB- -RRB-))
      (VP (VBG -LSB-)
        (NP (CD two) (NNS agents))))
    (VP (VBP are)
      (ADVP (RB never))
      (VP (VBN scheduled)
        (S
          (VP (TO to)
            (VP (VB be)
              (PP (IN in)
                (NP (DT the) (JJ same) (NN vertex)))
              (PP (IN at)
                (NP
                  (NP (DT the) (JJ same) (NN time) (NN index))
                  (, ,)
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VBZ is) (, ,)
                        (SBAR
                          (S
                            (NP
                              (NP (DT the) (NNS vertices))
                              (PP (IN of)
                                (NP
                                  (NP (CD two) (NNS agents))
                                  (PP (IN in)
                                    (NP (DT the) (JJ same) (JJ local) (NN state))))))
                            (VP (VBP are)
                              (NP (JJ different) (NNS -RSB-)))))))))))))))
    (. .)))

nsubjpass(scheduled-25, i-1)
nsubj:xsubj(vertex-31, i-1)
appos(i-1, j-3)
appos(i-1, x-5)
case(j-9, with-6)
compound(j-9, i-7)
compound(j-9, =-8)
nmod:with(x-5, j-9)
dep(j-9, li-11)
dep(lj-16, x-13)
amod(lj-16, =-15)
dep(li-11, lj-16)
dep(i-1, x-18)
acl(i-1, -LSB--20)
nummod(agents-22, two-21)
dobj(-LSB--20, agents-22)
auxpass(scheduled-25, are-23)
neg(scheduled-25, never-24)
root(ROOT-0, scheduled-25)
mark(vertex-31, to-26)
cop(vertex-31, be-27)
case(vertex-31, in-28)
det(vertex-31, the-29)
amod(vertex-31, same-30)
xcomp(scheduled-25, vertex-31)
case(index-36, at-32)
det(index-36, the-33)
amod(index-36, same-34)
compound(index-36, time-35)
nmod:at(vertex-31, index-36)
nsubj(is-39, index-36)
ref(index-36, that-38)
acl:relcl(index-36, is-39)
det(vertices-42, the-41)
nsubj(-RSB--53, vertices-42)
case(agents-45, of-43)
nummod(agents-45, two-44)
nmod:of(vertices-42, agents-45)
case(state-50, in-46)
det(state-50, the-47)
amod(state-50, same-48)
amod(state-50, local-49)
nmod:in(agents-45, state-50)
cop(-RSB--53, are-51)
amod(-RSB--53, different-52)
ccomp(is-39, -RSB--53)

(ROOT
  (FRAG
    (NP (CD 2))
    (. .)))

root(ROOT-0, 2-1)

(ROOT
  (S
    (NP
      (NP (FW i))
      (, ,)
      (NP (NN j))
      (, ,)
      (NP
        (NP (SYM x))
        (PP (IN with)
          (S
            (VP (VBG i)
              (S
                (VP (SYM =)
                  (NP (NN j))))))))
      (: :))
    (VP (VBP li)
      (S
        (NP
          (PRN (-LRB- -LRB-)
            (NP
              (QP ($ x) (CD +) (CD 1)))
            (-RRB- -RRB-)))
        (VP (SYM =)
          (NP (NN lj))))
      (SBAR
        (SBAR
          (S
            (S
              (LST (-LRB- -LRB-) (LS x) (-RRB- -RRB-))
              (NP (JJ -LSB-) (DT an) (NN agent))
              (VP (VBZ is)
                (ADVP (RB never))
                (VP (VBN scheduled)
                  (S
                    (VP (TO to)
                      (VP (VB be)
                        (VP
                          (ADVP (IN in)
                            (NP (DT a) (NN vertex))
                            (PP (IN at)
                              (NP (DT a) (NN time) (NN index))))
                          (VBN x)
                          (NP
                            (QP (CD +) (CD 1)))
                          (SBAR
                            (WHADVP (WRB when))
                            (S
                              (NP (DT any) (JJ other) (NN agent))
                              (VP (VBZ is)
                                (VP (VBN scheduled)
                                  (S
                                    (VP (TO to)
                                      (VP (VB be)
                                        (PP (IN in)
                                          (NP (DT the) (JJ same) (NN vertex)))
                                        (PP (IN at)
                                          (NP
                                            (NP (NN time) (NN index))
                                            (NP
                                              (NP (SYM x))
                                              (, ,)
                                              (SBAR
                                                (WHNP (WDT that))
                                                (S
                                                  (VP (VBZ is)))))))))))))))))))))
            (, ,)
            (S
              (FRAG
                (X
                  (NP
                    (NP (DT the) (NN vertex))
                    (PP (IN of)
                      (NP
                        (NP (DT an) (NN agent))
                        (PP (IN in)
                          (NP (DT a) (JJ local) (NN state))))))
                  (NP (SYM x))
                  (NP
                    (NP (CD +1))
                    (NP (NNP Problem) (NNP Definition))))
                (: :)
                (NP (NNP Planning)))
              (NP (DT A) (NNP MAPF-DP) (NN instance))
              (VP (VBZ is)
                (VP (VBN characterized)
                  (PP (IN by)
                    (NP
                      (NP (DT an) (JJ undirected) (NN graph) (NNP G) (NNP =))
                      (PRN (-LRB- -LRB-)
                        (NP (NNP V))
                        (, ,)
                        (NP (NNP E))
                        (-RRB- -RRB-))
                      (SBAR
                        (WHNP (WP$ whose)
                          (ADJP (JJ vertices))
                          (NN V))
                        (S
                          (VP (VB correspond)
                            (PP (TO to)
                              (NP (NNS locations)))))))))))))
        (CC and)
        (SBAR
          (WHNP (WP$ whose)
            (NX (NNS edges)))
          (S
            (NP (NNP E))
            (VP (VB correspond)
              (PP (TO to)
                (NP
                  (NP (NNS transitions))
                  (PP (IN between)
                    (NP (NNS locations))))))))))
    (. .)))

nsubj(li-11, i-1)
appos(i-1, j-3)
appos(i-1, x-5)
mark(i-7, with-6)
acl(x-5, i-7)
dep(j-9, =-8)
ccomp(i-7, j-9)
root(ROOT-0, li-11)
nsubj(lj-18, x-13)
compound(1-15, +-14)
nummod(x-13, 1-15)
dep(lj-18, =-17)
ccomp(li-11, lj-18)
dep(scheduled-27, x-20)
amod(agent-24, -LSB--22)
det(agent-24, an-23)
nsubjpass(scheduled-27, agent-24)
nsubjpass:xsubj(x-37, agent-24)
auxpass(scheduled-27, is-25)
neg(scheduled-27, never-26)
dep(li-11, scheduled-27)
mark(x-37, to-28)
auxpass(x-37, be-29)
case(vertex-32, in-30)
det(vertex-32, a-31)
advmod(x-37, vertex-32)
case(index-36, at-33)
det(index-36, a-34)
compound(index-36, time-35)
nmod:at(vertex-32, index-36)
xcomp(scheduled-27, x-37)
compound(1-39, +-38)
dobj(x-37, 1-39)
advmod(scheduled-45, when-40)
det(agent-43, any-41)
amod(agent-43, other-42)
nsubjpass(scheduled-45, agent-43)
nsubj:xsubj(vertex-51, agent-43)
auxpass(scheduled-45, is-44)
advcl(x-37, scheduled-45)
mark(vertex-51, to-46)
cop(vertex-51, be-47)
case(vertex-51, in-48)
det(vertex-51, the-49)
amod(vertex-51, same-50)
xcomp(scheduled-45, vertex-51)
case(index-54, at-52)
compound(index-54, time-53)
nmod:at(vertex-51, index-54)
dep(index-54, x-55)
nsubj(is-58, x-55)
ref(x-55, that-57)
acl:relcl(x-55, is-58)
det(vertex-61, the-60)
dep(+1-70, vertex-61)
case(agent-64, of-62)
det(agent-64, an-63)
nmod:of(vertex-61, agent-64)
case(state-68, in-65)
det(state-68, a-66)
amod(state-68, local-67)
nmod:in(agent-64, state-68)
dep(+1-70, x-69)
dep(Planning-74, +1-70)
compound(Definition-72, Problem-71)
dep(+1-70, Definition-72)
dep(characterized-79, Planning-74)
det(instance-77, A-75)
compound(instance-77, MAPF-DP-76)
nsubjpass(characterized-79, instance-77)
auxpass(characterized-79, is-78)
parataxis(scheduled-27, characterized-79)
case(=-85, by-80)
det(=-85, an-81)
amod(=-85, undirected-82)
compound(=-85, graph-83)
compound(=-85, G-84)
nmod:agent(characterized-79, =-85)
nmod:poss(V-93, =-85)
appos(=-85, V-87)
dep(V-87, E-89)
ref(=-85, whose-91)
amod(V-93, vertices-92)
nsubj(correspond-94, V-93)
acl:relcl(=-85, correspond-94)
case(locations-96, to-95)
nmod:to(correspond-94, locations-96)
cc(scheduled-27, and-97)
nmod:poss(edges-99, whose-98)
dobj(correspond-101, edges-99)
nsubj(correspond-101, E-100)
dep(li-11, correspond-101)
conj:and(scheduled-27, correspond-101)
case(transitions-103, to-102)
nmod:to(correspond-101, transitions-103)
case(locations-105, between-104)
nmod:between(transitions-103, locations-105)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP are)
      (VP (VBN given)
        (S
          (NP
            (NP (NN m) (NNS agents))
            (ADJP (JJ a1) (, ,) (JJ a2)))
          (: ...)
          (VP (VBP am)))))
    (. .)))

nsubjpass(given-3, We-1)
auxpass(given-3, are-2)
root(ROOT-0, given-3)
compound(agents-5, m-4)
nsubj(am-10, agents-5)
amod(a2-8, a1-6)
amod(agents-5, a2-8)
ccomp(given-3, am-10)

(ROOT
  (S
    (NP (DT Each) (NN agent))
    (VP (VBZ has)
      (S
        (VP (TO to)
          (VP (VB be)
            (ADJP (JJ different)
              (PP (IN from)
                (NP
                  (NP (DT the) (NN vertex))
                  (PP (IN of)
                    (NP
                      (NP (DT any) (JJ other) (NN agent))
                      (PP (IN in)
                        (NP (JJ local) (NN state) (NNP x) (NNP -RSB-))))))))))))
    (. .)))

det(agent-2, Each-1)
nsubj(has-3, agent-2)
nsubj:xsubj(different-6, agent-2)
root(ROOT-0, has-3)
mark(different-6, to-4)
cop(different-6, be-5)
xcomp(has-3, different-6)
case(vertex-9, from-7)
det(vertex-9, the-8)
nmod:from(different-6, vertex-9)
case(agent-13, of-10)
det(agent-13, any-11)
amod(agent-13, other-12)
nmod:of(vertex-9, agent-13)
case(-RSB--18, in-14)
amod(-RSB--18, local-15)
compound(-RSB--18, state-16)
compound(-RSB--18, x-17)
nmod:in(agent-13, -RSB--18)

(ROOT
  (S
    (S
      (NP (NN Figure) (CD 1))
      (VP (VBZ shows)
        (NP
          (NP (DT a) (NN sample) (NN MAPF-DP) (NN instance))
          (SBAR
            (WHADVP (WRB where))
            (S
              (NP (DT the) (JJ blue) (NN agent) (NNS a1))
              (VP (VBZ has)
                (S
                  (VP (TO to)
                    (VP (VB move)
                      (PP (IN from)
                        (NP (PRP$ its) (NN start) (NN vertex) (NNS v3)))
                      (PP (TO to)
                        (NP (PRP$ its) (NN goal) (NN vertex) (NNS v4))))))))))))
    (CC and)
    (S
      (NP (DT the) (JJ red) (NN agent) (NNS a2))
      (VP (VBZ has)
        (S
          (VP (TO to)
            (VP (VB move)
              (PP (IN from)
                (NP (PRP$ its) (NN start) (NN vertex) (NNS v2)))
              (PP (TO to)
                (NP (PRP$ its) (NN goal) (NN vertex) (NNS v5))))))))
    (. .)))

nsubj(shows-3, Figure-1)
nummod(Figure-1, 1-2)
root(ROOT-0, shows-3)
det(instance-7, a-4)
compound(instance-7, sample-5)
compound(instance-7, MAPF-DP-6)
dobj(shows-3, instance-7)
advmod(has-13, where-8)
det(a1-12, the-9)
amod(a1-12, blue-10)
compound(a1-12, agent-11)
nsubj(has-13, a1-12)
nsubj:xsubj(move-15, a1-12)
acl:relcl(instance-7, has-13)
mark(move-15, to-14)
xcomp(has-13, move-15)
case(v3-20, from-16)
nmod:poss(v3-20, its-17)
compound(v3-20, start-18)
compound(v3-20, vertex-19)
nmod:from(move-15, v3-20)
case(v4-25, to-21)
nmod:poss(v4-25, its-22)
compound(v4-25, goal-23)
compound(v4-25, vertex-24)
nmod:to(move-15, v4-25)
cc(shows-3, and-26)
det(a2-30, the-27)
amod(a2-30, red-28)
compound(a2-30, agent-29)
nsubj(has-31, a2-30)
nsubj:xsubj(move-33, a2-30)
conj:and(shows-3, has-31)
mark(move-33, to-32)
xcomp(has-31, move-33)
case(v2-38, from-34)
nmod:poss(v2-38, its-35)
compound(v2-38, start-36)
compound(v2-38, vertex-37)
nmod:from(move-33, v2-38)
case(v5-43, to-39)
nmod:poss(v5-43, its-40)
compound(v5-43, goal-41)
compound(v5-43, vertex-42)
nmod:to(move-33, v5-43)

(ROOT
  (S
    (NP (NNP Agent) (NNP a1))
    (VP (VBZ has)
      (S
        (VP (TO to)
          (VP (VB move)
            (ADVP (RB north)
              (S
                (VP (TO to)
                  (VP (VB let)
                    (S
                      (NP (NN agent) (NNS a2))
                      (VP (VB pass)))))))))))
    (. .)))

compound(a1-2, Agent-1)
nsubj(has-3, a1-2)
nsubj:xsubj(move-5, a1-2)
root(ROOT-0, has-3)
mark(move-5, to-4)
xcomp(has-3, move-5)
advmod(move-5, north-6)
mark(let-8, to-7)
dep(north-6, let-8)
compound(a2-10, agent-9)
nsubj(pass-11, a2-10)
ccomp(let-8, pass-11)

(ROOT
  (S
    (NP
      (NP (DT The) (NNS paths) (NN l1))
      (ADJP (JJ =)
        (NP (CD v3) (, ,) (CD v1) (, ,) (CD v1) (, ,) (CD v1) (, ,) (CD v3) (, ,) (CD v4)
          (CC and)
          (CD l2))))
    (VP (VBZ =)
      (NP (JJ v2) (, ,) (JJ v2) (, ,) (JJ v3) (, ,) (JJ v4) (, ,) (JJ v5) (NN form))
      (NP (DT a) (JJ valid) (JJ MAPF-DP) (NN plan)))
    (. .)))

det(l1-3, The-1)
compound(l1-3, paths-2)
nsubj(=-18, l1-3)
amod(l1-3, =-4)
dep(=-4, v3-5)
nummod(v3-5, v1-7)
nummod(v3-5, v1-9)
nummod(v3-5, v1-11)
nummod(v3-5, v3-13)
nummod(v3-5, v4-15)
cc(v3-5, and-16)
dep(=-4, l2-17)
conj:and(v3-5, l2-17)
root(ROOT-0, =-18)
amod(form-28, v2-19)
amod(form-28, v2-21)
amod(form-28, v3-23)
amod(form-28, v4-25)
amod(form-28, v5-27)
iobj(=-18, form-28)
det(plan-32, a-29)
amod(plan-32, valid-30)
amod(plan-32, MAPF-DP-31)
dobj(=-18, plan-32)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP
      (NP (DT the) (NNS paths))
      (SBAR
        (S
          (NP
            (NP (NNP l1) (NNP =) (CD v3) (, ,) (CD v1) (, ,) (CD v1) (, ,) (CD v3) (, ,) (CD v4))
            (CC and)
            (NP
              (NP
                (NP
                  (NP (NNP l2) (NNP =) (CD v2) (, ,) (CD v3) (, ,) (CD v4) (, ,) (CD v5))
                  (NP (DT a) (JJ valid) (NNP MAPF) (NN plan)))
                (CONJP (CC but)
                  (RB not))
                (NP
                  (NP (DT a) (JJ valid) (NNP MAPF-DP) (NN plan))
                  (PP (IN since)
                    (S
                      (VP (VBG l2)
                        (S
                          (NP
                            (PRN (-LRB- -LRB-)
                              (NP (CD 1))
                              (-RRB- -RRB-)))
                          (VP (SYM =)
                            (NP (NNS l1)))))))))
              (PRN (-LRB- -LRB-)
                (NP (CD 0))
                (-RRB- -RRB-))))
          (VP (SYM =)
            (NP (NNS v3))))))
    (VP (VBZ violates)
      (NP (NNP Property) (CD 2)))
    (. .)))

advmod(violates-48, However-1)
det(paths-4, the-3)
nsubj(violates-48, paths-4)
compound(=-6, l1-5)
nsubj(v3-47, =-6)
nummod(=-6, v3-7)
nummod(=-6, v1-9)
nummod(=-6, v1-11)
nummod(=-6, v3-13)
nummod(=-6, v4-15)
cc(=-6, and-16)
compound(=-18, l2-17)
conj:and(=-6, =-18)
nsubj(v3-47, =-18)
nummod(=-18, v2-19)
nummod(=-18, v3-21)
nummod(=-18, v4-23)
nummod(=-18, v5-25)
det(plan-29, a-26)
amod(plan-29, valid-27)
compound(plan-29, MAPF-28)
dep(=-18, plan-29)
cc(not-31, but-30)
cc(=-18, not-31)
det(plan-35, a-32)
amod(plan-35, valid-33)
compound(plan-35, MAPF-DP-34)
conj:and(=-6, plan-35)
conj:negcc(=-18, plan-35)
mark(l2-37, since-36)
acl(plan-35, l2-37)
nsubj(l1-42, 1-39)
dep(l1-42, =-41)
ccomp(l2-37, l1-42)
appos(=-18, 0-44)
dep(v3-47, =-46)
acl:relcl(paths-4, v3-47)
root(ROOT-0, violates-48)
dobj(violates-48, Property-49)
nummod(Property-49, 2-50)

(ROOT
  (S
    (NP
      (NP (NNP Property) (CD 1))
      (PP (IN of)
        (NP (NNP Definition) (CD 1))))
    (VP (VBZ is)
      (ADJP (JJ necessary)
        (S
          (VP (TO to)
            (VP (VB be)
              (ADJP (JJ able)
                (S
                  (VP (TO to)
                    (VP (VB execute)
                      (NP (JJ valid) (JJ MAPF-DP) (NNS plans))
                      (PP (IN without)
                        (NP (NN vertex) (NNS collisions)))))))
              (SBAR (IN because)
                (S
                  (NP (CD two) (NNS agents))
                  (VP (MD could)
                    (ADVP (RB otherwise))
                    (VP (VB be)
                      (PP (IN in)
                        (NP
                          (NP (DT the) (JJ same) (NN vertex))
                          (PP (IN at)
                            (NP
                              (NP (DT the) (JJ same) (NN time) (NN step))
                              (PRN (-LRB- -LRB-)
                                (PP (IN under)
                                  (NP
                                    (ADJP (JJ perfect)
                                      (CC or)
                                      (JJ imperfect))
                                    (NN plan) (NN execution)))
                                (-RRB- -RRB-)))))))))))))))
    (. .)))

nsubj(necessary-7, Property-1)
nsubj:xsubj(able-10, Property-1)
nummod(Property-1, 1-2)
case(Definition-4, of-3)
nmod:of(Property-1, Definition-4)
nummod(Definition-4, 1-5)
cop(necessary-7, is-6)
root(ROOT-0, necessary-7)
mark(able-10, to-8)
cop(able-10, be-9)
xcomp(necessary-7, able-10)
mark(execute-12, to-11)
xcomp(able-10, execute-12)
amod(plans-15, valid-13)
amod(plans-15, MAPF-DP-14)
dobj(execute-12, plans-15)
case(collisions-18, without-16)
compound(collisions-18, vertex-17)
nmod:without(execute-12, collisions-18)
mark(vertex-28, because-19)
nummod(agents-21, two-20)
nsubj(vertex-28, agents-21)
aux(vertex-28, could-22)
advmod(vertex-28, otherwise-23)
cop(vertex-28, be-24)
case(vertex-28, in-25)
det(vertex-28, the-26)
amod(vertex-28, same-27)
advcl(able-10, vertex-28)
case(step-33, at-29)
det(step-33, the-30)
amod(step-33, same-31)
compound(step-33, time-32)
nmod:at(vertex-28, step-33)
case(execution-40, under-35)
amod(execution-40, perfect-36)
cc(perfect-36, or-37)
conj:or(perfect-36, imperfect-38)
amod(execution-40, imperfect-38)
compound(execution-40, plan-39)
nmod:under(step-33, execution-40)

(ROOT
  (S
    (NP (NNP Property) (CD 2))
    (VP (VBZ is)
      (ADVP (RB also))
      (ADJP (JJ necessary))
      (SBAR (IN because)
        (S
          (NP (DT an) (NN agent))
          (VP (MD could)
            (ADVP (RB otherwise))
            (VP (VB enter)
              (NP
                (NP (DT the) (NN vertex))
                (PP (IN of)
                  (NP
                    (NP (DT some) (JJ other) (NN agent))
                    (SBAR
                      (WHNP (WDT that))
                      (S
                        (ADVP (RB unsuccessfully))
                        (VP (VBZ tries)
                          (S
                            (VP (TO to)
                              (VP (VB leave)
                                (NP (DT the) (JJ same) (NN vertex))
                                (PP (IN at)
                                  (NP (DT the) (JJ same) (NN time) (NN step)))))))))
                    (PRN (-LRB- -LRB-)
                      (PP (IN under)
                        (NP (JJ imperfect) (NN plan) (NN execution)))
                      (-RRB- -RRB-))))))))))
    (. .)))

nsubj(necessary-5, Property-1)
nummod(Property-1, 2-2)
cop(necessary-5, is-3)
advmod(necessary-5, also-4)
root(ROOT-0, necessary-5)
mark(enter-11, because-6)
det(agent-8, an-7)
nsubj(enter-11, agent-8)
aux(enter-11, could-9)
advmod(enter-11, otherwise-10)
advcl(necessary-5, enter-11)
det(vertex-13, the-12)
dobj(enter-11, vertex-13)
case(agent-17, of-14)
det(agent-17, some-15)
amod(agent-17, other-16)
nmod:of(vertex-13, agent-17)
nsubj(tries-20, agent-17)
nsubj:xsubj(leave-22, agent-17)
ref(agent-17, that-18)
advmod(tries-20, unsuccessfully-19)
acl:relcl(agent-17, tries-20)
mark(leave-22, to-21)
xcomp(tries-20, leave-22)
det(vertex-25, the-23)
amod(vertex-25, same-24)
dobj(leave-22, vertex-25)
case(step-30, at-26)
det(step-30, the-27)
amod(step-30, same-28)
compound(step-30, time-29)
nmod:at(leave-22, step-30)
case(execution-35, under-32)
amod(execution-35, imperfect-33)
compound(execution-35, plan-34)
nmod:under(agent-17, execution-35)

(ROOT
  (S
    (NP (NNP Property) (CD 2))
    (VP (VBZ is)
      (ADVP (RB also))
      (ADJP (JJ necessary)
        (S
          (VP (TO to)
            (VP (VB be)
              (ADJP (JJ able)
                (S
                  (VP (TO to)
                    (VP (VB execute)
                      (NP (JJ valid) (JJ MAPF-DP) (NNS plans))
                      (PP (IN without)
                        (NP (NN edge) (NNS collisions)))
                      (PRN (-LRB- -LRB-)
                        (PP (IN under)
                          (NP
                            (ADJP (JJ perfect)
                              (CC or)
                              (JJ imperfect))
                            (NN plan) (NN execution)))
                        (-RRB- -RRB-)))))))))))
    (. .)))

nsubj(necessary-5, Property-1)
nsubj:xsubj(able-8, Property-1)
nummod(Property-1, 2-2)
cop(necessary-5, is-3)
advmod(necessary-5, also-4)
root(ROOT-0, necessary-5)
mark(able-8, to-6)
cop(able-8, be-7)
xcomp(necessary-5, able-8)
mark(execute-10, to-9)
xcomp(able-8, execute-10)
amod(plans-13, valid-11)
amod(plans-13, MAPF-DP-12)
dobj(execute-10, plans-13)
case(collisions-16, without-14)
compound(collisions-16, edge-15)
nmod:without(execute-10, collisions-16)
case(execution-23, under-18)
amod(execution-23, perfect-19)
cc(perfect-19, or-20)
conj:or(perfect-19, imperfect-21)
amod(execution-23, imperfect-21)
compound(execution-23, plan-22)
dep(execute-10, execution-23)

(ROOT
  (S
    (NP (NNP Robust) (NNP Plan-Execution))
    (VP (VBZ Policies)
      (S
        (NP (PRP We))
        (VP (VB study)
          (NP
            (NP (CD 2) (NNS kinds))
            (PP (IN of)
              (NP
                (NP (JJ decentralized) (JJ robust) (JJ plan-execution) (NNS policies))
                (PP (IN for)
                  (NP
                    (NP (JJ valid) (JJ MAPF-DP) (NNS plans))
                    (, ,)
                    (SBAR
                      (WHNP (WDT which))
                      (S
                        (VP (VBP are)
                          (NP
                            (NP (JJ plan-execution) (NNS policies))
                            (SBAR
                              (WHNP (WDT that))
                              (S
                                (VP (VBP prevent)
                                  (NP (DT all) (NNS collisions))
                                  (PP (IN during)
                                    (NP
                                      (NP (DT the)
                                        (ADJP (JJ imperfect))
                                        (NN plan) (NN execution))
                                      (PP (IN of)
                                        (NP (JJ valid) (JJ MAPF-DP) (NNS plans))))))))))))))))))))
    (. .)))

compound(Plan-Execution-2, Robust-1)
nsubj(Policies-3, Plan-Execution-2)
root(ROOT-0, Policies-3)
nsubj(study-5, We-4)
ccomp(Policies-3, study-5)
nummod(kinds-7, 2-6)
dobj(study-5, kinds-7)
case(policies-12, of-8)
amod(policies-12, decentralized-9)
amod(policies-12, robust-10)
amod(policies-12, plan-execution-11)
nmod:of(kinds-7, policies-12)
case(plans-16, for-13)
amod(plans-16, valid-14)
amod(plans-16, MAPF-DP-15)
nmod:for(policies-12, plans-16)
nsubj(policies-21, plans-16)
ref(plans-16, which-18)
cop(policies-21, are-19)
amod(policies-21, plan-execution-20)
acl:relcl(plans-16, policies-21)
nsubj(prevent-23, policies-21)
ref(policies-21, that-22)
acl:relcl(policies-21, prevent-23)
det(collisions-25, all-24)
dobj(prevent-23, collisions-25)
case(execution-30, during-26)
det(execution-30, the-27)
amod(execution-30, imperfect-28)
compound(execution-30, plan-29)
nmod:during(prevent-23, execution-30)
case(plans-34, of-31)
amod(plans-34, valid-32)
amod(plans-34, MAPF-DP-33)
nmod:of(execution-30, plans-34)

(ROOT
  (S
    (NP (NNP Fully) (NNP Synchronized) (NNS Policies))
    (PRN (-LRB- -LRB-)
      (NP (NNP FSPs))
      (-RRB- -RRB-))
    (NP
      (NP
        (QP (RB Fully) (CD Synchronized))
        (NNS Policies))
      (PRN (-LRB- -LRB-)
        (NP (NNP FSPs))
        (-RRB- -RRB-)))
    (VP (VBP attempt)
      (S
        (VP (TO to)
          (VP
            (VP (VB keep)
              (NP
                (NP (DT all) (NNS agents))
                (PP (IN in)
                  (NP (NN lockstep))))
              (PP (IN as)
                (ADJP
                  (ADJP (RB much) (RB as) (JJ possible))
                  (PP (IN by)
                    (S
                      (VP (VBG providing)
                        (NP (DT a) (NNP GO) (NN command))
                        (PP (TO to)
                          (NP (DT an) (NN agent)))
                        (SBAR (IN if)
                          (CC and)
                          (RB only)
                          (S
                            (SBAR (IN if)
                              (S
                                (NP (DT the) (NN agent))
                                (VP (VBZ has) (RB not)
                                  (ADVP (RB yet))
                                  (VP (VBN entered)
                                    (NP
                                      (NP (PRP$ its) (JJ last) (JJ local) (NN state))
                                      (CC and)
                                      (NP (DT all) (JJ other) (NNS agents)))))))
                            (VP (VBP have)
                              (ADVP (RB either))
                              (VP (VBN entered)
                                (NP (PRP$ their) (JJ last) (JJ local) (NNS states))))))))))))
            (CC or)
            (VP (VB have)
              (VP (VBN left)
                (NP
                  (NP (DT all) (JJ local) (NNS states))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VB precede)
                        (NP
                          (NP (DT the) (JJ local) (NN state))
                          (PP (IN of)
                            (NP (DT the) (NN agent))))))))))
            (NP (PRP itself))))))
    (. .)))

compound(Policies-3, Fully-1)
compound(Policies-3, Synchronized-2)
nsubj(attempt-13, Policies-3)
nsubj:xsubj(keep-15, Policies-3)
nsubj:xsubj(left-59, Policies-3)
dep(attempt-13, FSPs-5)
advmod(Synchronized-8, Fully-7)
nummod(Policies-9, Synchronized-8)
nsubj(attempt-13, Policies-9)
nsubj:xsubj(keep-15, Policies-9)
nsubj:xsubj(left-59, Policies-9)
appos(Policies-9, FSPs-11)
root(ROOT-0, attempt-13)
mark(keep-15, to-14)
xcomp(attempt-13, keep-15)
det(agents-17, all-16)
dobj(keep-15, agents-17)
case(lockstep-19, in-18)
nmod:in(agents-17, lockstep-19)
case(possible-23, as-20)
advmod(possible-23, much-21)
advmod(possible-23, as-22)
advcl(keep-15, possible-23)
mark(providing-25, by-24)
advcl(possible-23, providing-25)
det(command-28, a-26)
compound(command-28, GO-27)
dobj(providing-25, command-28)
case(agent-31, to-29)
det(agent-31, an-30)
nmod:to(providing-25, agent-31)
mark(entered-52, if-32)
cc(entered-52, and-33)
advmod(entered-52, only-34)
mark(entered-41, if-35)
det(agent-37, the-36)
nsubj(entered-41, agent-37)
aux(entered-41, has-38)
neg(entered-41, not-39)
advmod(entered-41, yet-40)
csubj(entered-52, entered-41)
nmod:poss(state-45, its-42)
amod(state-45, last-43)
amod(state-45, local-44)
dobj(entered-41, state-45)
cc(state-45, and-46)
det(agents-49, all-47)
amod(agents-49, other-48)
dobj(entered-41, agents-49)
conj:and(state-45, agents-49)
aux(entered-52, have-50)
advmod(entered-52, either-51)
advcl(providing-25, entered-52)
nmod:poss(states-56, their-53)
amod(states-56, last-54)
amod(states-56, local-55)
dobj(entered-52, states-56)
cc(keep-15, or-57)
aux(left-59, have-58)
xcomp(attempt-13, left-59)
conj:or(keep-15, left-59)
det(states-62, all-60)
amod(states-62, local-61)
dobj(left-59, states-62)
nsubj(precede-64, states-62)
ref(states-62, that-63)
acl:relcl(states-62, precede-64)
det(state-67, the-65)
amod(state-67, local-66)
dobj(precede-64, state-67)
case(agent-70, of-68)
det(agent-70, the-69)
nmod:of(state-67, agent-70)
dobj(keep-15, itself-71)

(ROOT
  (S
    (NP (NNS FSPs))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN implemented)
          (ADVP (RB easily))
          (SBAR (IN if)
            (S
              (NP (DT each) (NN agent))
              (VP (VBZ sends)
                (NP (DT a) (NN message))
                (PP (TO to)
                  (NP (DT all) (JJ other) (NNS agents)))
                (SBAR
                  (WHADVP (WRB when))
                  (S
                    (NP (PRP it))
                    (VP (VBZ enters)
                      (NP (DT a) (JJ new) (JJ local) (NN state)))))))))))
    (. .)))

nsubjpass(implemented-4, FSPs-1)
aux(implemented-4, can-2)
auxpass(implemented-4, be-3)
root(ROOT-0, implemented-4)
advmod(implemented-4, easily-5)
mark(sends-9, if-6)
det(agent-8, each-7)
nsubj(sends-9, agent-8)
advcl(implemented-4, sends-9)
det(message-11, a-10)
dobj(sends-9, message-11)
case(agents-15, to-12)
det(agents-15, all-13)
amod(agents-15, other-14)
nmod:to(sends-9, agents-15)
advmod(enters-18, when-16)
nsubj(enters-18, it-17)
advcl(sends-9, enters-18)
det(state-22, a-19)
amod(state-22, new-20)
amod(state-22, local-21)
dobj(enters-18, state-22)

(ROOT
  (S
    (NP (DT An) (NN agent))
    (VP (MD can)
      (VP (VB implement)
        (NP (PRP$ its) (NN FSP))
        (ADVP (RB simply))
        (PP (IN by)
          (S
            (VP
              (VP (VBG counting)
                (SBAR
                  (WHNP
                    (WHADJP (WRB how) (JJ many))
                    (NNS messages))
                  (S
                    (NP (PRP it))
                    (VP (VBZ has)
                      (VP (VBN received)
                        (PP (IN from)
                          (NP (DT each) (JJ other) (NN agent))))))))
              (CC and)
              (VP (VBG providing)
                (NP (DT a) (NNP GO) (NN command))
                (PP (TO to)
                  (NP (PRP itself)))
                (PP (IN in)
                  (NP (JJ local) (NN state) (NNS x)))
                (SBAR (IN if)
                  (CC and)
                  (RB only)
                  (S
                    (SBAR (IN if)
                      (S
                        (NP (PRP it))
                        (VP
                          (VP (VBZ has) (RB not)
                            (ADVP (RB yet))
                            (VP (VBN entered)
                              (NP (PRP$ its) (JJ last) (JJ local) (NN state))))
                          (CC and)
                          (VP (VBZ has)
                            (VP (VBN received))))))
                    (VP (VBD x)
                      (NP (NNS messages))
                      (PP (IN over)
                        (NP
                          (NP (DT the) (NN course))
                          (PP (IN of)
                            (NP (NN plan) (NN execution)))))
                      (PP (IN from)
                        (NP (DT each) (JJ other) (NN agent))))))))))))
    (. .)))

det(agent-2, An-1)
nsubj(implement-4, agent-2)
aux(implement-4, can-3)
root(ROOT-0, implement-4)
nmod:poss(FSP-6, its-5)
dobj(implement-4, FSP-6)
advmod(implement-4, simply-7)
mark(counting-9, by-8)
advcl(implement-4, counting-9)
advmod(many-11, how-10)
amod(messages-12, many-11)
dobj(received-15, messages-12)
nsubj(received-15, it-13)
aux(received-15, has-14)
ccomp(counting-9, received-15)
case(agent-19, from-16)
det(agent-19, each-17)
amod(agent-19, other-18)
nmod:from(received-15, agent-19)
cc(counting-9, and-20)
advcl(implement-4, providing-21)
conj:and(counting-9, providing-21)
det(command-24, a-22)
compound(command-24, GO-23)
dobj(providing-21, command-24)
case(itself-26, to-25)
nmod:to(providing-21, itself-26)
case(x-30, in-27)
amod(x-30, local-28)
compound(x-30, state-29)
nmod:in(providing-21, x-30)
mark(x-47, if-31)
cc(x-47, and-32)
advmod(x-47, only-33)
mark(entered-39, if-34)
nsubj(entered-39, it-35)
nsubj(received-46, it-35)
aux(entered-39, has-36)
neg(entered-39, not-37)
advmod(entered-39, yet-38)
csubj(x-47, entered-39)
nmod:poss(state-43, its-40)
amod(state-43, last-41)
amod(state-43, local-42)
dobj(entered-39, state-43)
cc(entered-39, and-44)
aux(received-46, has-45)
conj:and(entered-39, received-46)
csubj(x-47, received-46)
advcl(providing-21, x-47)
dobj(x-47, messages-48)
case(course-51, over-49)
det(course-51, the-50)
nmod:over(x-47, course-51)
case(execution-54, of-52)
compound(execution-54, plan-53)
nmod:of(course-51, execution-54)
case(agent-58, from-55)
det(agent-58, each-56)
amod(agent-58, other-57)
nmod:from(x-47, agent-58)

(ROOT
  (S
    (NP (NNP Minimal) (NNP Communication) (NNP Policies)
      (PRN (-LRB- -LRB-)
        (NP (NNP MCPs))
        (-RRB- -RRB-))
      (NNP FSPs))
    (VP (VBP have)
      (NP (CD 2) (NNS drawbacks)))
    (. .)))

compound(FSPs-7, Minimal-1)
compound(FSPs-7, Communication-2)
compound(FSPs-7, Policies-3)
appos(FSPs-7, MCPs-5)
nsubj(have-8, FSPs-7)
root(ROOT-0, have-8)
nummod(drawbacks-10, 2-9)
dobj(have-8, drawbacks-10)

(ROOT
  (S
    (ADVP (RB First))
    (, ,)
    (NP (NNS agents))
    (VP (VBP wait)
      (ADVP (RB unnecessarily))
      (, ,)
      (SBAR
        (WHNP (WDT which))
        (S
          (VP (VBZ results)
            (PP (IN in)
              (NP (JJ large) (JJ average) (NNS makespans)))))))
    (. .)))

advmod(wait-4, First-1)
nsubj(wait-4, agents-3)
root(ROOT-0, wait-4)
advmod(wait-4, unnecessarily-5)
nsubj(results-8, which-7)
ccomp(wait-4, results-8)
case(makespans-12, in-9)
amod(makespans-12, large-10)
amod(makespans-12, average-11)
nmod:in(results-8, makespans-12)

(ROOT
  (S
    (ADVP (LS Second))
    (, ,)
    (NP (DT each) (NN agent))
    (ADVP (RB always))
    (VP (VBZ needs)
      (S
        (VP (TO to)
          (VP (VB know)
            (NP
              (NP (DT the) (JJ local) (NNS states))
              (PP (IN of)
                (NP
                  (NP (DT all) (JJ other) (NNS agents))
                  (, ,)
                  (SBAR
                    (WHNP (WDT which))
                    (S
                      (NP
                        (NP (NNS results))
                        (PP (IN in)
                          (NP (JJ many))))
                      (VP (VBD sent)
                        (NP (NNS messages))))))))))))
    (. .)))

advmod(needs-6, Second-1)
det(agent-4, each-3)
nsubj(needs-6, agent-4)
nsubj:xsubj(know-8, agent-4)
advmod(needs-6, always-5)
root(ROOT-0, needs-6)
mark(know-8, to-7)
xcomp(needs-6, know-8)
det(states-11, the-9)
amod(states-11, local-10)
dobj(know-8, states-11)
case(agents-15, of-12)
det(agents-15, all-13)
amod(agents-15, other-14)
nmod:of(states-11, agents-15)
dobj(sent-21, agents-15)
ref(agents-15, which-17)
nsubj(sent-21, results-18)
case(many-20, in-19)
nmod:in(results-18, many-20)
acl:relcl(agents-15, sent-21)
dobj(sent-21, messages-22)

(ROOT
  (S
    (NP
      (NP (NNP Property) (CD 2))
      (PP (IN of)
        (NP (NNP Definition) (CD 1))))
    (VP (VBZ suggests)
      (SBAR (IN that)
        (S
          (NP
            (NP (JJ robust) (JJ plan-execution) (NNS policies))
            (PP (IN for)
              (NP (JJ valid) (JJ MAPF-DP) (NNS plans))))
          (VP (MD could)
            (VP (VB provide)
              (NP (DT a) (NNP GO) (NN command))
              (PP (TO to)
                (NP (DT an) (NN agent)))
              (SBAR (IN if)
                (CC and)
                (RB only)
                (S
                  (SBAR (IN if)
                    (S
                      (NP (DT the) (NN agent))
                      (VP (VBZ has) (RB not)
                        (ADVP (RB yet))
                        (VP (VBN entered)
                          (NP
                            (NP (PRP$ its) (JJ last) (JJ local) (NN state))
                            (CC and)
                            (NP (DT all) (JJ other) (NNS agents)))))))
                  (VP (VBP have)
                    (VP (VBN left)
                      (NP (DT all) (JJ local) (NNS states))
                      (NP
                        (SBAR
                          (WHNP (WDT that))
                          (S
                            (VP (VB precede)
                              (S
                                (NP
                                  (NP (DT the) (JJ local) (NN state))
                                  (PP (IN of)
                                    (NP (DT the) (NN agent))))
                                (NP (PRP itself))))))
                        (CC and)
                        (SBAR (WP$ whose)
                          (S
                            (NP (NNS vertices))
                            (VP (VBP are)
                              (NP
                                (NP (DT the) (JJ same))
                                (PP (IN as)
                                  (NP
                                    (NP (DT the) (NN vertex))
                                    (PP (IN of)
                                      (NP
                                        (NP (DT the) (JJ next) (JJ local) (NN state))
                                        (PP (IN of)
                                          (NP
                                            (NP (DT the) (NN agent))
                                            (ADVP (PRP itself))))))))))))))))))))))
    (. .)))

nsubj(suggests-6, Property-1)
nummod(Property-1, 2-2)
case(Definition-4, of-3)
nmod:of(Property-1, Definition-4)
nummod(Definition-4, 1-5)
root(ROOT-0, suggests-6)
mark(provide-16, that-7)
amod(policies-10, robust-8)
amod(policies-10, plan-execution-9)
nsubj(provide-16, policies-10)
case(plans-14, for-11)
amod(plans-14, valid-12)
amod(plans-14, MAPF-DP-13)
nmod:for(policies-10, plans-14)
aux(provide-16, could-15)
ccomp(suggests-6, provide-16)
det(command-19, a-17)
compound(command-19, GO-18)
dobj(provide-16, command-19)
case(agent-22, to-20)
det(agent-22, an-21)
nmod:to(provide-16, agent-22)
mark(left-42, if-23)
cc(left-42, and-24)
advmod(left-42, only-25)
mark(entered-32, if-26)
det(agent-28, the-27)
nsubj(entered-32, agent-28)
aux(entered-32, has-29)
neg(entered-32, not-30)
advmod(entered-32, yet-31)
csubj(left-42, entered-32)
nmod:poss(state-36, its-33)
amod(state-36, last-34)
amod(state-36, local-35)
dobj(entered-32, state-36)
cc(state-36, and-37)
det(agents-40, all-38)
amod(agents-40, other-39)
dobj(entered-32, agents-40)
conj:and(state-36, agents-40)
aux(left-42, have-41)
advcl(provide-16, left-42)
det(states-45, all-43)
amod(states-45, local-44)
iobj(left-42, states-45)
nsubj(precede-47, that-46)
dobj(left-42, precede-47)
det(state-50, the-48)
amod(state-50, local-49)
nsubj(itself-54, state-50)
case(agent-53, of-51)
det(agent-53, the-52)
nmod:of(state-50, agent-53)
xcomp(precede-47, itself-54)
cc(precede-47, and-55)
dep(same-60, whose-56)
nsubj(same-60, vertices-57)
cop(same-60, are-58)
det(same-60, the-59)
dobj(left-42, same-60)
conj:and(precede-47, same-60)
case(vertex-63, as-61)
det(vertex-63, the-62)
nmod:as(same-60, vertex-63)
case(state-68, of-64)
det(state-68, the-65)
amod(state-68, next-66)
amod(state-68, local-67)
nmod:of(vertex-63, state-68)
case(agent-71, of-69)
det(agent-71, the-70)
nmod:of(state-68, agent-71)
advmod(agent-71, itself-72)

(ROOT
  (S
    (NP (DT This) (NN way))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is)
      (VP (VBN guaranteed)
        (SBAR (IN that)
          (S
            (NP
              (NP (DT the) (NN vertex))
              (PP (IN of)
                (NP
                  (NP (DT the) (JJ next) (JJ local) (NN state))
                  (PP (IN of)
                    (NP (DT the) (NN agent))))))
            (VP (VBZ is)
              (ADJP (JJ different)
                (PP (IN from)
                  (NP
                    (NP (DT the) (NNS vertices))
                    (PP (IN of)
                      (NP
                        (NP (DT all) (JJ other) (NNS agents))
                        (PP (IN in)
                          (NP (PRP$ their) (JJ current) (JJ local) (NNS states)))))))))))))
    (. .)))

det(way-2, This-1)
nsubjpass(guaranteed-6, way-2)
nsubjpass(guaranteed-6, it-4)
auxpass(guaranteed-6, is-5)
root(ROOT-0, guaranteed-6)
mark(different-19, that-7)
det(vertex-9, the-8)
nsubj(different-19, vertex-9)
case(state-14, of-10)
det(state-14, the-11)
amod(state-14, next-12)
amod(state-14, local-13)
nmod:of(vertex-9, state-14)
case(agent-17, of-15)
det(agent-17, the-16)
nmod:of(state-14, agent-17)
cop(different-19, is-18)
ccomp(guaranteed-6, different-19)
case(vertices-22, from-20)
det(vertices-22, the-21)
nmod:from(different-19, vertices-22)
case(agents-26, of-23)
det(agents-26, all-24)
amod(agents-26, other-25)
nmod:of(vertices-22, agents-26)
case(states-31, in-27)
nmod:poss(states-31, their-28)
amod(states-31, current-29)
amod(states-31, local-30)
nmod:in(agents-26, states-31)

(ROOT
  (S
    (NP
      (NP (NNP Minimal) (NNP Communication) (NNP Policies))
      (PRN (-LRB- -LRB-)
        (NP (NNP MCPs))
        (-RRB- -RRB-)))
    (VP (VBP address)
      (NP (DT these) (NNS drawbacks))
      (PP (IN by)
        (S
          (VP
            (VP (VBG identifying)
              (NP
                (NP (JJ such) (JJ critical) (NNS dependencies))
                (PP (IN between)
                  (NP (NNS agents)))))
            (CC and)
            (VP (VBG obeying)
              (NP (PRP them))
              (PP (IN during)
                (NP
                  (NP (NN plan) (NN execution))
                  (, ,)
                  (NP
                    (NP (DT an) (NN idea))
                    (SBAR
                      (WHNP (WDT that))
                      (S
                        (VP (VBN originated)
                          (PP (IN in)
                            (NP
                              (NP (DT the) (NN context))
                              (PP (IN of)
                                (NP
                                  (NP (JJ centralized) (JJ non-robust) (JJ plan-execution) (NNS policies))
                                  (PRN (-LRB- -LRB-)
                                    (NP
                                      (NP (NNP H) (NN onig))
                                      (CC et)
                                      (NP (NN al.) (CD 2016)))
                                    (-RRB- -RRB-)))))))))))))))))
    (. .)))

compound(Policies-3, Minimal-1)
compound(Policies-3, Communication-2)
nsubj(address-7, Policies-3)
appos(Policies-3, MCPs-5)
root(ROOT-0, address-7)
det(drawbacks-9, these-8)
dobj(address-7, drawbacks-9)
mark(identifying-11, by-10)
advcl(address-7, identifying-11)
amod(dependencies-14, such-12)
amod(dependencies-14, critical-13)
dobj(identifying-11, dependencies-14)
case(agents-16, between-15)
nmod:between(dependencies-14, agents-16)
cc(identifying-11, and-17)
advcl(address-7, obeying-18)
conj:and(identifying-11, obeying-18)
dobj(obeying-18, them-19)
case(execution-22, during-20)
compound(execution-22, plan-21)
nmod:during(obeying-18, execution-22)
det(idea-25, an-24)
appos(execution-22, idea-25)
nsubj(originated-27, idea-25)
ref(idea-25, that-26)
acl:relcl(idea-25, originated-27)
case(context-30, in-28)
det(context-30, the-29)
nmod:in(originated-27, context-30)
case(policies-35, of-31)
amod(policies-35, centralized-32)
amod(policies-35, non-robust-33)
amod(policies-35, plan-execution-34)
nmod:of(context-30, policies-35)
compound(onig-38, H-37)
dep(policies-35, onig-38)
cc(onig-38, et-39)
dep(policies-35, al.-40)
conj:et(onig-38, al.-40)
nummod(al.-40, 2016-41)

(ROOT
  (S
    (NP
      (NP (DT The) (JJ local) (NN state))
      (PP (IN of)
        (NP (DT an) (NN agent))))
    (VP (VBP ai)
      (PP (IN at)
        (NP (DT any) (NN time) (NN step)))
      (PP (IN during)
        (NP
          (NP (NN plan) (NN execution))
          (SBAR
            (S
              (VP (VBZ is)
                (NP
                  (NP (DT a) (NN time) (NN index))
                  (NP (SYM x)))))))))
    (. .)))

det(state-3, The-1)
amod(state-3, local-2)
nsubj(step-11, state-3)
case(agent-6, of-4)
det(agent-6, an-5)
nmod:of(state-3, agent-6)
cop(step-11, ai-7)
case(step-11, at-8)
det(step-11, any-9)
compound(step-11, time-10)
root(ROOT-0, step-11)
case(execution-14, during-12)
compound(execution-14, plan-13)
nmod:during(step-11, execution-14)
cop(index-18, is-15)
det(index-18, a-16)
compound(index-18, time-17)
acl:relcl(execution-14, index-18)
dep(index-18, x-19)

(ROOT
  (S
    (SBAR (IN Since)
      (S
        (NP (PRP we))
        (VP (VBP need)
          (S
            (VP (TO to)
              (VP (VB relate)
                (NP
                  (NP (DT the) (JJ local) (NNS states))
                  (PP (IN of)
                    (NP (JJ different) (NNS agents))))))))))
    (, ,)
    (NP (PRP we))
    (VP (VBP use)
      (NP
        (NP
          (NP (NN li))
          (-LRB- -LRB-)
          (NP (SYM x))
          (-RRB- -RRB-))
        (PP (IN in)
          (NP (DT the) (NN following))))
      (ADVP (RB not) (RB only)
        (S
          (VP (TO to)
            (VP (VB refer)
              (PP
                (PP (TO to)
                  (NP
                    (NP (DT the) (NN vertex))
                    (VP (VBN assigned)
                      (PP (TO to)
                        (NP
                          (NP (JJ local) (NN state) (NNS x))
                          (PP (IN of)
                            (NP (NN agent) (NNS ai))))))))
                (CONJP (CC but)
                  (RB also))
                (PP (TO to)
                  (NP
                    (NP (DT the) (JJ local) (NN state))
                    (SBAR
                      (S
                        (NP
                          (NP (SYM x))
                          (PP (IN of)
                            (NP (NN agent))))
                        (VP (VBZ ai)
                          (NP (PRP itself))
                          (PRN (-LRB- -LRB-)
                            (PP (RB instead) (IN of)
                              (NP (NNP x)))
                            (-RRB- -RRB-))))))))
              (, ,)
              (PP (VBG depending)
                (PP (IN on)
                  (NP (DT the) (NN context)))))))))
    (. .)))

mark(need-3, Since-1)
nsubj(need-3, we-2)
nsubj:xsubj(relate-5, we-2)
advcl(use-14, need-3)
mark(relate-5, to-4)
xcomp(need-3, relate-5)
det(states-8, the-6)
amod(states-8, local-7)
dobj(relate-5, states-8)
case(agents-11, of-9)
amod(agents-11, different-10)
nmod:of(states-8, agents-11)
nsubj(use-14, we-13)
root(ROOT-0, use-14)
dobj(use-14, li-15)
dep(li-15, x-17)
case(following-21, in-19)
det(following-21, the-20)
nmod:in(li-15, following-21)
dep(only-23, not-22)
advmod(use-14, only-23)
mark(refer-25, to-24)
dep(only-23, refer-25)
dep(only-23, refer-25')
conj:and(refer-25, refer-25')
case(vertex-28, to-26)
det(vertex-28, the-27)
nmod:to(refer-25, vertex-28)
acl(vertex-28, assigned-29)
case(x-33, to-30)
amod(x-33, local-31)
compound(x-33, state-32)
nmod:to(assigned-29, x-33)
case(ai-36, of-34)
compound(ai-36, agent-35)
nmod:of(x-33, ai-36)
cc(refer-25, but-37)
advmod(state-42, also-38)
case(state-42, to-39)
det(state-42, the-40)
amod(state-42, local-41)
nmod:to(refer-25', state-42)
nsubj(itself-47, x-43)
case(agent-45, of-44)
nmod:of(x-43, agent-45)
cop(itself-47, ai-46)
acl:relcl(state-42, itself-47)
case(x-51, instead-49)
mwe(instead-49, of-50)
dep(itself-47, x-51)
case(context-57, depending-54)
case(context-57, on-55)
det(context-57, the-56)
advcl(refer-25, context-57)

(ROOT
  (S
    (NP (DT Every) (JJ valid) (NNP MAPF-DP) (NN plan))
    (VP (VBZ defines)
      (NP (DT a) (JJ total) (NN order))
      (PP (IN on)
        (NP
          (NP (DT the) (JJ local) (NNS states))
          (PP (IN of)
            (NP
              (NP (DT all) (NNS agents))
              (, ,)
              (SBAR
                (WHNP (WDT which))
                (S
                  (NP (PRP we))
                  (VP (VBP relax)
                    (PP (TO to)
                      (NP
                        (NP (DT a) (JJ partial) (NN order))
                        (SBAR (IN as)
                          (S
                            (VP (VBZ follows))))
                        (: :)
                        (NP (CD 1))))))))))))
    (. .)))

det(plan-4, Every-1)
amod(plan-4, valid-2)
compound(plan-4, MAPF-DP-3)
nsubj(defines-5, plan-4)
root(ROOT-0, defines-5)
det(order-8, a-6)
amod(order-8, total-7)
dobj(defines-5, order-8)
case(states-12, on-9)
det(states-12, the-10)
amod(states-12, local-11)
nmod:on(defines-5, states-12)
case(agents-15, of-13)
det(agents-15, all-14)
nmod:of(states-12, agents-15)
dobj(relax-19, agents-15)
ref(agents-15, which-17)
nsubj(relax-19, we-18)
acl:relcl(agents-15, relax-19)
case(order-23, to-20)
det(order-23, a-21)
amod(order-23, partial-22)
nmod:to(relax-19, order-23)
mark(follows-25, as-24)
dep(order-23, follows-25)
dep(order-23, 1-27)

(ROOT
  (NP
    (NP
      (NP (FW i))
      (, ,)
      (NP (SYM x)))
    (: :)
    (NP
      (NP
        (NP (JJ li)
          (PRN (-LRB- -LRB-)
            (NP (NNP x))
            (-RRB- -RRB-))
          (NN li))
        (PRN (-LRB- -LRB-)
          (NP
            (QP ($ x) (CD +) (CD 1)))
          (-RRB- -RRB-)))
      (SBAR
        (S
          (NP (JJ -LSB-) (NN agent) (NNS ai))
          (VP (VBZ enters)
            (NP
              (NP (DT a) (JJ local) (NN state))
              (SBAR
                (S
                  (NP (SYM x))
                  (VP (VBD +)
                    (NP (CD 1))
                    (PP (IN during)
                      (NP (NN plan) (NN execution)))
                    (SBAR (RB only) (IN after)
                      (S
                        (NP (PRP it))
                        (VP (VBZ enters)
                          (NP (JJ local) (NN state) (NNP x) (NNP -RSB-)))))))))))))
    (. .)))

root(ROOT-0, i-1)
appos(i-1, x-3)
amod(li-9, li-5)
appos(li-9, x-7)
dep(i-1, li-9)
dep(li-9, x-11)
compound(1-13, +-12)
nummod(x-11, 1-13)
amod(ai-17, -LSB--15)
compound(ai-17, agent-16)
nsubj(enters-18, ai-17)
acl:relcl(li-9, enters-18)
det(state-21, a-19)
amod(state-21, local-20)
dobj(enters-18, state-21)
nsubj(+-23, x-22)
acl:relcl(state-21, +-23)
dobj(+-23, 1-24)
case(execution-27, during-25)
compound(execution-27, plan-26)
nmod:during(+-23, execution-27)
advmod(enters-31, only-28)
mark(enters-31, after-29)
nsubj(enters-31, it-30)
advcl(+-23, enters-31)
amod(-RSB--35, local-32)
compound(-RSB--35, state-33)
compound(-RSB--35, x-34)
dobj(enters-31, -RSB--35)

(ROOT
  (FRAG
    (NP (CD 2))
    (. .)))

root(ROOT-0, 2-1)

(ROOT
  (S
    (S
      (NP
        (NP (FW i))
        (, ,)
        (NP
          (NP (NN j))
          (, ,)
          (NP (SYM x))
          (, ,)
          (NP
            (NP (SYM x))
            (PP (IN with)
              (NP
                (NP (FW i) (FW =) (NN j))
                (, ,)
                (NP
                  (NP (SYM x))
                  (RRC
                    (ADVP (RB <))
                    (NP (SYM x)))))))
          (CC and)
          (NP (NNP l) (NNP =))))
      (VP (VBP lj)
        (NP
          (NP
            (LST (-LRB- -LRB-) (LS x) (-RRB- -RRB-))
            (VBN =) (NN li))
          (PRN (-LRB- -LRB-)
            (NP
              (QP ($ x) (CD +) (CD 1)))
            (-RRB- -RRB-)))))
    (: :)
    (S
      (NP
        (NP (JJ lj)
          (PRN (-LRB- -LRB-)
            (NP
              (QP ($ x) (CD +) (CD 1)))
            (-RRB- -RRB-))
          (NN li))
        (PRN (-LRB- -LRB-)
          (NP
            (QP ($ x) (CD +) (CD 1)))
          (-RRB- -RRB-)))
      (VP (VBD -LSB-)
        (SBAR
          (S
            (NP (NN agent) (NNS ai))
            (VP (VBZ enters)
              (NP
                (NP (DT a) (JJ local) (NN state))
                (SBAR
                  (S
                    (NP (SYM x))
                    (VP (VBD +)
                      (NP (CD 1))
                      (PP (IN with)
                        (NP (DT a) (NN vertex)))
                      (NP (NN l))
                      (PP (IN during)
                        (NP (NN plan) (NN execution)))))))
              (SBAR (RB only) (IN after)
                (S
                  (NP (NN agent) (NN aj))
                  (VP (VBZ has)
                    (VP (VBN left)
                      (NP (DT a) (JJ local) (NN state) (NN x))
                      (PP (IN with)
                        (NP (JJ vertex) (NN l)))
                      (PRN (-LRB- -LRB-)
                        (CC and)
                        (VP
                          (ADVP (RB thus))
                          (VBD entered)
                          (S
                            (NP (JJ local) (NN state))
                            (NP
                              (NP (SYM x))
                              (ADJP (JJ +)
                                (NP (CD 1))))))
                        (-RRB- -RRB-))
                      (SBAR (IN that)
                        (S
                          (VP (VBZ precedes)
                            (NP (JJ local) (NN state) (NNP x) (NNP -RSB-))))))))))))))
    (. .)))

nsubj(lj-19, i-1)
appos(i-1, j-3)
appos(i-1, x-5)
conj:and(j-3, x-5)
appos(i-1, x-7)
conj:and(j-3, x-7)
case(j-11, with-8)
compound(j-11, i-9)
compound(j-11, =-10)
nmod:with(x-7, j-11)
appos(j-11, x-13)
advmod(x-15, <-14)
acl:relcl(x-13, x-15)
cc(j-3, and-16)
compound(=-18, l-17)
appos(i-1, =-18)
conj:and(j-3, =-18)
root(ROOT-0, lj-19)
dep(li-24, x-21)
amod(li-24, =-23)
dobj(lj-19, li-24)
dep(li-24, x-26)
compound(1-28, +-27)
nummod(x-26, 1-28)
amod(li-37, lj-31)
dep(li-37, x-33)
compound(1-35, +-34)
nummod(x-33, 1-35)
nsubj(-LSB--43, li-37)
dep(li-37, x-39)
compound(1-41, +-40)
nummod(x-39, 1-41)
parataxis(lj-19, -LSB--43)
compound(ai-45, agent-44)
nsubj(enters-46, ai-45)
ccomp(-LSB--43, enters-46)
det(state-49, a-47)
amod(state-49, local-48)
dobj(enters-46, state-49)
nsubj(+-51, x-50)
acl:relcl(state-49, +-51)
dobj(+-51, 1-52)
case(vertex-55, with-53)
det(vertex-55, a-54)
nmod:with(+-51, vertex-55)
dobj(+-51, l-56)
case(execution-59, during-57)
compound(execution-59, plan-58)
nmod:during(+-51, execution-59)
advmod(left-65, only-60)
mark(left-65, after-61)
compound(aj-63, agent-62)
nsubj(left-65, aj-63)
aux(left-65, has-64)
advcl(enters-46, left-65)
det(x-69, a-66)
amod(x-69, local-67)
compound(x-69, state-68)
dobj(left-65, x-69)
case(l-72, with-70)
amod(l-72, vertex-71)
nmod:with(left-65, l-72)
cc(entered-76, and-74)
advmod(entered-76, thus-75)
dep(left-65, entered-76)
amod(state-78, local-77)
nsubj(x-79, state-78)
xcomp(entered-76, x-79)
amod(x-79, +-80)
dep(+-80, 1-81)
mark(precedes-84, that-83)
ccomp(left-65, precedes-84)
amod(-RSB--88, local-85)
compound(-RSB--88, state-86)
compound(-RSB--88, x-87)
dobj(precedes-84, -RSB--88)

(ROOT
  (S
    (NP
      (NP (NNP Property) (CD 1))
      (PP (IN of)
        (NP (DT the) (JJ partial) (NN order))))
    (VP (VBZ enforces)
      (SBAR (IN that)
        (S
          (NP (DT each) (NN agent))
          (VP (VBZ visits)
            (NP (PRP$ its) (NNS locations))
            (PP (IN in)
              (NP
                (NP (DT the) (JJ same) (NN order))
                (PP (RB as) (IN in)
                  (NP (DT the) (NNP MAPFDP) (NN plan)))))))))
    (. .)))

nsubj(enforces-7, Property-1)
nummod(Property-1, 1-2)
case(order-6, of-3)
det(order-6, the-4)
amod(order-6, partial-5)
nmod:of(Property-1, order-6)
root(ROOT-0, enforces-7)
mark(visits-11, that-8)
det(agent-10, each-9)
nsubj(visits-11, agent-10)
ccomp(enforces-7, visits-11)
nmod:poss(locations-13, its-12)
dobj(visits-11, locations-13)
case(order-17, in-14)
det(order-17, the-15)
amod(order-17, same-16)
nmod:in(visits-11, order-17)
advmod(plan-22, as-18)
case(plan-22, in-19)
det(plan-22, the-20)
compound(plan-22, MAPFDP-21)
nmod:in(order-17, plan-22)

(ROOT
  (S
    (NP (NNP Property) (CD 2))
    (VP (VBZ enforces)
      (SBAR (IN that)
        (S
          (NP (DT any) (CD two) (NNS agents))
          (VP (VBP visit)
            (NP
              (NP (DT the) (JJ same) (NN location))
              (PP (IN in)
                (NP
                  (NP (DT the) (JJ same) (NN order))
                  (PP (RB as) (IN in)
                    (NP (DT the) (NNP MAPFDP) (NN plan))))))))))
    (. .)))

nsubj(enforces-3, Property-1)
nummod(Property-1, 2-2)
root(ROOT-0, enforces-3)
mark(visit-8, that-4)
det(agents-7, any-5)
nummod(agents-7, two-6)
nsubj(visit-8, agents-7)
ccomp(enforces-3, visit-8)
det(location-11, the-9)
amod(location-11, same-10)
dobj(visit-8, location-11)
case(order-15, in-12)
det(order-15, the-13)
amod(order-15, same-14)
nmod:in(location-11, order-15)
advmod(plan-20, as-16)
case(plan-20, in-17)
det(plan-20, the-18)
compound(plan-20, MAPFDP-19)
nmod:in(order-15, plan-20)

(ROOT
  (S
    (NP (PRP We))
    (VP (MD can)
      (VP (VB express)
        (NP
          (NP
            (NP (DT the) (JJ partial) (NN order))
            (PP (IN with)
              (NP (DT a) (NNP directed) (NNP graph) (NNP G) (NNP =))))
          (PRN (-LRB- -LRB-)
            (NP (NNP V))
            (, ,)
            (NP (NNP E))
            (-RRB- -RRB-))
          (SBAR (WP$ whose)
            (S
              (NP (NNS vertices))
              (VP (VB correspond)
                (UCP
                  (PP (TO to)
                    (NP (JJ local) (NNS states)))
                  (CC and)
                  (SBAR
                    (WHNP (WP$ whose)
                      (NX (NNS edges)))
                    (S
                      (VP (VB correspond)
                        (PP (TO to)
                          (NP
                            (NP (DT the) (JJ partial) (NN order))
                            (VP (VBN given)
                              (PP (IN by)
                                (NP (DT the) (CD two) (NNS properties)))
                              (PP (IN above)))))))))))))))
    (. .)))

nsubj(express-3, We-1)
aux(express-3, can-2)
root(ROOT-0, express-3)
det(order-6, the-4)
amod(order-6, partial-5)
dobj(express-3, order-6)
dep(correspond-20, order-6)
case(=-12, with-7)
det(=-12, a-8)
compound(=-12, directed-9)
compound(=-12, graph-10)
compound(=-12, G-11)
nmod:with(order-6, =-12)
appos(order-6, V-14)
dep(V-14, E-16)
ref(order-6, whose-18)
nsubj(correspond-20, vertices-19)
acl:relcl(order-6, correspond-20)
case(states-23, to-21)
amod(states-23, local-22)
dep(correspond-20, states-23)
cc(states-23, and-24)
nmod:poss(edges-26, whose-25)
nsubj(correspond-27, edges-26)
dep(correspond-20, correspond-27)
conj:and(states-23, correspond-27)
case(order-31, to-28)
det(order-31, the-29)
amod(order-31, partial-30)
nmod:to(correspond-27, order-31)
acl(order-31, given-32)
case(properties-36, by-33)
det(properties-36, the-34)
nummod(properties-36, two-35)
nmod:above(given-32, properties-36)
case(properties-36, above-37)

(ROOT
  (S
    (NP (NNP Property) (CD 2))
    (VP (VBZ specifies)
      (NP
        (NP (DT the) (JJ critical) (NNS dependencies))
        (PP (IN between)
          (NP (NNS agents)))))
    (. .)))

nsubj(specifies-3, Property-1)
nummod(Property-1, 2-2)
root(ROOT-0, specifies-3)
det(dependencies-6, the-4)
amod(dependencies-6, critical-5)
dobj(specifies-3, dependencies-6)
case(agents-8, between-7)
nmod:between(dependencies-6, agents-8)

(ROOT
  (S
    (NP (NNS Edges))
    (VP
      (VP (VBP are)
        (ADJP (JJ redundant)))
      (CC and)
      (VP (MD can) (RB then)
        (VP (VB be)
          (VP (VBN removed)
            (PP (IN from)
              (NP
                (NP (DT the) (JJ directed) (NN graph))
                (SBAR
                  (WHADVP (WRB when))
                  (S
                    (NP (PRP they))
                    (VP (VBP are)
                      (VP (VBN implied)
                        (PP (IN by)
                          (NP
                            (NP (DT the) (JJ other) (NNS edges))
                            (ADJP (JJ due) (TO to) (JJ transitivity))))))))))))))
    (. .)))

nsubj(redundant-3, Edges-1)
nsubjpass(removed-8, Edges-1)
cop(redundant-3, are-2)
root(ROOT-0, redundant-3)
cc(redundant-3, and-4)
aux(removed-8, can-5)
advmod(removed-8, then-6)
auxpass(removed-8, be-7)
conj:and(redundant-3, removed-8)
case(graph-12, from-9)
det(graph-12, the-10)
amod(graph-12, directed-11)
nmod:from(removed-8, graph-12)
advmod(implied-16, when-13)
nsubjpass(implied-16, they-14)
auxpass(implied-16, are-15)
acl:relcl(graph-12, implied-16)
case(edges-20, by-17)
det(edges-20, the-18)
amod(edges-20, other-19)
nmod:agent(implied-16, edges-20)
amod(transitivity-23, due-21)
dep(transitivity-23, to-22)
amod(edges-20, transitivity-23)

(ROOT
  (S
    (NP
      (NP (DT A) (JJ transitive) (NN reduction))
      (PP (IN of)
        (NP (DT the) (JJ directed) (NN graph))))
    (VP (VBZ minimizes)
      (NP
        (NP (DT the) (NN number))
        (PP (IN of)
          (NP (VBG remaining) (NNS edges)))))
    (. .)))

det(reduction-3, A-1)
amod(reduction-3, transitive-2)
nsubj(minimizes-8, reduction-3)
case(graph-7, of-4)
det(graph-7, the-5)
amod(graph-7, directed-6)
nmod:of(reduction-3, graph-7)
root(ROOT-0, minimizes-8)
det(number-10, the-9)
dobj(minimizes-8, number-10)
case(edges-13, of-11)
amod(edges-13, remaining-12)
nmod:of(number-10, edges-13)

(ROOT
  (S
    (NP (PRP It))
    (VP
      (VP (MD can)
        (VP (VB be)
          (VP (VBN computed)
            (PP (IN in)
              (NP
                (NP
                  (NP (NN time) (NN O))
                  (PRN (-LRB- -LRB-)
                    (NP (NNP |) (NNP V) (NNP |) (NNP |) (NNP E) (NNP |))
                    (-RRB- -RRB-)))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (NNP Aho))
                    (, ,)
                    (NP (NNP Garey))
                    (, ,)
                    (CC and)
                    (NP (NNP Ullman) (CD 1972)))
                  (-RRB- -RRB-)))))))
      (, ,)
      (VP (VBZ is)
        (ADJP (JJ unique)))
      (, ,)
      (VP (VBZ contains)
        (NP
          (NP (DT all) (NNS edges))
          (PP (IN between)
            (NP
              (NP (JJ local) (NNS states))
              (PP (IN of)
                (NP (DT the) (JJ same) (NN agent)))
              (PRN (-LRB- -LRB-)
                (SBAR (IN since)
                  (S
                    (NP (PRP they))
                    (VP (VBP are)
                      (ADVP (RB never))
                      (ADJP (JJ redundant)))))
                (-RRB- -RRB-))))))
      (CC and)
      (VP
        (ADVP (RB thus))
        (VBZ minimizes)
        (NP
          (NP (DT the) (NN number))
          (PP (IN of)
            (NP
              (NP (NNS edges))
              (PP (IN between)
                (NP
                  (NP (DT the) (JJ local) (NNS states))
                  (PP (IN of)
                    (NP (JJ different) (NNS agents))))))))))
    (. .)))

nsubjpass(computed-4, It-1)
nsubj(unique-27, It-1)
nsubj(contains-29, It-1)
nsubj(minimizes-48, It-1)
aux(computed-4, can-2)
auxpass(computed-4, be-3)
root(ROOT-0, computed-4)
case(O-7, in-5)
compound(O-7, time-6)
nmod:in(computed-4, O-7)
compound(|-14, |-9)
compound(|-14, V-10)
compound(|-14, |-11)
compound(|-14, |-12)
compound(|-14, E-13)
appos(O-7, |-14)
dep(O-7, Aho-17)
dep(O-7, Garey-19)
conj:and(Aho-17, Garey-19)
cc(Aho-17, and-21)
dep(O-7, Ullman-22)
conj:and(Aho-17, Ullman-22)
nummod(Ullman-22, 1972-23)
cop(unique-27, is-26)
conj:and(computed-4, unique-27)
conj:and(computed-4, contains-29)
det(edges-31, all-30)
dobj(contains-29, edges-31)
case(states-34, between-32)
amod(states-34, local-33)
nmod:between(edges-31, states-34)
case(agent-38, of-35)
det(agent-38, the-36)
amod(agent-38, same-37)
nmod:of(states-34, agent-38)
mark(redundant-44, since-40)
nsubj(redundant-44, they-41)
cop(redundant-44, are-42)
neg(redundant-44, never-43)
dep(states-34, redundant-44)
cc(computed-4, and-46)
advmod(minimizes-48, thus-47)
conj:and(computed-4, minimizes-48)
det(number-50, the-49)
dobj(minimizes-48, number-50)
case(edges-52, of-51)
nmod:of(number-50, edges-52)
case(states-56, between-53)
det(states-56, the-54)
amod(states-56, local-55)
nmod:between(edges-52, states-56)
case(agents-59, of-57)
amod(agents-59, different-58)
nmod:of(states-56, agents-59)

(ROOT
  (S
    (NP (NNS MCPs))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN implemented)
          (ADVP (RB easily))
          (SBAR (IN if)
            (S
              (NP (DT each) (NN agent) (NN aj))
              (VP (VBZ sends)
                (SBAR
                  (S
                    (S
                      (NP
                        (NP (DT a) (NN message))
                        (PP (TO to)
                          (NP (DT each) (JJ other) (NN agent))))
                      (VP (VBZ ai)
                        (SBAR
                          (WHADVP (WRB when))
                          (S
                            (NP (NN agent) (NN aj))
                            (VP (VBZ enters)
                              (NP (DT a) (JJ new) (JJ local) (NN state))
                              (ADVP
                                (NP
                                  (NP (SYM x))
                                  (PRN (-LRB- -LRB-)
                                    (X
                                      (X
                                        (X (SYM =))
                                        (NP (SYM x)))
                                      (NP
                                        (NP
                                          (QP (CD +) (CD 1)))
                                        (PP (IN in)
                                          (NP (NNP Property) (CD 2)))))
                                    (-RRB- -RRB-)))
                                (IN if)))))))
                    (CC and)
                    (S
                      (SBAR (RB only) (IN if)
                        (S
                          (NP (DT the) (JJ transitive) (NN reduction))
                          (VP (VBZ contains)
                            (NP
                              (NP (DT an) (NN edge) (NN lj)
                                (PRN (-LRB- -LRB-)
                                  (NP (NNP x))
                                  (-RRB- -RRB-))
                                (NN li))
                              (PRN (-LRB- -LRB-)
                                (NP (NNP x))
                                (-RRB- -RRB-)))
                            (PP (IN for)
                              (NP (DT some) (JJ local) (NN state))))))
                      (NP
                        (NP
                          (NP (SYM x))
                          (PRN (-LRB- -LRB-)
                            (X
                              (X
                                (X (SYM =))
                                (NP (SYM x)))
                              (NP
                                (NP
                                  (QP (CD +) (CD 1)))
                                (PP (IN in)
                                  (NP (NNP Property) (CD 2)))))
                            (-RRB- -RRB-)))
                        (PP (IN of)
                          (NP (NN agent))))
                      (VP (VBP ai)))))))))))
    (. .)))

nsubjpass(implemented-4, MCPs-1)
aux(implemented-4, can-2)
auxpass(implemented-4, be-3)
root(ROOT-0, implemented-4)
advmod(implemented-4, easily-5)
mark(sends-10, if-6)
det(aj-9, each-7)
compound(aj-9, agent-8)
nsubj(sends-10, aj-9)
advcl(implemented-4, sends-10)
det(message-12, a-11)
nsubj(ai-17, message-12)
case(agent-16, to-13)
det(agent-16, each-14)
amod(agent-16, other-15)
nmod:to(message-12, agent-16)
dep(sends-10, ai-17)
advmod(enters-21, when-18)
compound(aj-20, agent-19)
nsubj(enters-21, aj-20)
advcl(ai-17, enters-21)
det(state-25, a-22)
amod(state-25, new-23)
amod(state-25, local-24)
dobj(enters-21, state-25)
advmod(enters-21, x-26)
dep(x-29, =-28)
dep(1-31, x-29)
compound(1-31, +-30)
dep(x-26, 1-31)
case(Property-33, in-32)
nmod:in(1-31, Property-33)
nummod(Property-33, 2-34)
case(x-26, if-36)
cc(ai-17, and-37)
advmod(contains-43, only-38)
mark(contains-43, if-39)
det(reduction-42, the-40)
amod(reduction-42, transitive-41)
nsubj(contains-43, reduction-42)
advcl(ai-70, contains-43)
det(li-50, an-44)
compound(li-50, edge-45)
compound(li-50, lj-46)
appos(li-50, x-48)
dobj(contains-43, li-50)
appos(li-50, x-52)
case(state-57, for-54)
det(state-57, some-55)
amod(state-57, local-56)
nmod:for(contains-43, state-57)
nsubj(ai-70, x-58)
dep(x-61, =-60)
dep(1-63, x-61)
compound(1-63, +-62)
dep(x-58, 1-63)
case(Property-65, in-64)
nmod:in(1-63, Property-65)
nummod(Property-65, 2-66)
case(agent-69, of-68)
nmod:of(x-58, agent-69)
dep(sends-10, ai-70)
conj:and(ai-17, ai-70)

(ROOT
  (S
    (SBAR (IN Since)
      (S
        (NP (DT the) (JJ transitive) (NN reduction))
        (VP (VBZ minimizes)
          (NP
            (NP (DT the) (NN number))
            (PP (IN of)
              (NP
                (NP (NNS edges))
                (PP (IN between)
                  (NP
                    (NP (DT the) (JJ local) (NNS states))
                    (PP (IN of)
                      (NP (JJ different) (NNS agents)))))))))))
    (, ,)
    (NP (PRP it))
    (ADVP (RB also))
    (VP (VBZ minimizes)
      (NP
        (NP (DT the) (NN number))
        (PP (IN of)
          (S
            (VP (VBN sent)
              (NP (NNS messages)))))))
    (. .)))

mark(minimizes-5, Since-1)
det(reduction-4, the-2)
amod(reduction-4, transitive-3)
nsubj(minimizes-5, reduction-4)
advcl(minimizes-20, minimizes-5)
det(number-7, the-6)
dobj(minimizes-5, number-7)
case(edges-9, of-8)
nmod:of(number-7, edges-9)
case(states-13, between-10)
det(states-13, the-11)
amod(states-13, local-12)
nmod:between(edges-9, states-13)
case(agents-16, of-14)
amod(agents-16, different-15)
nmod:of(states-13, agents-16)
nsubj(minimizes-20, it-18)
advmod(minimizes-20, also-19)
root(ROOT-0, minimizes-20)
det(number-22, the-21)
dobj(minimizes-20, number-22)
mark(sent-24, of-23)
acl(number-22, sent-24)
dobj(sent-24, messages-25)

(ROOT
  (SINV
    (S
      (NP (DT An) (NN agent))
      (VP (VBP ai)))
    (VP (MD can)
      (VP (VB implement)
        (NP (PRP$ its) (NN MCP))
        (ADVP (RB simply))
        (PP (IN by)
          (S
            (VP
              (VP (VBG counting)
                (SBAR
                  (WHNP
                    (WHADJP (WRB how) (JJ many))
                    (NNS messages))
                  (S
                    (NP (PRP it))
                    (VP (VBZ has)
                      (VP (VBN received)
                        (PP (IN from)
                          (NP (DT each) (JJ other) (NN agent))))))))
              (CC and)
              (VP (VBG providing)
                (NP (DT a) (NNP GO) (NN command))
                (PP (TO to)
                  (NP (PRP itself)))
                (PP (IN in)
                  (NP (JJ local) (NN state) (NNS x)))
                (SBAR (IN if)
                  (CC and)
                  (RB only)
                  (S
                    (SBAR (IN if)
                      (S
                        (NP (PRP it))
                        (VP
                          (VP (VBZ has) (RB not)
                            (ADVP (RB yet))
                            (VP (VBN entered)
                              (NP (PRP$ its) (JJ last) (JJ local) (NN state))))
                          (CC and)
                          (VP (VBZ has)
                            (VP (VBN received)
                              (NP
                                (NP (DT a) (NN number))
                                (PP (IN of)
                                  (NP (NNS messages))))
                              (PP (IN over)
                                (NP
                                  (NP (DT the) (NN course))
                                  (PP (IN of)
                                    (NP (NN plan) (NN execution)))))
                              (PP (IN from)
                                (NP (DT each) (JJ other) (NN agent) (NN aj))))))))
                    (NP (DT that))
                    (VP (VBZ corresponds)
                      (PP (TO to)
                        (NP
                          (NP (DT the) (NN number))
                          (PP (IN of)
                            (NP
                              (NP (JJ incoming) (NNS edges))
                              (PP (IN from)
                                (NP
                                  (NP (JJ local) (NNS states))
                                  (PP (IN of)
                                    (NP (NN agent) (NN aj)))))))))
                      (PP (TO to)
                        (NP (PRP$ its) (JJ local) (NNS states))))))))))))
    (NP
      (NP (CD 0))
      (, ,)
      (NP
        (NP (CD 1))
        (: ...)
        (NP
          (NP (SYM x))
          (NP
            (QP (CD +) (CD 1))))))
    (. .)))

det(agent-2, An-1)
nsubj(ai-3, agent-2)
dep(implement-5, ai-3)
aux(implement-5, can-4)
root(ROOT-0, implement-5)
nmod:poss(MCP-7, its-6)
dobj(implement-5, MCP-7)
advmod(implement-5, simply-8)
mark(counting-10, by-9)
advcl(implement-5, counting-10)
advmod(many-12, how-11)
amod(messages-13, many-12)
dobj(received-16, messages-13)
nsubj(received-16, it-14)
aux(received-16, has-15)
ccomp(counting-10, received-16)
case(agent-20, from-17)
det(agent-20, each-18)
amod(agent-20, other-19)
nmod:from(received-16, agent-20)
cc(counting-10, and-21)
advcl(implement-5, providing-22)
conj:and(counting-10, providing-22)
det(command-25, a-23)
compound(command-25, GO-24)
dobj(providing-22, command-25)
case(itself-27, to-26)
nmod:to(providing-22, itself-27)
case(x-31, in-28)
amod(x-31, local-29)
compound(x-31, state-30)
nmod:in(providing-22, x-31)
mark(corresponds-64, if-32)
cc(corresponds-64, and-33)
advmod(corresponds-64, only-34)
mark(entered-40, if-35)
nsubj(entered-40, it-36)
nsubj(received-47, it-36)
aux(entered-40, has-37)
neg(entered-40, not-38)
advmod(entered-40, yet-39)
advcl(corresponds-64, entered-40)
nmod:poss(state-44, its-41)
amod(state-44, last-42)
amod(state-44, local-43)
dobj(entered-40, state-44)
cc(entered-40, and-45)
aux(received-47, has-46)
conj:and(entered-40, received-47)
advcl(corresponds-64, received-47)
det(number-49, a-48)
dobj(received-47, number-49)
case(messages-51, of-50)
nmod:of(number-49, messages-51)
case(course-54, over-52)
det(course-54, the-53)
nmod:over(received-47, course-54)
case(execution-57, of-55)
compound(execution-57, plan-56)
nmod:of(course-54, execution-57)
case(aj-62, from-58)
det(aj-62, each-59)
amod(aj-62, other-60)
compound(aj-62, agent-61)
nmod:from(received-47, aj-62)
nsubj(corresponds-64, that-63)
advcl(providing-22, corresponds-64)
case(number-67, to-65)
det(number-67, the-66)
nmod:to(corresponds-64, number-67)
case(edges-70, of-68)
amod(edges-70, incoming-69)
nmod:of(number-67, edges-70)
case(states-73, from-71)
amod(states-73, local-72)
nmod:from(edges-70, states-73)
case(aj-76, of-74)
compound(aj-76, agent-75)
nmod:of(states-73, aj-76)
case(states-80, to-77)
nmod:poss(states-80, its-78)
amod(states-80, local-79)
nmod:to(corresponds-64, states-80)
nsubj(implement-5, 0-81)
appos(0-81, 1-83)
dep(1-83, x-85)
compound(1-87, +-86)
dep(x-85, 1-87)

(ROOT
  (S
    (S
      (NP (NN Figure) (CD 2))
      (VP (VBZ shows)
        (NP
          (NP (DT a) (NN sample) (JJ partial) (NN order))
          (PP (IN on)
            (NP
              (NP (DT the) (JJ local) (NNS states))
              (PP (IN for)
                (NP (DT the) (NNP MAPF-DP) (NN instance))))))
        (PP (IN from)
          (NP (NNP Figure) (CD 1)))))
    (CC and)
    (S
      (NP (PRP$ its) (JJ valid) (NN MAPF-DP))
      (VP (VBP plan)
        (NP
          (NP (NNP l1) (NNP =) (CD v3) (, ,) (CD v1) (, ,) (CD v3) (, ,) (CD v1) (, ,) (CD v1) (, ,) (CD v1) (, ,) (CD v3) (, ,) (CD v4))
          (CC and)
          (NP (NNP l2) (NNP =) (CD v2) (, ,) (CD v2) (, ,) (CD v2) (, ,) (CD v2) (, ,) (CD v3) (, ,) (CD v4) (, ,) (CD v5)))))
    (. .)))

nsubj(shows-3, Figure-1)
nummod(Figure-1, 2-2)
root(ROOT-0, shows-3)
det(order-7, a-4)
compound(order-7, sample-5)
amod(order-7, partial-6)
dobj(shows-3, order-7)
case(states-11, on-8)
det(states-11, the-9)
amod(states-11, local-10)
nmod:on(order-7, states-11)
case(instance-15, for-12)
det(instance-15, the-13)
compound(instance-15, MAPF-DP-14)
nmod:for(states-11, instance-15)
case(Figure-17, from-16)
nmod:from(shows-3, Figure-17)
nummod(Figure-17, 1-18)
cc(shows-3, and-19)
nmod:poss(MAPF-DP-22, its-20)
amod(MAPF-DP-22, valid-21)
nsubj(plan-23, MAPF-DP-22)
conj:and(shows-3, plan-23)
compound(=-25, l1-24)
dobj(plan-23, =-25)
nummod(=-25, v3-26)
nummod(=-25, v1-28)
nummod(=-25, v3-30)
nummod(=-25, v1-32)
nummod(=-25, v1-34)
nummod(=-25, v1-36)
nummod(=-25, v3-38)
nummod(=-25, v4-40)
cc(=-25, and-41)
compound(=-43, l2-42)
dobj(plan-23, =-43)
conj:and(=-25, =-43)
nummod(=-43, v2-44)
nummod(=-43, v2-46)
nummod(=-43, v2-48)
nummod(=-43, v2-50)
nummod(=-43, v3-52)
nummod(=-43, v4-54)
nummod(=-43, v5-56)

(ROOT
  (S
    (NP
      (NP
        (NP (JJ l1)
          (PRN (-LRB- -LRB-)
            (NP (CD 1))
            (-RRB- -RRB-))
          (NN l2))
        (PRN (-LRB- -LRB-)
          (NP (CD 4))
          (-RRB- -RRB-)))
      (, ,)
      (PP (IN for)
        (NP (NN example)))
      (, ,))
    (VP
      (VP (VBZ is)
        (VP (VBN implied)
          (PP (IN by)
            (NP
              (NP
                (ADJP
                  (ADJP (JJ l1))
                  (PRN (-LRB- -LRB-)
                    (NP (CD 1))
                    (-RRB- -RRB-)))
                (JJ l1)
                (PRN (-LRB- -LRB-)
                  (NP (CD 2))
                  (-RRB- -RRB-))
                (NN l1)
                (PRN (-LRB- -LRB-)
                  (NP (CD 3))
                  (-RRB- -RRB-))
                (NNS l2))
              (PRN (-LRB- -LRB-)
                (NP (CD 4))
                (-RRB- -RRB-))))))
      (CC and)
      (VP (MD can) (RB thus))
      (NP
        (NP
          (NP (JJ v3) (JJ l1)
            (PRN (-LRB- -LRB-)
              (NP (CD 0))
              (-RRB- -RRB-))
            (NN v1) (JJ l1)
            (PRN (-LRB- -LRB-)
              (NP (CD 1))
              (-RRB- -RRB-))
            (NN v3) (JJ l1)
            (PRN (-LRB- -LRB-)
              (NP (CD 2))
              (-RRB- -RRB-))
            (NN v1) (JJ l1)
            (PRN (-LRB- -LRB-)
              (NP (CD 3))
              (-RRB- -RRB-))
            (NN v1) (JJ l1)
            (PRN (-LRB- -LRB-)
              (NP (CD 4))
              (-RRB- -RRB-))
            (NN v1) (JJ l1)
            (PRN (-LRB- -LRB-)
              (NP (CD 5))
              (-RRB- -RRB-))
            (NN v3) (JJ l1)
            (PRN (-LRB- -LRB-)
              (NP (CD 6))
              (-RRB- -RRB-))
            (NN v4) (JJ l1)
            (PRN (-LRB- -LRB-)
              (NP (CD 7))
              (-RRB- -RRB-))
            (NN v2) (JJ l2)
            (PRN (-LRB- -LRB-)
              (NP (CD 0))
              (-RRB- -RRB-))
            (NN v2) (JJ l2)
            (PRN (-LRB- -LRB-)
              (NP (CD 1))
              (-RRB- -RRB-))
            (NN v2) (JJ l2)
            (PRN (-LRB- -LRB-)
              (NP (CD 2))
              (-RRB- -RRB-))
            (NN v2) (JJ l2)
            (PRN (-LRB- -LRB-)
              (NP (CD 3))
              (-RRB- -RRB-))
            (NN v3) (JJ l2)
            (PRN (-LRB- -LRB-)
              (NP (CD 4))
              (-RRB- -RRB-))
            (NN v4) (JJ l2)
            (PRN (-LRB- -LRB-)
              (NP (CD 5))
              (-RRB- -RRB-))
            (NN v5) (NNS l2))
          (PRN (-LRB- -LRB-)
            (NP (CD 6))
            (-RRB- -RRB-))
          (NP (NNP Figure) (CD 2)))
        (: :)
        (NP
          (NP (DT A) (JJ directed) (NN graph))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ specifies)
                (NP (DT a) (JJ partial) (NN order))
                (PP (IN on)
                  (NP
                    (NP (DT the) (JJ local) (NNS states))
                    (PP (IN for)
                      (NP
                        (NP
                          (NP (DT the) (JJ MAPF-DP) (NN instance))
                          (PP (IN from)
                            (NP (NNP Figure) (CD 1))))
                        (CC and)
                        (NP
                          (NP (PRP$ its) (JJ valid) (JJ MAPF-DP) (NN plan))
                          (NP
                            (NP (NNP l1) (NNP =) (CD v3) (, ,) (CD v1) (, ,) (CD v3) (, ,) (CD v1) (, ,) (CD v1) (, ,) (CD v1) (, ,) (CD v3) (, ,) (CD v4))
                            (CC and)
                            (NP (NNP l2) (NNP =) (CD v2) (, ,) (CD v2) (, ,) (CD v2) (, ,) (CD v2) (, ,) (CD v3) (, ,) (CD v4) (, ,) (CD v5))))))))))))))
    (. .)))

amod(l2-5, l1-1)
appos(l2-5, 1-3)
nsubjpass(implied-14, l2-5)
appos(l2-5, 4-7)
case(example-11, for-10)
nmod:for(l2-5, example-11)
auxpass(implied-14, is-13)
root(ROOT-0, implied-14)
case(l2-28, by-15)
amod(l2-28, l1-16)
dep(l1-16, 1-18)
amod(l2-28, l1-20)
appos(l2-28, 2-22)
compound(l2-28, l1-24)
appos(l2-28, 3-26)
nmod:agent(implied-14, l2-28)
appos(l2-28, 4-30)
cc(implied-14, and-32)
conj:and(implied-14, can-33)
advmod(can-33, thus-34)
amod(l2-106, v3-35)
amod(l2-106, l1-36)
appos(l2-106, 0-38)
compound(l2-106, v1-40)
amod(l2-106, l1-41)
appos(l2-106, 1-43)
compound(l2-106, v3-45)
amod(l2-106, l1-46)
appos(l2-106, 2-48)
compound(l2-106, v1-50)
amod(l2-106, l1-51)
appos(l2-106, 3-53)
compound(l2-106, v1-55)
amod(l2-106, l1-56)
appos(l2-106, 4-58)
compound(l2-106, v1-60)
amod(l2-106, l1-61)
appos(l2-106, 5-63)
compound(l2-106, v3-65)
amod(l2-106, l1-66)
appos(l2-106, 6-68)
compound(l2-106, v4-70)
amod(l2-106, l1-71)
appos(l2-106, 7-73)
compound(l2-106, v2-75)
amod(l2-106, l2-76)
appos(l2-106, 0-78)
compound(l2-106, v2-80)
amod(l2-106, l2-81)
appos(l2-106, 1-83)
compound(l2-106, v2-85)
amod(l2-106, l2-86)
appos(l2-106, 2-88)
compound(l2-106, v2-90)
amod(l2-106, l2-91)
appos(l2-106, 3-93)
compound(l2-106, v3-95)
amod(l2-106, l2-96)
appos(l2-106, 4-98)
compound(l2-106, v4-100)
amod(l2-106, l2-101)
appos(l2-106, 5-103)
compound(l2-106, v5-105)
dobj(implied-14, l2-106)
appos(l2-106, 6-108)
dep(l2-106, Figure-110)
nummod(Figure-110, 2-111)
det(graph-115, A-113)
amod(graph-115, directed-114)
dep(l2-106, graph-115)
nsubj(specifies-117, graph-115)
ref(graph-115, that-116)
acl:relcl(graph-115, specifies-117)
det(order-120, a-118)
amod(order-120, partial-119)
dobj(specifies-117, order-120)
case(states-124, on-121)
det(states-124, the-122)
amod(states-124, local-123)
nmod:on(specifies-117, states-124)
case(instance-128, for-125)
det(instance-128, the-126)
amod(instance-128, MAPF-DP-127)
nmod:for(states-124, instance-128)
case(Figure-130, from-129)
nmod:from(instance-128, Figure-130)
nummod(Figure-130, 1-131)
cc(instance-128, and-132)
nmod:poss(plan-136, its-133)
amod(plan-136, valid-134)
amod(plan-136, MAPF-DP-135)
nmod:for(states-124, plan-136)
conj:and(instance-128, plan-136)
compound(=-138, l1-137)
dep(plan-136, =-138)
nummod(=-138, v3-139)
nummod(=-138, v1-141)
nummod(=-138, v3-143)
nummod(=-138, v1-145)
nummod(=-138, v1-147)
nummod(=-138, v1-149)
nummod(=-138, v3-151)
nummod(=-138, v4-153)
cc(=-138, and-154)
compound(=-156, l2-155)
dep(plan-136, =-156)
conj:and(=-138, =-156)
nummod(=-156, v2-157)
nummod(=-156, v2-159)
nummod(=-156, v2-161)
nummod(=-156, v2-163)
nummod(=-156, v3-165)
nummod(=-156, v4-167)
nummod(=-156, v5-169)

(ROOT
  (S
    (NP
      (NP (JJ v3) (NNS l1))
      (PRN (-LRB- -LRB-)
        (NP (CD 0))
        (-RRB- -RRB-)))
    (VP (VBP li)
      (SBAR
        (S
          (NP
            (NP
              (LST (-LRB- -LRB-) (LS x) (-RRB- -RRB-))
              (VBN =) (NN lj))
            (PRN (-LRB- -LRB-)
              (NP (NNP y)
                (QP (CD +) (CD 1)))
              (-RRB- -RRB-)))
          (VP (VBZ =)
            (NP
              (NP
                (NP (NN lj))
                (PRN (-LRB- -LRB-)
                  (NP
                    (QP ($ x) (CD +) (CD 1)))
                  (-RRB- -RRB-)))
              (, ,)
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (VBZ is)
                    (NP
                      (NP (DT a) (NN contradiction))
                      (PP (IN with)
                        (NP (DT the) (NNP State) (NNP Property))))))))))))
    (. .)))

amod(l1-2, v3-1)
nsubj(li-6, l1-2)
appos(l1-2, 0-4)
root(ROOT-0, li-6)
dep(lj-11, x-8)
amod(lj-11, =-10)
nsubj(=-17, lj-11)
appos(lj-11, y-13)
compound(1-15, +-14)
nummod(y-13, 1-15)
ccomp(li-6, =-17)
dobj(=-17, lj-18)
nsubj(contradiction-28, lj-18)
dep(lj-18, x-20)
compound(1-22, +-21)
nummod(x-20, 1-22)
ref(lj-18, which-25)
cop(contradiction-28, is-26)
det(contradiction-28, a-27)
acl:relcl(lj-18, contradiction-28)
case(Property-32, with-29)
det(Property-32, the-30)
compound(Property-32, State-31)
nmod:with(contradiction-28, Property-32)

(ROOT
  (S
    (NP
      (NP (NNP Case))
      (SBAR
        (S
          (S
            (LST (LS 2) (-RRB- -RRB-))
            (SBAR (IN If)
              (S
                (NP (SYM x))
                (VP (VBZ <)
                  (NP (NN y)))))
            (, ,)
            (NP
              (NP
                (NP
                  (ADJP
                    (ADJP (RB then) (JJ li))
                    (PRN (-LRB- -LRB-)
                      (ADJP
                        (QP ($ x) (CD +) (CD 1)))
                      (-RRB- -RRB-)))
                  (NN lj))
                (PRN (-LRB- -LRB-)
                  (NP
                    (QP (CD y) (CD +1)))
                  (-RRB- -RRB-)))
              (PP (VBG according)
                (PP (TO to)
                  (NP
                    (NP (NNP Property) (CD 2))
                    (PP (IN of)
                      (NP (DT the) (JJ partial) (NN order)))))))
            (ADVP (RB since))
            (VP (VBP li)
              (NP
                (NP
                  (LST (-LRB- -LRB-) (LS x) (-RRB- -RRB-))
                  (VBN =) (NN lj))
                (PRN (-LRB- -LRB-)
                  (NP
                    (QP (CD y) (CD +1)))
                  (-RRB- -RRB-)))
              (PP (VBG according)
                (PP (TO to)
                  (NP (PRP$ our) (NN edge) (NN collision) (NN assumption))))))
          (CC and)
          (S
            (NP (SYM x))
            (ADJP (JJ <))))))
    (VP (VBP y)
      (PP (VBG according)
        (PP (TO to)
          (NP (DT the) (NN case) (NN assumption)))))
    (. .)))

nsubj(y-49, Case-1)
dep(li-30, 2-2)
mark(<-6, If-4)
nsubj(<-6, x-5)
advcl(li-30, <-6)
dobj(<-6, y-7)
advmod(li-10, then-9)
amod(lj-16, li-10)
dep(li-10, x-12)
compound(1-14, +-13)
nummod(x-12, 1-14)
nsubj(li-30, lj-16)
nsubj(<-48, lj-16)
compound(+1-19, y-18)
dep(lj-16, +1-19)
case(Property-23, according-21)
mwe(according-21, to-22)
nmod:according_to(lj-16, Property-23)
nummod(Property-23, 2-24)
case(order-28, of-25)
det(order-28, the-26)
amod(order-28, partial-27)
nmod:of(Property-23, order-28)
advmod(li-30, since-29)
acl:relcl(Case-1, li-30)
dep(lj-35, x-32)
amod(lj-35, =-34)
dobj(li-30, lj-35)
compound(+1-38, y-37)
dep(lj-35, +1-38)
case(assumption-45, according-40)
mwe(according-40, to-41)
nmod:poss(assumption-45, our-42)
compound(assumption-45, edge-43)
compound(assumption-45, collision-44)
nmod:according_to(li-30, assumption-45)
cc(li-30, and-46)
dep(<-48, x-47)
acl:relcl(Case-1, <-48)
conj:and(li-30, <-48)
root(ROOT-0, y-49)
case(assumption-54, according-50)
mwe(according-50, to-51)
det(assumption-54, the-52)
compound(assumption-54, case-53)
nmod:according_to(y-49, assumption-54)

(ROOT
  (S
    (ADVP (RB Thus))
    (, ,)
    (NP (NN agent) (NN aj))
    (VP (MD can)
      (VP (VB leave)
        (NP (JJ local) (NN state) (NN y))
        (ADVP (RB only))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (NN agent) (NNS ai))
            (VP (VBZ reaches)
              (NP
                (NP (JJ local) (NN state))
                (SBAR
                  (S
                    (NP (SYM x))
                    (VP (VBZ +)
                      (NP
                        (NP (CD 1))
                        (, ,)
                        (SBAR
                          (WHNP (WDT which))
                          (S
                            (VP (VBZ is)
                              (NP
                                (NP (DT a) (NN contradiction))
                                (PP (IN with)
                                  (NP (DT the) (NN edge) (NN collision) (NN assumption)))))))))))))))))
    (. .)))

advmod(leave-6, Thus-1)
compound(aj-4, agent-3)
nsubj(leave-6, aj-4)
aux(leave-6, can-5)
root(ROOT-0, leave-6)
amod(y-9, local-7)
compound(y-9, state-8)
dobj(leave-6, y-9)
advmod(leave-6, only-10)
advmod(reaches-14, when-11)
compound(ai-13, agent-12)
nsubj(reaches-14, ai-13)
advcl(leave-6, reaches-14)
amod(state-16, local-15)
dobj(reaches-14, state-16)
nsubj(contradiction-24, state-16)
nsubj(+-18, x-17)
acl:relcl(state-16, +-18)
dobj(+-18, 1-19)
nsubj(contradiction-24, 1-19)
ref(state-16, which-21)
ref(1-19, which-21)
cop(contradiction-24, is-22)
det(contradiction-24, a-23)
acl:relcl(1-19, contradiction-24)
case(assumption-29, with-25)
det(assumption-29, the-26)
compound(assumption-29, edge-27)
compound(assumption-29, collision-28)
nmod:with(contradiction-24, assumption-29)

(ROOT
  (S
    (NP
      (NP
        (NP (JJ v1) (JJ l1)
          (PRN (-LRB- -LRB-)
            (NP (CD 1))
            (-RRB- -RRB-))
          (NN v3) (JJ l1)
          (PRN (-LRB- -LRB-)
            (NP (CD 2))
            (-RRB- -RRB-))
          (NN v1) (JJ l1)
          (PRN (-LRB- -LRB-)
            (NP (CD 3))
            (-RRB- -RRB-))
          (NN v1) (JJ l1)
          (PRN (-LRB- -LRB-)
            (NP (CD 4))
            (-RRB- -RRB-))
          (NN v1) (JJ l1)
          (PRN (-LRB- -LRB-)
            (NP (CD 5))
            (-RRB- -RRB-))
          (NN v3) (JJ l1)
          (PRN (-LRB- -LRB-)
            (NP (CD 6))
            (-RRB- -RRB-))
          (NN v4) (NNS l1))
        (PRN (-LRB- -LRB-)
          (NP (CD 7))
          (-RRB- -RRB-)))
      (SBAR
        (S
          (NP
            (NP (NNP Approximate) (NNP Minimization))
            (PP (IN in)
              (NP (NNP Expectation) (NNPS MCPs))))
          (VP (VBP are)
            (NP
              (NP (JJ robust) (JJ plan-execution) (NNS policies))
              (PP (IN for)
                (NP (JJ valid) (NNP MAPFDP) (NNS plans)))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBP do) (RB not)
                    (VP
                      (VP (VB stop)
                        (NP (NNS agents))
                        (ADVP (RB unnecessarily)))
                      (CC and)
                      (VP (VB result)
                        (PP (IN in)
                          (NP (JJ few)))))))))))))
    (VP (VBD sent)
      (NP (NNS messages)))
    (. .)))

amod(l1-32, v1-1)
amod(l1-32, l1-2)
appos(l1-32, 1-4)
compound(l1-32, v3-6)
amod(l1-32, l1-7)
appos(l1-32, 2-9)
compound(l1-32, v1-11)
amod(l1-32, l1-12)
appos(l1-32, 3-14)
compound(l1-32, v1-16)
amod(l1-32, l1-17)
appos(l1-32, 4-19)
compound(l1-32, v1-21)
amod(l1-32, l1-22)
appos(l1-32, 5-24)
compound(l1-32, v3-26)
amod(l1-32, l1-27)
appos(l1-32, 6-29)
compound(l1-32, v4-31)
nsubj(stop-52, l1-32)
nsubj(result-56, l1-32)
nsubj(sent-59, l1-32)
appos(l1-32, 7-34)
compound(Minimization-37, Approximate-36)
nsubj(policies-44, Minimization-37)
case(MCPs-40, in-38)
compound(MCPs-40, Expectation-39)
nmod:in(Minimization-37, MCPs-40)
cop(policies-44, are-41)
amod(policies-44, robust-42)
amod(policies-44, plan-execution-43)
acl:relcl(l1-32, policies-44)
nsubj(stop-52, policies-44)
case(plans-48, for-45)
amod(plans-48, valid-46)
compound(plans-48, MAPFDP-47)
nmod:for(policies-44, plans-48)
ref(l1-32, that-49)
ref(policies-44, that-49)
aux(stop-52, do-50)
neg(stop-52, not-51)
acl:relcl(policies-44, stop-52)
dobj(stop-52, agents-53)
advmod(stop-52, unnecessarily-54)
cc(stop-52, and-55)
acl:relcl(policies-44, result-56)
conj:and(stop-52, result-56)
case(few-58, in-57)
nmod:in(result-56, few-58)
root(ROOT-0, sent-59)
dobj(sent-59, messages-60)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP present)
      (NP
        (NP (DT a) (JJ MAPF-DP) (NN solver))
        (, ,)
        (VP (VBN called)
          (NP
            (NP (NNP Approximate) (NNP Minimization))
            (PP (IN in)
              (NP
                (NP (NNP Expectation))
                (PRN (-LRB- -LRB-)
                  (NP (NNP AME))
                  (-RRB- -RRB-))))))
        (, ,)
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ determines)
              (SBAR
                (S
                  (NP (JJ valid) (NNS MAPF-DP))
                  (VP (VBZ plans)
                    (SBAR (RB so) (IN that)
                      (S
                        (NP
                          (NP (PRP$ their) (NN combination))
                          (PP (IN with)
                            (NP (NNP MCPs))))
                        (VP (VBZ results)
                          (PP (IN in)
                            (NP (JJ small) (JJ average) (NNS makespans))))))))))))))
    (. .)))

nsubj(present-2, We-1)
root(ROOT-0, present-2)
det(solver-5, a-3)
amod(solver-5, MAPF-DP-4)
dobj(present-2, solver-5)
nsubj(determines-17, solver-5)
acl(solver-5, called-7)
compound(Minimization-9, Approximate-8)
dobj(called-7, Minimization-9)
case(Expectation-11, in-10)
nmod:in(Minimization-9, Expectation-11)
appos(Expectation-11, AME-13)
ref(solver-5, that-16)
acl:relcl(solver-5, determines-17)
amod(MAPF-DP-19, valid-18)
nsubj(plans-20, MAPF-DP-19)
ccomp(determines-17, plans-20)
mark(results-27, so-21)
mwe(so-21, that-22)
nmod:poss(combination-24, their-23)
nsubj(results-27, combination-24)
case(MCPs-26, with-25)
nmod:with(combination-24, MCPs-26)
advcl(plans-20, results-27)
case(makespans-31, in-28)
amod(makespans-31, small-29)
amod(makespans-31, average-30)
nmod:in(results-27, makespans-31)

(ROOT
  (S
    (NP (NNP AME))
    (VP (VBZ is)
      (NP
        (NP (DT a) (JJ 2-level) (NNP MAPF-DP) (NN solver))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ is)
              (VP (VBN based)
                (PP (IN on)
                  (NP
                    (NP
                      (NP (JJ Conflict-Based) (NNS Search))
                      (PRN (-LRB- -LRB-)
                        (NP (NNP CBS))
                        (-RRB- -RRB-)))
                    (PRN (-LRB- -LRB-)
                      (NP
                        (NP (NNP Sharon))
                        (CC et)
                        (NP (NN al.) (CD 2015)))
                      (-RRB- -RRB-))))))))))
    (. .)))

nsubj(solver-6, AME-1)
cop(solver-6, is-2)
det(solver-6, a-3)
amod(solver-6, 2-level-4)
compound(solver-6, MAPF-DP-5)
root(ROOT-0, solver-6)
nsubjpass(based-9, solver-6)
ref(solver-6, that-7)
auxpass(based-9, is-8)
acl:relcl(solver-6, based-9)
case(Search-12, on-10)
amod(Search-12, Conflict-Based-11)
nmod:on(based-9, Search-12)
appos(Search-12, CBS-14)
dep(Search-12, Sharon-17)
cc(Sharon-17, et-18)
dep(Search-12, al.-19)
conj:et(Sharon-17, al.-19)
nummod(al.-19, 2015-20)

(ROOT
  (S
    (NP (PRP$ Its) (JJ highlevel) (NN search))
    (VP (VBZ imposes)
      (NP (NNS constraints))
      (PP (IN on)
        (NP
          (NP (DT the) (JJ low-level) (NN search))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VB resolve)
                (NP
                  (NP (NNS violations))
                  (PP (IN of)
                    (NP
                      (NP (NNP Properties) (CD 1)
                        (CC and)
                        (CD 2))
                      (PP (IN of)
                        (NP (NNP Definition) (CD 1)))
                      (PRN (-LRB- -LRB-)
                        (VP (VBN called)
                          (NP (NNS conflicts)))
                        (-RRB- -RRB-)))))))))))
    (. .)))

nmod:poss(search-3, Its-1)
amod(search-3, highlevel-2)
nsubj(imposes-4, search-3)
root(ROOT-0, imposes-4)
dobj(imposes-4, constraints-5)
case(search-9, on-6)
det(search-9, the-7)
amod(search-9, low-level-8)
nmod:on(imposes-4, search-9)
nsubj(resolve-11, search-9)
ref(search-9, that-10)
acl:relcl(search-9, resolve-11)
dobj(resolve-11, violations-12)
case(Properties-14, of-13)
nmod:of(violations-12, Properties-14)
nummod(Properties-14, 1-15)
cc(Properties-14, and-16)
nmod:of(violations-12, 2-17)
conj:and(Properties-14, 2-17)
case(Definition-19, of-18)
nmod:of(Properties-14, Definition-19)
nummod(Definition-19, 1-20)
dep(Properties-14, called-22)
dobj(called-22, conflicts-23)

(ROOT
  (S
    (NP (PRP$ Its) (JJ low-level) (NN search))
    (VP (VBZ plans)
      (NP
        (NP (NNS paths))
        (PP (IN for)
          (NP (JJ single) (NNS agents)))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP
              (VP (VB obey)
                (NP (DT these) (NNS constraints)))
              (CC and)
              (VP (VB result)
                (PP (IN in)
                  (NP (JJ small) (JJ average) (NNS makespans)))))))))
    (. .)))

nmod:poss(search-3, Its-1)
amod(search-3, low-level-2)
nsubj(plans-4, search-3)
root(ROOT-0, plans-4)
dobj(plans-4, paths-5)
nsubj(obey-10, paths-5)
nsubj(result-14, paths-5)
case(agents-8, for-6)
amod(agents-8, single-7)
nmod:for(paths-5, agents-8)
ref(paths-5, that-9)
acl:relcl(paths-5, obey-10)
det(constraints-12, these-11)
dobj(obey-10, constraints-12)
cc(obey-10, and-13)
acl:relcl(paths-5, result-14)
conj:and(obey-10, result-14)
case(makespans-18, in-15)
amod(makespans-18, small-16)
amod(makespans-18, average-17)
nmod:in(result-14, makespans-18)

(ROOT
  (S
    (NP
      (NP (DT The) (JJ average) (NN makespan))
      (PP (IN of)
        (NP (DT a) (NNP MAPF-DP) (NN plan))))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN expectation))
        (PP (IN of)
          (NP
            (NP (DT the) (NN maximum))
            (PP (IN of)
              (NP
                (PRN (-LRB- -LRB-)
                  (NP
                    (QP (CD one)
                      (CC or)
                      (JJR more)))
                  (-RRB- -RRB-))
                (JJ random) (NNS variables)))))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBP represent)
              (SBAR
                (S
                  (NP (DT the) (NN time))
                  (VP (VBZ steps)
                    (SBAR
                      (WHADVP (WRB when))
                      (S
                        (NP (DT all) (NNS agents))
                        (VP (VBP enter)
                          (NP (PRP$ their) (JJ last) (JJ local) (NNS states)))))))))))))
    (. .)))

det(makespan-3, The-1)
amod(makespan-3, average-2)
nsubj(expectation-10, makespan-3)
case(plan-7, of-4)
det(plan-7, a-5)
compound(plan-7, MAPF-DP-6)
nmod:of(makespan-3, plan-7)
cop(expectation-10, is-8)
det(expectation-10, the-9)
root(ROOT-0, expectation-10)
nsubj(represent-23, expectation-10)
case(maximum-13, of-11)
det(maximum-13, the-12)
nmod:of(expectation-10, maximum-13)
case(variables-21, of-14)
dep(variables-21, one-16)
cc(one-16, or-17)
conj:or(one-16, more-18)
dep(variables-21, more-18)
amod(variables-21, random-20)
nmod:of(maximum-13, variables-21)
ref(expectation-10, that-22)
acl:relcl(expectation-10, represent-23)
det(time-25, the-24)
nsubj(steps-26, time-25)
ccomp(represent-23, steps-26)
advmod(enter-30, when-27)
det(agents-29, all-28)
nsubj(enter-30, agents-29)
advcl(steps-26, enter-30)
nmod:poss(states-34, their-31)
amod(states-34, last-32)
amod(states-34, local-33)
dobj(enter-30, states-34)

(ROOT
  (S
    (ADVP (RB Moreover))
    (, ,)
    (NP
      (NP (DT the) (JJ average) (NN time) (NN step))
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (DT an) (NN agent))
          (VP (VBZ enters)
            (NP (DT a) (JJ local) (NN state))))))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN expectation))
        (PP (IN of)
          (NP
            (NP (DT the) (NN maximum))
            (PP (IN of)
              (NP (JJ random) (NNS variables))))))
      (ADVP (RB as) (RB well)))
    (. .)))

advmod(expectation-16, Moreover-1)
det(step-6, the-3)
amod(step-6, average-4)
compound(step-6, time-5)
nsubj(expectation-16, step-6)
advmod(enters-10, when-7)
det(agent-9, an-8)
nsubj(enters-10, agent-9)
acl:relcl(step-6, enters-10)
det(state-13, a-11)
amod(state-13, local-12)
dobj(enters-10, state-13)
cop(expectation-16, is-14)
det(expectation-16, the-15)
root(ROOT-0, expectation-16)
case(maximum-19, of-17)
det(maximum-19, the-18)
nmod:of(expectation-16, maximum-19)
case(variables-22, of-20)
amod(variables-22, random-21)
nmod:of(maximum-19, variables-22)
advmod(expectation-16, as-23)
mwe(as-23, well-24)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADVP (RB often))
      (ADJP (JJ difficult)
        (S
          (VP (TO to)
            (VP (VB obtain)
              (NP
                (NP (JJ good) (JJ closed-form) (NNS approximations))
                (PP (IN of)
                  (NP
                    (NP (DT the) (NN expectation))
                    (PP (IN of)
                      (NP
                        (NP (DT the) (NN maximum))
                        (PP (IN of)
                          (NP (JJ random) (NNS variables)))))))))))))
    (. .)))

nsubj(difficult-4, It-1)
nsubj:xsubj(obtain-6, It-1)
cop(difficult-4, is-2)
advmod(difficult-4, often-3)
root(ROOT-0, difficult-4)
mark(obtain-6, to-5)
xcomp(difficult-4, obtain-6)
amod(approximations-9, good-7)
amod(approximations-9, closed-form-8)
dobj(obtain-6, approximations-9)
case(expectation-12, of-10)
det(expectation-12, the-11)
nmod:of(approximations-9, expectation-12)
case(maximum-15, of-13)
det(maximum-15, the-14)
nmod:of(expectation-12, maximum-15)
case(variables-18, of-16)
amod(variables-18, random-17)
nmod:of(maximum-15, variables-18)

(ROOT
  (S
    (NP (NNP AME))
    (ADVP (RB thus))
    (VP (VBZ approximates)
      (NP (PRP it))
      (PP (IN with)
        (NP
          (NP (DT the) (NN maximum))
          (PP (IN over)
            (NP
              (NP (DT the) (NNS expectations))
              (PP (IN of)
                (NP
                  (NP (DT the) (JJ random) (NNS variables))
                  (, ,)
                  (SBAR
                    (WHNP (WDT which))
                    (S
                      (ADVP (RB typically))
                      (VP (VBZ results)
                        (PP (IN in)
                          (NP (DT an) (NN underestimate) (IN but)))
                        (, ,)
                        (PP (VBG according)
                          (PP (TO to)
                            (NP
                              (NP (PRP$ our) (JJ experimental) (NNS results))
                              (, ,)
                              (NP (DT a) (JJ close) (NN approximation)))))))))))))))
    (. .)))

nsubj(approximates-3, AME-1)
advmod(approximates-3, thus-2)
root(ROOT-0, approximates-3)
dobj(approximates-3, it-4)
case(maximum-7, with-5)
det(maximum-7, the-6)
nmod:with(approximates-3, maximum-7)
case(expectations-10, over-8)
det(expectations-10, the-9)
nmod:over(maximum-7, expectations-10)
case(variables-14, of-11)
det(variables-14, the-12)
amod(variables-14, random-13)
nmod:of(expectations-10, variables-14)
nsubj(results-18, variables-14)
ref(variables-14, which-16)
advmod(results-18, typically-17)
acl:relcl(variables-14, results-18)
case(underestimate-21, in-19)
det(underestimate-21, an-20)
nmod:in(results-18, underestimate-21)
amod(underestimate-21, but-22)
case(results-28, according-24)
mwe(according-24, to-25)
nmod:poss(results-28, our-26)
amod(results-28, experimental-27)
nmod:according_to(results-18, results-28)
det(approximation-32, a-30)
amod(approximation-32, close-31)
appos(results-28, approximation-32)

(ROOT
  (NP
    (NP
      (NP
        (NP
          (NP (DT The) (JJ approximate) (JJ average) (NN time) (NN step) (NN li))
          (-LRB- -LRB-)
          (NP (SYM x))
          (-RRB- -RRB-))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (NN agent) (NNS ai))
            (VP (VBZ enters)
              (NP
                (NP (DT a) (JJ local) (NN state))
                (SBAR
                  (S
                    (S
                      (NP
                        (NP (SYM x))
                        (PP (IN for)
                          (NP (DT a) (VBN given) (NNP MAPF-DP) (NN plan))))
                      (VP (VBZ is)
                        (NP
                          (NP (CD 0))
                          (PP (IN for)
                            (NP
                              (NP (SYM x))
                              (SBAR
                                (S
                                  (VP (SYM =)
                                    (NP (CD 0))))))))))
                    (CC and)
                    (S
                      (NP
                        (NP (NNP max) (-LRB- -LRB-) (NNP li))
                        (PRN (-LRB- -LRB-)
                          (NP
                            (NP (SYM x))
                            (: -)
                            (NP (CD 1)))
                          (-RRB- -RRB-))
                        (, ,)
                        (NP
                          (NP (NNP maxj))
                          (, ,)
                          (NP
                            (NP (SYM x))
                            (SBAR
                              (S
                                (VP (SYM =)
                                  (NP (NNS maxj)))))))
                        (, ,)
                        (NP
                          (NP (SYM x))
                          (: :)
                          (NP (FW i) (FW =) (NN j)))
                        (, ,)
                        (NP
                          (NP (SYM x))
                          (RRC
                            (ADVP (RB <))
                            (NP (SYM x))))
                        (, ,))
                      (VP (VBP lj)
                        (S (-LRB- -LRB-)
                          (NP (SYM x))
                          (-RRB- -RRB-)
                          (VP (VB li)
                            (S (-LRB- -LRB-)
                              (NP (SYM x))
                              (-RRB- -RRB-)
                              (NP (-LRB- -LRB-) (NNP lj) (-LRB- -LRB-) (NNP x) (NNP v2) (CD l2))))))))))))))
      (PRN (-LRB- -LRB-)
        (NP (CD 0))
        (-RRB- -RRB-)))
    (NP
      (NP (JJ v2) (JJ l2)
        (PRN (-LRB- -LRB-)
          (NP (CD 1))
          (-RRB- -RRB-))
        (NN v2) (JJ l2)
        (PRN (-LRB- -LRB-)
          (NP (CD 2))
          (-RRB- -RRB-))
        (NN v2) (JJ l2)
        (PRN (-LRB- -LRB-)
          (NP (CD 3))
          (-RRB- -RRB-))
        (NN v3) (JJ l2)
        (PRN (-LRB- -LRB-)
          (NP (CD 4))
          (-RRB- -RRB-))
        (NN v4) (JJ l2)
        (PRN (-LRB- -LRB-)
          (NP (CD 5))
          (-RRB- -RRB-))
        (NN v5) (NNS l2))
      (PRN (-LRB- -LRB-)
        (NP (CD 6))
        (-RRB- -RRB-))
      (NP (NNP Figure) (CD 3)))
    (: :)
    (NP
      (NP (DT The) (JJ transitive) (NN reduction))
      (PP (IN for)
        (NP (NNP Figure) (CD 2))))
    (. .)))

det(li-6, The-1)
amod(li-6, approximate-2)
amod(li-6, average-3)
compound(li-6, time-4)
compound(li-6, step-5)
root(ROOT-0, li-6)
dep(li-6, x-8)
advmod(enters-13, when-10)
compound(ai-12, agent-11)
nsubj(enters-13, ai-12)
acl:relcl(li-6, enters-13)
det(state-16, a-14)
amod(state-16, local-15)
dobj(enters-13, state-16)
nsubj(0-24, x-17)
case(plan-22, for-18)
det(plan-22, a-19)
amod(plan-22, given-20)
compound(plan-22, MAPF-DP-21)
nmod:for(x-17, plan-22)
cop(0-24, is-23)
acl:relcl(state-16, 0-24)
case(x-26, for-25)
nmod:for(0-24, x-26)
dep(0-28, =-27)
acl:relcl(x-26, 0-28)
cc(0-24, and-29)
compound(li-32, max-30)
nsubj(lj-55, li-32)
dep(li-32, x-34)
dep(x-34, 1-36)
appos(li-32, maxj-39)
appos(maxj-39, x-41)
dep(maxj-43, =-42)
acl:relcl(x-41, maxj-43)
appos(li-32, x-45)
compound(j-49, i-47)
compound(j-49, =-48)
dep(x-45, j-49)
appos(li-32, x-51)
advmod(x-53, <-52)
acl:relcl(x-51, x-53)
acl:relcl(state-16, lj-55)
conj:and(0-24, lj-55)
nsubj(li-59, x-57)
ccomp(lj-55, li-59)
dep(v2-67, x-61)
compound(v2-67, lj-64)
compound(v2-67, x-66)
xcomp(li-59, v2-67)
nummod(v2-67, l2-68)
appos(li-6, 0-70)
amod(l2-98, v2-72)
amod(l2-98, l2-73)
appos(l2-98, 1-75)
compound(l2-98, v2-77)
amod(l2-98, l2-78)
appos(l2-98, 2-80)
compound(l2-98, v2-82)
amod(l2-98, l2-83)
appos(l2-98, 3-85)
compound(l2-98, v3-87)
amod(l2-98, l2-88)
appos(l2-98, 4-90)
compound(l2-98, v4-92)
amod(l2-98, l2-93)
appos(l2-98, 5-95)
compound(l2-98, v5-97)
dep(li-6, l2-98)
appos(l2-98, 6-100)
dep(l2-98, Figure-102)
nummod(Figure-102, 3-103)
det(reduction-107, The-105)
amod(reduction-107, transitive-106)
dep(li-6, reduction-107)
case(Figure-109, for-108)
nmod:for(reduction-107, Figure-109)
nummod(Figure-109, 2-110)

(ROOT
  (S
    (VP (VB be)
      (VP (VBN removed)
        (PP (IN from)
          (NP (DT the) (JJ directed) (NN graph)))))
    (. .)))

auxpass(removed-2, be-1)
root(ROOT-0, removed-2)
case(graph-6, from-3)
det(graph-6, the-4)
amod(graph-6, directed-5)
nmod:from(removed-2, graph-6)

(ROOT
  (S
    (NP (NN Figure) (CD 3))
    (VP
      (VP (VBZ shows)
        (NP
          (NP (DT the) (VBG resulting) (JJ transitive) (NN reduction))
          (, ,)
          (SBAR
            (WHNP (WDT which))
            (S
              (VP (VBZ implies)
                (SBAR (IN that)
                  (S
                    (NP (NN agent) (NNS a2))
                    (VP (VBZ has)
                      (S
                        (VP (TO to)
                          (VP (VB wait)
                            (PP (IN in)
                              (NP
                                (NP (JJ local) (NN state))
                                (NP (CD 3))))
                            (SBAR (IN until)
                              (S
                                (NP (PRP it))
                                (VP (VBZ has)
                                  (VP (VBN received)
                                    (NP
                                      (NP (CD one) (NN message))
                                      (PP (IN from)
                                        (NP (NN agent) (NNS a1))))
                                    (PP (IN during)
                                      (NP
                                        (NP (DT the) (NN course))
                                        (PP (IN of)
                                          (NP (NN plan) (NN execution))))))))))))))))))))
      (CC but)
      (VP (MD can) (RB then)
        (VP (VB proceed)
          (PP (IN through)
            (NP (DT all) (JJ future) (JJ local) (NNS states)))
          (PP (IN without)
            (S
              (VP (VBG waiting)))))))
    (. .)))

nsubj(shows-3, Figure-1)
nsubj(proceed-39, Figure-1)
nummod(Figure-1, 3-2)
root(ROOT-0, shows-3)
det(reduction-7, the-4)
amod(reduction-7, resulting-5)
amod(reduction-7, transitive-6)
dobj(shows-3, reduction-7)
nsubj(implies-10, reduction-7)
ref(reduction-7, which-9)
acl:relcl(reduction-7, implies-10)
mark(has-14, that-11)
compound(a2-13, agent-12)
nsubj(has-14, a2-13)
nsubj:xsubj(wait-16, a2-13)
ccomp(implies-10, has-14)
mark(wait-16, to-15)
xcomp(has-14, wait-16)
case(state-19, in-17)
amod(state-19, local-18)
nmod:in(wait-16, state-19)
dep(state-19, 3-20)
mark(received-24, until-21)
nsubj(received-24, it-22)
aux(received-24, has-23)
advcl(wait-16, received-24)
nummod(message-26, one-25)
dobj(received-24, message-26)
case(a1-29, from-27)
compound(a1-29, agent-28)
nmod:from(message-26, a1-29)
case(course-32, during-30)
det(course-32, the-31)
nmod:during(received-24, course-32)
case(execution-35, of-33)
compound(execution-35, plan-34)
nmod:of(course-32, execution-35)
cc(shows-3, but-36)
aux(proceed-39, can-37)
advmod(proceed-39, then-38)
conj:but(shows-3, proceed-39)
case(states-44, through-40)
det(states-44, all-41)
amod(states-44, future-42)
amod(states-44, local-43)
nmod:through(proceed-39, states-44)
mark(waiting-46, without-45)
advcl(proceed-39, waiting-46)

(ROOT
  (S
    (NP
      (NP (NNP Properties))
      (PP (IN of)
        (NP
          (NP (NNPS FSPs)
            (CC and)
            (NNPS MCPs))
          (SBAR
            (S
              (NP (DT Both) (NNPS FSPs)
                (CC and)
                (NNPS MCPs))
              (VP (VBP do) (RB not)
                (VP (VB result)
                  (PP (IN in)
                    (NP (NNS deadlocks)))
                  (PP (IN during)
                    (NP
                      (NP (DT the) (NN plan) (NN execution))
                      (PP (IN of)
                        (NP (JJ valid) (NNS MAPF-DP))))))))))))
    (VP (VBZ plans)
      (SBAR (IN because)
        (S
          (NP (EX there))
          (ADVP (RB always))
          (VP (VBZ exists)
            (NP
              (NP
                (NP
                  (QP (IN at) (JJS least) (CD one))
                  (NN agent))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBZ is)
                      (VP (VBN provided)
                        (NP (DT a) (NNP GO) (NN command))
                        (SBAR (IN before)
                          (S
                            (NP (DT all) (NNS agents))
                            (VP (VBP have)
                              (VP (VBN entered)
                                (NP (PRP$ their) (JJ last) (JJ local) (NNS states)))))))))))
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (RB namely) (DT an) (NN agent))
                  (PP (IN with)
                    (NP
                      (NP (DT the) (JJS smallest) (JJ local) (NN state))
                      (PP (IN among)
                        (NP
                          (NP (DT all) (NNS agents))
                          (SBAR
                            (WHNP (WDT that))
                            (S
                              (VP (VBP have) (RB not)
                                (ADVP (RB yet))
                                (VP (VBN entered)
                                  (NP (PRP$ their) (JJ last) (JJ local) (NNS states))
                                  (SBAR (IN since)
                                    (S
                                      (NP (DT an) (NN agent))
                                      (VP (MD can)
                                        (VP (VB wait)
                                          (ADVP (RB only))
                                          (PP (IN for)
                                            (NP
                                              (NP (JJ other) (NNS agents))
                                              (PP (IN with)
                                                (NP (JJR smaller) (JJ local) (NNS states))))))))))))))))))
                (-RRB- -RRB-)))))))
    (. .)))

nsubj(plans-22, Properties-1)
case(FSPs-3, of-2)
nmod:of(Properties-1, FSPs-3)
cc(FSPs-3, and-4)
nmod:of(Properties-1, MCPs-5)
conj:and(FSPs-3, MCPs-5)
cc:preconj(FSPs-7, Both-6)
nsubj(result-12, FSPs-7)
cc(FSPs-7, and-8)
conj:and(FSPs-7, MCPs-9)
nsubj(result-12, MCPs-9)
aux(result-12, do-10)
neg(result-12, not-11)
acl:relcl(FSPs-3, result-12)
case(deadlocks-14, in-13)
nmod:in(result-12, deadlocks-14)
case(execution-18, during-15)
det(execution-18, the-16)
compound(execution-18, plan-17)
nmod:during(result-12, execution-18)
case(MAPF-DP-21, of-19)
amod(MAPF-DP-21, valid-20)
nmod:of(execution-18, MAPF-DP-21)
root(ROOT-0, plans-22)
mark(exists-26, because-23)
expl(exists-26, there-24)
advmod(exists-26, always-25)
advcl(plans-22, exists-26)
case(least-28, at-27)
nmod:npmod(one-29, least-28)
nummod(agent-30, one-29)
dobj(exists-26, agent-30)
nsubjpass(provided-33, agent-30)
ref(agent-30, that-31)
auxpass(provided-33, is-32)
acl:relcl(agent-30, provided-33)
det(command-36, a-34)
compound(command-36, GO-35)
dobj(provided-33, command-36)
mark(entered-41, before-37)
det(agents-39, all-38)
nsubj(entered-41, agents-39)
aux(entered-41, have-40)
advcl(provided-33, entered-41)
nmod:poss(states-45, their-42)
amod(states-45, last-43)
amod(states-45, local-44)
dobj(entered-41, states-45)
advmod(agent-49, namely-47)
det(agent-49, an-48)
dep(agent-30, agent-49)
case(state-54, with-50)
det(state-54, the-51)
amod(state-54, smallest-52)
amod(state-54, local-53)
nmod:with(agent-49, state-54)
case(agents-57, among-55)
det(agents-57, all-56)
nmod:among(state-54, agents-57)
nsubj(entered-62, agents-57)
ref(agents-57, that-58)
aux(entered-62, have-59)
neg(entered-62, not-60)
advmod(entered-62, yet-61)
acl:relcl(agents-57, entered-62)
nmod:poss(states-66, their-63)
amod(states-66, last-64)
amod(states-66, local-65)
dobj(entered-62, states-66)
mark(wait-71, since-67)
det(agent-69, an-68)
nsubj(wait-71, agent-69)
aux(wait-71, can-70)
advcl(entered-62, wait-71)
advmod(wait-71, only-72)
case(agents-75, for-73)
amod(agents-75, other-74)
nmod:for(wait-71, agents-75)
case(states-79, with-76)
amod(states-79, smaller-77)
amod(states-79, local-78)
nmod:with(agents-75, states-79)

(ROOT
  (S
    (NP (DT Both) (NNPS FSPs)
      (CC and)
      (NNPS MCPs))
    (VP (VBP are)
      (NP
        (NP (JJ robust) (JJ plan-execution) (NNS policies))
        (ADJP (JJ due)
          (PP (TO to)
            (NP (NNP Properties) (CD 1)
              (CC and)
              (CD 2))))
        (PP (IN of)
          (NP (JJ valid) (JJ MAPF-DP) (NNS plans)))))
    (. .)))

cc:preconj(FSPs-2, Both-1)
nsubj(policies-8, FSPs-2)
cc(FSPs-2, and-3)
conj:and(FSPs-2, MCPs-4)
nsubj(policies-8, MCPs-4)
cop(policies-8, are-5)
amod(policies-8, robust-6)
amod(policies-8, plan-execution-7)
root(ROOT-0, policies-8)
amod(policies-8, due-9)
case(Properties-11, to-10)
nmod:to(due-9, Properties-11)
nummod(Properties-11, 1-12)
cc(Properties-11, and-13)
nmod:to(due-9, 2-14)
conj:and(Properties-11, 2-14)
case(plans-18, of-15)
amod(plans-18, valid-16)
amod(plans-18, MAPF-DP-17)
nmod:of(policies-8, plans-18)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB now))
    (VP (VBP provide)
      (NP
        (NP (DT a) (NN proof) (NN sketch))
        (PP (IN for)
          (NP
            (NP (DT the) (NNS robustness))
            (PP (IN of)
              (NP (NNP MCPs)))))))
    (. .)))

nsubj(provide-3, We-1)
advmod(provide-3, now-2)
root(ROOT-0, provide-3)
det(sketch-6, a-4)
compound(sketch-6, proof-5)
dobj(provide-3, sketch-6)
case(robustness-9, for-7)
det(robustness-9, the-8)
nmod:for(sketch-6, robustness-9)
case(MCPs-11, of-10)
nmod:of(robustness-9, MCPs-11)

(ROOT
  (S
    (ADVP (RB First))
    (, ,)
    (VP
      (VP (VB consider)
        (NP (DT a) (JJ valid) (JJ MAPF-DF) (NN plan)))
      (CC and)
      (VP (VB assume)
        (SBAR (IN that)
          (S
            (VP (VBP li)
              (NP
                (NP
                  (LST (-LRB- -LRB-) (LS x) (-RRB- -RRB-))
                  (VBN =) (NN lj))
                (PRN (-LRB- -LRB-)
                  (NP (NN y))
                  (-RRB- -RRB-))
                (SBAR (IN for)
                  (S
                    (NP
                      (NP (CD two) (NNS agents))
                      (SBAR
                        (S
                          (VP
                            (VP (VBP ai))
                            (CC and)
                            (VP (VBP aj)
                              (PP (IN with)
                                (NP (FW i))))))))
                    (VP (SYM =)
                      (NP (NN j)))))))))))
    (. .)))

advmod(consider-3, First-1)
root(ROOT-0, consider-3)
det(plan-7, a-4)
amod(plan-7, valid-5)
amod(plan-7, MAPF-DF-6)
dobj(consider-3, plan-7)
cc(consider-3, and-8)
conj:and(consider-3, assume-9)
mark(li-11, that-10)
ccomp(assume-9, li-11)
dep(lj-16, x-13)
amod(lj-16, =-15)
dobj(li-11, lj-16)
appos(lj-16, y-18)
mark(j-29, for-20)
nummod(agents-22, two-21)
nsubj(j-29, agents-22)
acl:relcl(agents-22, ai-23)
cc(ai-23, and-24)
acl:relcl(agents-22, aj-25)
conj:and(ai-23, aj-25)
case(i-27, with-26)
nmod:with(aj-25, i-27)
dep(j-29, =-28)
dep(lj-16, j-29)

(ROOT
  (S
    (ADVP (RB Then))
    (, ,)
    (S
      (LST (LS 1) (-RRB- -RRB-))
      (NP (NN y) (NNS =))
      (VP (VBD x)
        (PP (IN since)
          (NP (NN li)))
        (NP
          (NP
            (LST (-LRB- -LRB-) (LS x) (-RRB- -RRB-))
            (VBN =) (NN lj))
          (PRN (-LRB- -LRB-)
            (NP (NNP x))
            (-RRB- -RRB-)))
        (PP (VBG according)
          (PP (TO to)
            (NP
              (NP (NNP Property) (CD 1))
              (PP (IN of)
                (NP (NNP Definition) (CD 1))))))))
    (CC and)
    (S
      (LST (LS 2) (-RRB- -RRB-))
      (NP (NN y))
      (VP (VBD =)
        (SBAR
          (S
            (NP (SYM x))
            (ADVP
              (NP (CD +) (CD 1))
              (IN since))
            (VP (VBP lj)
              (S
                (NP
                  (PRN (-LRB- -LRB-)
                    (NP
                      (QP ($ x) (CD +) (CD 1)))
                    (-RRB- -RRB-)))
                (VP (SYM =)
                  (NP (NN li))))
              (PRN (-LRB- -LRB-) (VB x) (-RRB- -RRB-)))))))
    (PP (VBG according)
      (PP (TO to)
        (NP
          (NP (NNP Property) (CD 2))
          (PP (IN of)
            (NP
              (NP (NNP Definition) (CD 1))
              (PRN (-LRB- -LRB-)
                (NP (NNP State) (NNP Property))
                (-RRB- -RRB-)))))))
    (. .)))

advmod(x-7, Then-1)
dep(x-7, 1-3)
compound(=-6, y-5)
nsubj(x-7, =-6)
root(ROOT-0, x-7)
case(li-9, since-8)
nmod:since(x-7, li-9)
dep(lj-14, x-11)
amod(lj-14, =-13)
dobj(x-7, lj-14)
appos(lj-14, x-16)
case(Property-20, according-18)
mwe(according-18, to-19)
nmod:according_to(x-7, Property-20)
nummod(Property-20, 1-21)
case(Definition-23, of-22)
nmod:of(Property-20, Definition-23)
nummod(Definition-23, 1-24)
cc(x-7, and-25)
dep(=-29, 2-26)
nsubj(=-29, y-28)
conj:and(x-7, =-29)
nsubj(lj-34, x-30)
nummod(1-32, +-31)
advmod(lj-34, 1-32)
case(1-32, since-33)
ccomp(=-29, lj-34)
nsubj(li-41, x-36)
compound(1-38, +-37)
nummod(x-36, 1-38)
dep(li-41, =-40)
ccomp(lj-34, li-41)
dep(lj-34, x-43)
case(Property-47, according-45)
mwe(according-45, to-46)
nmod:according_to(x-7, Property-47)
nummod(Property-47, 2-48)
case(Definition-50, of-49)
nmod:of(Property-47, Definition-50)
nummod(Definition-50, 1-51)
compound(Property-54, State-53)
appos(Definition-50, Property-54)

(ROOT
  (S
    (ADVP (LS Second))
    (, ,)
    (NP (PRP we))
    (VP (VBP show)
      (PP (IN by)
        (NP (NN contradiction)))
      (SBAR (IN that)
        (S
          (NP (DT no) (NN vertex) (NNS collisions))
          (VP (MD can)
            (VP (VB occur)
              (PP (IN during)
                (NP (NN plan) (NN execution))))))))
    (. .)))

advmod(show-4, Second-1)
nsubj(show-4, we-3)
root(ROOT-0, show-4)
case(contradiction-6, by-5)
nmod:by(show-4, contradiction-6)
mark(occur-12, that-7)
neg(collisions-10, no-8)
compound(collisions-10, vertex-9)
nsubj(occur-12, collisions-10)
aux(occur-12, can-11)
ccomp(show-4, occur-12)
case(execution-15, during-13)
compound(execution-15, plan-14)
nmod:during(occur-12, execution-15)

(ROOT
  (S
    (S
      (VP (VB Assume)
        (SBAR (IN that)
          (S
            (NP (DT a) (NN vertex) (NN collision))
            (VP (VBZ occurs)
              (PP (IN between)
                (NP (NNS agents))))))))
    (VP
      (VP (VBP ai))
      (CC and)
      (VP (VBP aj)
        (PP (IN with)
          (NP
            (NP (FW i) (FW =) (NN j))
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (NN agent) (NNS ai))
                (VP (VBZ is)
                  (PP (IN in)
                    (NP
                      (NP (JJ local) (NN state))
                      (SBAR
                        (S
                          (NP
                            (NP (SYM x))
                            (CC and)
                            (NP (NN agent) (NN aj)))
                          (VP (VBZ is)
                            (PP (IN in)
                              (NP (JJ local) (NN state) (NN y)))))))))))))))
    (. .)))

csubj(ai-9, Assume-1)
csubj(aj-11, Assume-1)
mark(occurs-6, that-2)
det(collision-5, a-3)
compound(collision-5, vertex-4)
nsubj(occurs-6, collision-5)
ccomp(Assume-1, occurs-6)
case(agents-8, between-7)
nmod:between(occurs-6, agents-8)
root(ROOT-0, ai-9)
cc(ai-9, and-10)
conj:and(ai-9, aj-11)
case(j-15, with-12)
compound(j-15, i-13)
compound(j-15, =-14)
nmod:with(aj-11, j-15)
advmod(state-22, when-16)
compound(ai-18, agent-17)
nsubj(state-22, ai-18)
cop(state-22, is-19)
case(state-22, in-20)
amod(state-22, local-21)
acl:relcl(j-15, state-22)
nsubj(y-31, x-23)
cc(x-23, and-24)
compound(aj-26, agent-25)
conj:and(x-23, aj-26)
nsubj(y-31, aj-26)
cop(y-31, is-27)
case(y-31, in-28)
amod(y-31, local-29)
compound(y-31, state-30)
acl:relcl(state-22, y-31)

(ROOT
  (S
    (VP (VB Assume)
      (PP (IN without)
        (NP
          (NP (NN loss))
          (PP (IN of)
            (NP (NN generality)))))
      (SBAR (IN that)
        (S
          (NP (SYM x))
          (VP (VBP y)))))
    (. .)))

root(ROOT-0, Assume-1)
case(loss-3, without-2)
nmod:without(Assume-1, loss-3)
case(generality-5, of-4)
nmod:of(loss-3, generality-5)
mark(y-8, that-6)
nsubj(y-8, x-7)
ccomp(Assume-1, y-8)

(ROOT
  (FRAG
    (S
      (ADVP (RB Then))
      (, ,)
      (S
        (NP
          (NP
            (NP (JJ li)
              (PRN (-LRB- -LRB-)
                (NP
                  (QP (CD x) (CD +1)))
                (-RRB- -RRB-))
              (NN lj))
            (PRN (-LRB- -LRB-)
              (NP (NN y))
              (-RRB- -RRB-)))
          (PP (VBG according)
            (PP (TO to)
              (NP
                (NP (NNP Property) (CD 2))
                (PP (IN of)
                  (NP (DT the) (JJ partial) (NN order)))))))
        (ADVP (RB since))
        (VP (VBP li)
          (NP
            (NP
              (LST (-LRB- -LRB-) (LS x) (-RRB- -RRB-))
              (VBN =) (NN lj))
            (PRN (-LRB- -LRB-)
              (NP (NN y))
              (-RRB- -RRB-)))
          (PP (VBG according)
            (PP (TO to)
              (NP (PRP$ our) (JJ vertex) (NN collision) (NN assumption))))))
      (CC and)
      (S
        (LST (LS x))
        (NP (NNP <))
        (VP (VBP y))))
    (: -)
    (FRAG
      (NP (CD 1))
      (PP (VBG according)
        (PP (TO to)
          (NP (DT the) (NNP State) (NNP Property)))))
    (. .)))

advmod(li-21, Then-1)
amod(lj-8, li-3)
compound(+1-6, x-5)
dep(lj-8, +1-6)
nsubj(li-21, lj-8)
appos(lj-8, y-10)
case(Property-14, according-12)
mwe(according-12, to-13)
nmod:according_to(lj-8, Property-14)
nummod(Property-14, 2-15)
case(order-19, of-16)
det(order-19, the-17)
amod(order-19, partial-18)
nmod:of(Property-14, order-19)
advmod(li-21, since-20)
dep(1-41, li-21)
dep(lj-26, x-23)
amod(lj-26, =-25)
dobj(li-21, lj-26)
appos(lj-26, y-28)
case(assumption-35, according-30)
mwe(according-30, to-31)
nmod:poss(assumption-35, our-32)
amod(assumption-35, vertex-33)
compound(assumption-35, collision-34)
nmod:according_to(li-21, assumption-35)
cc(li-21, and-36)
dep(y-39, x-37)
nsubj(y-39, <-38)
conj:and(li-21, y-39)
dep(1-41, y-39)
root(ROOT-0, 1-41)
case(Property-46, according-42)
mwe(according-42, to-43)
det(Property-46, the-44)
compound(Property-46, State-45)
nmod:according_to(1-41, Property-46)

(ROOT
  (S
    (ADVP (RB Thus))
    (, ,)
    (NP (NN agent) (NN aj))
    (VP (MD can)
      (VP (VB leave)
        (NP
          (NP (JJ local) (NN state) (NN y))
          (: -)
          (NP
            (NP (CD 1) (RB only))
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (NN agent) (NNS ai))
                (VP (VBZ reaches)
                  (NP
                    (NP (JJ local) (NN state))
                    (SBAR
                      (S
                        (NP (SYM x))
                        (VP (VBZ +)
                          (NP
                            (NP (CD 1))
                            (, ,)
                            (SBAR
                              (WHNP (WDT which))
                              (S
                                (VP (VBZ is)
                                  (NP
                                    (NP (DT a) (NN contradiction))
                                    (PP (IN with)
                                      (NP (DT the) (NN vertex) (NN collision) (NN assumption)))))))))))))))))))
    (. .)))

advmod(leave-6, Thus-1)
compound(aj-4, agent-3)
nsubj(leave-6, aj-4)
aux(leave-6, can-5)
root(ROOT-0, leave-6)
amod(y-9, local-7)
compound(y-9, state-8)
dobj(leave-6, y-9)
dep(y-9, 1-11)
advmod(1-11, only-12)
advmod(reaches-16, when-13)
compound(ai-15, agent-14)
nsubj(reaches-16, ai-15)
acl:relcl(1-11, reaches-16)
amod(state-18, local-17)
dobj(reaches-16, state-18)
nsubj(contradiction-26, state-18)
nsubj(+-20, x-19)
acl:relcl(state-18, +-20)
dobj(+-20, 1-21)
nsubj(contradiction-26, 1-21)
ref(state-18, which-23)
ref(1-21, which-23)
cop(contradiction-26, is-24)
det(contradiction-26, a-25)
acl:relcl(1-21, contradiction-26)
case(assumption-31, with-27)
det(assumption-31, the-28)
compound(assumption-31, vertex-29)
compound(assumption-31, collision-30)
nmod:with(contradiction-26, assumption-31)

(ROOT
  (S
    (ADVP (LS Third))
    (, ,)
    (NP (PRP we))
    (VP (VBP show)
      (PP (IN by)
        (NP (NN contradiction)))
      (SBAR (IN that)
        (S
          (NP (DT no) (NN edge) (NNS collisions))
          (VP (MD can)
            (VP (VB occur)
              (PP (IN during)
                (NP (NN plan) (NN execution))))))))
    (. .)))

advmod(show-4, Third-1)
nsubj(show-4, we-3)
root(ROOT-0, show-4)
case(contradiction-6, by-5)
nmod:by(show-4, contradiction-6)
mark(occur-12, that-7)
neg(collisions-10, no-8)
compound(collisions-10, edge-9)
nsubj(occur-12, collisions-10)
aux(occur-12, can-11)
ccomp(show-4, occur-12)
case(execution-15, during-13)
compound(execution-15, plan-14)
nmod:during(occur-12, execution-15)

(ROOT
  (S
    (VP (VB Assume)
      (SBAR (IN that)
        (S
          (NP
            (NP (DT an) (NN edge) (NN collision))
            (PP (IN between)
              (NP (NNS agents))))
          (VP
            (VP (VBP ai))
            (CC and)
            (VP (VBP aj)
              (SBAR (IN with)
                (S
                  (NP (FW i) (FW =) (NN j))
                  (VP (VBZ occurs)
                    (SBAR
                      (WHADVP (WRB when))
                      (S
                        (NP (NN agent))
                        (VP (VBP ai)
                          (NP (NNS changes)))))))))
            (NP (PRP$ its) (JJ local) (NN state))
            (PP (IN from)
              (NP
                (NP (SYM x))
                (PP (TO to)
                  (NP
                    (NP
                      (NP (SYM x))
                      (NP
                        (QP (CD +) (CD 1))))
                    (CC and)
                    (NP
                      (NP (NN agent) (NN aj) (NNS changes))
                      (NP (PRP$ its) (JJ local) (NN state)))))))
            (PP (IN from)
              (NP (NN y)
                (S
                  (VP (TO to)
                    (VP (VB y)
                      (NP
                        (QP (CD +) (CD 1))))))))))))
    (. .)))

root(ROOT-0, Assume-1)
mark(ai-8, that-2)
det(collision-5, an-3)
compound(collision-5, edge-4)
nsubj(ai-8, collision-5)
nsubj(aj-10, collision-5)
case(agents-7, between-6)
nmod:between(collision-5, agents-7)
ccomp(Assume-1, ai-8)
cc(ai-8, and-9)
ccomp(Assume-1, aj-10)
conj:and(ai-8, aj-10)
mark(occurs-15, with-11)
compound(j-14, i-12)
compound(j-14, =-13)
nsubj(occurs-15, j-14)
advcl(aj-10, occurs-15)
advmod(changes-19, when-16)
nsubj(changes-19, agent-17)
cop(changes-19, ai-18)
advcl(occurs-15, changes-19)
nmod:poss(state-22, its-20)
amod(state-22, local-21)
dobj(ai-8, state-22)
case(x-24, from-23)
nmod:from(ai-8, x-24)
case(x-26, to-25)
nmod:to(x-24, x-26)
compound(1-28, +-27)
dep(x-26, 1-28)
cc(x-26, and-29)
compound(changes-32, agent-30)
compound(changes-32, aj-31)
nmod:to(x-24, changes-32)
conj:and(x-26, changes-32)
nmod:poss(state-35, its-33)
amod(state-35, local-34)
dep(changes-32, state-35)
case(y-37, from-36)
nmod:from(ai-8, y-37)
mark(y-39, to-38)
acl(y-37, y-39)
compound(1-41, +-40)
dobj(y-39, 1-41)

(ROOT
  (S
    (VP (VB Assume)
      (PP (IN without)
        (NP
          (NP (NN loss))
          (PP (IN of)
            (NP (NN generality)))))
      (SBAR (IN that)
        (S
          (NP (SYM x))
          (VP (VBP y)))))
    (. .)))

root(ROOT-0, Assume-1)
case(loss-3, without-2)
nmod:without(Assume-1, loss-3)
case(generality-5, of-4)
nmod:of(loss-3, generality-5)
mark(y-8, that-6)
nsubj(y-8, x-7)
ccomp(Assume-1, y-8)

(ROOT
  (S
    (ADVP (RB Case))
    (S
      (LST (LS 1) (-RRB- -RRB-))
      (SBAR (IN If)
        (PRN
          (NP
            (NP (SYM x))
            (NP
              (NP (NNP =))
              (NP
                (NP (NN y))
                (PRN (, ,)
                  (ADVP (RB then))
                  (NP (NNP i))
                  (-RRB- -RRB-))
                (-RRB- -RRB-))))
          (-RRB- -RRB-))
        (S
          (NP
            (NP
              (NP (JJ +) (NN t))
              (PRN (-LRB- -LRB-)
                (NP (CD 1))
                (-RRB- -RRB-)))
            (: :)
            (NP
              (NP (SYM x))
              (RRC
                (ADVP (RB <))
                (NP (SYM x))))
            (, ,))
          (VP (VBP lj)
            (S (-LRB- -LRB-)
              (NP (SYM x))
              (-RRB- -RRB-)
              (NP
                (NP
                  (NP (NN li))
                  (-LRB- -LRB-)
                  (NP (SYM x))
                  (-RRB- -RRB-) (-LRB- -LRB-)
                  (ADJP
                    (ADJP (JJ lj))
                    (PRN (-LRB- -LRB-)
                      (NP (NNP x))
                      (-RRB- -RRB-)))
                  (-RRB- -RRB-))
                (VP (VBG +)
                  (NP (NN ti))
                  (ADVP (RB otherwise)))))
            (SBAR (IN since)
              (S
                (NP (NN agent))
                (VP (VBP ai)
                  (ADJP (JJ first)
                    (SBAR
                      (S
                        (VP (VBZ enters)
                          (NP (JJ local) (NN state))
                          (FRAG
                            (X
                              (NP (SYM x))
                              (: -)
                              (PP
                                (NP (CD 1))
                                (PP (IN at)
                                  (NP (JJ approximate) (JJ average) (NN time)))))
                            (NP (NN step) (NN li)))))))
                  (PRN (-LRB- -LRB-)
                    (NP
                      (NP (SYM x))
                      (: -)
                      (NP (CD 1)))
                    (-RRB- -RRB-))))))))
      (, ,)
      (ADVP (RB then))
      (VP (MD might)
        (VP (VB have)
          (S
            (VP (TO to)
              (VP (VB wait)
                (SBAR (IN for)
                  (S
                    (NP
                      (NP (NNS messages))
                      (PP (IN from)
                        (NP (JJ other) (NNS agents))))
                    (VP (VBP aj)
                      (SBAR (IN that)
                        (S
                          (NP (PRP they))
                          (VP (VBP send)
                            (SBAR
                              (WHADVP (WRB when))
                              (S
                                (NP (PRP they))
                                (VP (VBP enter)
                                  (S
                                    (NP (PRP$ their) (JJ local) (NNS states))
                                    (NP
                                      (NP (SYM x))
                                      (PP (IN at)
                                        (NP (JJ approximate) (JJ average) (NN time) (NNS steps) (NN lj)))))
                                  (PRN (-LRB- -LRB-) (VB x) (-RRB- -RRB-)))))))))))))))))
    (CC and)
    (S
      (ADVP (RB finally))
      (VP (VBZ has)
        (S
          (VP (TO to)
            (ADVP (RB successfully))
            (VP (VB execute)
              (NP (CD one) (NN action))
              (PRN (-LRB- -LRB-)
                (FRAG
                  (ADVP (RB perhaps))
                  (ADVP (RB repeatedly)))
                (-RRB- -RRB-))
              (S
                (VP (TO to)
                  (VP (VB enter)
                    (NP (JJ local) (NN state)))))))))
      (NP
        (NP (FW i))
        (PP (IN of)
          (NP
            (NP (NN time) (NNS steps))
            (SBAR (IN that)
              (S
                (NP (PRP it))
                (VP (VBZ needs)
                  (PP (IN for)
                    (NP (NNP x))))))))))
    (. .)))

advmod(have-65, Case-1)
dep(have-65, 1-2)
mark(lj-24, If-4)
dep(lj-24, x-5)
dep(x-5, =-6)
dep(=-6, y-7)
dep(i-10, then-9)
dep(y-7, i-10)
amod(t-15, +-14)
nsubj(lj-24, t-15)
appos(t-15, 1-17)
dep(t-15, x-20)
advmod(x-22, <-21)
acl:relcl(x-20, x-22)
dep(have-65, lj-24)
dep(li-28, x-26)
xcomp(lj-24, li-28)
dep(li-28, x-30)
amod(li-28, lj-33)
dep(lj-33, x-35)
acl(li-28, +-38)
dobj(+-38, ti-39)
advmod(+-38, otherwise-40)
mark(first-44, since-41)
nsubj(first-44, agent-42)
cop(first-44, ai-43)
advcl(lj-24, first-44)
ccomp(first-44, enters-45)
amod(state-47, local-46)
dobj(enters-45, state-47)
dep(li-56, x-48)
nmod(x-48, 1-50)
case(time-54, at-51)
amod(time-54, approximate-52)
amod(time-54, average-53)
nmod:at(1-50, time-54)
compound(li-56, step-55)
dep(enters-45, li-56)
dep(first-44, x-58)
dep(x-58, 1-60)
advmod(have-65, then-63)
aux(have-65, might-64)
root(ROOT-0, have-65)
mark(wait-67, to-66)
xcomp(have-65, wait-67)
mark(aj-73, for-68)
nsubj(aj-73, messages-69)
case(agents-72, from-70)
amod(agents-72, other-71)
nmod:from(messages-69, agents-72)
advcl(wait-67, aj-73)
mark(send-76, that-74)
nsubj(send-76, they-75)
ccomp(aj-73, send-76)
advmod(enter-79, when-77)
nsubj(enter-79, they-78)
advcl(send-76, enter-79)
nmod:poss(states-82, their-80)
amod(states-82, local-81)
nsubj(x-83, states-82)
xcomp(enter-79, x-83)
case(lj-89, at-84)
amod(lj-89, approximate-85)
amod(lj-89, average-86)
compound(lj-89, time-87)
compound(lj-89, steps-88)
nmod:at(x-83, lj-89)
dep(enter-79, x-91)
cc(have-65, and-93)
advmod(has-95, finally-94)
conj:and(have-65, has-95)
mark(execute-98, to-96)
advmod(execute-98, successfully-97)
xcomp(has-95, execute-98)
nummod(action-100, one-99)
dobj(execute-98, action-100)
dep(execute-98, perhaps-102)
dep(perhaps-102, repeatedly-103)
mark(enter-106, to-105)
advcl(execute-98, enter-106)
amod(state-108, local-107)
dobj(enter-106, state-108)
dep(has-95, i-109)
case(steps-112, of-110)
compound(steps-112, time-111)
nmod:of(i-109, steps-112)
mark(needs-115, that-113)
nsubj(needs-115, it-114)
dep(steps-112, needs-115)
case(x-117, for-116)
nmod:for(needs-115, x-117)

(ROOT
  (S
    (NP (DT The) (JJ average) (NN number))
    (VP (VBP t)
      (SBAR
        (S
          (NP
            (NP (DT the) (JJ successful) (NN execution))
            (PP (IN of)
              (NP (DT the) (NN action))))
          (VP (VBZ is)
            (NP
              (NP
                (NP (CD 1))
                (PRN (-LRB- -LRB-)
                  (PP (IN for)
                    (NP (DT a) (NN wait) (NN action)))
                  (-RRB- -RRB-))
                (SBAR (IN if)
                  (S
                    (VP (VBP li)
                      (NP
                        (NP
                          (LST (-LRB- -LRB-) (LS x) (-RRB- -RRB-))
                          (VBN =) (NN li))
                        (PRN (-LRB- -LRB-)
                          (NP
                            (NP (SYM x))
                            (: -)
                            (NP (CD 1)))
                          (-RRB- -RRB-)))))))
              (CC and)
              (NP
                (NP
                  (NP
                    (NP
                      (QP (CD 1) (CD /)))
                    (PRN (-LRB- -LRB-)
                      (NP (CD 1))
                      (, -)
                      (NP (NNP pi))
                      (-RRB- -RRB-)))
                  (PRN (-LRB- -LRB-)
                    (PP (IN for)
                      (NP (DT a) (NN move) (NN action)))
                    (-RRB- -RRB-)))
                (ADVP (RB otherwise))))))))
    (. .)))

det(number-3, The-1)
amod(number-3, average-2)
nsubj(t-4, number-3)
root(ROOT-0, t-4)
det(execution-7, the-5)
amod(execution-7, successful-6)
nsubj(1-12, execution-7)
case(action-10, of-8)
det(action-10, the-9)
nmod:of(execution-7, action-10)
cop(1-12, is-11)
ccomp(t-4, 1-12)
case(action-17, for-14)
det(action-17, a-15)
compound(action-17, wait-16)
nmod:for(1-12, action-17)
mark(li-20, if-19)
dep(1-12, li-20)
dep(li-25, x-22)
amod(li-25, =-24)
dobj(li-20, li-25)
dep(li-25, x-27)
dep(x-27, 1-29)
cc(1-12, and-31)
compound(/-33, 1-32)
ccomp(t-4, /-33)
conj:and(1-12, /-33)
appos(/-33, 1-35)
dep(1-35, pi-37)
case(action-43, for-40)
det(action-43, a-41)
compound(action-43, move-42)
nmod:for(/-33, action-43)
advmod(/-33, otherwise-45)

(ROOT
  (S
    (NP
      (NP (DT The) (JJ approximate) (JJ average) (NN makespan))
      (PP (IN of)
        (NP (DT the) (VBN given) (NNP MAPF-DP) (NN plan))))
    (VP (VBZ is)
      (ADVP (RB then))
      (NP
        (NP (JJ maxi) (NN li))
        (PRN (-LRB- -LRB-)
          (NP (NNP Xi))
          (-RRB- -RRB-)))
      (SBAR (IN since)
        (S
          (NP (DT all) (NNS agents))
          (VP (VBP need)
            (S
              (VP (TO to)
                (VP (VB enter)
                  (NP (PRP$ their) (JJ last) (JJ local) (NNS states)))))))))
    (. .)))

det(makespan-4, The-1)
amod(makespan-4, approximate-2)
amod(makespan-4, average-3)
nsubj(li-13, makespan-4)
case(plan-9, of-5)
det(plan-9, the-6)
amod(plan-9, given-7)
compound(plan-9, MAPF-DP-8)
nmod:of(makespan-4, plan-9)
cop(li-13, is-10)
advmod(li-13, then-11)
amod(li-13, maxi-12)
root(ROOT-0, li-13)
appos(li-13, Xi-15)
mark(need-20, since-17)
det(agents-19, all-18)
nsubj(need-20, agents-19)
nsubj:xsubj(enter-22, agents-19)
advcl(li-13, need-20)
mark(enter-22, to-21)
xcomp(need-20, enter-22)
nmod:poss(states-26, their-23)
amod(states-26, last-24)
amod(states-26, local-25)
dobj(enter-22, states-26)

(ROOT
  (S
    (S
      (NP (PRP One))
      (VP (MD might)
        (VP (VB be)
          (ADJP (JJ able)
            (S
              (VP (TO to)
                (VP (VB obtain)
                  (NP (JJR better) (NNS approximations))
                  (PP (IN with)
                    (NP (JJR more) (JJ runtime-intensive) (NN importance) (NN sampling)
                      (CC or)
                      (JJ dynamic) (NN programming) (NNS methods))))))))))
    (CC but)
    (S
      (NP
        (NP (DT the) (NN runtime))
        (PP (IN of)
          (NP (DT the) (VBG resulting) (NNP AME) (NN variant))))
      (VP (MD would)
        (VP (VB be)
          (ADJP (JJ large))
          (SBAR (IN since)
            (S
              (NP (PRP it))
              (VP (VBZ needs)
                (S
                  (VP (TO to)
                    (VP (VB compute)
                      (NP (JJ many) (JJ such) (NNS approximations)))))))))))
    (. .)))

nsubj(able-4, One-1)
nsubj:xsubj(obtain-6, One-1)
aux(able-4, might-2)
cop(able-4, be-3)
root(ROOT-0, able-4)
mark(obtain-6, to-5)
xcomp(able-4, obtain-6)
amod(approximations-8, better-7)
dobj(obtain-6, approximations-8)
case(sampling-13, with-9)
amod(sampling-13, more-10)
amod(sampling-13, runtime-intensive-11)
compound(sampling-13, importance-12)
nmod:with(obtain-6, sampling-13)
cc(sampling-13, or-14)
amod(methods-17, dynamic-15)
compound(methods-17, programming-16)
nmod:with(obtain-6, methods-17)
conj:or(sampling-13, methods-17)
cc(able-4, but-18)
det(runtime-20, the-19)
nsubj(large-28, runtime-20)
case(variant-25, of-21)
det(variant-25, the-22)
amod(variant-25, resulting-23)
compound(variant-25, AME-24)
nmod:of(runtime-20, variant-25)
aux(large-28, would-26)
cop(large-28, be-27)
conj:but(able-4, large-28)
mark(needs-31, since-29)
nsubj(needs-31, it-30)
nsubj:xsubj(compute-33, it-30)
advcl(large-28, needs-31)
mark(compute-33, to-32)
xcomp(needs-31, compute-33)
amod(approximations-36, many-34)
amod(approximations-36, such-35)
dobj(compute-33, approximations-36)

(ROOT
  (NP
    (NP (NNP Algorithm) (CD 1))
    (: :)
    (NP
      (NP (NNP High-Level) (NNP Search))
      (PP (IN of)
        (NP (NNP AME))))
    (. .)))

root(ROOT-0, Algorithm-1)
nummod(Algorithm-1, 1-2)
compound(Search-5, High-Level-4)
dep(Algorithm-1, Search-5)
case(AME-7, of-6)
nmod:of(Search-5, AME-7)

(ROOT
  (S
    (S
      (NP
        (NP (CD 1) (NNS Root.constraints))
        (: :)
        (NP
          (NP (CD =) (: ;) (CD 2))
          (NP (NNP Root.plan)))
        (: :))
      (VP (VBZ =)))
    (: ;)
    (S
      (NP
        (NP (CD 3))
        (PP (IN for)
          (NP (DT each) (NN agent))))
      (VP (VBZ ai)
        (VP (VB do)
          (NP (CD 4))
          (SBAR (IN if)
            (S
              (NP
                (NP (NNP LowLevelSearch))
                (PRN (-LRB- -LRB-)
                  (NP (NNP ai))
                  (, ,)
                  (NP (NN Root))
                  (, ,)
                  (NP (CD 0))
                  (-RRB- -RRB-)))
              (VP (VBZ returns)
                (NP
                  (NP
                    (NP (DT no) (NN path))
                    (PRN (-LRB- -LRB-)
                      (VP (VBN nor)
                        (NP (PRP$ its) (NNS labels)))
                      (-RRB- -RRB-)))
                  (NP
                    (NP (RB then) (CD 5) (NN return))
                    (SBAR
                      (S (`` ``)
                        (NP (DT No) (NN solution))
                        (VP (VBZ exists))
                        ('' ''))))
                  (: ;)
                  (NP
                    (NP
                      (QP (CD 6) (CD Add))
                      (DT the))
                    (VP (VBN returned)
                      (S
                        (NP
                          (NP (NN path))
                          (-LRB- -LRB-)
                          (CC and)
                          (NP (PRP$ its) (NNS labels))
                          (-RRB- -RRB-)))
                      (PP (TO to)
                        (NP (NNP Root.plan)))))
                  (: ;)
                  (NP (DT the) (JJ second) (NN child) (NN node))
                  (NP (NNP -LSB-) (NNP Line) (CD 18) (NNP -RSB-))
                  (, ,)
                  (VP
                    (ADVP (RB thus))
                    (VBG preventing)
                    (NP
                      (NP (DT the) (NN conflict))
                      (PP (IN in)
                        (NP (DT both) (NNS cases))))))))))))
    (. .)))

nummod(Root.constraints-2, 1-1)
nsubj(=-9, Root.constraints-2)
nummod(2-6, =-4)
dep(Root.constraints-2, 2-6)
appos(2-6, Root.plan-7)
root(ROOT-0, =-9)
nsubj(do-16, 3-11)
case(agent-14, for-12)
det(agent-14, each-13)
nmod:for(3-11, agent-14)
aux(do-16, ai-15)
parataxis(=-9, do-16)
dobj(do-16, 4-17)
mark(returns-27, if-18)
nsubj(returns-27, LowLevelSearch-19)
appos(LowLevelSearch-19, ai-21)
dep(ai-21, Root-23)
dep(ai-21, 0-25)
advcl(do-16, returns-27)
neg(path-29, no-28)
dobj(returns-27, path-29)
dep(path-29, nor-31)
nmod:poss(labels-33, its-32)
dobj(nor-31, labels-33)
advmod(return-37, then-35)
nummod(return-37, 5-36)
dep(path-29, return-37)
neg(solution-40, No-39)
nsubj(exists-41, solution-40)
acl:relcl(return-37, exists-41)
compound(Add-45, 6-44)
dep(path-29, Add-45)
dep(Add-45, the-46)
acl(Add-45, returned-47)
xcomp(returned-47, path-48)
cc(path-48, and-50)
nmod:poss(labels-52, its-51)
xcomp(returned-47, labels-52)
conj:and(path-48, labels-52)
case(Root.plan-55, to-54)
nmod:to(returned-47, Root.plan-55)
det(node-60, the-57)
amod(node-60, second-58)
compound(node-60, child-59)
dep(path-29, node-60)
compound(-RSB--64, -LSB--61)
compound(-RSB--64, Line-62)
nummod(-RSB--64, 18-63)
dep(path-29, -RSB--64)
advmod(preventing-67, thus-66)
acl(path-29, preventing-67)
det(conflict-69, the-68)
dobj(preventing-67, conflict-69)
case(cases-72, in-70)
det(cases-72, both-71)
nmod:in(conflict-69, cases-72)

(ROOT
  (S
    (NP
      (NP (NNP Low-Level) (NNP Search) (NNP LowLevelSearch))
      (PRN (-LRB- -LRB-)
        (NP (NNP ai))
        (, ,)
        (NP (NNP N))
        (, ,)
        (NP (NN key))
        (-RRB- -RRB-)))
    (VP (VBZ finds)
      (NP
        (NP
          (NP (DT a) (JJ new) (NN path))
          (PP (IN for)
            (NP (NN agent) (NNS ai))))
        (CC and)
        (NP
          (NP
            (NP (DT the) (NNS labels) (NN li))
            (-LRB- -LRB-)
            (NP (SYM x))
            (-RRB- -RRB-))
          (PP (IN of)
            (NP (DT this) (NN path))))))
    (. .)))

compound(LowLevelSearch-3, Low-Level-1)
compound(LowLevelSearch-3, Search-2)
nsubj(finds-11, LowLevelSearch-3)
appos(LowLevelSearch-3, ai-5)
dep(ai-5, N-7)
dep(ai-5, key-9)
root(ROOT-0, finds-11)
det(path-14, a-12)
amod(path-14, new-13)
dobj(finds-11, path-14)
case(ai-17, for-15)
compound(ai-17, agent-16)
nmod:for(path-14, ai-17)
cc(path-14, and-18)
det(li-21, the-19)
compound(li-21, labels-20)
dobj(finds-11, li-21)
conj:and(path-14, li-21)
dep(li-21, x-23)
case(path-27, of-25)
det(path-27, this-26)
nmod:of(li-21, path-27)

(ROOT
  (S
    (NP (PRP It))
    (VP
      (VP (VBZ uses)
        (NP
          (NP (DT the) (NNS paths))
          (PP (IN of)
            (NP
              (NP (DT the) (JJ other) (NNS agents))
              (CC and)
              (NP (PRP$ their) (NNS labels)))))
        (PP (IN in)
          (NP (NNP N.plan))))
      (CC but)
      (VP (VBZ does) (RB not)
        (VP (VB update)
          (NP (PRP them)))))
    (. .)))

nsubj(uses-2, It-1)
nsubj(update-17, It-1)
root(ROOT-0, uses-2)
det(paths-4, the-3)
dobj(uses-2, paths-4)
case(agents-8, of-5)
det(agents-8, the-6)
amod(agents-8, other-7)
nmod:of(paths-4, agents-8)
cc(agents-8, and-9)
nmod:poss(labels-11, their-10)
nmod:of(paths-4, labels-11)
conj:and(agents-8, labels-11)
case(N.plan-13, in-12)
nmod:in(uses-2, N.plan-13)
cc(uses-2, but-14)
aux(update-17, does-15)
neg(update-17, not-16)
conj:but(uses-2, update-17)
dobj(update-17, them-18)

(ROOT
  (S (-LRB- -LRB-)
    (NP (DT The) (NNS paths))
    (VP (VBP are)
      (ADJP (JJ empty))
      (PP
        (ADVP (RB directly))
        (IN after)
        (NP
          (NP (DT the) (NN execution))
          (PP (IN of)
            (NP (NNP Line) (CD 2))))))
    (. .) (-RRB- -RRB-)))

det(paths-3, The-2)
nsubj(empty-5, paths-3)
cop(empty-5, are-4)
root(ROOT-0, empty-5)
advmod(execution-9, directly-6)
case(execution-9, after-7)
det(execution-9, the-8)
nmod:after(empty-5, execution-9)
case(Line-11, of-10)
nmod:of(execution-9, Line-11)
nummod(Line-11, 2-12)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ performs)
      (NP (DT a) (JJ focal) (NN search))
      (PP (IN with)
        (NP
          (NP (NNS re-expansions))
          (PP (IN in)
            (NP
              (NP (DT a) (NN state) (NN space))
              (SBAR
                (WHNP (WP$ whose) (NNS states))
                (S
                  (VP (VB correspond)
                    (PP (TO to)
                      (NP
                        (NP
                          (NP (NNS pairs))
                          (PP (IN of)
                            (NP
                              (NP (NNS vertices))
                              (CC and)
                              (NP (JJ local) (NNS states)))))
                        (PRN (-LRB- -LRB-)
                          (PP (IN except)
                            (PP (IN for)
                              (NP
                                (NP (DT those) (NNS pairs))
                                (VP (VBN ruled)
                                  (PRT (RP out))
                                  (PP (IN by)
                                    (NP
                                      (NP (NNS constraints))
                                      (PP (IN in)
                                        (NP (NNP N.constraints)))))
                                  (SBAR (IN that)
                                    (S
                                      (NP
                                        (NP (NN pertain))
                                        (PP (TO to)
                                          (NP (NN agent))))
                                      (VP (VBP ai))))))))
                          (-RRB- -RRB-))
                        (CC and)
                        (SBAR
                          (WHNP (WP$ whose)
                            (NX (NNS edges)))
                          (S
                            (VP (VBP connect)
                              (NP
                                (NP
                                  (NP
                                    (NP (NN state))
                                    (PRN (-LRB- -LRB-)
                                      (NP
                                        (NP (NN l))
                                        (, ,)
                                        (NP (SYM x)))
                                      (-RRB- -RRB-)))
                                  (TO to)
                                  (NP
                                    (NP
                                      (NP
                                        (NP (NN state))
                                        (PRN (-LRB- -LRB-)
                                          (NP (NNP l))
                                          (, ,)
                                          (NP (NNP x) (CD +1))
                                          (-RRB- -RRB-)))
                                      (SBAR (IN if)
                                        (FRAG (CC and)
                                          (NP
                                            (ADJP (RB only) (IN if) (JJ l))
                                            (JJ =) (NN l)))))
                                    (PRN (-LRB- -LRB-)
                                      (PP (IN for)
                                        (NP (DT a) (NN wait) (NN action)))
                                      (-RRB- -RRB-))))
                                (CC or)
                                (PRN (-LRB- -LRB-)
                                  (NP
                                    (NP (NN l))
                                    (, ,)
                                    (NP (NN l)))
                                  (-RRB- -RRB-))
                                (NP (NN E)))))))))))
              (PRN (-LRB- -LRB-)
                (PP (IN for)
                  (NP (DT a) (NN move) (NN action)))
                (-RRB- -RRB-)))))))
    (. .)))

nsubj(performs-2, It-1)
root(ROOT-0, performs-2)
det(search-5, a-3)
amod(search-5, focal-4)
dobj(performs-2, search-5)
case(re-expansions-7, with-6)
nmod:with(performs-2, re-expansions-7)
case(space-11, in-8)
det(space-11, a-9)
compound(space-11, state-10)
nmod:in(re-expansions-7, space-11)
nmod:poss(states-13, space-11)
ref(space-11, whose-12)
nsubj(correspond-14, states-13)
acl:relcl(space-11, correspond-14)
case(pairs-16, to-15)
nmod:to(correspond-14, pairs-16)
case(vertices-18, of-17)
nmod:of(pairs-16, vertices-18)
cc(vertices-18, and-19)
amod(states-21, local-20)
nmod:of(pairs-16, states-21)
conj:and(vertices-18, states-21)
case(pairs-26, except-23)
mwe(except-23, for-24)
det(pairs-26, those-25)
nmod:except_for(pairs-16, pairs-26)
acl(pairs-26, ruled-27)
compound:prt(ruled-27, out-28)
case(constraints-30, by-29)
nmod:by(ruled-27, constraints-30)
case(N.constraints-32, in-31)
nmod:in(constraints-30, N.constraints-32)
mark(ai-37, that-33)
nsubj(ai-37, pertain-34)
case(agent-36, to-35)
nmod:to(pertain-34, agent-36)
ccomp(ruled-27, ai-37)
cc(pairs-16, and-39)
nmod:poss(edges-41, whose-40)
nsubj(connect-42, edges-41)
nmod:to(correspond-14, connect-42)
conj:and(pairs-16, connect-42)
dobj(connect-42, state-43)
dep(state-43, l-45)
appos(l-45, x-47)
dep(state-43, to-49)
dep(state-43, state-50)
appos(state-50, l-52)
dep(l-52, x-54)
nummod(x-54, +1-55)
mark(l-63, if-57)
cc(l-63, and-58)
advmod(l-61, only-59)
dep(l-61, if-60)
amod(l-63, l-61)
amod(l-63, =-62)
dep(state-50, l-63)
case(action-68, for-65)
det(action-68, a-66)
compound(action-68, wait-67)
nmod:for(state-50, action-68)
cc(state-43, or-70)
dep(state-43, l-72)
appos(l-72, l-74)
dobj(connect-42, E-76)
conj:or(state-43, E-76)
case(action-81, for-78)
det(action-81, a-79)
compound(action-81, move-80)
nmod:for(space-11, action-81)

(ROOT
  (S
    (NP
      (NP (DT The) (NN g-value))
      (PP (IN of)
        (NP
          (NP (DT a) (NN state))
          (PRN (-LRB- -LRB-)
            (NP
              (NP (NN l))
              (, ,)
              (NP (SYM x)))
            (-RRB- -RRB-)))))
    (VP (VBZ approximates)
      (PRN (-LRB- -LRB-)
        (NP (NNP sic) (. !))
        (-RRB- -RRB-)))))

det(g-value-2, The-1)
nsubj(approximates-11, g-value-2)
case(state-5, of-3)
det(state-5, a-4)
nmod:of(g-value-2, state-5)
dep(state-5, l-7)
appos(l-7, x-9)
root(ROOT-0, approximates-11)
dep(approximates-11, sic-13)

(ROOT
  (NP
    (NP (DT the) (JJ approximate) (JJ average) (NN time) (NN step) (NN li))
    (PRN (-LRB- -LRB-)
      (NP (NNP x))
      (-RRB- -RRB-))
    (. .)))

det(li-6, the-1)
amod(li-6, approximate-2)
amod(li-6, average-3)
compound(li-6, time-4)
compound(li-6, step-5)
root(ROOT-0, li-6)
appos(li-6, x-8)

(ROOT
  (S
    (S
      (NP (DT The) (NN start) (NN state))
      (VP (VBZ is)
        (PRN (-LRB- -LRB-)
          (NP
            (NP (NN si))
            (, ,)
            (NP (CD 0)))
          (-RRB- -RRB-))))
    (CC and)
    (S
      (NP (PRP$ its) (NN g-value))
      (VP (VBZ is)
        (NP (CD 0))))
    (. .)))

det(state-3, The-1)
compound(state-3, start-2)
nsubj(is-4, state-3)
root(ROOT-0, is-4)
dep(is-4, si-6)
amod(si-6, 0-8)
cc(is-4, and-10)
nmod:poss(g-value-12, its-11)
nsubj(0-14, g-value-12)
cop(0-14, is-13)
conj:and(is-4, 0-14)

(ROOT
  (S
    (S
      (SBAR
        (WHADVP (WRB When))
        (S
          (NP (DT the) (JJ low-level) (NN search))
          (VP (VBZ expands)
            (NP
              (NP (NN state))
              (PRN (-LRB- -LRB-)
                (NP (NNP l))
                (, ,)
                (NP (NNP x))
                (, -)
                (NP (CD 1))
                (-RRB- -RRB-))))))
      (, ,)
      (NP (PRP it))
      (VP (VBZ sets)
        (NP
          (NP (DT the) (NN g-value))
          (PP (IN of)
            (NP
              (NP (PRP$ its) (NN successor))
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (NN l))
                  (, ,)
                  (NP (SYM x)))
                (-RRB- -RRB-)))))
        (PP (VBG according)
          (PP (TO to)
            (NP
              (NP
                (NP (NNP Equation))
                (PRN (-LRB- -LRB-)
                  (NP (CD 1))
                  (-RRB- -RRB-)))
              (PP (TO to)
                (NP
                  (NP (DT the) (NN minimum))
                  (PP (IN of)
                    (NP
                      (NP
                        (NP (PRP$ its) (JJ current) (JJ g-value) (NN g))
                        (PRN (-LRB- -LRB-)
                          (NP
                            (NP (CD -LRB-) (NN l))
                            (, ,)
                            (NP (SYM x)))
                          (-RRB- -RRB-))
                        (-RRB- -RRB-))
                      (CC and)
                      (NP
                        (NP (NN max))
                        (-LRB- -LRB-)
                        (NP (NN g))
                        (PRN (-LRB- -LRB-)
                          (NP
                            (NP (-LRB- -LRB-) (NNP l) (, ,) (NNP x))
                            (: -)
                            (NP (CD 1)))
                          (-RRB- -RRB-))
                        (-RRB- -RRB-))
                      (, ,)
                      (NP (NNP maxj))
                      (, ,)
                      (NP (SYM x)))))))))))
    (: :)
    (S
      (NP
        (NP (FW i) (FW =) (FW j))
        (, ,)
        (NP
          (NP (SYM x))
          (`` <)
          (NP (SYM x)))
        (, ,))
      (VP (VBP lj)
        (SBAR
          (S (-LRB- -LRB-)
            (NP (SYM x))
            (-RRB- -RRB-)
            (VP (VBP li)
              (NP
                (NP
                  (LST (-LRB- -LRB-) (LS x) (-RRB- -RRB-))
                  (VBN -LRB-) (NN lj))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (SYM x))
                    (NP
                      (NP
                        (NP
                          (NP (CD 7))
                          (NP (NNP Root.key)))
                        (: :)
                        (S
                          (VP (SYM =)
                            (NP (NNP ApproximateAverageMakespan) (-LRB- -LRB-) (NNP Root.plan) (-RRB- -RRB-)))))
                      (: ;)
                      (NP
                        (NP
                          (NP (CD 8))
                          (NP (NNP Priorityqueue)))
                        (: :)
                        (S
                          (VP (SYM =)
                            (NP (-LRB- -LCB-) (NNS Root) (-RRB- -RCB-)))))
                      (: ;)
                      (NP
                        (NP
                          (NP (CD 9) (NN while))
                          (NP (NNP Priorityqueue) (NNP =) (NNP do) (CD 10) (NNP N)))
                        (: :)
                        (S
                          (VP (SYM =)
                            (NP (NNP Priorityqueue.pop) (NNP -LRB-)))))))
                  (-RRB- -RRB-))))))))
    (: ;)
    (S
      (NP
        (NP
          (NP (CD 11))
          (SBAR (IN if)
            (S
              (NP
                (NP (NNP FindConflicts))
                (PRN (-LRB- -LRB-)
                  (NP (NNP N.plan))
                  (-RRB- -RRB-)))
              (VP (VBZ returns)
                (S
                  (INTJ (UH no))
                  (NP (NNS conflicts))
                  (ADVP (IN then)
                    (NP (CD 12)))
                  (VP (VB return)
                    (NP (`` ``)
                      (S
                        (NP (NN Solution))
                        (VP (VBZ is)))
                      ('' '') (NN N.plan))))))))
        (: ;)
        (NP
          (NP
            (NP
              (QP (CD 13) (CD 14)))
            (NP (CD 15) (CD 16) (CD 17) (CD 18) (CD 19) (CD 20) (CD 21) (NNP 22) (NNP Conflict)))
          (: :)
          (S
            (VP (SYM =)
              (NP (JJS earliest))))))
      (VP (VBD returned)
        (NP (NN conflict))))
    (: ;)
    (S
      (SBAR (IN for)
        (S
          (NP (DT each) (NN agent))
          (VP (VBP ai)
            (VP (VBN involved)
              (PP (IN in)
                (NP (NNP Conflict)))))))
      (VP (VBP do)
        (NP (NNP N))))
    (: :)
    (S
      (NP
        (NP (JJ =) (JJ new) (NN node))
        (PP (IN with)
          (NP (NN parent))))
      (VP (VBP node)
        (NP
          (NP (NNP N))
          (: ;)
          (NP (NNP N)))))
    (. .)))

advmod(expands-5, When-1)
det(search-4, the-2)
amod(search-4, low-level-3)
nsubj(expands-5, search-4)
advcl(sets-16, expands-5)
dobj(expands-5, state-6)
appos(state-6, l-8)
dep(l-8, x-10)
dep(l-8, 1-12)
nsubj(sets-16, it-15)
root(ROOT-0, sets-16)
det(g-value-18, the-17)
dobj(sets-16, g-value-18)
case(successor-21, of-19)
nmod:poss(successor-21, its-20)
nmod:of(g-value-18, successor-21)
dep(successor-21, l-23)
appos(l-23, x-25)
case(Equation-29, according-27)
mwe(according-27, to-28)
nmod:according_to(sets-16, Equation-29)
appos(Equation-29, 1-31)
case(minimum-35, to-33)
det(minimum-35, the-34)
nmod:to(Equation-29, minimum-35)
case(g-40, of-36)
nmod:poss(g-40, its-37)
amod(g-40, current-38)
amod(g-40, g-value-39)
nmod:of(minimum-35, g-40)
nummod(l-43, -LRB--42)
dep(g-40, l-43)
appos(l-43, x-45)
cc(g-40, and-48)
nmod:of(minimum-35, max-49)
conj:and(g-40, max-49)
dep(max-49, g-51)
compound(x-56, l-54)
dep(max-49, x-56)
dep(x-56, 1-58)
nmod:of(minimum-35, maxj-62)
conj:and(g-40, maxj-62)
nmod:of(minimum-35, x-64)
conj:and(g-40, x-64)
compound(j-68, i-66)
compound(j-68, =-67)
nsubj(lj-74, j-68)
appos(j-68, x-70)
dep(x-70, x-72)
parataxis(sets-16, lj-74)
nsubj(li-78, x-76)
ccomp(lj-74, li-78)
dep(lj-83, x-80)
amod(lj-83, -LRB--82)
dobj(li-78, lj-83)
dep(lj-83, x-85)
dep(x-85, 7-86)
appos(7-86, Root.key-87)
dep(Root.plan-92, =-89)
compound(Root.plan-92, ApproximateAverageMakespan-90)
parataxis(7-86, Root.plan-92)
dep(7-86, 8-95)
appos(8-95, Priorityqueue-96)
dep(Root-100, =-98)
parataxis(8-95, Root-100)
nummod(while-104, 9-103)
dep(7-86, while-104)
compound(N-109, Priorityqueue-105)
compound(N-109, =-106)
compound(N-109, do-107)
nummod(N-109, 10-108)
dep(while-104, N-109)
dep(-LRB--113, =-111)
compound(-LRB--113, Priorityqueue.pop-112)
parataxis(while-104, -LRB--113)
nsubj(returned-148, 11-116)
mark(returns-122, if-117)
nsubj(returns-122, FindConflicts-118)
appos(FindConflicts-118, N.plan-120)
acl:relcl(11-116, returns-122)
discourse(return-127, no-123)
nsubj(return-127, conflicts-124)
case(12-126, then-125)
advmod(return-127, 12-126)
ccomp(returns-122, return-127)
nsubj(is-130, Solution-129)
dep(N.plan-132, is-130)
dobj(return-127, N.plan-132)
compound(14-135, 13-134)
dep(11-116, 14-135)
nummod(Conflict-144, 15-136)
nummod(Conflict-144, 16-137)
nummod(Conflict-144, 17-138)
nummod(Conflict-144, 18-139)
nummod(Conflict-144, 19-140)
nummod(Conflict-144, 20-141)
nummod(Conflict-144, 21-142)
compound(Conflict-144, 22-143)
dep(14-135, Conflict-144)
dep(earliest-147, =-146)
parataxis(14-135, earliest-147)
parataxis(sets-16, returned-148)
dobj(returned-148, conflict-149)
mark(involved-155, for-151)
det(agent-153, each-152)
nsubjpass(involved-155, agent-153)
auxpass(involved-155, ai-154)
csubj(do-158, involved-155)
case(Conflict-157, in-156)
nmod:in(involved-155, Conflict-157)
parataxis(sets-16, do-158)
dobj(do-158, N-159)
amod(node-163, =-161)
amod(node-163, new-162)
nsubj(node-166, node-163)
case(parent-165, with-164)
nmod:with(node-163, parent-165)
parataxis(sets-16, node-166)
dobj(node-166, N-167)
dep(N-167, N-169)

(ROOT
  (NP
    (NP (NNS constraints))
    (: :)
    (NP
      (NP (NNP =) (NNP N.constraints))
      (: ;)
      (NP (NNP N)))
    (. .)))

root(ROOT-0, constraints-1)
compound(N.constraints-4, =-3)
dep(constraints-1, N.constraints-4)
dep(N.constraints-4, N-6)

(ROOT
  (NP
    (NP (NN plan))
    (: :)
    (NP
      (NP (NNP =) (NNP N.plan))
      (: ;)
      (S
        (S
          (VP (VB Add)
            (NP
              (NP (CD one) (JJ new) (NN constraint))
              (PP (IN for)
                (NP (NN agent))))))
        (VP (VBP ai)
          (PP (TO to)
            (NP (NNP N))))))
    (. .)))

root(ROOT-0, plan-1)
compound(N.plan-4, =-3)
dep(plan-1, N.plan-4)
csubj(N-14, Add-6)
nummod(constraint-9, one-7)
amod(constraint-9, new-8)
dobj(Add-6, constraint-9)
case(agent-11, for-10)
nmod:for(constraint-9, agent-11)
cop(N-14, ai-12)
case(N-14, to-13)
parataxis(N.plan-4, N-14)

(ROOT
  (S
    (NP
      (NP
        (NP
          (NP
            (NP (NNS constraints))
            (PRN (-LRB- -LRB-)
              (S
                (VP (VB see)
                  (NP (JJ main) (NN text))))
              (-RRB- -RRB-)))
          (: ;)
          (SBAR (IN if)
            (S
              (NP
                (NP (NNP LowLevelSearch))
                (PRN (-LRB- -LRB-)
                  (NP (NNP ai))
                  (, ,)
                  (NP (NNP N))
                  (, ,)
                  (NP (NNP N.key))
                  (-RRB- -RRB-)))
              (VP (VBZ returns)
                (SBAR
                  (S
                    (NP
                      (NP (DT a) (NN path))
                      (-LRB- -LRB-)
                      (CC and)
                      (NP (PRP$ its) (NNS labels))
                      (-RRB- -RRB-))
                    (ADVP (RB then))
                    (VP (VB Replace)
                      (NP (DT the) (NN path)))))))))
        (PRN (-LRB- -LRB-)
          (CC and)
          (S
            (NP (PRP$ its))
            (VP (VBZ labels)))
          (-RRB- -RRB-)))
      (PP (IN of)
        (NP (NN agent))))
    (VP (VBP ai)
      (PP (IN in)
        (NP (NNP N))))
    (. .)))

nsubj(N-38, constraints-1)
dep(constraints-1, see-3)
amod(text-5, main-4)
dobj(see-3, text-5)
mark(returns-17, if-8)
nsubj(returns-17, LowLevelSearch-9)
appos(LowLevelSearch-9, ai-11)
dep(ai-11, N-13)
dep(ai-11, N.key-15)
dep(constraints-1, returns-17)
det(path-19, a-18)
nsubj(Replace-26, path-19)
cc(path-19, and-21)
nmod:poss(labels-23, its-22)
conj:and(path-19, labels-23)
nsubj(Replace-26, labels-23)
advmod(Replace-26, then-25)
ccomp(returns-17, Replace-26)
det(path-28, the-27)
dobj(Replace-26, path-28)
cc(labels-32, and-30)
nsubj(labels-32, its-31)
dep(constraints-1, labels-32)
case(agent-35, of-34)
nmod:of(constraints-1, agent-35)
cop(N-38, ai-36)
case(N-38, in-37)
root(ROOT-0, N-38)

(ROOT
  (NP
    (NP
      (NP (NN plan))
      (PP (IN with)
        (NP
          (NP (DT the) (JJ returned) (NN path))
          (PRN (-LRB- -LRB-)
            (PP (CC and)
              (NP (PRP$ its) (NNS labels)))
            (-RRB- -RRB-)))))
    (: ;)
    (NP (NNP N))
    (. .)))

root(ROOT-0, plan-1)
case(path-5, with-2)
det(path-5, the-3)
amod(path-5, returned-4)
nmod:with(plan-1, path-5)
case(labels-9, and-7)
nmod:poss(labels-9, its-8)
nmod:and(path-5, labels-9)
dep(plan-1, N-12)

(ROOT
  (NP
    (NP (NN key))
    (: :)
    (NP
      (NP (NNP =))
      (NP (NNP ApproximateAverageMakespan) (-LRB- -LRB-) (NNP N)))
    (. .)))

root(ROOT-0, key-1)
dep(key-1, =-3)
compound(N-6, ApproximateAverageMakespan-4)
dep(=-3, N-6)

(ROOT
  (FRAG
    (NP
      (NP (NN plan) (NNS -RRB-))
      (: ;)
      (NP
        (NP
          (NP (NNP Priorityqueue.insert))
          (PRN (-LRB- -LRB-)
            (NP (NNP N))
            (-RRB- -RRB-)))
        (: ;)
        (NP
          (NP (CD 23) (NN return))
          (NP
            (NP (`` ``) (DT No) (NN solution) (NN exists) ('' ''))
            (PRN (: ;)
              (ADVP (RB i))
              (, ,)
              (NP (NNP -RRB-))
              (-RRB- -RRB-))
            (-RRB- -RRB-)))))
    (: +)
    (S
      (NP (NNP t) (NNP High-Level) (NNP Search) (NNP Algorithm) (CD 1))
      (VP (VBZ shows)
        (NP
          (NP (DT the) (JJ high-level) (NN search))
          (PP (IN of)
            (NP
              (NP (NNP AME))
              (, ,)
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (VBZ is)
                    (ADJP (JJ similar)
                      (PP (TO to)
                        (NP
                          (NP (DT the) (JJ high-level) (NN search))
                          (PP (IN of)
                            (NP (NNP CBS))))))))))))))
    (. .)))

compound(-RRB--2, plan-1)
root(ROOT-0, -RRB--2)
dep(-RRB--2, Priorityqueue.insert-4)
appos(Priorityqueue.insert-4, N-6)
nummod(return-10, 23-9)
dep(Priorityqueue.insert-4, return-10)
neg(exists-14, No-12)
compound(exists-14, solution-13)
dep(return-10, exists-14)
dep(-RRB--19, i-17)
dep(exists-14, -RRB--19)
compound(Algorithm-26, t-23)
compound(Algorithm-26, High-Level-24)
compound(Algorithm-26, Search-25)
nsubj(shows-28, Algorithm-26)
nummod(Algorithm-26, 1-27)
parataxis(-RRB--2, shows-28)
det(search-31, the-29)
amod(search-31, high-level-30)
dobj(shows-28, search-31)
case(AME-33, of-32)
nmod:of(search-31, AME-33)
nsubj(similar-37, AME-33)
ref(AME-33, which-35)
cop(similar-37, is-36)
acl:relcl(AME-33, similar-37)
case(search-41, to-38)
det(search-41, the-39)
amod(search-41, high-level-40)
nmod:to(similar-37, search-41)
case(CBS-43, of-42)
nmod:of(search-41, CBS-43)

(ROOT
  (S
    (PP (IN In)
      (NP (DT the) (NN following)))
    (, ,)
    (NP (PRP we))
    (VP (VBP point)
      (PRT (RP out))
      (NP (DT the) (NNS differences)))
    (. .)))

case(following-3, In-1)
det(following-3, the-2)
nmod:in(point-6, following-3)
nsubj(point-6, we-5)
root(ROOT-0, point-6)
compound:prt(point-6, out-7)
det(differences-9, the-8)
dobj(point-6, differences-9)

(ROOT
  (S
    (NP (DT Each) (JJ high-level) (NN node) (NNP N))
    (VP (VBZ contains)
      (NP
        (NP (DT the) (VBG following) (NNS items))
        (: :)
        (NP (CD 1))))
    (. .)))

det(N-4, Each-1)
amod(N-4, high-level-2)
compound(N-4, node-3)
nsubj(contains-5, N-4)
root(ROOT-0, contains-5)
det(items-8, the-6)
amod(items-8, following-7)
dobj(contains-5, items-8)
dep(items-8, 1-10)

(ROOT
  (NP
    (NP (DT A) (VBN set) (NNS N.constraints))
    (PP (IN of)
      (NP (NNS constraints)))
    (PP (IN of)
      (NP
        (NP (DT the) (NN form))
        (PRN (-LRB- -LRB-)
          (NP (NNP ai))
          (, ,)
          (NP
            (NP (NN l))
            (, ,)
            (NP (SYM x)))
          (-RRB- -RRB-))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ states)
              (SBAR (IN that)
                (S
                  (NP
                    (NP (DT the) (NN vertex))
                    (PP (IN of)
                      (NP (NN agent))))
                  (VP (VBP ai)
                    (PP (IN in)
                      (NP (JJ local) (NN state)))))))))))
    (SBAR
      (S
        (NP (SYM x))
        (VP (VBZ has)
          (S
            (VP (TO to)
              (VP (VB be)
                (ADJP (JJ different)
                  (PP (IN from)
                    (NP (NN vertex) (NN l.) (CD 2))))))))))
    (. .)))

det(N.constraints-3, A-1)
amod(N.constraints-3, set-2)
root(ROOT-0, N.constraints-3)
case(constraints-5, of-4)
nmod:of(N.constraints-3, constraints-5)
case(form-8, of-6)
det(form-8, the-7)
nmod:of(N.constraints-3, form-8)
nsubj(states-17, form-8)
dep(form-8, ai-10)
dep(ai-10, l-12)
appos(l-12, x-14)
ref(form-8, that-16)
acl:relcl(form-8, states-17)
mark(state-26, that-18)
det(vertex-20, the-19)
nsubj(state-26, vertex-20)
case(agent-22, of-21)
nmod:of(vertex-20, agent-22)
cop(state-26, ai-23)
case(state-26, in-24)
amod(state-26, local-25)
ccomp(states-17, state-26)
nsubj(has-28, x-27)
nsubj:xsubj(different-31, x-27)
acl:relcl(N.constraints-3, has-28)
mark(different-31, to-29)
cop(different-31, be-30)
xcomp(has-28, different-31)
case(l.-34, from-32)
compound(l.-34, vertex-33)
nmod:from(different-31, l.-34)
nummod(l.-34, 2-35)

(ROOT
  (S
    (NP (DT A)
      (PRN (-LRB- -LRB-)
        (NP (NNP labeled))
        (-RRB- -RRB-))
      (NN MAPF-DP))
    (VP (VBP plan)
      (NP
        (NP
          (NP (NNP N.plan))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ contains)
                (SBAR
                  (S
                    (NP
                      (NP (DT a) (NN path) (NN li))
                      (PP (IN for)
                        (NP (DT each) (NN agent))))
                    (VP (VBP ai)
                      (PRN (-LRB- -LRB-)
                        (SBAR
                          (WHNP (WDT that))
                          (S
                            (VP (VBZ obeys)
                              (SBAR
                                (S
                                  (NP (DT the) (NNS constraints))
                                  (VP (VBZ N.constraints)))))))
                        (-RRB- -RRB-)))))))))
        (CC and)
        (NP
          (NP
            (NP
              (NP (DT an) (NN approximation) (NN li))
              (-LRB- -LRB-)
              (NP (SYM x))
              (-RRB- -RRB-))
            (PRN (-LRB- -LRB-)
              (VP (VBN called)
                (NP (NN label)))
              (-RRB- -RRB-)))
          (PP (IN of)
            (NP (DT each) (JJ average) (NN time) (NN step)))))
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (NN agent) (NNS ai))
          (VP (VBZ enters)
            (NP
              (NP (JJ local) (NN state)
                (NX
                  (NP (SYM x))
                  (PP (IN during)
                    (NP (NN plan) (NN execution)))))
              (PP (IN with)
                (NP (NNP MCPs))))))))
    (. .)))

det(MAPF-DP-5, A-1)
appos(MAPF-DP-5, labeled-3)
nsubj(plan-6, MAPF-DP-5)
root(ROOT-0, plan-6)
dobj(plan-6, N.plan-7)
nsubj(contains-9, N.plan-7)
ref(N.plan-7, that-8)
acl:relcl(N.plan-7, contains-9)
det(li-12, a-10)
compound(li-12, path-11)
nsubj(ai-16, li-12)
case(agent-15, for-13)
det(agent-15, each-14)
nmod:for(li-12, agent-15)
ccomp(contains-9, ai-16)
nsubj(obeys-19, that-18)
parataxis(ai-16, obeys-19)
det(constraints-21, the-20)
nsubj(N.constraints-22, constraints-21)
ccomp(obeys-19, N.constraints-22)
cc(N.plan-7, and-24)
det(li-27, an-25)
compound(li-27, approximation-26)
dobj(plan-6, li-27)
conj:and(N.plan-7, li-27)
nsubj(contains-9, li-27)
dep(li-27, x-29)
dep(li-27, called-32)
dobj(called-32, label-33)
case(step-39, of-35)
det(step-39, each-36)
amod(step-39, average-37)
compound(step-39, time-38)
nmod:of(li-27, step-39)
advmod(enters-43, when-40)
compound(ai-42, agent-41)
nsubj(enters-43, ai-42)
advcl(plan-6, enters-43)
amod(x-46, local-44)
dep(x-46, state-45)
dobj(enters-43, x-46)
case(execution-49, during-47)
compound(execution-49, plan-48)
nmod:during(x-46, execution-49)
case(MCPs-51, with-50)
nmod:with(x-46, MCPs-51)

(ROOT
  (FRAG
    (NP (CD 3))
    (. .)))

root(ROOT-0, 3-1)

(ROOT
  (S
    (NP
      (NP (DT The) (JJ key) (NN N.key))
      (PP (IN of)
        (NP (JJ high-level) (NN node))))
    (VP
      (NP
        (NP (NNP N))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP
              (VP (VBZ encodes)
                (NP (PRP$ its) (NN priority)))
              (PRN (-LRB- -LRB-)
                (S
                  (NP (JJR smaller) (NNS keys))
                  (VP (VBP have)
                    (NP (JJR higher) (NN priority))))
                (-RRB- -RRB-))
              (CC and)
              (VP (VBZ is)
                (ADJP (JJ equal)
                  (PP (TO to)
                    (NP
                      (NP (DT the) (JJ approximate) (JJ average) (NN makespan))
                      (PP (IN of)
                        (NP
                          (NP (NNP MAPF-DP) (NN plan) (NNP N.plan))
                          (VP (VBN given)
                            (PP (IN by)
                              (S
                                (VP (VBG ApproximateAverageMakespan)
                                  (S
                                    (NP
                                      (PRN (-LRB- -LRB-)
                                        (NP (NNP N.plan))
                                        (-RRB- -RRB-)))
                                    (VP (SYM =)
                                      (NP (JJ maxi) (NN li))))))))))))))))))
      (PRN (-LRB- -LRB-)
        (NP (NNP Xi))
        (-RRB- -RRB-)))
    (. .)))

det(N.key-3, The-1)
amod(N.key-3, key-2)
nsubj(N-7, N.key-3)
case(node-6, of-4)
amod(node-6, high-level-5)
nmod:of(N.key-3, node-6)
root(ROOT-0, N-7)
nsubj(encodes-9, N-7)
nsubj(equal-21, N-7)
ref(N-7, that-8)
acl:relcl(N-7, encodes-9)
nmod:poss(priority-11, its-10)
dobj(encodes-9, priority-11)
amod(keys-14, smaller-13)
nsubj(have-15, keys-14)
parataxis(encodes-9, have-15)
amod(priority-17, higher-16)
dobj(have-15, priority-17)
cc(encodes-9, and-19)
cop(equal-21, is-20)
acl:relcl(N-7, equal-21)
conj:and(encodes-9, equal-21)
case(makespan-26, to-22)
det(makespan-26, the-23)
amod(makespan-26, approximate-24)
amod(makespan-26, average-25)
nmod:to(equal-21, makespan-26)
case(N.plan-30, of-27)
compound(N.plan-30, MAPF-DP-28)
compound(N.plan-30, plan-29)
nmod:of(makespan-26, N.plan-30)
acl(N.plan-30, given-31)
mark(ApproximateAverageMakespan-33, by-32)
advcl(given-31, ApproximateAverageMakespan-33)
nsubj(li-39, N.plan-35)
dep(li-39, =-37)
amod(li-39, maxi-38)
ccomp(ApproximateAverageMakespan-33, li-39)
dep(N-7, Xi-41)

(ROOT
  (SINV
    (S
      (SBAR
        (WHADVP (WRB When))
        (S
          (NP (DT a) (NN conflict))
          (VP (VBZ exists)
            (PP (IN in)
              (NP (NNP MAPF-DP) (NN plan) (NNP N.plan))))))
      (, ,) (RB then)
      (NP (DT the) (JJ high-level) (NN search))
      (VP (VBZ creates)
        (NP
          (NP (CD 2) (NN child) (NNS nodes))
          (PP (IN of)
            (NP (JJ node) (NNP N) (NNP -LSB-) (NNP Line) (CD 15) (NNS -RSB-)))
          (SBAR
            (WHNP (WP$ whose) (NNS constraints))
            (S
              (VP (VBP are)
                (ADVP (RB initially))
                (VP (VBN set)
                  (PP (TO to)
                    (NP (DT the) (NNS constraints))))))))))
    (VP (VBZ N.constraints)
      (NP
        (NP
          (NP (NNP -LSB-) (NNP Line))
          (NP (CD 16) (NNS -RSB-)))
        (CC and)
        (SBAR
          (WHNP (WP$ whose)
            (NP (NNP MAPF-DP) (NN plan)))
          (S
            (VP (VBZ is)
              (ADVP (RB initially))
              (VP (VBN set)
                (PP (TO to)
                  (NP (NNP MAPF-DP) (NN plan) (NNP N.plan) (NNP -LSB-) (NNP Line)))))))))
    (NP (CD 17) (NN -RSB-))
    (. .)))

advmod(exists-4, When-1)
det(conflict-3, a-2)
nsubj(exists-4, conflict-3)
advcl(creates-14, exists-4)
case(N.plan-8, in-5)
compound(N.plan-8, MAPF-DP-6)
compound(N.plan-8, plan-7)
nmod:in(exists-4, N.plan-8)
advmod(search-13, then-10)
det(search-13, the-11)
amod(search-13, high-level-12)
nsubj(creates-14, search-13)
dep(N.constraints-33, creates-14)
nummod(nodes-17, 2-15)
compound(nodes-17, child-16)
dobj(creates-14, nodes-17)
nmod:poss(constraints-26, nodes-17)
case(-RSB--24, of-18)
amod(-RSB--24, node-19)
compound(-RSB--24, N-20)
compound(-RSB--24, -LSB--21)
compound(-RSB--24, Line-22)
nummod(-RSB--24, 15-23)
nmod:of(nodes-17, -RSB--24)
ref(nodes-17, whose-25)
nsubjpass(set-29, constraints-26)
auxpass(set-29, are-27)
advmod(set-29, initially-28)
acl:relcl(nodes-17, set-29)
case(constraints-32, to-30)
det(constraints-32, the-31)
nmod:to(set-29, constraints-32)
root(ROOT-0, N.constraints-33)
compound(Line-35, -LSB--34)
dobj(N.constraints-33, Line-35)
nummod(-RSB--37, 16-36)
dep(Line-35, -RSB--37)
cc(Line-35, and-38)
nmod:poss(plan-41, whose-39)
compound(plan-41, MAPF-DP-40)
nsubjpass(set-44, plan-41)
auxpass(set-44, is-42)
advmod(set-44, initially-43)
dobj(N.constraints-33, set-44)
conj:and(Line-35, set-44)
case(Line-50, to-45)
compound(Line-50, MAPF-DP-46)
compound(Line-50, plan-47)
compound(Line-50, N.plan-48)
compound(Line-50, -LSB--49)
nmod:to(set-44, Line-50)
nummod(-RSB--52, 17-51)
nsubj(N.constraints-33, -RSB--52)

(ROOT
  (S
    (S
      (VP (VB Assume)
        (SBAR (IN that)
          (S
            (NP (DT the) (JJS earliest) (NN conflict))
            (VP (VBZ is)
              (NP
                (NP (DT a) (NN violation))
                (PP (IN of)
                  (NP (NNP Property) (CD 1)))
                (PP (IN in)
                  (NP (NNP Definition) (CD 1)))
                (, ,)
                (SBAR
                  (WHPP (IN in)
                    (WHNP (WDT which) (NN case)))
                  (S
                    (NP
                      (NP (DT the) (NNS vertices))
                      (PP (IN of)
                        (NP (CD two) (NNS agents))))
                    (VP
                      (VP (VBP ai))
                      (CC and)
                      (VP (VBP aj)
                        (PP (IN in)
                          (NP (DT a) (JJ local) (NN state)))))))))))))
    (NP (SYM x))
    (VP (VBP are) (DT both)
      (ADJP (JJ identical)
        (PP (TO to)
          (NP
            (NP (DT a) (NN vertex))
            (NP (NN l))))))
    (. .)))

dep(identical-34, Assume-1)
mark(violation-8, that-2)
det(conflict-5, the-3)
amod(conflict-5, earliest-4)
nsubj(violation-8, conflict-5)
cop(violation-8, is-6)
det(violation-8, a-7)
ccomp(Assume-1, violation-8)
det(case-18, violation-8)
case(Property-10, of-9)
nmod:of(violation-8, Property-10)
nummod(Property-10, 1-11)
case(Definition-13, in-12)
nmod:in(violation-8, Definition-13)
nummod(Definition-13, 1-14)
case(case-18, in-16)
ref(violation-8, which-17)
nmod:in(ai-24, case-18)
det(vertices-20, the-19)
nsubj(ai-24, vertices-20)
nsubj(aj-26, vertices-20)
case(agents-23, of-21)
nummod(agents-23, two-22)
nmod:of(vertices-20, agents-23)
acl:relcl(violation-8, ai-24)
cc(ai-24, and-25)
acl:relcl(violation-8, aj-26)
conj:and(ai-24, aj-26)
case(state-30, in-27)
det(state-30, a-28)
amod(state-30, local-29)
nmod:in(aj-26, state-30)
nsubj(identical-34, x-31)
cop(identical-34, are-32)
dep(identical-34, both-33)
root(ROOT-0, identical-34)
case(vertex-37, to-35)
det(vertex-37, a-36)
nmod:to(identical-34, vertex-37)
dep(vertex-37, l-38)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN case)))
    (, ,)
    (NP (NNP AME))
    (VP (VBZ adds)
      (NP (DT the) (NN constraint))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (NNP ai))
          (, ,)
          (NP (NN l))
          (, ,)
          (NP (SYM x)))
        (-RRB- -RRB-))
      (PP (TO to)
        (NP
          (NP
            (NP (DT the) (NNS constraints))
            (PP (IN of)
              (NP (DT the) (JJ first) (NN child) (NN node))))
          (CC and)
          (NP
            (NP
              (NP (DT the) (NN constraint))
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (NN aj))
                  (, ,)
                  (NP (NN l))
                  (, ,)
                  (NP (SYM x)))
                (-RRB- -RRB-)))
            (PP (TO to)
              (NP
                (NP (DT the) (NNS constraints))
                (PP (IN of)
                  (NP (DT the) (JJ second) (NN child) (NN node) (NNP -LSB-) (NNP Line)))))
            (ADJP (CD 18) (JJ -RSB-))
            (, ,)
            (VP
              (ADVP (RB thus))
              (VBG preventing)
              (NP
                (NP (DT the) (NN conflict))
                (PP (IN in)
                  (NP (DT both) (NNS cases)))))))))
    (. .)))

case(case-3, In-1)
det(case-3, this-2)
nmod:in(adds-6, case-3)
nsubj(adds-6, AME-5)
root(ROOT-0, adds-6)
det(constraint-8, the-7)
dobj(adds-6, constraint-8)
dep(adds-6, ai-10)
appos(ai-10, l-12)
appos(ai-10, x-14)
case(constraints-18, to-16)
det(constraints-18, the-17)
nmod:to(adds-6, constraints-18)
case(node-23, of-19)
det(node-23, the-20)
amod(node-23, first-21)
compound(node-23, child-22)
nmod:of(constraints-18, node-23)
cc(constraints-18, and-24)
det(constraint-26, the-25)
nmod:to(adds-6, constraint-26)
conj:and(constraints-18, constraint-26)
dep(constraint-26, aj-28)
appos(aj-28, l-30)
appos(aj-28, x-32)
case(constraints-36, to-34)
det(constraints-36, the-35)
nmod:to(constraint-26, constraints-36)
case(Line-43, of-37)
det(Line-43, the-38)
amod(Line-43, second-39)
compound(Line-43, child-40)
compound(Line-43, node-41)
compound(Line-43, -LSB--42)
nmod:of(constraints-36, Line-43)
compound(-RSB--45, 18-44)
amod(constraint-26, -RSB--45)
advmod(preventing-48, thus-47)
acl(constraint-26, preventing-48)
det(conflict-50, the-49)
dobj(preventing-48, conflict-50)
case(cases-53, in-51)
det(cases-53, both-52)
nmod:in(conflict-50, cases-53)

(ROOT
  (S
    (S
      (VP (VB Assume)
        (SBAR (IN that)
          (S
            (NP (DT the) (JJS earliest) (NN conflict))
            (VP (VBZ is)
              (NP
                (NP (DT a) (NN violation))
                (PP (IN of)
                  (NP (NNP Property) (CD 2)))
                (PP (IN in)
                  (NP (NNP Definition) (CD 1)))
                (, ,)
                (SBAR
                  (WHPP (IN in)
                    (WHNP (WDT which) (NN case)))
                  (S
                    (NP
                      (NP (DT the) (NN vertex))
                      (PP (IN of)
                        (NP (DT an) (NN agent))))
                    (VP (VBP ai)
                      (PP (IN in)
                        (NP (DT a) (JJ local) (NN state)))
                      (NP
                        (NP
                          (NP (SYM x))
                          (NP
                            (QP (CD +) (CD 1))))
                        (CC and)
                        (NP
                          (NP (DT the) (NN vertex))
                          (PP (IN of)
                            (NP
                              (NP (DT some) (JJ other) (NN agent) (NN aj))
                              (PP (IN in)
                                (NP (DT the)
                                  (ADJP (RB immediately) (VBG preceding))
                                  (JJ local) (NN state))))))))))))))))
    (NP (SYM x))
    (VP (VBP are) (DT both)
      (ADJP (JJ identical)
        (PP (TO to)
          (NP
            (NP (DT a) (NN vertex))
            (NP (NN l))))))
    (. .)))

dep(identical-49, Assume-1)
mark(violation-8, that-2)
det(conflict-5, the-3)
amod(conflict-5, earliest-4)
nsubj(violation-8, conflict-5)
cop(violation-8, is-6)
det(violation-8, a-7)
ccomp(Assume-1, violation-8)
det(case-18, violation-8)
case(Property-10, of-9)
nmod:of(violation-8, Property-10)
nummod(Property-10, 2-11)
case(Definition-13, in-12)
nmod:in(violation-8, Definition-13)
nummod(Definition-13, 1-14)
case(case-18, in-16)
ref(violation-8, which-17)
nmod:in(x-29, case-18)
det(vertex-20, the-19)
nsubj(x-29, vertex-20)
case(agent-23, of-21)
det(agent-23, an-22)
nmod:of(vertex-20, agent-23)
cop(x-29, ai-24)
case(state-28, in-25)
det(state-28, a-26)
amod(state-28, local-27)
nmod:in(x-29, state-28)
acl:relcl(violation-8, x-29)
compound(1-31, +-30)
dep(x-29, 1-31)
cc(x-29, and-32)
det(vertex-34, the-33)
acl:relcl(violation-8, vertex-34)
conj:and(x-29, vertex-34)
case(aj-39, of-35)
det(aj-39, some-36)
amod(aj-39, other-37)
compound(aj-39, agent-38)
nmod:of(vertex-34, aj-39)
case(state-45, in-40)
det(state-45, the-41)
advmod(preceding-43, immediately-42)
amod(state-45, preceding-43)
amod(state-45, local-44)
nmod:in(aj-39, state-45)
nsubj(identical-49, x-46)
cop(identical-49, are-47)
dep(identical-49, both-48)
root(ROOT-0, identical-49)
case(vertex-52, to-50)
det(vertex-52, a-51)
nmod:to(identical-49, vertex-52)
dep(vertex-52, l-53)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN case)))
    (, ,)
    (S
      (NP (NNP AME))
      (VP (VBZ adds)
        (NP (DT the) (NN constraint))
        (PRN (-LRB- -LRB-)
          (INTJ (NN ai) (, ,) (NN l))
          (, ,)
          (PP (IN x)
            (NP (NNP +) (CD 1)))
          (-RRB- -RRB-))
        (PP (TO to)
          (NP
            (NP (DT the) (NNS constraints))
            (PP (IN of)
              (NP (DT the) (JJ first) (NN child) (NN node)))))))
    (CC and)
    (S
      (NP
        (NP
          (NP (DT the) (NN constraint))
          (PRN (-LRB- -LRB-)
            (NP
              (NP (NN aj))
              (, ,)
              (NP (NN l))
              (, ,)
              (NP (SYM x)))
            (-RRB- -RRB-)))
        (PP (TO to)
          (NP
            (NP (DT the) (NNS constraints))
            (PP (IN of)
              (NP (FW i))))))
      (VP (VBZ is)
        (NP (CD 1))
        (SBAR (IN if)
          (S
            (NP (NN l))
            (VP (VBD =)
              (NP
                (NP
                  (QP (CD l)
                    (CC and)
                    (CD 1))
                  (NNS /))
                (PRN (-LRB- -LRB-)
                  (NP (CD 1))
                  (, -)
                  (NP (NNP pi))
                  (-RRB- -RRB-)))
              (ADVP (RB otherwise)))))))
    (. .)))

case(case-3, In-1)
det(case-3, this-2)
nmod:in(adds-6, case-3)
nsubj(adds-6, AME-5)
root(ROOT-0, adds-6)
det(constraint-8, the-7)
dobj(adds-6, constraint-8)
dep(l-12, ai-10)
discourse(+-15, l-12)
case(+-15, x-14)
discourse(adds-6, +-15)
nummod(+-15, 1-16)
case(constraints-20, to-18)
det(constraints-20, the-19)
nmod:to(adds-6, constraints-20)
case(node-25, of-21)
det(node-25, the-22)
amod(node-25, first-23)
compound(node-25, child-24)
nmod:of(constraints-20, node-25)
cc(adds-6, and-26)
det(constraint-28, the-27)
nsubj(1-42, constraint-28)
dep(constraint-28, aj-30)
appos(aj-30, l-32)
appos(aj-30, x-34)
case(constraints-38, to-36)
det(constraints-38, the-37)
nmod:to(constraint-28, constraints-38)
case(i-40, of-39)
nmod:of(constraints-38, i-40)
cop(1-42, is-41)
conj:and(adds-6, 1-42)
mark(=-45, if-43)
nsubj(=-45, l-44)
advcl(1-42, =-45)
nummod(/-49, l-46)
cc(l-46, and-47)
conj:and(l-46, 1-48)
nummod(/-49, 1-48)
dobj(=-45, /-49)
appos(/-49, 1-51)
dep(1-51, pi-53)
advmod(=-45, otherwise-55)

(ROOT
  (S
    (NP (DT The) (JJ lowwhere) (NN t) (NN level) (NN search))
    (VP (VBZ decides)
      (SBAR
        (WHNP
          (WHNP (WDT which) (NN state))
          (PRN (-LRB- -LRB-)
            (NP
              (NP (NN l))
              (, ,)
              (NP (SYM x)))
            (-RRB- -RRB-)))
        (S
          (VP (TO to)
            (VP (VB expand)
              (ADVP (JJ next))
              (PP (VBN based)
                (PP (IN on)
                  (NP
                    (NP
                      (LST (LS 1) (-RRB- -RRB-))
                      (NP (DT the) (NN f-value))
                      (PP (IN of)
                        (NP
                          (NP (DT the) (NN state))
                          (, ,)
                          (SBAR
                            (WHNP (WDT which))
                            (S
                              (VP (VBZ is)
                                (NP
                                  (NP (DT the) (NN sum))
                                  (PP (IN of)
                                    (NP (PRP$ its) (NN g-value))))))))))
                    (CC and)
                    (NP
                      (NP (PRP$ its) (NN h-value))
                      (, ,)
                      (SBAR
                        (WHADVP (WRB where))
                        (S
                          (NP (DT the) (NN h-value))
                          (VP (VBZ is)
                            (NP
                              (NP
                                (NP
                                  (NP
                                    (QP (CD 1) (CD /)))
                                  (PRN (-LRB- -LRB-)
                                    (NP (CD 1))
                                    (, -)
                                    (NP (NNP pi))
                                    (-RRB- -RRB-))
                                  (PP (CC times)
                                    (NP
                                      (NP
                                        (NP
                                          (NP (DT the) (NN distance))
                                          (PP (IN from)
                                            (NP (NN location))))
                                        (NP (NN l))
                                        (PP (TO to)
                                          (NP (NN location) (NN gi)))
                                        (PP (IN in)
                                          (NP (NNP graph) (NNP G))))
                                      (PRN (-LRB- -LRB-)
                                        (SBAR
                                          (WHNP (WDT which))
                                          (S
                                            (VP (VBZ is)
                                              (NP
                                                (NP (DT an) (JJ optimistic) (NN estimate))
                                                (PP (IN of)
                                                  (NP
                                                    (NP (DT the) (JJ average) (NN number))
                                                    (PP (IN of)
                                                      (NP
                                                        (NP (NN time) (NNS steps))
                                                        (VP (VBN required)
                                                          (S
                                                            (VP (TO to)
                                                              (VP (VB move)
                                                                (PP (IN from)
                                                                  (NP (NN location)))
                                                                (NP (NN l))
                                                                (PP (TO to)
                                                                  (NP (NN location) (NN gi)))))))))))))))
                                        (-RRB- -RRB-))
                                      (CC and)
                                      (NP
                                        (LST (LS 2) (-RRB- -RRB-))
                                        (NP (DT the) (NN number))
                                        (PP (IN of)
                                          (NP
                                            (NP (NNS conflicts))
                                            (PP (IN of)
                                              (NP
                                                (NP (DT the) (NN path))
                                                (PP (IN for)
                                                  (NP
                                                    (NP (NN agent))
                                                    (SBAR
                                                      (S
                                                        (VP (VBZ ai)
                                                          (SBAR (IN that)
                                                            (S
                                                              (NP
                                                                (NP (NNS corresponds))
                                                                (PP (TO to)
                                                                  (NP
                                                                    (NP (DT the) (NNS locations))
                                                                    (PP (IN in)
                                                                      (NP
                                                                        (NP (DT the) (NNS states))
                                                                        (PP (IN on)
                                                                          (NP (DT the))))))))
                                                              (VP (VBD found)
                                                                (NP (NN path))
                                                                (PP (IN from)
                                                                  (NP (DT the) (NN start) (NN state)))
                                                                (PP (TO to))))))))))))))))))
                                (PRN (-LRB- -LRB-)
                                  (NP
                                    (NP (NN l))
                                    (, ,)
                                    (NP (SYM x)))
                                  (-RRB- -RRB-)))
                              (PP (IN with)
                                (NP
                                  (NP (DT the) (NNS paths))
                                  (PP (IN of)
                                    (NP (JJ other) (NNS agents))))))))))))))))))
    (. .)))

det(search-5, The-1)
amod(search-5, lowwhere-2)
compound(search-5, t-3)
compound(search-5, level-4)
nsubj(decides-6, search-5)
root(ROOT-0, decides-6)
det(state-8, which-7)
nsubj(expand-15, state-8)
dep(state-8, l-10)
appos(l-10, x-12)
mark(expand-15, to-14)
ccomp(decides-6, expand-15)
advmod(expand-15, next-16)
case(f-value-22, based-17)
mwe(based-17, on-18)
dep(f-value-22, 1-19)
det(f-value-22, the-21)
advcl(expand-15, f-value-22)
case(state-25, of-23)
det(state-25, the-24)
nmod:of(f-value-22, state-25)
nsubj(sum-30, state-25)
ref(state-25, which-27)
cop(sum-30, is-28)
det(sum-30, the-29)
acl:relcl(state-25, sum-30)
case(g-value-33, of-31)
nmod:poss(g-value-33, its-32)
nmod:of(sum-30, g-value-33)
cc(f-value-22, and-34)
nmod:poss(h-value-36, its-35)
advcl(expand-15, h-value-36)
conj:and(f-value-22, h-value-36)
advmod(/-43, where-38)
det(h-value-40, the-39)
nsubj(/-43, h-value-40)
cop(/-43, is-41)
compound(/-43, 1-42)
acl:relcl(h-value-36, /-43)
appos(/-43, 1-45)
dep(1-45, pi-47)
case(distance-51, times-49)
det(distance-51, the-50)
nmod:times(/-43, distance-51)
case(location-53, from-52)
nmod:from(distance-51, location-53)
dep(distance-51, l-54)
case(gi-57, to-55)
compound(gi-57, location-56)
nmod:to(distance-51, gi-57)
case(G-60, in-58)
compound(G-60, graph-59)
nmod:in(distance-51, G-60)
nsubj(estimate-66, which-62)
cop(estimate-66, is-63)
det(estimate-66, an-64)
amod(estimate-66, optimistic-65)
dep(distance-51, estimate-66)
case(number-70, of-67)
det(number-70, the-68)
amod(number-70, average-69)
nmod:of(estimate-66, number-70)
case(steps-73, of-71)
compound(steps-73, time-72)
nmod:of(number-70, steps-73)
acl(steps-73, required-74)
mark(move-76, to-75)
xcomp(required-74, move-76)
case(location-78, from-77)
nmod:from(move-76, location-78)
dobj(move-76, l-79)
case(gi-82, to-80)
compound(gi-82, location-81)
nmod:to(move-76, gi-82)
cc(distance-51, and-84)
dep(number-88, 2-85)
det(number-88, the-87)
nmod:times(/-43, number-88)
conj:and(distance-51, number-88)
case(conflicts-90, of-89)
nmod:of(number-88, conflicts-90)
case(path-93, of-91)
det(path-93, the-92)
nmod:of(conflicts-90, path-93)
case(agent-95, for-94)
nmod:for(path-93, agent-95)
mark(found-107, agent-95)
acl:relcl(agent-95, ai-96)
ref(agent-95, that-97)
nsubj(found-107, corresponds-98)
case(locations-101, to-99)
det(locations-101, the-100)
nmod:to(corresponds-98, locations-101)
case(states-104, in-102)
det(states-104, the-103)
nmod:in(locations-101, states-104)
case(the-106, on-105)
nmod:on(states-104, the-106)
ccomp(ai-96, found-107)
dobj(found-107, path-108)
case(state-112, from-109)
det(state-112, the-110)
compound(state-112, start-111)
nmod:from(found-107, state-112)
case(state-112, to-113)
dep(/-43, l-115)
appos(l-115, x-117)
case(paths-121, with-119)
det(paths-121, the-120)
nmod:with(/-43, paths-121)
case(agents-124, of-122)
amod(agents-124, other-123)
nmod:of(paths-121, agents-124)

(ROOT
  (S
    (NP (DT The) (JJ low-level) (NN search))
    (VP (VBZ starts)
      (PP (IN in)
        (NP (NN Phase) (CD 1))))
    (. .)))

det(search-3, The-1)
amod(search-3, low-level-2)
nsubj(starts-4, search-3)
root(ROOT-0, starts-4)
case(Phase-6, in-5)
nmod:in(starts-4, Phase-6)
nummod(Phase-6, 1-7)

(ROOT
  (S
    (NP
      (NP (DT The) (NN objective))
      (PP (IN in)
        (NP (DT this) (NN phase))))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP (VB find)
            (SBAR
              (S
                (NP
                  (NP (DT a) (NN path))
                  (PP (IN for)
                    (NP (NN agent))))
                (VP (VBZ ai)
                  (SBAR (RB so) (IN that)
                    (S
                      (NP (PRP it))
                      (VP
                        (VP (VBZ enters)
                          (NP (PRP$ its) (JJ last) (JJ local) (NN state))
                          (PP (IN with)
                            (NP
                              (NP (DT a)
                                (ADJP (RB reasonably) (JJ small))
                                (JJ approximate) (NN average) (NN number))
                              (PP (IN of)
                                (NP
                                  (NP (NN time) (NNS steps))
                                  (, ,)
                                  (NP
                                    (NP (RB namely) (CD one))
                                    (SBAR
                                      (WHNP (WDT that))
                                      (S
                                        (VP (VBZ is)
                                          (ADJP
                                            (ADJP (RB no) (JJR larger))
                                            (PP (IN than)
                                              (NP
                                                (NP (DT the) (JJ approximate) (JJ average) (NN makespan) (NN key))
                                                (PP (IN of)
                                                  (NP
                                                    (NP (DT the) (JJ MAPF-DP) (NN plan))
                                                    (PP (IN in)
                                                      (NP
                                                        (NP (DT the) (NN parent) (NN node))
                                                        (PP (IN of)
                                                          (NP
                                                            (NP (NNP node) (NNP N))
                                                            (PP (IN in)
                                                              (NP (DT the) (JJ high-level) (NN search)))))))))))))))))))))
                        (, ,)
                        (CC and)
                        (VP (VBZ has)
                          (NP
                            (NP (DT a) (JJ small) (NN number))
                            (PP (IN of)
                              (NP (NNS conflicts)))))))))))))))
    (. .)))

det(objective-2, The-1)
nsubj(is-6, objective-2)
nsubj:xsubj(find-8, objective-2)
case(phase-5, in-3)
det(phase-5, this-4)
nmod:in(objective-2, phase-5)
root(ROOT-0, is-6)
mark(find-8, to-7)
xcomp(is-6, find-8)
det(path-10, a-9)
nsubj(ai-13, path-10)
case(agent-12, for-11)
nmod:for(path-10, agent-12)
ccomp(find-8, ai-13)
mark(enters-17, so-14)
mwe(so-14, that-15)
nsubj(enters-17, it-16)
nsubj(has-62, it-16)
advcl(ai-13, enters-17)
nmod:poss(state-21, its-18)
amod(state-21, last-19)
amod(state-21, local-20)
dobj(enters-17, state-21)
case(number-28, with-22)
det(number-28, a-23)
advmod(small-25, reasonably-24)
amod(number-28, small-25)
amod(number-28, approximate-26)
compound(number-28, average-27)
nmod:with(enters-17, number-28)
case(steps-31, of-29)
compound(steps-31, time-30)
nmod:of(number-28, steps-31)
advmod(one-34, namely-33)
appos(steps-31, one-34)
nsubj(larger-38, one-34)
ref(one-34, that-35)
cop(larger-38, is-36)
neg(larger-38, no-37)
acl:relcl(one-34, larger-38)
case(key-44, than-39)
det(key-44, the-40)
amod(key-44, approximate-41)
amod(key-44, average-42)
compound(key-44, makespan-43)
nmod:than(larger-38, key-44)
case(plan-48, of-45)
det(plan-48, the-46)
amod(plan-48, MAPF-DP-47)
nmod:of(key-44, plan-48)
case(node-52, in-49)
det(node-52, the-50)
compound(node-52, parent-51)
nmod:in(plan-48, node-52)
case(N-55, of-53)
compound(N-55, node-54)
nmod:of(node-52, N-55)
case(search-59, in-56)
det(search-59, the-57)
amod(search-59, high-level-58)
nmod:in(N-55, search-59)
cc(enters-17, and-61)
advcl(ai-13, has-62)
conj:and(enters-17, has-62)
det(number-65, a-63)
amod(number-65, small-64)
dobj(has-62, number-65)
case(conflicts-67, of-66)
nmod:of(number-65, conflicts-67)

(ROOT
  (S
    (S
      (NP
        (NP (DT The) (JJ first) (NN part))
        (PP (IN of)
          (NP (DT the) (NN objective))))
      (VP (VBZ tries)
        (S
          (VP (TO to)
            (VP (VB ensure)
              (SBAR (IN that)
                (S
                  (NP
                    (NP (DT the) (JJ approximate) (JJ average) (NN makespan))
                    (PP (IN of)
                      (NP
                        (NP (DT the) (VBG resulting) (JJ MAPF-DP) (NN plan))
                        (PP (IN in)
                          (NP (JJ node) (NNP N))))))
                  (VP (VBZ is)
                    (ADJP
                      (ADJP (RB no) (JJR larger))
                      (PP (IN than)
                        (NP
                          (NP (DT the) (NN one))
                          (PP (IN of)
                            (NP
                              (NP (DT the) (JJ MAPF-DP) (NN plan))
                              (PP (IN in)
                                (NP
                                  (NP (DT the) (NN parent) (NN node))
                                  (PP (IN of)
                                    (NP (JJ node) (NNP N))))))))))))))))))
    (, ,)
    (CC and)
    (S
      (NP (DT the) (JJ second) (NN part))
      (VP (VBZ tries)
        (S
          (VP (TO to)
            (VP (VB ensure)
              (SBAR (IN that)
                (S
                  (NP (DT the) (VBG resulting) (NNP MAPF-DP) (NN plan))
                  (VP (VBZ has)
                    (NP
                      (NP (DT a) (JJ small) (NN number))
                      (PP (IN of)
                        (NP (NNS conflicts)))))))
              (SBAR (RB so) (IN that)
                (S
                  (NP (DT the) (JJ high-level) (NN search))
                  (VP (VBZ has)
                    (NP
                      (NP (DT a) (JJ small) (NN runtime))
                      (SBAR (IN since)
                        (S
                          (NP (PRP it))
                          (VP (VBZ needs)
                            (S
                              (VP (TO to)
                                (VP (VB resolve)
                                  (NP
                                    (NP (RB only) (DT a) (JJ small) (NN number))
                                    (PP (IN of)
                                      (NP (NNS conflicts)))))))))))))))))))
    (. .)))

det(part-3, The-1)
amod(part-3, first-2)
nsubj(tries-7, part-3)
nsubj:xsubj(ensure-9, part-3)
case(objective-6, of-4)
det(objective-6, the-5)
nmod:of(part-3, objective-6)
root(ROOT-0, tries-7)
mark(ensure-9, to-8)
xcomp(tries-7, ensure-9)
mark(larger-25, that-10)
det(makespan-14, the-11)
amod(makespan-14, approximate-12)
amod(makespan-14, average-13)
nsubj(larger-25, makespan-14)
case(plan-19, of-15)
det(plan-19, the-16)
amod(plan-19, resulting-17)
amod(plan-19, MAPF-DP-18)
nmod:of(makespan-14, plan-19)
case(N-22, in-20)
amod(N-22, node-21)
nmod:in(plan-19, N-22)
cop(larger-25, is-23)
neg(larger-25, no-24)
ccomp(ensure-9, larger-25)
case(one-28, than-26)
det(one-28, the-27)
nmod:than(larger-25, one-28)
case(plan-32, of-29)
det(plan-32, the-30)
amod(plan-32, MAPF-DP-31)
nmod:of(one-28, plan-32)
case(node-36, in-33)
det(node-36, the-34)
compound(node-36, parent-35)
nmod:in(plan-32, node-36)
case(N-39, of-37)
amod(N-39, node-38)
nmod:of(node-36, N-39)
cc(tries-7, and-41)
det(part-44, the-42)
amod(part-44, second-43)
nsubj(tries-45, part-44)
nsubj:xsubj(ensure-47, part-44)
conj:and(tries-7, tries-45)
mark(ensure-47, to-46)
xcomp(tries-45, ensure-47)
mark(has-53, that-48)
det(plan-52, the-49)
amod(plan-52, resulting-50)
compound(plan-52, MAPF-DP-51)
nsubj(has-53, plan-52)
ccomp(ensure-47, has-53)
det(number-56, a-54)
amod(number-56, small-55)
dobj(has-53, number-56)
case(conflicts-58, of-57)
nmod:of(number-56, conflicts-58)
mark(has-64, so-59)
mwe(so-59, that-60)
det(search-63, the-61)
amod(search-63, high-level-62)
nsubj(has-64, search-63)
advcl(ensure-47, has-64)
det(runtime-67, a-65)
amod(runtime-67, small-66)
dobj(has-64, runtime-67)
mark(needs-70, since-68)
nsubj(needs-70, it-69)
nsubj:xsubj(resolve-72, it-69)
acl(runtime-67, needs-70)
mark(resolve-72, to-71)
xcomp(needs-70, resolve-72)
advmod(number-76, only-73)
det(number-76, a-74)
amod(number-76, small-75)
dobj(resolve-72, number-76)
case(conflicts-78, of-77)
nmod:of(number-76, conflicts-78)

(ROOT
  (S
    (NP (DT The) (JJ low-level) (NN search))
    (ADVP (RB thus))
    (VP
      (ADVP (RB repeatedly))
      (VBZ expands)
      (NP
        (NP (DT a) (NN state))
        (PP (IN with)
          (NP
            (NP (DT the) (JJS smallest) (NN number))
            (PP (IN of)
              (NP
                (NP (NNS conflicts))
                (PP (IN among)
                  (NP
                    (NP (DT all) (NNS states))
                    (PP (IN in)
                      (NP (DT the) (NN priority) (NN queue)))))))))
        (SBAR (WP$ whose)
          (S
            (NP (NNS f-values))
            (VP (VBP are)
              (ADJP
                (ADJP (RB no) (JJR larger))
                (PP (IN than)
                  (NP (NN key)))))))))
    (. .)))

det(search-3, The-1)
amod(search-3, low-level-2)
nsubj(expands-6, search-3)
advmod(expands-6, thus-4)
advmod(expands-6, repeatedly-5)
root(ROOT-0, expands-6)
det(state-8, a-7)
dobj(expands-6, state-8)
case(number-12, with-9)
det(number-12, the-10)
amod(number-12, smallest-11)
nmod:with(state-8, number-12)
case(conflicts-14, of-13)
nmod:of(number-12, conflicts-14)
case(states-17, among-15)
det(states-17, all-16)
nmod:among(conflicts-14, states-17)
case(queue-21, in-18)
det(queue-21, the-19)
compound(queue-21, priority-20)
nmod:in(states-17, queue-21)
dep(larger-26, whose-22)
nsubj(larger-26, f-values-23)
cop(larger-26, are-24)
neg(larger-26, no-25)
dep(state-8, larger-26)
case(key-28, than-27)
nmod:than(larger-26, key-28)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT no) (JJ such) (NN state))
        (VP (VBZ exists))))
    (, ,)
    (NP (RB then) (DT the) (JJ low-level) (NN search))
    (VP (VBZ switches)
      (PP (TO to)
        (NP
          (QP (CD Phase) (CD 2)))))
    (. .)))

mark(exists-5, If-1)
neg(state-4, no-2)
amod(state-4, such-3)
nsubj(exists-5, state-4)
advcl(switches-11, exists-5)
advmod(search-10, then-7)
det(search-10, the-8)
amod(search-10, low-level-9)
nsubj(switches-11, search-10)
root(ROOT-0, switches-11)
case(2-14, to-12)
compound(2-14, Phase-13)
nmod:to(switches-11, 2-14)

(ROOT
  (S
    (NP
      (NP (DT The) (NN objective))
      (PP (IN in)
        (NP (DT this) (NN phase))))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP (VB find)
            (SBAR
              (S
                (NP
                  (NP (DT a) (NN path))
                  (PP (IN for)
                    (NP (NN agent))))
                (VP (VBZ ai)
                  (SBAR (RB so) (IN that)
                    (S
                      (NP (PRP it))
                      (VP (VBZ enters)
                        (NP (PRP$ its) (JJ last) (JJ local) (NN state))
                        (PP (IN with)
                          (NP
                            (NP (DT a) (JJ small) (JJ approximate) (NN average) (NN number))
                            (PP (IN of)
                              (NP (NN time) (NNS steps)))))))))))))))
    (. .)))

det(objective-2, The-1)
nsubj(is-6, objective-2)
nsubj:xsubj(find-8, objective-2)
case(phase-5, in-3)
det(phase-5, this-4)
nmod:in(objective-2, phase-5)
root(ROOT-0, is-6)
mark(find-8, to-7)
xcomp(is-6, find-8)
det(path-10, a-9)
nsubj(ai-13, path-10)
case(agent-12, for-11)
nmod:for(path-10, agent-12)
ccomp(find-8, ai-13)
mark(enters-17, so-14)
mwe(so-14, that-15)
nsubj(enters-17, it-16)
advcl(ai-13, enters-17)
nmod:poss(state-21, its-18)
amod(state-21, last-19)
amod(state-21, local-20)
dobj(enters-17, state-21)
case(number-27, with-22)
det(number-27, a-23)
amod(number-27, small-24)
amod(number-27, approximate-25)
compound(number-27, average-26)
nmod:with(enters-17, number-27)
case(steps-30, of-28)
compound(steps-30, time-29)
nmod:of(number-27, steps-30)

(ROOT
  (S
    (NP (DT This) (NN objective))
    (VP (VBZ tries)
      (S
        (VP (TO to)
          (VP (VB ensure)
            (SBAR (IN that)
              (S
                (NP
                  (NP (DT the) (JJ approximate) (JJ average) (NN makespan))
                  (PP (IN of)
                    (NP
                      (NP (DT the) (VBG resulting) (JJ MAPF-DP) (NN plan))
                      (PP (IN in)
                        (NP (JJ node) (NNP N))))))
                (VP (VBZ is) (RB not)
                  (ADJP
                    (ADJP (RB much) (JJR larger))
                    (PP (IN than)
                      (NP
                        (NP (DT the) (NN one))
                        (PP (IN of)
                          (NP (DT the) (NNP MAPF-DP) (NN plan))))))
                  (PP (IN in)
                    (NP
                      (NP (DT the) (NN parent) (NN node))
                      (PP (IN of)
                        (NP (JJ node) (NNP N))))))))))))
    (. .)))

det(objective-2, This-1)
nsubj(tries-3, objective-2)
nsubj:xsubj(ensure-5, objective-2)
root(ROOT-0, tries-3)
mark(ensure-5, to-4)
xcomp(tries-3, ensure-5)
mark(larger-22, that-6)
det(makespan-10, the-7)
amod(makespan-10, approximate-8)
amod(makespan-10, average-9)
nsubj(larger-22, makespan-10)
case(plan-15, of-11)
det(plan-15, the-12)
amod(plan-15, resulting-13)
amod(plan-15, MAPF-DP-14)
nmod:of(makespan-10, plan-15)
case(N-18, in-16)
amod(N-18, node-17)
nmod:in(plan-15, N-18)
cop(larger-22, is-19)
neg(larger-22, not-20)
advmod(larger-22, much-21)
ccomp(ensure-5, larger-22)
case(one-25, than-23)
det(one-25, the-24)
nmod:than(larger-22, one-25)
case(plan-29, of-26)
det(plan-29, the-27)
compound(plan-29, MAPF-DP-28)
nmod:of(one-25, plan-29)
case(node-33, in-30)
det(node-33, the-31)
compound(node-33, parent-32)
nmod:in(larger-22, node-33)
case(N-36, of-34)
amod(N-36, node-35)
nmod:of(node-33, N-36)

(ROOT
  (S
    (NP (DT The) (JJ low-level) (NN search))
    (ADVP (RB thus))
    (VP
      (ADVP (RB repeatedly))
      (VBZ expands)
      (NP
        (NP (DT a) (NN state))
        (PP (IN with)
          (NP
            (NP (DT the) (JJS smallest) (NN f-value))
            (PP (IN among)
              (NP
                (NP (DT all) (NNS states))
                (PP (IN in)
                  (NP (DT the) (NN priority) (NN queue)))))))))
    (. .)))

det(search-3, The-1)
amod(search-3, low-level-2)
nsubj(expands-6, search-3)
advmod(expands-6, thus-4)
advmod(expands-6, repeatedly-5)
root(ROOT-0, expands-6)
det(state-8, a-7)
dobj(expands-6, state-8)
case(f-value-12, with-9)
det(f-value-12, the-10)
amod(f-value-12, smallest-11)
nmod:with(state-8, f-value-12)
case(states-15, among-13)
det(states-15, all-14)
nmod:among(f-value-12, states-15)
case(queue-19, in-16)
det(queue-19, the-17)
compound(queue-19, priority-18)
nmod:in(states-15, queue-19)

(ROOT
  (S
    (S
      (NP (DT The) (JJ low-level) (NN search))
      (VP (VBZ terminates)
        (ADVP (RB successfully))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (VP (IN about)
                (S
                  (VP (TO to)
                    (VP (VB expand)
                      (NP
                        (NP
                          (NP (DT a) (NN state))
                          (PRN (-LRB- -LRB-)
                            (NP
                              (NP (NN l))
                              (, ,)
                              (NP (SYM x)))
                            (-RRB- -RRB-)))
                        (PP (IN with)
                          (NP (NNP l)))
                        (SBAR
                          (S
                            (VP (SYM =)
                              (NP (NN gi)))))))))))))))
    (CC and)
    (S
      (NP (NNP N.constraints))
      (VP (VBZ contains)
        (NP
          (NP (DT no) (NNS constraints))
          (PP (IN of)
            (NP
              (NP (DT the) (NN form))
              (PRN (-LRB- -LRB-)
                (NP (NNP ai))
                (, ,)
                (NP
                  (NP (NN gi))
                  (, ,)
                  (NP (SYM x)))
                (-RRB- -RRB-)))))
        (PP (IN with)
          (NP
            (NP (SYM x))
            (RRC
              (ADVP (RB >))
              (NP (SYM x)))))))
    (. .)))

det(search-3, The-1)
amod(search-3, low-level-2)
nsubj(terminates-4, search-3)
root(ROOT-0, terminates-4)
advmod(terminates-4, successfully-5)
advmod(about-9, when-6)
nsubj(about-9, it-7)
nsubj:xsubj(expand-11, it-7)
aux(about-9, is-8)
advcl(terminates-4, about-9)
mark(expand-11, to-10)
xcomp(about-9, expand-11)
det(state-13, a-12)
dobj(expand-11, state-13)
dep(state-13, l-15)
appos(l-15, x-17)
case(l-20, with-19)
nmod:with(state-13, l-20)
dep(gi-22, =-21)
acl:relcl(state-13, gi-22)
cc(terminates-4, and-23)
nsubj(contains-25, N.constraints-24)
conj:and(terminates-4, contains-25)
neg(constraints-27, no-26)
dobj(contains-25, constraints-27)
case(form-30, of-28)
det(form-30, the-29)
nmod:of(constraints-27, form-30)
dep(form-30, ai-32)
dep(ai-32, gi-34)
appos(gi-34, x-36)
case(x-39, with-38)
nmod:with(contains-25, x-39)
advmod(x-41, >-40)
acl:relcl(x-39, x-41)

(ROOT
  (S
    (S
      (NP (PRP It))
      (ADVP (RB then))
      (VP (VBZ sets)
        (NP (NNP Xi))))
    (: :)
    (S
      (S
        (VP (SYM =)
          (NP (NNS x))))
      (, ,)
      (NP (DT the) (NNS locations))
      (VP (VBP li)
        (SBAR
          (S
            (S
              (LST (-LRB- -LRB-) (LS x) (-RRB- -RRB-))
              (NP (DT that))
              (VP (VBP form)
                (SBAR
                  (S
                    (NP
                      (NP (DT the) (NN path))
                      (PP (IN of)
                        (NP (NN agent))))
                    (VP (VBP ai)
                      (PP (TO to)
                        (NP
                          (NP (DT the) (JJ corresponding) (NNS locations))
                          (PP (IN in)
                            (NP (DT the) (NNS states)))))
                      (PP (IN on)
                        (NP
                          (NP (DT the)
                            (ADJP (VBN found))
                            (NN path))
                          (PP (IN from)
                            (NP
                              (NP
                                (NP (DT the) (NN start) (NN state))
                                (SBAR
                                  (S
                                    (VP (TO to)))))
                              (PRN (-LRB- -LRB-)
                                (NP
                                  (NP (NN l))
                                  (, ,)
                                  (NP (SYM x)))
                                (-RRB- -RRB-)))))))))))
            (CC and)
            (S
              (NP (DT the) (JJ approximate) (JJ average) (NN time))
              (VP (VBZ steps)
                (NP
                  (NP
                    (NP (NN li))
                    (-LRB- -LRB-)
                    (NP (SYM x))
                    (-RRB- -RRB-))
                  (PP (TO to)
                    (NP
                      (NP (DT the) (JJ corresponding) (NNS g-values))
                      (PP (IN of)
                        (NP (DT these) (NNS states))))))))))))
    (. .)))

nsubj(sets-3, It-1)
advmod(sets-3, then-2)
root(ROOT-0, sets-3)
dobj(sets-3, Xi-4)
dep(x-7, =-6)
ccomp(li-11, x-7)
det(locations-10, the-9)
nsubj(li-11, locations-10)
parataxis(sets-3, li-11)
dep(form-16, x-13)
nsubj(form-16, that-15)
dep(li-11, form-16)
det(path-18, the-17)
nsubj(locations-25, path-18)
case(agent-20, of-19)
nmod:of(path-18, agent-20)
cop(locations-25, ai-21)
case(locations-25, to-22)
det(locations-25, the-23)
amod(locations-25, corresponding-24)
ccomp(form-16, locations-25)
case(states-28, in-26)
det(states-28, the-27)
nmod:in(locations-25, states-28)
case(path-32, on-29)
det(path-32, the-30)
amod(path-32, found-31)
nmod:on(locations-25, path-32)
case(state-36, from-33)
det(state-36, the-34)
compound(state-36, start-35)
nmod:from(path-32, state-36)
acl(state-36, to-37)
dep(state-36, l-39)
appos(l-39, x-41)
cc(form-16, and-43)
det(time-47, the-44)
amod(time-47, approximate-45)
amod(time-47, average-46)
nsubj(steps-48, time-47)
dep(li-11, steps-48)
conj:and(form-16, steps-48)
dobj(steps-48, li-49)
dep(li-49, x-51)
case(g-values-56, to-53)
det(g-values-56, the-54)
amod(g-values-56, corresponding-55)
nmod:to(li-49, g-values-56)
case(states-59, of-57)
det(states-59, these-58)
nmod:of(g-values-56, states-59)

(ROOT
  (S
    (NP (DT The) (JJ low-level) (NN search))
    (VP (VBZ terminates)
      (ADVP (RB unsuccessfully))
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (DT the) (NN priority) (NN queue))
          (VP (VBZ becomes)
            (ADJP (JJ empty))))))
    (. .)))

det(search-3, The-1)
amod(search-3, low-level-2)
nsubj(terminates-4, search-3)
root(ROOT-0, terminates-4)
advmod(terminates-4, unsuccessfully-5)
advmod(becomes-10, when-6)
det(queue-9, the-7)
compound(queue-9, priority-8)
nsubj(becomes-10, queue-9)
advcl(terminates-4, becomes-10)
xcomp(becomes-10, empty-11)

(ROOT
  (S
    (S
      (NP (DT The) (JJ low-level) (NN search))
      (ADVP (RB currently))
      (VP (VBZ does) (RB not)
        (VP (VB terminate)
          (ADVP (RB otherwise)))))
    (CC but)
    (S
      (NP (PRP we))
      (VP (MD might)
        (VP (VB be)
          (ADJP (JJ able)
            (S
              (VP (TO to)
                (VP (VB make)
                  (S
                    (NP (PRP it))
                    (ADJP (JJ complete)
                      (PP (IN by)
                        (S
                          (VP (VBG using)
                            (NP
                              (NP (DT an) (JJ upper)
                                (ADJP (VBN bound)
                                  (PP (IN on)
                                    (NP (DT the) (JJS smallest) (NN average))))
                                (NN makespan))
                              (PP (IN of)
                                (NP (DT any) (JJ valid) (NNP MAPF-DP) (NN plan)))
                              (, ,)
                              (ADJP
                                (ADJP (JJ similar)
                                  (PP (TO to)
                                    (NP
                                      (NP (JJ upper) (NNS bounds))
                                      (PP (IN in)
                                        (NP
                                          (NP (DT the) (NN context))
                                          (PP (IN of)
                                            (NP (JJ valid) (NNP MAPF) (NNS plans))))))))
                                (PRN (-LRB- -LRB-)
                                  (NP
                                    (NP (NNP Kornhauser))
                                    (, ,)
                                    (NP (NNP Miller))
                                    (, ,)
                                    (CC and)
                                    (NP (NNP Spirakis) (CD 1984)))
                                  (-RRB- -RRB-))))))))))))))))
    (. .)))

det(search-3, The-1)
amod(search-3, low-level-2)
nsubj(terminate-7, search-3)
advmod(terminate-7, currently-4)
aux(terminate-7, does-5)
neg(terminate-7, not-6)
root(ROOT-0, terminate-7)
advmod(terminate-7, otherwise-8)
cc(terminate-7, but-9)
nsubj(able-13, we-10)
nsubj:xsubj(make-15, we-10)
aux(able-13, might-11)
cop(able-13, be-12)
conj:but(terminate-7, able-13)
mark(make-15, to-14)
xcomp(able-13, make-15)
nsubj(complete-17, it-16)
xcomp(make-15, complete-17)
mark(using-19, by-18)
advcl(complete-17, using-19)
det(makespan-27, an-20)
amod(makespan-27, upper-21)
amod(makespan-27, bound-22)
case(average-26, on-23)
det(average-26, the-24)
amod(average-26, smallest-25)
nmod:on(bound-22, average-26)
dobj(using-19, makespan-27)
case(plan-32, of-28)
det(plan-32, any-29)
amod(plan-32, valid-30)
compound(plan-32, MAPF-DP-31)
nmod:of(makespan-27, plan-32)
amod(makespan-27, similar-34)
case(bounds-37, to-35)
amod(bounds-37, upper-36)
nmod:to(similar-34, bounds-37)
case(context-40, in-38)
det(context-40, the-39)
nmod:in(bounds-37, context-40)
case(plans-44, of-41)
amod(plans-44, valid-42)
compound(plans-44, MAPF-43)
nmod:of(context-40, plans-44)
dep(similar-34, Kornhauser-46)
dep(similar-34, Miller-48)
conj:and(Kornhauser-46, Miller-48)
cc(Kornhauser-46, and-50)
dep(similar-34, Spirakis-51)
conj:and(Kornhauser-46, Spirakis-51)
nummod(Spirakis-51, 1984-52)

(ROOT
  (S
    (NP
      (NP (NNP Future) (NNP Work))
      (NP (DT The) (JJ low-level) (NN search)))
    (VP (VBZ is)
      (ADVP (RB currently))
      (NP
        (NP (DT the) (JJS weakest) (NN part))
        (PP (IN of)
          (NP
            (NP (NNP AME))
            (ADJP (JJ due)
              (PP (TO to)
                (NP (DT the) (JJ many) (NNS approximations)))
              (S
                (VP (TO to)
                  (VP (VB keep)
                    (NP
                      (NP (PRP$ its) (NN runtime) (JJ small))
                      (SBAR
                        (WHNP (WDT which))
                        (S
                          (VP (VBZ is)
                            (ADJP (JJ important)))))))))
              (SBAR (IN since)
                (S
                  (NP (DT the) (JJ high-level) (NN search))
                  (VP (VBZ runs)
                    (NP (JJ many) (JJ low-level) (NNS searches))))))))))
    (. .)))

compound(Work-2, Future-1)
nsubj(part-10, Work-2)
det(search-5, The-3)
amod(search-5, low-level-4)
dep(Work-2, search-5)
cop(part-10, is-6)
advmod(part-10, currently-7)
det(part-10, the-8)
amod(part-10, weakest-9)
root(ROOT-0, part-10)
case(AME-12, of-11)
nmod:of(part-10, AME-12)
amod(AME-12, due-13)
case(approximations-17, to-14)
det(approximations-17, the-15)
amod(approximations-17, many-16)
nmod:to(due-13, approximations-17)
mark(keep-19, to-18)
xcomp(due-13, keep-19)
nmod:poss(runtime-21, its-20)
dobj(keep-19, runtime-21)
nsubj(important-25, runtime-21)
amod(runtime-21, small-22)
ref(runtime-21, which-23)
cop(important-25, is-24)
acl:relcl(runtime-21, important-25)
mark(runs-30, since-26)
det(search-29, the-27)
amod(search-29, high-level-28)
nsubj(runs-30, search-29)
ccomp(due-13, runs-30)
amod(searches-33, many-31)
amod(searches-33, low-level-32)
dobj(runs-30, searches-33)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP expect)
      (SBAR (IN that)
        (S
          (NP (JJ future) (NN work))
          (VP (MD will)
            (VP (VB be)
              (ADJP (JJ able)
                (S
                  (VP (TO to)
                    (VP (VB improve)
                      (NP (DT the) (JJ low-level) (NN search))
                      (ADVP (RB substantially)))))))))))
    (. .)))

nsubj(expect-2, We-1)
root(ROOT-0, expect-2)
mark(able-8, that-3)
amod(work-5, future-4)
nsubj(able-8, work-5)
nsubj:xsubj(improve-10, work-5)
aux(able-8, will-6)
cop(able-8, be-7)
ccomp(expect-2, able-8)
mark(improve-10, to-9)
xcomp(able-8, improve-10)
det(search-13, the-11)
amod(search-13, low-level-12)
dobj(improve-10, search-13)
advmod(improve-10, substantially-14)

(ROOT
  (S
    (PP (IN For)
      (NP (NN example)))
    (, ,)
    (NP
      (NP
        (NP (DT the) (JJ approximate) (JJ average) (NN time) (NNS steps) (NN lj))
        (-LRB- -LRB-)
        (NP (SYM x))
        (-RRB- -RRB-))
      (PP (IN for)
        (NP
          (NP (NNS agents))
          (VP (VBN aj)
            (ADJP (JJ different))
            (PP (IN from)
              (NP (NN agent) (NNS ai)))))))
    (VP (MD could)
      (VP (VB be)
        (VP (VBN updated)
          (ADVP (RB before))
          (, ,)
          (PP
            (PP (IN during))
            (CC or)
            (PP (IN after)
              (NP
                (NP (DT the) (JJ local) (NN search))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (VP (MD would)
                      (VP (VB provide)
                        (NP
                          (NP
                            (NP
                              (ADJP (RBR more) (JJ accurate))
                              (NNS values))
                            (PP (IN for)
                              (NP (DT the) (JJ current)
                                (CC and)
                                (JJ future) (JJ low-level) (NNS searches))))
                          (CONJP (RB as) (RB well) (IN as))
                          (NP (DT the) (JJ current) (JJ high-level) (NN search)))))))))))))
    (. .)))

case(example-2, For-1)
nmod:for(updated-22, example-2)
det(lj-9, the-4)
amod(lj-9, approximate-5)
amod(lj-9, average-6)
compound(lj-9, time-7)
compound(lj-9, steps-8)
nsubjpass(updated-22, lj-9)
dep(lj-9, x-11)
case(agents-14, for-13)
nmod:for(lj-9, agents-14)
acl(agents-14, aj-15)
xcomp(aj-15, different-16)
case(ai-19, from-17)
compound(ai-19, agent-18)
nmod:from(aj-15, ai-19)
aux(updated-22, could-20)
auxpass(updated-22, be-21)
root(ROOT-0, updated-22)
advmod(updated-22, before-23)
nmod(updated-22, during-25)
cc(during-25, or-26)
case(search-30, after-27)
det(search-30, the-28)
amod(search-30, local-29)
nmod(updated-22, search-30)
conj:or(during-25, search-30)
nsubj(provide-34, search-30)
ref(search-30, which-32)
aux(provide-34, would-33)
acl:relcl(search-30, provide-34)
advmod(accurate-36, more-35)
amod(values-37, accurate-36)
dobj(provide-34, values-37)
case(current-40, for-38)
det(current-40, the-39)
nmod:for(values-37, current-40)
cc(current-40, and-41)
amod(searches-44, future-42)
amod(searches-44, low-level-43)
nmod:for(values-37, searches-44)
conj:and(current-40, searches-44)
cc(values-37, as-45)
mwe(as-45, well-46)
mwe(as-45, as-47)
det(search-51, the-48)
amod(search-51, current-49)
amod(search-51, high-level-50)
dobj(provide-34, search-51)
conj:and(values-37, search-51)

(ROOT
  (S
    (SBAR (IN Once)
      (S
        (NP (DT the) (JJ low-level) (NN search))
        (VP (VBZ finds)
          (SBAR
            (S
              (NP
                (NP (DT a) (NN path))
                (PP (IN for)
                  (NP
                    (NP (NN agent) (NNS ai))
                    (CC and)
                    (NP (DT the) (JJ high-level) (NN search)))))
              (VP (VBZ replaces)
                (SBAR
                  (S
                    (NP
                      (NP (DT the) (NN path))
                      (PP (IN of)
                        (NP (NN agent))))
                    (VP (VBP ai)
                      (PP (IN in)
                        (NP
                          (NP (DT the) (JJ MAPF-DP) (NN plan))
                          (PP (IN in)
                            (NP
                              (NP (DT the) (JJ current) (JJ high-level) (NN node))
                              (PP (IN with)
                                (NP (DT this) (NN path))))))))))))))))
    (, ,)
    (NP (PRP it))
    (VP (MD could)
      (VP (VB update)
        (NP
          (NP (DT the) (JJ approximate) (JJ average) (NN time) (NNS steps))
          (PP (IN of)
            (NP (DT all) (NNS agents))))
        (PP (TO to)
          (NP
            (NP (DT the) (JJ ideal) (JJ approximate) (JJ average) (NN time) (NNS steps))
            (VP (VBN given)
              (PP (IN by)
                (NP
                  (NP (NNP Equations))
                  (PRN (-LRB- -LRB-)
                    (NP (CD 1))
                    (-RRB- -RRB-))
                  (, ,)
                  (PP (IN for)
                    (NP (NN example)))))
              (PP (IN as)
                (NP
                  (NP (NN part))
                  (PP (IN of)
                    (NP
                      (NP (DT the) (NN execution))
                      (PP (IN of)
                        (NP (NNP ApproximateAverageMakespan)))))))
              (PP (IN on)
                (NP (NNP Lines) (CD 7)
                  (CC and)
                  (CD 21))))))))
    (. .)))

mark(finds-5, Once-1)
det(search-4, the-2)
amod(search-4, low-level-3)
nsubj(finds-5, search-4)
advcl(update-36, finds-5)
det(path-7, a-6)
nsubj(replaces-15, path-7)
case(ai-10, for-8)
compound(ai-10, agent-9)
nmod:for(path-7, ai-10)
cc(ai-10, and-11)
det(search-14, the-12)
amod(search-14, high-level-13)
nmod:for(path-7, search-14)
conj:and(ai-10, search-14)
ccomp(finds-5, replaces-15)
det(path-17, the-16)
nsubj(plan-24, path-17)
case(agent-19, of-18)
nmod:of(path-17, agent-19)
cop(plan-24, ai-20)
case(plan-24, in-21)
det(plan-24, the-22)
amod(plan-24, MAPF-DP-23)
ccomp(replaces-15, plan-24)
case(node-29, in-25)
det(node-29, the-26)
amod(node-29, current-27)
amod(node-29, high-level-28)
nmod:in(plan-24, node-29)
case(path-32, with-30)
det(path-32, this-31)
nmod:with(node-29, path-32)
nsubj(update-36, it-34)
aux(update-36, could-35)
root(ROOT-0, update-36)
det(steps-41, the-37)
amod(steps-41, approximate-38)
amod(steps-41, average-39)
compound(steps-41, time-40)
dobj(update-36, steps-41)
case(agents-44, of-42)
det(agents-44, all-43)
nmod:of(steps-41, agents-44)
case(steps-51, to-45)
det(steps-51, the-46)
amod(steps-51, ideal-47)
amod(steps-51, approximate-48)
amod(steps-51, average-49)
compound(steps-51, time-50)
nmod:to(update-36, steps-51)
acl(steps-51, given-52)
case(Equations-54, by-53)
nmod:by(given-52, Equations-54)
appos(Equations-54, 1-56)
case(example-60, for-59)
nmod:for(Equations-54, example-60)
case(part-62, as-61)
nmod:as(given-52, part-62)
case(execution-65, of-63)
det(execution-65, the-64)
nmod:of(part-62, execution-65)
case(ApproximateAverageMakespan-67, of-66)
nmod:of(execution-65, ApproximateAverageMakespan-67)
case(Lines-69, on-68)
nmod:on(given-52, Lines-69)
nummod(Lines-69, 7-70)
cc(Lines-69, and-71)
nmod:on(given-52, 21-72)
conj:and(Lines-69, 21-72)

(ROOT
  (S
    (NP (JJ Many) (JJ other) (NNS improvements))
    (VP (VBP are)
      (ADJP (JJ possible))
      (ADVP (RB as) (RB well)))
    (. .)))

amod(improvements-3, Many-1)
amod(improvements-3, other-2)
nsubj(possible-5, improvements-3)
cop(possible-5, are-4)
root(ROOT-0, possible-5)
advmod(possible-5, as-6)
mwe(as-6, well-7)

(ROOT
  (NP
    (NP (NNP Figure) (CD 4))
    (: :)
    (NP
      (NP
        (NP
          (NP (CD Two) (JJ MAPF-DP) (NNS instances))
          (: :)
          (ADJP (JJ random)
            (NP (CD 1))))
        (PRN (-LRB- -LRB-)
          (NP (NN top))
          (-RRB- -RRB-)))
      (CC and)
      (NP
        (NP (NN warehouse) (CD 1))
        (PRN (-LRB- -LRB-)
          (NP (NN bottom))
          (-RRB- -RRB-))))
    (. .)))

root(ROOT-0, Figure-1)
nummod(Figure-1, 4-2)
nummod(instances-6, Two-4)
amod(instances-6, MAPF-DP-5)
dep(Figure-1, instances-6)
amod(instances-6, random-8)
dep(random-8, 1-9)
appos(instances-6, top-11)
cc(instances-6, and-13)
dep(Figure-1, warehouse-14)
conj:and(instances-6, warehouse-14)
nummod(warehouse-14, 1-15)
appos(warehouse-14, bottom-17)

(ROOT
  (S
    (NP (JJ Blocked) (NNS cells))
    (VP (VBP are)
      (VP (VBN shown)
        (PP (IN in)
          (NP (JJ black)))))
    (. .)))

amod(cells-2, Blocked-1)
nsubjpass(shown-4, cells-2)
auxpass(shown-4, are-3)
root(ROOT-0, shown-4)
case(black-6, in-5)
nmod:in(shown-4, black-6)

(ROOT
  (S
    (NP
      (NP (DT The) (NN start)
        (CC and)
        (NN goal) (NNS cells))
      (PP (IN for)
        (NP (DT each) (NN agent))))
    (VP (VBP are)
      (VP (VBN represented)
        (PP (IN by)
          (NP
            (NP (DT a) (JJ solid) (NN circle))
            (CC and)
            (NP
              (NP (DT a) (JJ hollow) (NN circle))
              (PP (IN of)
                (NP (DT the) (JJ same) (NN color))))))
        (, ,)
        (ADVP (RB respectively))))
    (. .)))

det(cells-5, The-1)
compound(cells-5, start-2)
cc(start-2, and-3)
conj:and(start-2, goal-4)
compound(cells-5, goal-4)
nsubjpass(represented-10, cells-5)
case(agent-8, for-6)
det(agent-8, each-7)
nmod:for(cells-5, agent-8)
auxpass(represented-10, are-9)
root(ROOT-0, represented-10)
case(circle-14, by-11)
det(circle-14, a-12)
amod(circle-14, solid-13)
nmod:agent(represented-10, circle-14)
cc(circle-14, and-15)
det(circle-18, a-16)
amod(circle-18, hollow-17)
nmod:agent(represented-10, circle-18)
conj:and(circle-14, circle-18)
case(color-22, of-19)
det(color-22, the-20)
amod(color-22, same-21)
nmod:of(circle-18, color-22)
advmod(represented-10, respectively-24)

(ROOT
  (S
    (NP
      (NP
        (QP (CD Table) (CD 1))
        (NNS reports))
      (PP (IN for)
        (NP
          (NP
            (NP (DT each) (JJ MAPF-DP) (NN instance))
            (NP (DT the) (NN runtime)))
          (, ,)
          (NP
            (NP (DT the) (JJ approximate) (JJ average) (NN makespan))
            (VP (VBN calculated)
              (PP (IN by)
                (NP
                  (NP (NNP AME))
                  (, ,)
                  (NP
                    (NP (DT the) (JJ average) (NN makespan))
                    (PP (IN over)
                      (NP
                        (NP (CD 1,000) (JJ plan-execution) (NNS runs))
                        (PP (IN with)
                          (NP (NNP MCPs))))))))
              (PP
                (ADVP (RB together))
                (IN with)
                (NP (CD 95) (NN %)))))
          (: -)
          (NP (NN confidence) (NNS intervals))
          (CC and)
          (NP
            (NP (DT the) (NN number))
            (PP (IN of))))))
    (VP (VBD sent)
      (NP (NNS messages)))
    (. .)))

compound(1-2, Table-1)
nummod(reports-3, 1-2)
nsubj(sent-39, reports-3)
case(instance-7, for-4)
det(instance-7, each-5)
amod(instance-7, MAPF-DP-6)
nmod:for(reports-3, instance-7)
det(runtime-9, the-8)
dep(instance-7, runtime-9)
det(makespan-14, the-11)
amod(makespan-14, approximate-12)
amod(makespan-14, average-13)
nmod:for(reports-3, makespan-14)
conj:and(instance-7, makespan-14)
acl(makespan-14, calculated-15)
case(AME-17, by-16)
nmod:by(calculated-15, AME-17)
det(makespan-21, the-19)
amod(makespan-21, average-20)
appos(AME-17, makespan-21)
case(runs-25, over-22)
nummod(runs-25, 1,000-23)
amod(runs-25, plan-execution-24)
nmod:over(makespan-21, runs-25)
case(MCPs-27, with-26)
nmod:with(runs-25, MCPs-27)
case(%-31, together-28)
mwe(together-28, with-29)
nummod(%-31, 95-30)
nmod:together_with(calculated-15, %-31)
compound(intervals-34, confidence-33)
nmod:for(reports-3, intervals-34)
conj:and(instance-7, intervals-34)
cc(instance-7, and-35)
det(number-37, the-36)
nmod:for(reports-3, number-37)
conj:and(instance-7, number-37)
acl(number-37, of-38)
root(ROOT-0, sent-39)
dobj(sent-39, messages-40)

(ROOT
  (S
    (NP (NNS Dashes))
    (VP (VBP indicate)
      (SBAR (IN that)
        (S
          (NP (DT the) (NNP MAPFDP) (NN instance))
          (VP (VBD was) (RB not)
            (VP (VBN solved)
              (PP (IN within)
                (NP
                  (NP (DT a) (JJ runtime) (NN limit))
                  (PP (IN of)
                    (NP (CD 5) (NNS minutes))))))))))
    (. .)))

nsubj(indicate-2, Dashes-1)
root(ROOT-0, indicate-2)
mark(solved-9, that-3)
det(instance-6, the-4)
compound(instance-6, MAPFDP-5)
nsubjpass(solved-9, instance-6)
auxpass(solved-9, was-7)
neg(solved-9, not-8)
ccomp(indicate-2, solved-9)
case(limit-13, within-10)
det(limit-13, a-11)
amod(limit-13, runtime-12)
nmod:within(solved-9, limit-13)
case(minutes-16, of-14)
nummod(minutes-16, 5-15)
nmod:of(limit-13, minutes-16)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (NP
        (NP (DT no) (JJ obvious) (NN difference))
        (PP (IN in)
          (NP
            (NP (DT the) (NNS numbers))
            (PP (IN of)
              (S
                (VP (VBN sent)
                  (NP
                    (NP (NNS messages))
                    (PP (IN of)
                      (NP (DT the)
                        (ADJP
                          (ADJP
                            (QP (CD 3) (CD MAPF)))
                          (PRN (-LRB- -LRB-)
                            (NP (NNP -) (NNP DP))
                            (-RRB- -RRB-)))
                        (NNS solvers)))))))))))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
neg(difference-5, no-3)
amod(difference-5, obvious-4)
nsubj(is-2, difference-5)
case(numbers-8, in-6)
det(numbers-8, the-7)
nmod:in(difference-5, numbers-8)
mark(sent-10, of-9)
acl(numbers-8, sent-10)
dobj(sent-10, messages-11)
case(solvers-20, of-12)
det(solvers-20, the-13)
compound(MAPF-15, 3-14)
amod(solvers-20, MAPF-15)
compound(DP-18, --17)
dep(MAPF-15, DP-18)
nmod:of(messages-11, solvers-20)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP (NNP AME))
    (VP (VBZ seems)
      (S
        (VP (TO to)
          (VP (VB find)
            (NP (JJ MAPF-DP) (NNS plans))
            (PP (IN with)
              (NP (JJR smaller) (JJ average) (NNS makespans)))
            (PP (IN than)
              (NP
                (NP (NNP Adapted) (NNP CBS))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (VP (VBZ seems)
                      (S
                        (VP (TO to)
                          (VP (VB find)
                            (NP (NNP MAPFDP) (NNS plans))
                            (PP (IN with)
                              (NP
                                (NP (JJR smaller) (NN average) (NNS makespans))
                                (PP (IN than)
                                  (NP (NNP Push)
                                    (CC and)
                                    (NNP Swap)))))))))))))))))
    (. .)))

advmod(seems-4, However-1)
nsubj(seems-4, AME-3)
nsubj:xsubj(find-6, AME-3)
root(ROOT-0, seems-4)
mark(find-6, to-5)
xcomp(seems-4, find-6)
amod(plans-8, MAPF-DP-7)
dobj(find-6, plans-8)
case(makespans-12, with-9)
amod(makespans-12, smaller-10)
amod(makespans-12, average-11)
nmod:with(find-6, makespans-12)
case(CBS-15, than-13)
compound(CBS-15, Adapted-14)
nmod:than(find-6, CBS-15)
nsubj(seems-18, CBS-15)
nsubj:xsubj(find-20, CBS-15)
ref(CBS-15, which-17)
acl:relcl(CBS-15, seems-18)
mark(find-20, to-19)
xcomp(seems-18, find-20)
compound(plans-22, MAPFDP-21)
dobj(find-20, plans-22)
case(makespans-26, with-23)
amod(makespans-26, smaller-24)
compound(makespans-26, average-25)
nmod:with(find-20, makespans-26)
case(Push-28, than-27)
nmod:than(makespans-26, Push-28)
cc(Push-28, and-29)
nmod:than(makespans-26, Swap-30)
conj:and(Push-28, Swap-30)

(ROOT
  (S
    (NP
      (NP (DT The) (JJ approximate) (JJ average) (NNS makespans))
      (VP (VBN calculated)
        (PP (IN by)
          (NP (NNP AME)))))
    (VP (VBP are)
      (ADJP (JJ underestimates)
        (CC but)
        (RB reasonably) (JJ close))
      (PP (TO to)
        (NP (DT the) (JJ average) (NNS makespans))))
    (. .)))

det(makespans-4, The-1)
amod(makespans-4, approximate-2)
amod(makespans-4, average-3)
nsubj(makespans-16, makespans-4)
acl(makespans-4, calculated-5)
case(AME-7, by-6)
nmod:by(calculated-5, AME-7)
cop(makespans-16, are-8)
dep(makespans-16, underestimates-9)
cc(makespans-16, but-10)
advmod(makespans-16, reasonably-11)
case(makespans-16, close-12)
mwe(close-12, to-13)
det(makespans-16, the-14)
amod(makespans-16, average-15)
root(ROOT-0, makespans-16)

(ROOT
  (S
    (NP
      (NP (NNP AME))
      (CC and)
      (NP (NNP Push)
        (CC and)
        (NNP Swap)))
    (VP (VBP seem)
      (S
        (VP (TO to)
          (VP (VB run)
            (ADVP (RBR faster))
            (PP (IN than)
              (NP (NNP Adapted) (NNP CBS)))))))
    (. .)))

nsubj(seem-6, AME-1)
nsubj:xsubj(run-8, AME-1)
cc(AME-1, and-2)
conj:and(AME-1, Push-3)
nsubj(seem-6, Push-3)
nsubj:xsubj(run-8, Push-3)
cc(Push-3, and-4)
conj:and(AME-1, Swap-5)
conj:and(Push-3, Swap-5)
root(ROOT-0, seem-6)
mark(run-8, to-7)
xcomp(seem-6, run-8)
advmod(run-8, faster-9)
case(CBS-12, than-10)
compound(CBS-12, Adapted-11)
nmod:than(run-8, CBS-12)

(ROOT
  (S
    (PP (IN In)
      (NP (NN fact)))
    (, ,)
    (NP (NNP Adapted) (NNP CBS))
    (VP (VBD did) (RB not)
      (VP (VB solve)
        (NP (NNP MAPFDP) (NNS instances))
        (PP (IN with)
          (NP
            (NP
              (QP (JJR more) (IN than) (CD 35))
              (NNS agents))
            (PP (IN within)
              (NP (DT the) (JJ runtime) (NN limit)))))
        (SBAR (IN while)
          (S
            (NP
              (NP (NNP AME))
              (CC and)
              (NP (NNP Push)
                (CC and)
                (NNP Swap)))
            (VP (VBP seem)
              (S
                (VP (TO to)
                  (VP (VB scale)
                    (PP (TO to)
                      (NP
                        (NP (JJR larger) (NNS numbers))
                        (PP (IN of)
                          (NP (NNS agents)))))
                    (SBAR (IN than)
                      (S
                        (VP (VBD reported)
                          (ADVP (RB here))
                          (PRN (-LRB- -LRB-)
                            (S
                              (VP (VB see)
                                (PP (RB also)
                                  (NP (NNP Experiment) (CD 3)))))
                            (-RRB- -RRB-)))))))))))))
    (. .)))

case(fact-2, In-1)
nmod:in(solve-8, fact-2)
compound(CBS-5, Adapted-4)
nsubj(solve-8, CBS-5)
aux(solve-8, did-6)
neg(solve-8, not-7)
root(ROOT-0, solve-8)
compound(instances-10, MAPFDP-9)
dobj(solve-8, instances-10)
case(agents-15, with-11)
advmod(35-14, more-12)
mwe(more-12, than-13)
nummod(agents-15, 35-14)
nmod:with(solve-8, agents-15)
case(limit-19, within-16)
det(limit-19, the-17)
amod(limit-19, runtime-18)
nmod:within(agents-15, limit-19)
mark(seem-26, while-20)
nsubj(seem-26, AME-21)
nsubj:xsubj(scale-28, AME-21)
cc(AME-21, and-22)
conj:and(AME-21, Push-23)
nsubj(seem-26, Push-23)
nsubj:xsubj(scale-28, Push-23)
cc(Push-23, and-24)
conj:and(AME-21, Swap-25)
conj:and(Push-23, Swap-25)
advcl(solve-8, seem-26)
mark(scale-28, to-27)
xcomp(seem-26, scale-28)
case(numbers-31, to-29)
amod(numbers-31, larger-30)
nmod:to(scale-28, numbers-31)
case(agents-33, of-32)
nmod:of(numbers-31, agents-33)
mark(reported-35, than-34)
advcl(scale-28, reported-35)
advmod(reported-35, here-36)
parataxis(reported-35, see-38)
advmod(Experiment-40, also-39)
nmod(see-38, Experiment-40)
nummod(Experiment-40, 3-41)

(ROOT
  (S
    (VP (VB Experiments)
      (S
        (NP (PRP We))
        (VP (VB evaluate)
          (NP
            (NP (NNP AME))
            (PP (IN with)
              (NP (NNP MCPs))))
          (PP (IN on)
            (NP
              (NP (DT a) (CD 2.50) (NNP GHz) (NNP Intel) (NNP Core) (JJ i52450M) (NN PC))
              (PP (IN with)
                (NP (CD 6) (NNP GB) (NNS RAM))))))))
    (. .)))

root(ROOT-0, Experiments-1)
nsubj(evaluate-3, We-2)
ccomp(Experiments-1, evaluate-3)
dobj(evaluate-3, AME-4)
case(MCPs-6, with-5)
nmod:with(AME-4, MCPs-6)
case(PC-14, on-7)
det(PC-14, a-8)
nummod(PC-14, 2.50-9)
compound(PC-14, GHz-10)
compound(PC-14, Intel-11)
compound(PC-14, Core-12)
amod(PC-14, i52450M-13)
nmod:on(evaluate-3, PC-14)
case(RAM-18, with-15)
nummod(RAM-18, 6-16)
compound(RAM-18, GB-17)
nmod:with(PC-14, RAM-18)

(ROOT
  (NP
    (NP (NNP Experiment) (CD 1))
    (: :)
    (NP
      (NP (NNP MAPF) (NNP Solvers))
      (SBAR
        (S
          (S
            (NP (PRP We))
            (VP (VBP compare)
              (NP
                (NP (NNP AME))
                (PP (TO to)
                  (NP
                    (NP
                      (QP (CD 2) (CD MAPF))
                      (NNS solvers))
                    (PRN (, ,)
                      (ADVP (RB namely))
                      (NP (CD 1))
                      (-RRB- -RRB-))))
                (UCP
                  (VP (VBN Adapted)
                    (SBAR
                      (S
                        (NP
                          (NP (NNP CBS))
                          (, ,)
                          (NP
                            (NP (DT a) (NNP CBS) (NN variant))
                            (SBAR
                              (WHNP (WDT that))
                              (S
                                (VP
                                  (VP (VBZ assumes)
                                    (NP (JJ perfect) (NN plan) (NN execution)))
                                  (CC and)
                                  (VP (VBZ computes)
                                    (NP (JJ valid) (JJ MAPF-DP) (NNS plans)))))))
                          (, ,))
                        (VP (VBZ minimizes)
                          (NP (JJ maxi) (NN Xi)
                            (CC and)
                            (NNS breaks) (NNS ties))
                          (PP (IN toward)
                            (NP
                              (NP (NNS paths))
                              (PP (IN with)
                                (NP (JJR smaller) (NNS Xi)))))))))
                  (CC and)
                  (RB thus)
                  (NP
                    (NP
                      (ADJP
                        (ADJP (JJR fewer))
                        (PRN
                          (NP
                            (NP (NNS actions))
                            (CC and)
                            (NP (CD 2)))
                          (-RRB- -RRB-)))
                      (NNS Push))
                    (CC and)
                    (NP
                      (NP (NNP Swap))
                      (PRN (-LRB- -LRB-)
                        (NP
                          (NP (NNP Luna))
                          (CC and)
                          (NP (NNP Bekris) (CD 2011)))
                        (-RRB- -RRB-))))))))
          (, ,)
          (S
            (NP
              (NP (DT a) (JJ MAPF) (NN solver))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP
                    (VP (VBZ assumes)
                      (NP (JJ perfect) (NN plan) (NN execution)))
                    (CC and)
                    (VP (VBZ computes)
                      (NP (JJ valid) (NNS MAPF-DP)))))))
            (VP (VBZ plans)
              (SBAR
                (WHADVP (WRB where) (RB exactly))
                (S
                  (NP (CD one) (NN agent))
                  (VP (VBZ executes)
                    (NP (DT a) (NN move) (NN action))
                    (PP (IN at)
                      (NP (DT each) (NN time) (NN step))))))))
          (CC and)
          (RB all)
          (S
            (NP (JJ other) (NNS agents))
            (VP (VBP execute)
              (NP (NN wait) (NNS actions)))))))
    (. .)))

root(ROOT-0, Experiment-1)
nummod(Experiment-1, 1-2)
compound(Solvers-5, MAPF-4)
dep(Experiment-1, Solvers-5)
nsubj(compare-7, We-6)
acl:relcl(Solvers-5, compare-7)
dobj(compare-7, AME-8)
case(solvers-12, to-9)
compound(MAPF-11, 2-10)
nummod(solvers-12, MAPF-11)
nmod:to(AME-8, solvers-12)
dep(1-15, namely-14)
dep(solvers-12, 1-15)
dep(AME-8, Adapted-17)
nsubj(minimizes-34, CBS-18)
det(variant-22, a-20)
compound(variant-22, CBS-21)
appos(CBS-18, variant-22)
nsubj(assumes-24, variant-22)
nsubj(computes-29, variant-22)
ref(variant-22, that-23)
acl:relcl(variant-22, assumes-24)
amod(execution-27, perfect-25)
compound(execution-27, plan-26)
dobj(assumes-24, execution-27)
cc(assumes-24, and-28)
acl:relcl(variant-22, computes-29)
conj:and(assumes-24, computes-29)
amod(plans-32, valid-30)
amod(plans-32, MAPF-DP-31)
dobj(computes-29, plans-32)
ccomp(Adapted-17, minimizes-34)
amod(Xi-36, maxi-35)
dobj(minimizes-34, Xi-36)
cc(Xi-36, and-37)
compound(ties-39, breaks-38)
dobj(minimizes-34, ties-39)
conj:and(Xi-36, ties-39)
case(paths-41, toward-40)
nmod:toward(minimizes-34, paths-41)
case(Xi-44, with-42)
amod(Xi-44, smaller-43)
nmod:with(paths-41, Xi-44)
cc(Adapted-17, and-45)
dep(AME-8, thus-46)
conj:and(Adapted-17, thus-46)
amod(Push-52, fewer-47)
dep(fewer-47, actions-48)
cc(actions-48, and-49)
dep(fewer-47, 2-50)
conj:and(actions-48, 2-50)
dep(Adapted-17, Push-52)
cc(Push-52, and-53)
dep(Adapted-17, Swap-54)
conj:and(Push-52, Swap-54)
dep(Swap-54, Luna-56)
cc(Luna-56, and-57)
dep(Swap-54, Bekris-58)
conj:and(Luna-56, Bekris-58)
nummod(Bekris-58, 2011-59)
det(solver-64, a-62)
amod(solver-64, MAPF-63)
nsubj(assumes-66, solver-64)
nsubj(computes-71, solver-64)
nsubj(plans-74, solver-64)
ref(solver-64, that-65)
acl:relcl(solver-64, assumes-66)
amod(execution-69, perfect-67)
compound(execution-69, plan-68)
dobj(assumes-66, execution-69)
cc(assumes-66, and-70)
acl:relcl(solver-64, computes-71)
conj:and(assumes-66, computes-71)
amod(MAPF-DP-73, valid-72)
dobj(computes-71, MAPF-DP-73)
acl:relcl(Solvers-5, plans-74)
conj:and(compare-7, plans-74)
advmod(exactly-76, where-75)
advmod(executes-79, exactly-76)
nummod(agent-78, one-77)
nsubj(executes-79, agent-78)
advcl(plans-74, executes-79)
det(action-82, a-80)
compound(action-82, move-81)
dobj(executes-79, action-82)
case(step-86, at-83)
det(step-86, each-84)
compound(step-86, time-85)
nmod:at(executes-79, step-86)
cc(compare-7, and-87)
advmod(compare-7, all-88)
amod(agents-90, other-89)
nsubj(execute-91, agents-90)
dep(compare-7, execute-91)
compound(actions-93, wait-92)
dobj(execute-91, actions-93)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP generate)
      (NP
        (NP (CD 10) (JJ MAPFDP) (NNS instances))
        (PRN (-LRB- -LRB-)
          (VP (VBN labeled)
            (S
              (ADJP (JJ random)
                (NP (CD 1-10)))))
          (-RRB- -RRB-))
        (PP (IN in)
          (NP
            (NP (JJ 30x30) (JJ 4-neighbor) (NNS grids))
            (PP (IN with)
              (NP
                (NP
                  (ADJP (CD 10) (NN %))
                  (JJ randomly) (VBN blocked) (NNS cells))
                (CC and)
                (NP
                  (NP
                    (ADJP (JJ random)
                      (CC but)
                      (JJ unique))
                    (NN start)
                    (CC and)
                    (JJ unique) (NN goal) (NNS cells))
                  (PP (IN for)
                    (NP
                      (NP (CD 35) (NNS agents))
                      (SBAR (WP$ whose)
                        (S
                          (NP
                            (NP (NN delay) (NNS probabilities))
                            (PP (IN for)
                              (NP (NNP AME))))
                          (VP (VBP are)
                            (VP (VBN sampled)
                              (ADVP (RB uniformly)
                                (PP (IN at)
                                  (ADJP (JJ random))))
                              (PP (IN from)
                                (NP (DT the) (NN delay) (NN probability) (NN range)))))))
                      (PRN (-LRB- -LRB-)
                        (NP (CD 0))
                        (, ,)
                        (NP (CD 1/2))
                        (-RRB- -RRB-)))))))))))
    (. .)))

nsubj(generate-2, We-1)
root(ROOT-0, generate-2)
nummod(instances-5, 10-3)
amod(instances-5, MAPFDP-4)
dobj(generate-2, instances-5)
dep(instances-5, labeled-7)
xcomp(labeled-7, random-8)
dep(random-8, 1-10-9)
case(grids-14, in-11)
amod(grids-14, 30x30-12)
amod(grids-14, 4-neighbor-13)
nmod:in(instances-5, grids-14)
case(cells-20, with-15)
compound(%-17, 10-16)
amod(cells-20, %-17)
amod(cells-20, randomly-18)
amod(cells-20, blocked-19)
nmod:with(grids-14, cells-20)
cc(cells-20, and-21)
amod(start-25, random-22)
cc(random-22, but-23)
conj:but(random-22, unique-24)
amod(start-25, unique-24)
nmod:with(grids-14, start-25)
conj:and(cells-20, start-25)
cc(start-25, and-26)
amod(cells-29, unique-27)
compound(cells-29, goal-28)
conj:and(cells-20, cells-29)
conj:and(start-25, cells-29)
case(agents-32, for-30)
nummod(agents-32, 35-31)
nmod:for(start-25, agents-32)
dep(sampled-39, whose-33)
compound(probabilities-35, delay-34)
nsubjpass(sampled-39, probabilities-35)
case(AME-37, for-36)
nmod:for(probabilities-35, AME-37)
auxpass(sampled-39, are-38)
dep(agents-32, sampled-39)
advmod(sampled-39, uniformly-40)
case(random-42, at-41)
advcl(uniformly-40, random-42)
case(range-47, from-43)
det(range-47, the-44)
compound(range-47, delay-45)
compound(range-47, probability-46)
nmod:from(sampled-39, range-47)
appos(agents-32, 0-49)
dep(0-49, 1/2-51)

(ROOT
  (S
    (PP (IN In)
      (NP (DT the) (JJ same) (NN way)))
    (, ,)
    (NP (PRP we))
    (VP (VBP generate)
      (NP
        (NP
          (QP (CD 10) (CD MAPF-DP))
          (NNS instances))
        (PRN (-LRB- -LRB-)
          (NP
            (QP ($ labeled) (CD warehouse) (CD 110)))
          (-RRB- -RRB-)))
      (PP (IN in)
        (NP
          (NP (DT a) (JJ simulated) (NN warehouse) (NN environment))
          (PP (IN with)
            (NP
              (NP
                (ADJP (JJ random)
                  (CC but)
                  (JJ unique))
                (NN start)
                (CC and)
                (JJ unique) (NN goal) (NNS cells))
              (PP (IN on)
                (NP (DT the)
                  (ADJP (NN left)
                    (CC and)
                    (JJ right))
                  (NNS sides))))))))
    (. .)))

case(way-4, In-1)
det(way-4, the-2)
amod(way-4, same-3)
nmod:in(generate-7, way-4)
nsubj(generate-7, we-6)
root(ROOT-0, generate-7)
compound(MAPF-DP-9, 10-8)
nummod(instances-10, MAPF-DP-9)
dobj(generate-7, instances-10)
dep(instances-10, labeled-12)
compound(110-14, warehouse-13)
nummod(labeled-12, 110-14)
case(environment-20, in-16)
det(environment-20, a-17)
amod(environment-20, simulated-18)
compound(environment-20, warehouse-19)
nmod:in(generate-7, environment-20)
case(start-25, with-21)
amod(start-25, random-22)
cc(random-22, but-23)
conj:but(random-22, unique-24)
amod(start-25, unique-24)
nmod:with(environment-20, start-25)
cc(start-25, and-26)
amod(cells-29, unique-27)
compound(cells-29, goal-28)
nmod:with(environment-20, cells-29)
conj:and(start-25, cells-29)
case(sides-35, on-30)
det(sides-35, the-31)
amod(sides-35, left-32)
cc(left-32, and-33)
conj:and(left-32, right-34)
amod(sides-35, right-34)
nmod:on(start-25, sides-35)

(ROOT
  (S
    (NP (NN Figure) (CD 4))
    (VP (VBZ shows)
      (NP
        (NP
          (NP
            (NP (CD two) (JJ MAPF-DP) (NNS instances))
            (: :)
            (ADJP (JJ random)
              (NP (CD 1))))
          (PRN (-LRB- -LRB-)
            (NP (NN top))
            (-RRB- -RRB-)))
        (CC and)
        (NP
          (NP (NN warehouse) (CD 1))
          (PRN (-LRB- -LRB-)
            (NP (NN bottom))
            (-RRB- -RRB-)))))
    (. .)))

nsubj(shows-3, Figure-1)
nummod(Figure-1, 4-2)
root(ROOT-0, shows-3)
nummod(instances-6, two-4)
amod(instances-6, MAPF-DP-5)
dobj(shows-3, instances-6)
amod(instances-6, random-8)
dep(random-8, 1-9)
appos(instances-6, top-11)
cc(instances-6, and-13)
dobj(shows-3, warehouse-14)
conj:and(instances-6, warehouse-14)
nummod(warehouse-14, 1-15)
appos(warehouse-14, bottom-17)

(ROOT
  (NP
    (NP (NNP Experiment) (CD 2))
    (: :)
    (NP
      (NP (NNP Delay) (NNP Probability) (NNP Ranges))
      (SBAR
        (S
          (NP (PRP We))
          (VP (VBP use)
            (NP
              (NP (NNP AME))
              (PP (IN with)
                (NP (JJ different) (NN delay) (NN probability) (NNS ranges))))))))
    (. .)))

root(ROOT-0, Experiment-1)
nummod(Experiment-1, 2-2)
compound(Ranges-6, Delay-4)
compound(Ranges-6, Probability-5)
dep(Experiment-1, Ranges-6)
nsubj(use-8, We-7)
acl:relcl(Ranges-6, use-8)
dobj(use-8, AME-9)
case(ranges-14, with-10)
amod(ranges-14, different-11)
compound(ranges-14, delay-12)
compound(ranges-14, probability-13)
nmod:with(AME-9, ranges-14)

(ROOT
  (S
    (NP (PRP We))
    (VP (VB repeat)
      (NP
        (NP (NNP Experiment) (CD 1))
        (PP (IN with)
          (NP
            (NP (CD 19) (JJ MAPF-DP) (NNS instances))
            (VP (VBN generated)
              (PP (IN from)
                (NP
                  (NP (DT the) (JJ MAPF-DP) (NN instance))
                  (VP (VBN labeled)
                    (NP (`` ``)
                      (NP (JJ random) (CD 1))
                      ('' '')
                      (PP (IN in)
                        (NP
                          (NP (NNP Experimax) (NNP =) (CD 2) (, ,) (CD 3))
                          (: ...)
                          (NP (CD 20)))))))))))))
    (. .)))

nsubj(repeat-2, We-1)
root(ROOT-0, repeat-2)
dobj(repeat-2, Experiment-3)
nummod(Experiment-3, 1-4)
case(instances-8, with-5)
nummod(instances-8, 19-6)
amod(instances-8, MAPF-DP-7)
nmod:with(Experiment-3, instances-8)
acl(instances-8, generated-9)
case(instance-13, from-10)
det(instance-13, the-11)
amod(instance-13, MAPF-DP-12)
nmod:from(generated-9, instance-13)
acl(instance-13, labeled-14)
amod(1-17, random-16)
dobj(labeled-14, 1-17)
case(=-21, in-19)
compound(=-21, Experimax-20)
nmod:in(1-17, =-21)
nummod(=-21, 2-22)
nummod(=-21, 3-24)
dep(=-21, 20-26)

(ROOT
  (S
    (PP (IN For)
      (NP (DT each)
        (NP
          (NP (NNP MAPFment) (CD 1) (, ,) (CD one))
          (PP (IN for)
            (NP (DT each) (NNP t) (NNP DP) (NN instance))))))
    (, ,)
    (NP (DT the) (NN delay))
    (VP (VBZ probabilities)
      (PRN
        (S
          (NP
            (NP (NN pi))
            (PP (IN of)
              (NP (DT all) (NNS agents))))
          (VP (VBP are)
            (ADJP (JJ max))))
        (-RRB- -RRB-))
      (PP (IN by)
        (S
          (VP
            (VP (VBG sampled)
              (PP (IN from)
                (NP
                  (NP (DT the) (NN delay) (NN probability) (NN range))
                  (PRN (-LRB- -LRB-)
                    (NP
                      (NP (CD 0))
                      (, ,)
                      (NP
                        (NP
                          (NP
                            (NP (CD 1))
                            (PRN (: -)
                              (NP (JJ 1/t)
                                (S
                                  (VP (VBG sampling)
                                    (NP
                                      (NP (DT the) (JJ average) (NN number))
                                      (PP (IN of)
                                        (NP
                                          (NP (NN time) (NNS steps))
                                          (VP (VBN ti)
                                            (S
                                              (VP (SYM =)
                                                (NP (CD 1)))))))))))
                              (: /)))
                          (PRN (-LRB- -LRB-)
                            (NP (CD 1))
                            (, -)
                            (NP (NNP pi))
                            (-RRB- -RRB-)))
                        (VP (VBN needed)
                          (PP (IN for)
                            (NP
                              (NP (DT the) (JJ successful) (NN execution))
                              (PP (IN of)
                                (NP (JJ single) (NN move) (NNS actions) (NN max))))))))
                    (-RRB- -RRB-)))))
            (CC and)
            (ADVP (RB then))
            (VP (VBG calculating)
              (ADVP (RB uniformly)
                (PP (IN at)
                  (ADJP (JJ random))))
              (PP (IN from)
                (NP (-LRB- -LRB-)
                  (NP (CD 1))
                  (, ,)
                  (SBAR
                    (S
                      (VP (VBP t)
                        (NP (FW i))))))))))))
    (. .)))

case(MAPFment-3, For-1)
det(MAPFment-3, each-2)
nmod:for(probabilities-15, MAPFment-3)
nummod(MAPFment-3, 1-4)
nummod(MAPFment-3, one-6)
case(instance-11, for-7)
det(instance-11, each-8)
compound(instance-11, t-9)
compound(instance-11, DP-10)
nmod:for(MAPFment-3, instance-11)
det(delay-14, the-13)
nsubj(probabilities-15, delay-14)
root(ROOT-0, probabilities-15)
nsubj(max-21, pi-16)
case(agents-19, of-17)
det(agents-19, all-18)
nmod:of(pi-16, agents-19)
cop(max-21, are-20)
parataxis(probabilities-15, max-21)
mark(sampled-24, by-23)
advcl(probabilities-15, sampled-24)
case(range-29, from-25)
det(range-29, the-26)
compound(range-29, delay-27)
compound(range-29, probability-28)
nmod:from(sampled-24, range-29)
dep(range-29, 0-31)
appos(0-31, 1-33)
dep(1-33, 1/t-35)
dep(1/t-35, sampling-36)
det(number-39, the-37)
amod(number-39, average-38)
dobj(sampling-36, number-39)
case(steps-42, of-40)
compound(steps-42, time-41)
nmod:of(number-39, steps-42)
acl(steps-42, ti-43)
dep(1-45, =-44)
ccomp(ti-43, 1-45)
appos(1-33, 1-48)
dep(1-48, pi-50)
acl(1-33, needed-52)
case(execution-56, for-53)
det(execution-56, the-54)
amod(execution-56, successful-55)
nmod:for(needed-52, execution-56)
case(max-61, of-57)
amod(max-61, single-58)
compound(max-61, move-59)
compound(max-61, actions-60)
nmod:of(execution-56, max-61)
cc(sampled-24, and-63)
advmod(calculating-65, then-64)
advcl(probabilities-15, calculating-65)
conj:and(sampled-24, calculating-65)
advmod(calculating-65, uniformly-66)
case(random-68, at-67)
advcl(uniformly-66, random-68)
case(1-71, from-69)
nmod:from(calculating-65, 1-71)
acl:relcl(1-71, t-73)
dobj(t-73, i-74)

(ROOT
  (NP
    (NP
      (NP (NN pi))
      (SBAR
        (S
          (VP (SYM =)
            (NP (CD 1))))))
    (: -)
    (NP
      (NP (CD 1/t) (NNP Table) (CD 2) (NNS reports))
      (VP
        (ADVP
          (NP (DT the) (JJ same) (NNS measures))
          (RB as))
        (VBN used)
        (PP (IN in)
          (NP (NNP Experiment) (NNP 800) (NNP Table) (CD 1)))))
    (: :)
    (NP
      (NP
        (NP (NNS Results))
        (PP (IN of)
          (NP
            (ADJP (JJ different) (JJ MAPF))
            (PRN (-LRB- -LRB-)
              (NP (NNP -) (NNP DP))
              (-RRB- -RRB-))
            (NNS solvers)))
        (PP (IN for)
          (NP (NNP MAPFDP) (NNS instances)))
        (PP (IN with)
          (NP
            (NP (CD 35) (NNS agents))
            (CC and)
            (NP (NN delay) (NN probability) (NN range)))))
      (PRN (-LRB- -LRB-)
        (NP (CD 0))
        (, ,)
        (NP (CD 1/2))
        (-RRB- -RRB-)))
    (. .)))

root(ROOT-0, pi-1)
dep(1-3, =-2)
acl:relcl(pi-1, 1-3)
nummod(reports-8, 1/t-5)
compound(reports-8, Table-6)
nummod(reports-8, 2-7)
dep(pi-1, reports-8)
det(measures-11, the-9)
amod(measures-11, same-10)
nmod:npmod(as-12, measures-11)
advmod(used-13, as-12)
acl(reports-8, used-13)
case(Table-17, in-14)
compound(Table-17, Experiment-15)
compound(Table-17, 800-16)
nmod:in(used-13, Table-17)
nummod(Table-17, 1-18)
dep(pi-1, Results-20)
case(solvers-28, of-21)
amod(MAPF-23, different-22)
amod(solvers-28, MAPF-23)
compound(DP-26, --25)
appos(solvers-28, DP-26)
nmod:of(Results-20, solvers-28)
case(instances-31, for-29)
compound(instances-31, MAPFDP-30)
nmod:for(Results-20, instances-31)
case(agents-34, with-32)
nummod(agents-34, 35-33)
nmod:with(Results-20, agents-34)
cc(agents-34, and-35)
compound(range-38, delay-36)
compound(range-38, probability-37)
nmod:with(Results-20, range-38)
conj:and(agents-34, range-38)
appos(Results-20, 0-40)
dep(0-40, 1/2-42)

(X (XX AME) (XX Push) (XX and) (XX Swap) (XX Adapted) (XX CBS) (XX approxruntime) (XX imate) (XX average) (XX mess) (XX -) (XX runtime) (XX average) (XX messaverage) (XX mess) (XX -) (XX runtime) (XX id) (XX -LRB-) (XX s) (XX -RRB-) (XX makespan) (XX ages) (XX -LRB-) (XX s) (XX -RRB-) (XX makespan) (XX ages) (XX average) (XX makespan) (XX ages) (XX -LRB-) (XX s) (XX -RRB-) (XX makespan) (XX random) (XX 1) (XX 0.058) (XX 63.15) (XX 71.28) (XX 0.34) (XX 267) (XX 0.031) (XX 812.41) (XX 0.40) (XX 287) (XX random) (XX 2) (XX 0.052) (XX 66.22) (XX 73.02) (XX 0.29) (XX 257) (XX 0.025) (XX 768.30) (XX 0.43) (XX 257) (XX random) (XX 3) (XX 0.080) (XX 78.44) (XX 84.90) (XX 0.40) (XX 373) (XX 0.052) (XX 934.59) (XX 0.33) (XX 387) (XX random) (XX 4) (XX 0.063) (XX 67.00) (XX 72.89) (XX 0.37) (XX 251) (XX 0.028) (XX 755.95) (XX 0.33) (XX 255) (XX random) (XX 5) (XX 0.050) (XX 65.13) (XX 73.98) (XX 0.31) (XX 255) (XX 0.029) (XX 875.48) (XX 0.47) (XX 318) (XX 282.079) (XX 84.11) (XX 0.40) (XX 282) (XX random) (XX 6) (XX 0.052) (XX 62.89) (XX 66.98) (XX 0.36) (XX 257) (XX 0.031) (XX 830.77) (XX 0.32) (XX 290) (XX random) (XX 7) (XX 0.495) (XX 67.22) (XX 71.34) (XX 0.36) (XX 269) (XX 0.038) (XX 785.55) (XX 0.46) (XX 274) (XX random) (XX 8) (XX 0.042) (XX 49.33) (XX 51.72) (XX 0.35) (XX 164) (XX 0.024) (XX 648.80) (XX 0.35) (XX 199) (XX 197.911) (XX 52.35) (XX 0.37) (XX 163) (XX random) (XX 9) (XX 0.051) (XX 56.27) (XX 61.30) (XX 0.27) (XX 247) (XX 0.052) (XX 780.60) (XX 0.30) (XX 294) (XX random) (XX 10) (XX 0.487) (XX 60.06) (XX 64.77) (XX 0.38) (XX 234) (XX 0.032) (XX 750.12) (XX 0.35) (XX 284) (XX warehouse) (XX 1) (XX 0.124) (XX 114.32) (XX 124.18) (XX 0.44) (XX 705) (XX 0.055) (XX 1,399.14) (XX 0.43) (XX 703) (XX warehouse) (XX 2) (XX 0.106) (XX 119.74) (XX 124.63) (XX 0.51) (XX 762) (XX 0.055) (XX 1,620.03) (XX 0.60) (XX 810) (XX warehouse) (XX 3) (XX 0.107) (XX 112.96) (XX 117.00) (XX 0.53) (XX 609) (XX 0.032) (XX 1,295.75) (XX 0.53) (XX 616) (XX warehouse) (XX 4) (XX 0.090) (XX 114.90) (XX 117.31) (XX 0.52) (XX 541) (XX 0.043) (XX 1,246.47) (XX 0.67) (XX 571) (XX warehouse) (XX 5) (XX 0.060) (XX 1,453.36) (XX 0.54) (XX 783) (XX warehouse) (XX 6) (XX 0.111) (XX 127.65) (XX 131.10) (XX 0.59) (XX 710) (XX 0.037) (XX 1,437.01) (XX 0.58) (XX 664) (XX warehouse) (XX 7) (XX 0.142) (XX 87.45) (XX 96.54) (XX 0.34) (XX 488) (XX 0.028) (XX 1,154.21) (XX 0.60) (XX 403) (XX warehouse) (XX 8) (XX 0.024) (XX 1,233.13) (XX 0.58) (XX 401) (XX warehouse) (XX 9) (XX 0.087) (XX 103.51) (XX 107.33) (XX 0.42) (XX 462) (XX 0.024) (XX 1,088.53) (XX 0.44) (XX 422) (XX warehouse) (XX 10) (XX 0.183) (XX 120.76) (XX 127.36) (XX 0.53) (XX 909) (XX 0.057) (XX 1,541.56) (XX 0.62) (XX 678) (XX -) (XX 700) (XX 600) (XX 500 400 300) (XX 200) (XX 100) (XX 0) (XX 2) (XX 3) (XX 4) (XX 5) (XX 6) (XX 7) (XX 8) (XX 9) (XX 10) (XX 11) (XX 12) (XX 13) (XX 14) (XX 15) (XX 16) (XX 17) (XX 18) (XX 19) (XX 20) (XX Figure) (XX 5) (XX :) (XX Visualization) (XX of) (XX Table) (XX 2) (XX ,) (XX where) (XX the) (XX x-axis) (XX shows) (XX max) (XX needed) (XX for) (XX the) (XX the) (XX average) (XX number) (XX of) (XX time) (XX steps) (XX t) (XX successful) (XX execution) (XX of) (XX single) (XX move) (XX actions) (XX .))

dep(.-309, AME-1)
dep(.-309, Push-2)
dep(.-309, and-3)
dep(.-309, Swap-4)
dep(.-309, Adapted-5)
dep(.-309, CBS-6)
dep(.-309, approxruntime-7)
dep(.-309, imate-8)
dep(.-309, average-9)
dep(.-309, mess-10)
dep(.-309, --11)
dep(.-309, runtime-12)
dep(.-309, average-13)
dep(.-309, messaverage-14)
dep(.-309, mess-15)
dep(.-309, --16)
dep(.-309, runtime-17)
dep(.-309, id-18)
dep(.-309, -LRB--19)
dep(.-309, s-20)
dep(.-309, -RRB--21)
dep(.-309, makespan-22)
dep(.-309, ages-23)
dep(.-309, -LRB--24)
dep(.-309, s-25)
dep(.-309, -RRB--26)
dep(.-309, makespan-27)
dep(.-309, ages-28)
dep(.-309, average-29)
dep(.-309, makespan-30)
dep(.-309, ages-31)
dep(.-309, -LRB--32)
dep(.-309, s-33)
dep(.-309, -RRB--34)
dep(.-309, makespan-35)
dep(.-309, random-36)
dep(.-309, 1-37)
dep(.-309, 0.058-38)
dep(.-309, 63.15-39)
dep(.-309, 71.28-40)
dep(.-309, 0.34-41)
dep(.-309, 267-42)
dep(.-309, 0.031-43)
dep(.-309, 812.41-44)
dep(.-309, 0.40-45)
dep(.-309, 287-46)
dep(.-309, random-47)
dep(.-309, 2-48)
dep(.-309, 0.052-49)
dep(.-309, 66.22-50)
dep(.-309, 73.02-51)
dep(.-309, 0.29-52)
dep(.-309, 257-53)
dep(.-309, 0.025-54)
dep(.-309, 768.30-55)
dep(.-309, 0.43-56)
dep(.-309, 257-57)
dep(.-309, random-58)
dep(.-309, 3-59)
dep(.-309, 0.080-60)
dep(.-309, 78.44-61)
dep(.-309, 84.90-62)
dep(.-309, 0.40-63)
dep(.-309, 373-64)
dep(.-309, 0.052-65)
dep(.-309, 934.59-66)
dep(.-309, 0.33-67)
dep(.-309, 387-68)
dep(.-309, random-69)
dep(.-309, 4-70)
dep(.-309, 0.063-71)
dep(.-309, 67.00-72)
dep(.-309, 72.89-73)
dep(.-309, 0.37-74)
dep(.-309, 251-75)
dep(.-309, 0.028-76)
dep(.-309, 755.95-77)
dep(.-309, 0.33-78)
dep(.-309, 255-79)
dep(.-309, random-80)
dep(.-309, 5-81)
dep(.-309, 0.050-82)
dep(.-309, 65.13-83)
dep(.-309, 73.98-84)
dep(.-309, 0.31-85)
dep(.-309, 255-86)
dep(.-309, 0.029-87)
dep(.-309, 875.48-88)
dep(.-309, 0.47-89)
dep(.-309, 318-90)
dep(.-309, 282.079-91)
dep(.-309, 84.11-92)
dep(.-309, 0.40-93)
dep(.-309, 282-94)
dep(.-309, random-95)
dep(.-309, 6-96)
dep(.-309, 0.052-97)
dep(.-309, 62.89-98)
dep(.-309, 66.98-99)
dep(.-309, 0.36-100)
dep(.-309, 257-101)
dep(.-309, 0.031-102)
dep(.-309, 830.77-103)
dep(.-309, 0.32-104)
dep(.-309, 290-105)
dep(.-309, random-106)
dep(.-309, 7-107)
dep(.-309, 0.495-108)
dep(.-309, 67.22-109)
dep(.-309, 71.34-110)
dep(.-309, 0.36-111)
dep(.-309, 269-112)
dep(.-309, 0.038-113)
dep(.-309, 785.55-114)
dep(.-309, 0.46-115)
dep(.-309, 274-116)
dep(.-309, random-117)
dep(.-309, 8-118)
dep(.-309, 0.042-119)
dep(.-309, 49.33-120)
dep(.-309, 51.72-121)
dep(.-309, 0.35-122)
dep(.-309, 164-123)
dep(.-309, 0.024-124)
dep(.-309, 648.80-125)
dep(.-309, 0.35-126)
dep(.-309, 199-127)
dep(.-309, 197.911-128)
dep(.-309, 52.35-129)
dep(.-309, 0.37-130)
dep(.-309, 163-131)
dep(.-309, random-132)
dep(.-309, 9-133)
dep(.-309, 0.051-134)
dep(.-309, 56.27-135)
dep(.-309, 61.30-136)
dep(.-309, 0.27-137)
dep(.-309, 247-138)
dep(.-309, 0.052-139)
dep(.-309, 780.60-140)
dep(.-309, 0.30-141)
dep(.-309, 294-142)
dep(.-309, random-143)
dep(.-309, 10-144)
dep(.-309, 0.487-145)
dep(.-309, 60.06-146)
dep(.-309, 64.77-147)
dep(.-309, 0.38-148)
dep(.-309, 234-149)
dep(.-309, 0.032-150)
dep(.-309, 750.12-151)
dep(.-309, 0.35-152)
dep(.-309, 284-153)
dep(.-309, warehouse-154)
dep(.-309, 1-155)
dep(.-309, 0.124-156)
dep(.-309, 114.32-157)
dep(.-309, 124.18-158)
dep(.-309, 0.44-159)
dep(.-309, 705-160)
dep(.-309, 0.055-161)
dep(.-309, 1,399.14-162)
dep(.-309, 0.43-163)
dep(.-309, 703-164)
dep(.-309, warehouse-165)
dep(.-309, 2-166)
dep(.-309, 0.106-167)
dep(.-309, 119.74-168)
dep(.-309, 124.63-169)
dep(.-309, 0.51-170)
dep(.-309, 762-171)
dep(.-309, 0.055-172)
dep(.-309, 1,620.03-173)
dep(.-309, 0.60-174)
dep(.-309, 810-175)
dep(.-309, warehouse-176)
dep(.-309, 3-177)
dep(.-309, 0.107-178)
dep(.-309, 112.96-179)
dep(.-309, 117.00-180)
dep(.-309, 0.53-181)
dep(.-309, 609-182)
dep(.-309, 0.032-183)
dep(.-309, 1,295.75-184)
dep(.-309, 0.53-185)
dep(.-309, 616-186)
dep(.-309, warehouse-187)
dep(.-309, 4-188)
dep(.-309, 0.090-189)
dep(.-309, 114.90-190)
dep(.-309, 117.31-191)
dep(.-309, 0.52-192)
dep(.-309, 541-193)
dep(.-309, 0.043-194)
dep(.-309, 1,246.47-195)
dep(.-309, 0.67-196)
dep(.-309, 571-197)
dep(.-309, warehouse-198)
dep(.-309, 5-199)
dep(.-309, 0.060-200)
dep(.-309, 1,453.36-201)
dep(.-309, 0.54-202)
dep(.-309, 783-203)
dep(.-309, warehouse-204)
dep(.-309, 6-205)
dep(.-309, 0.111-206)
dep(.-309, 127.65-207)
dep(.-309, 131.10-208)
dep(.-309, 0.59-209)
dep(.-309, 710-210)
dep(.-309, 0.037-211)
dep(.-309, 1,437.01-212)
dep(.-309, 0.58-213)
dep(.-309, 664-214)
dep(.-309, warehouse-215)
dep(.-309, 7-216)
dep(.-309, 0.142-217)
dep(.-309, 87.45-218)
dep(.-309, 96.54-219)
dep(.-309, 0.34-220)
dep(.-309, 488-221)
dep(.-309, 0.028-222)
dep(.-309, 1,154.21-223)
dep(.-309, 0.60-224)
dep(.-309, 403-225)
dep(.-309, warehouse-226)
dep(.-309, 8-227)
dep(.-309, 0.024-228)
dep(.-309, 1,233.13-229)
dep(.-309, 0.58-230)
dep(.-309, 401-231)
dep(.-309, warehouse-232)
dep(.-309, 9-233)
dep(.-309, 0.087-234)
dep(.-309, 103.51-235)
dep(.-309, 107.33-236)
dep(.-309, 0.42-237)
dep(.-309, 462-238)
dep(.-309, 0.024-239)
dep(.-309, 1,088.53-240)
dep(.-309, 0.44-241)
dep(.-309, 422-242)
dep(.-309, warehouse-243)
dep(.-309, 10-244)
dep(.-309, 0.183-245)
dep(.-309, 120.76-246)
dep(.-309, 127.36-247)
dep(.-309, 0.53-248)
dep(.-309, 909-249)
dep(.-309, 0.057-250)
dep(.-309, 1,541.56-251)
dep(.-309, 0.62-252)
dep(.-309, 678-253)
dep(.-309, --254)
dep(.-309, 700-255)
dep(.-309, 600-256)
dep(.-309, 500 400 300-257)
dep(.-309, 200-258)
dep(.-309, 100-259)
dep(.-309, 0-260)
dep(.-309, 2-261)
dep(.-309, 3-262)
dep(.-309, 4-263)
dep(.-309, 5-264)
dep(.-309, 6-265)
dep(.-309, 7-266)
dep(.-309, 8-267)
dep(.-309, 9-268)
dep(.-309, 10-269)
dep(.-309, 11-270)
dep(.-309, 12-271)
dep(.-309, 13-272)
dep(.-309, 14-273)
dep(.-309, 15-274)
dep(.-309, 16-275)
dep(.-309, 17-276)
dep(.-309, 18-277)
dep(.-309, 19-278)
dep(.-309, 20-279)
dep(.-309, Figure-280)
dep(.-309, 5-281)
dep(.-309, :-282)
dep(.-309, Visualization-283)
dep(.-309, of-284)
dep(.-309, Table-285)
dep(.-309, 2-286)
dep(.-309, ,-287)
dep(.-309, where-288)
dep(.-309, the-289)
dep(.-309, x-axis-290)
dep(.-309, shows-291)
dep(.-309, max-292)
dep(.-309, needed-293)
dep(.-309, for-294)
dep(.-309, the-295)
dep(.-309, the-296)
dep(.-309, average-297)
dep(.-309, number-298)
dep(.-309, of-299)
dep(.-309, time-300)
dep(.-309, steps-301)
dep(.-309, t-302)
dep(.-309, successful-303)
dep(.-309, execution-304)
dep(.-309, of-305)
dep(.-309, single-306)
dep(.-309, move-307)
dep(.-309, actions-308)
root(ROOT-0, .-309)

(ROOT
  (S
    (S
      (NP (DT The) (JJ average) (NNS makespans))
      (VP (VBP are)
        (VP (VBN shown)
          (PP (IN in)
            (NP (NN red))))))
    (, ,)
    (CC and)
    (S
      (NP
        (NP (DT the) (JJ approximate) (JJ average) (NNS makespans))
        (VP (VBN calculated)
          (PP (IN by)
            (NP (NNP AME)))))
      (VP (VBP are)
        (VP (VBN shown)
          (PP (IN in)
            (NP (NN blue))))))
    (. .)))

det(makespans-3, The-1)
amod(makespans-3, average-2)
nsubjpass(shown-5, makespans-3)
auxpass(shown-5, are-4)
root(ROOT-0, shown-5)
case(red-7, in-6)
nmod:in(shown-5, red-7)
cc(shown-5, and-9)
det(makespans-13, the-10)
amod(makespans-13, approximate-11)
amod(makespans-13, average-12)
nsubjpass(shown-18, makespans-13)
acl(makespans-13, calculated-14)
case(AME-16, by-15)
nmod:by(calculated-14, AME-16)
auxpass(shown-18, are-17)
conj:and(shown-5, shown-18)
case(blue-20, in-19)
nmod:in(shown-18, blue-20)

(ROOT
  (NP (DT The) (JJ grey) (NN max) (. .)))

det(max-3, The-1)
amod(max-3, grey-2)
root(ROOT-0, max-3)

(ROOT
  (S
    (S
      (NP (NN line))
      (VP (VBZ corresponds)
        (PP (TO to)
          (NP (JJ 30t) (NNP Table) (CD 2)))))
    (: :)
    (S
      (NP
        (NP (NNS Results))
        (PP (IN of)
          (NP (NNP AME))))
      (PP (IN for)
        (NP
          (NP (JJ MAPF-DP) (NNS instances))
          (PP (IN with)
            (NP
              (NP (CD 35) (NNS agents))
              (PP (IN on)
                (NP
                  (NP (DT a) (JJ 30x30) (JJ 4-neighbor) (NN grid))
                  (PP (IN with)
                    (NP (CD 10) (NN %)))))))
          (ADVP (RB randomly))
          (NP
            (NP (VBN blocked) (NNS cells))
            (CC and)
            (NP (JJ different) (NN delay) (NN probability) (NNS ranges)))))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (CD 0))
          (, ,)
          (NP (CD 1) (: -) (CD 1)))
        (-RRB- -RRB-)))
    (. .)))

nsubj(corresponds-2, line-1)
root(ROOT-0, corresponds-2)
case(Table-5, to-3)
amod(Table-5, 30t-4)
nmod:to(corresponds-2, Table-5)
nummod(Table-5, 2-6)
parataxis(corresponds-2, Results-8)
case(AME-10, of-9)
nmod:of(Results-8, AME-10)
case(instances-13, for-11)
amod(instances-13, MAPF-DP-12)
dep(Results-8, instances-13)
case(agents-16, with-14)
nummod(agents-16, 35-15)
nmod:with(instances-13, agents-16)
case(grid-21, on-17)
det(grid-21, a-18)
amod(grid-21, 30x30-19)
amod(grid-21, 4-neighbor-20)
nmod:on(agents-16, grid-21)
case(%-24, with-22)
nummod(%-24, 10-23)
nmod:with(grid-21, %-24)
advmod(instances-13, randomly-25)
amod(cells-27, blocked-26)
dep(instances-13, cells-27)
cc(cells-27, and-28)
amod(ranges-32, different-29)
compound(ranges-32, delay-30)
compound(ranges-32, probability-31)
dep(instances-13, ranges-32)
conj:and(cells-27, ranges-32)
dep(Results-8, 0-34)
nummod(1-38, 1-36)
appos(0-34, 1-38)

(ROOT
  (NP
    (NP (NN t) (NN max) (NNP Table) (NNP 3))
    (: :)
    (NP
      (NP (NNS Results))
      (PP (IN of)
        (NP
          (NP (NNP AME))
          (PP (IN for)
            (NP
              (NP (JJ MAPF-DP) (NNS instances))
              (PP (IN with)
                (NP
                  (NP (JJ different) (NNS numbers))
                  (PP (IN of)
                    (NP
                      (NP (NNS agents))
                      (PP (IN on)
                        (NP
                          (NP (JJ 30x30) (JJ 4-neighbor) (NNS grids))
                          (PP (IN with)
                            (NP (CD 10) (NN %)))))))))
              (ADVP (RB randomly))
              (NP
                (NP (VBN blocked) (NNS cells))
                (CC and)
                (NP (NN delay) (NN probability) (NN range)))))
          (PRN (-LRB- -LRB-)
            (NP (CD 0))
            (, ,)
            (NP (CD 1/2))
            (-RRB- -RRB-)))))
    (. .)))

compound(3-4, t-1)
compound(3-4, max-2)
compound(3-4, Table-3)
root(ROOT-0, 3-4)
dep(3-4, Results-6)
case(AME-8, of-7)
nmod:of(Results-6, AME-8)
case(instances-11, for-9)
amod(instances-11, MAPF-DP-10)
nmod:for(AME-8, instances-11)
case(numbers-14, with-12)
amod(numbers-14, different-13)
nmod:with(instances-11, numbers-14)
case(agents-16, of-15)
nmod:of(numbers-14, agents-16)
case(grids-20, on-17)
amod(grids-20, 30x30-18)
amod(grids-20, 4-neighbor-19)
nmod:on(agents-16, grids-20)
case(%-23, with-21)
nummod(%-23, 10-22)
nmod:with(grids-20, %-23)
advmod(instances-11, randomly-24)
amod(cells-26, blocked-25)
dep(instances-11, cells-26)
cc(cells-26, and-27)
compound(range-30, delay-28)
compound(range-30, probability-29)
dep(instances-11, range-30)
conj:and(cells-26, range-30)
appos(AME-8, 0-32)
dep(0-32, 1/2-34)

